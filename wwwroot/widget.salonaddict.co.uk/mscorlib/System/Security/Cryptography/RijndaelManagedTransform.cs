namespace System.Security.Cryptography
{
    using System;
    using System.Runtime.InteropServices;

    [ComVisible(true)]
    public sealed class RijndaelManagedTransform : ICryptoTransform, IDisposable
    {
        private int m_blockSizeBits;
        private int m_blockSizeBytes;
        private CipherMode m_cipherMode;
        private int[] m_decryptindex;
        private int[] m_decryptKeyExpansion;
        private byte[] m_depadBuffer;
        private int[] m_encryptindex;
        private int[] m_encryptKeyExpansion;
        private int m_inputBlockSize;
        private int[] m_IV;
        private int[] m_lastBlockBuffer;
        private int m_Nb;
        private int m_Nk;
        private int m_Nr;
        private int m_outputBlockSize;
        private PaddingMode m_paddingValue;
        private byte[] m_shiftRegister;
        private RijndaelManagedTransformMode m_transformMode;
        private static readonly int[] s_iT = new int[] { 
            0x50a7f451, 0x5365417e, -1012656358, -1772214470, -882136261, -247096033, -1420232020, -1828461749, 0x55fa3020, -160598355, -1854485368, 0x254c02f5, -52959921, -674551099, -2143013594, -1885117771,
            0x495ab1de, 0x671bba25, -1743852987, -507445667, 0x2752fc3, 0x12f04c81, -1550367091, -956705941, -413167869, -1784901099, -344298049, -631680363, 0x2d83bed4, -752782248, 0x2969e049, 0x44c8c98e,
            0x6a89c275, 0x78798ef4, 0x6b3e5899, -579749593, -1236278850, 0x17ad88f0, 0x66ac20c9, -1271214467, 0x184adf63, -2110711067, 0x60335197, 0x457f5362, -529046351, -2068943941, 0x1ca081fe, -1809118983,
            0x58684870, 0x19fd458f, -2022908268, -1208452270, 0x23d373ab, -503166094, 0x578f1fe3, 0x2aab5566, 0x728ebb2, 0x3c2b52f, -1703164538, -1526188077, -226023376, -1297760477, -1167457534, 0x5c8216ed,
            0x2b1ccf8a, -1833666137, -252573709, -1578997426, -839591323, -708967162, 0x1f6234d1, -1963022652, -1655493068, -1604979806, 0x32e18a05, 0x75ebf6a4, 0x39ec830b, -1427152832, 0x69f715e, 0x51106ebd,
            -108388034, 0x3d06dd96, -1375387939, 0x46bde64d, -1249028975, 0x55dc471, 0x6fd40604, -15380384, 0x24fb9819, -1746289194, -868007799, 0x779ed967, -1119688528, -2004121337, 0x385b19e7, -605108103,
            0x470a7ca1, -384875908, -920746760, 0, -2088337399, 0x48ed2b32, -1401941730, 0x4e725a6c, -67170563, 0x5638850f, 0x1ed5ae3d, 0x27392d36, 0x64d90f0a, 0x21a65c68, -783000677, 0x3a2e3624,
            -1318647284, 0xfe75793, -761860428, -1634624741, 0x4fc5c080, -1574904735, 0x694b775a, 0x161a121c, 0xaba93e2, -450191168, 0x43e0223c, 0x1d171b12, 0xb0d090e, -1379431438, -1180125651, -928440812,
            -2061897385, 0x4c0775af, -1143105042, -44007517, -1624899081, -1124765092, -985962940, 0x347efb5b, 0x7629438b, -590994485, 0x68fcedb6, 0x63f1e4b8, -891538985, 0x10856342, 0x40229713, 0x2011c684,
            0x7d244a85, -130171950, 0x1132f9ae, 0x6da129c7, 0x4b2f9e1d, -214912292, -330136051, -790380169, 0x6c16b32b, -1715900247, -95906799, 0x2264e947, -997393240, 0x1a3ff0a0, -668172970, -275762398,
            -951170681, -1043253031, -22885748, 0x360bd498, -813566554, 0x28de7aa5, 0x268eb7da, -1530942145, -459458004, 0xd927850, -1681105046, 0x62467e54, -1038905866, -390539120, 0x5ef7392e, -173030526,
            -1098883681, 0x7c93d069, -1456614033, -1290656305, 0x3b99acc8, -1484974064, 0x6e639ce8, 0x7bbb3bdb, 0x97826cd, -199730834, 0x1b79aec, -1466282109, 0x656e95e6, 0x7ee6ffaa, 0x8cfbc21, -420997649,
            -644094022, -835293366, -737566742, -696471511, -1347247055, 0x31233f2a, 0x3094a5c6, -1067015627, 0x37bc4e74, -1496677636, -1328508704, 0x15d8a733, 0x4a9804f1, -136647615, 0xe50cd7f, 0x2ff69117,
            -1915335306, 0x4db0ef43, 0x544daacc, -553347356, -474623586, 0x1b886a4c, -1205916479, 0x7f516546, 0x4ea5e9d, 0x5d358c01, 0x737487fa, 0x2e410bfb, 0x5a1d67b3, 0x52d2db92, 0x335610e9, 0x1347d66d,
            -1939744870, 0x7a0ca137, -1911228327, -1992551445, -299390514, 0x35c961b7, -303751967, 0x3cb1477a, 0x59dfd29c, 0x3f73f255, 0x79ce1418, -1086863501, -355600557, 0x5baafd5f, 0x146f3ddf, -2032450440,
            -2114736182, 0x3ec468b9, 0x2c342438, 0x5f40a3c2, 0x72c31d16, 0xc25e2bc, -1958134744, 0x41950dff, 0x7101a839, -558691320, -1662733096, -1866377628, 0x6184cb7b, 0x70b632d5, 0x745c6c48, 0x4257b8d0,
            -1477160624, 0x65417e53, -1541989693, 0x5e273a96, 0x6bab3bcb, 0x459d1ff1, 0x58faacab, 0x3e34b93, -97509291, 0x6d76adf6, 0x76cc8891, 0x4c02f525, -672837636, -886389289, 0x44352680, -1553812081,
            0x5ab1de49, 0x1bba2567, 0xeea4598, -1057071647, 0x752fc302, -263421678, -1756983901, -103584826, 0x5f8f03e7, -1668147819, 0x7a6dbfeb, 0x595295da, -2084645843, 0x217458d3, 0x69e04929, -926314940,
            -1983744662, 0x798ef478, 0x3e58996b, 0x71b927dd, 0x4fe1beb6, -1383534569, -1407137434, 0x3ace7db4, 0x4adf6318, 0x311ae582, 0x33519760, 0x7f536245, 0x7764b1e0, -1368671356, -1602093540, 0x2b08f994,
            0x68487058, -45773031, 0x6cde9487, -126135625, -747394269, 0x24b72e2, -1893735593, -1420466646, 0x28ebb207, -1028313341, 0x7bc5869a, 0x837d3a5, -2027409166, -1514200142, 0x6a0302ba, -2112426660,
            0x1ccf8a2b, -1267095662, -234359824, -496415071, -187013683, -1106966827, 0x6234d11f, -22625142, 0x532e349d, 0x55f3a2a0, -511048398, -336157579, -326956231, -278904662, -1619960314, 0x106ebd51,
            -1977532679, 0x6dd963d, 0x53eddae, -1108980410, -1923837515, 0x5dc47105, -737803153, 0x155060ff, -73918172, -373434729, 0x434089cc, -1629919369, 0x42e8b0bd, -1953953912, 0x5b19e738, -288851493,
            0xa7ca147, 0xf427ce9, 0x1e84f8c9, 0, -2038429309, -315936184, 0x70111eac, 0x725a6c4e, -15794693, 0x38850f56, -710001378, 0x392d3627, -653325724, -1503893471, 0x545b9bd1, 0x2e36243a,
            0x670a0cb1, -413691121, -1762741038, -1852105826, -977239985, 0x20dc61a2, 0x4b775a69, 0x1a121c16, -1164713462, 0x2aa0c0e5, -534627261, 0x171b121d, 0xd090e0b, -947129683, -1464455751, -1457646392,
            0x19f15785, 0x775af4c, -577114437, 0x607fa3fd, 0x2601f79f, -177054532, 0x3b6644c5, 0x7efb5b34, 0x29438b76, -970732580, -51530136, -236668829, -600713270, -2057092592, 0x22971340, 0x11c68420,
            0x244a857d, 0x3dbbd2f8, 0x32f9ae11, -1591097491, 0x2f9e1d4b, 0x30b2dcf3, 0x52860dec, -473860144, 0x16b32b6c, -1183798887, 0x489411fa, 0x64e94722, -1929598780, 0x3ff0a01a, 0x2c7d56d8, -1875696913,
            0x4e4987c7, -784803391, -1563783938, 0xbd49836, -2114607409, -562387672, -1900553690, -1079165020, -1657131804, -1837608947, -866162021, 0x467e5462, 0x138df6c2, -1193766680, -147247522, -1346141451,
            -2141347906, -1815058052, 0x2dd56fa9, 0x1225cfb3, -1716729797, 0x7d1810a7, 0x639ce86e, -1153705093, 0x7826cd09, 0x18596ef4, -1214583807, -1706064984, 0x6e95e665, -419452290, -809754360, -401215514,
            -1679312167, 0x366f4ace, 0x99fead4, 0x7cb029d6, -1297862225, 0x233f2a31, -1801075152, 0x66a235c0, -1135709129, -897385306, -795811664, -660131051, -1744506550, -622050825, 0x50cd7f0e, -158263505,
            -699566451, -1326496947, 0x4daacc54, 0x496e4df, -1244553501, -2006299621, 0x1f2cc1b8, 0x5165467f, -362898172, 0x358c015d, 0x7487fa73, 0x410bfb2e, 0x1d67b35a, -757362094, 0x5610e933, 0x47d66d13,
            0x61d79a8c, 0xca1377a, 0x14f8598e, 0x3c13eb89, 0x27a9ceee, -916342987, -451091987, -1320715716, -539845543, 0x73f2553f, -837543815, 0x37c773bf, -839429142, -1426235557, 0x6f3ddf14, -616269690,
            -206583167, -999769794, 0x3424382c, 0x40a3c25f, -1021503886, 0x25e2bc0c, 0x493c288b, -1794244799, 0x1a83971, -1291056930, -457910116, -1051302768, -2067039391, -1238182544, 0x5c6c4874, 0x57b8d042,
            -195997529, 0x417e5365, 0x171ac3a4, 0x273a965e, -1422144661, -1658851003, -89347240, -481586429, 0x302055fa, 0x76adf66d, -863465098, 0x2f5254c, -447742761, 0x2ac5d7cb, 0x35268044, 0x62b58fa3,
            -1310832294, -1171953893, -364537842, -27401792, 0x2fc30275, 0x4c8112f0, 0x468da397, -747911431, -1895569569, -1844079204, 0x6dbfeb7a, 0x5295da59, -1093390973, 0x7458d321, -532076183, -913423160,
            -1032492407, -1896580999, 0x58996b3e, -1188569743, -507595185, -1997531219, 0x20c966ac, -830622662, -547153846, 0x1ae58231, 0x51976033, 0x5362457f, 0x64b1e077, 0x6bbb84ae, -2114052960, 0x8f9942b,
            0x48705868, 0x458f19fd, -560691348, 0x7b52b7f8, 0x73ab23d3, 0x4b72e202, 0x1fe3578f, 0x55662aab, -340654296, -1255210046, -981034373, 0x37d3a508, 0x2830f287, -1088179547, 0x302ba6a, 0x16ed5c82,
            -813028580, 0x79a792b4, 0x7f3f0f2, 0x694ea1e2, -630862348, 0x506d5be, 0x34d11f62, -1497068802, 0x2e349d53, -207445931, -1979370783, -156994069, -2096416276, 0x6040aaef, 0x715e069f, 0x6ebd5110,
            0x213ef98a, -577356538, 0x3eddae05, -431143235, 0x5491b58d, -999226019, 0x6046fd4, 0x5060ff15, -1743182597, -1110009879, 0x4089cc43, -647530594, -391070398, -1995994997, 0x19e7385b, -931537938,
            0x7ca1470a, 0x427ce90f, -2064070370, 0, -2146860154, 0x2b3248ed, 0x111eac70, 0x5a6c4e72, 0xefdfbff, -2062592456, -1371726123, 0x2d362739, 0xf0a64d9, 0x5c6821a6, 0x5b9bd154, 0x36243a2e,
            0xa0cb167, 0x57930fe7, -290139498, -1692688751, -1065332795, -597581280, 0x775a694b, 0x121c161a, -1813902662, -1597971158, 0x223c43e0, 0x1b121d17, 0x90e0b0d, -1947030073, -1238517336, 0x1e14c8a9,
            -245922535, 0x75af4c07, -1712407587, 0x7fa3fd60, 0x1f79f26, 0x725cbcf5, 0x6644c53b, -77908866, 0x438b7629, 0x23cbdcc6, -306812676, -457677839, 0x31d7cadc, 0x63421085, -1760346078, -964419567,
            0x4a857d24, -1143801795, -106032846, 0x29c76da1, -1642247377, -1294142672, -2045907886, -1049112349, -1288999914, 0x70a999b9, -1810761144, -381214108, -56048500, -257942977, 0x7d56d82c, 0x3322ef90,
            0x4987c74e, 0x38d9c1d1, -896729438, -728222197, -173617279, 0x7aa528de, -1210440050, -1388337985, 0x3a2ce49d, 0x78500d92, 0x5f6a9bcc, 0x7e546246, -1913208301, -661591880, 0x392e5ef7, -1014827601,
            0x5d9fbe80, -798393197, -714102483, 0x25cfb312, -1396163687, 0x1810a77d, -1662488989, 0x3bdb7bbb, 0x26cd0978, 0x596ef418, -1695809097, 0x4f83a89a, -1780062866, -5603610, -1138685745, 0x15efe6e8,
            -407184997, 0x6f4ace36, -1612000247, -1339435396, -1540247630, 0x3f2a3123, -1513738092, -1573535642, 0x4e7437bc, -2097371446, -1864322864, -1489824296, 0x4f14a98, -331221030, -847311280, -1860751370,
            0x4d768dd6, -280801872, -1429449651, -1763385596, -778116171, 0x6a4c1b88, 0x2cc1b81f, 0x65467f51, 0x5e9d04ea, -1946067659, -2013629580, 0xbfb2e41, 0x67b35a1d, -611167534, 0x10e93356, -697494713,
            -677737375, -1590199796, -128348652, 0x13eb893c, -1446056409, 0x61b735c9, 0x1ce1ede5, 0x477a3cb1, -761505313, -229294221, 0x141879ce, -948715721, -145495347, -44082262, 0x3ddf146f, 0x447886db,
            -1345682957, 0x68b93ec4, 0x24382c34, -1547542720, 0x1d1672c3, -490992603, 0x3c288b49, 0xdff4195, -1472630527, 0xc08deb3, -1260872476, 0x566490c1, -881106556, 0x32d570b6, 0x6c48745c, -1194311081,
            0x5150a7f4, 0x7e536541, 0x1ac3a417, 0x3a965e27, 0x3bcb6bab, 0x1ff1459d, -1398056710, 0x4b9303e3, 0x2055fa30, -1376359050, -2003732788, -182105086, 0x4ffcd7e5, -975713494, 0x26804435, -1248877726,
            -565617999, 0x25671bba, 0x45980eea, 0x5de1c0fe, -1023249105, -2129465268, -1918658746, 0x6bc6f9d3, 0x3e75f8f, 0x15959c92, -1075086739, -1780852398, -735214658, 0x58d32174, 0x492969e0, -1908094775,
            0x756a89c2, -193431154, -1721024936, 0x27dd71b9, -1095348255, -266883704, -916018144, 0x7db43ace, 0x63184adf, -444452582, -1755303087, 0x62457f53, -1310689436, -1148932501, -31678335, -107730168,
            0x70586848, -1894122171, -1803064098, 0x52b7f87b, -1423715469, 0x72e2024b, -480800993, 0x662aab55, -1308153621, 0x2f03c2b5, -2036696123, -744159177, 0x30f28728, 0x23b2a5bf, 0x2ba6a03, -312704490,
            -1976886065, -1483557767, -202313209, 0x4ea1e269, 0x65cdf4da, 0x6d5be05, -786472396, -997523802, 0x349d532e, -1566550541, 0x532e18a, -1535775754, 0xb39ec83, 0x40aaef60, 0x5e069f71, -1118760850,
            0x3ef98a21, -1774385443, -575797954, 0x4d46bde6, -1850372780, 0x71055dc4, 0x46fd406, 0x60ff1550, 0x1924fb98, -694687299, -1983102144, 0x67779ed9, -1329773848, 0x7888b89, -415737063, 0x79dbeec8,
            -1589179780, 0x7ce90f42, -121037180, 0, 0x9838680, 0x3248ed2b, 0x1eac7011, 0x6c4e725a, -33816818, 0xf563885, 0x3d1ed5ae, 0x3627392d, 0xa64d90f, 0x6821a65c, -1680780197, 0x243a2e36,
            0xcb1670a, -1827674281, -1261267218, 0x1b9e919b, -2142255680, 0x61a220dc, 0x5a694b77, 0x1c161a12, -502613357, -1058723168, 0x3c43e022, 0x121d171b, 0xe0b0d09, -223492213, 0x2db9a8b6, 0x14c8a91e,
            0x578519f1, -1353971851, -289677927, -1543675777, -140564991, 0x5cbcf572, 0x44c53b66, 0x5b347efb, -1955190461, -874723805, -1234633491, -1201409564, -674571215, 0x42108563, 0x13402297, -2078273082,
            -2055396278, -755483205, -1374604551, -949116631, 0x1d4b2f9e, -588042062, 0xdec5286, 0x77d0e3c1, 0x2b6c16b3, -1449543312, 0x11fa4894, 0x472264e9, -1463513860, -1608892432, 0x56d82c7d, 0x22ef9033,
            -2016981431, -641609416, -1929469238, -1741288492, -1496350219, -1524048262, -635007305, 0x3fa4bfad, 0x2ce49d3a, 0x500d9278, 0x6a9bcc5f, 0x5462467e, -155053171, -1863796520, 0x2e5ef739, -2097827901,
            -1614905251, 0x697c93d0, 0x6fa92dd5, -810347995, -935618132, 0x10a77d18, -395418724, -612648133, -855017434, 0x6ef41859, -335431782, -2086102449, -429560171, -1434523905, 0x2108cfbc, -270079979,
            -1160143897, 0x4ace366f, -355202657, 0x29d67cb0, 0x31afb2a4, 0x2a31233f, -969894747, 0x35c066a2, 0x7437bc4e, -56178046, -525283184, 0x3315d8a7, -246769660, 0x41f7daec, 0x7f0e50cd, 0x172ff691,
            0x768dd64d, 0x434db0ef, -866890326, -455146346, -1629243951, 0x4c1b886a, -1044898004, 0x467f5165, -1660622242, 0x15d358c, -93096825, -80854773, -1285939865, -1840065829, -382511600, 0x6d1347d6,
            -1702075945, 0x377a0ca1, 0x598e14f8, -343327725, -823253079, -1221211807, -504503012, 0x7a3cb147, -1671831598, 0x553f73f2, 0x1879ce14, 0x73bf37c7, 0x53eacdf7, 0x5f5baafd, -552308931, 0x7886db44,
            -897453137, -1187068824, 0x382c3424, -1033944925, 0x1672c31d, -1140054558, 0x288b493c, -12479219, 0x397101a8, 0x8deb30c, -660806476, 0x6490c156, 0x7b6184cb, -714033614, 0x48745c6c, -800958536
        };
        private static readonly int[] s_iTF = new int[] { 
            0x52, 9, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
            0x7c, 0xe3, 0x39, 130, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 50, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 11, 0x42, 250, 0xc3, 0x4e,
            8, 0x2e, 0xa1, 0x66, 40, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 100, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
            0x6c, 0x70, 0x48, 80, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 70, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0, 140, 0xbc, 0xd3, 10, 0xf7, 0xe4, 0x58, 5, 0xb8, 0xb3, 0x45, 6,
            0xd0, 0x2c, 30, 0x8f, 0xca, 0x3f, 15, 2, 0xc1, 0xaf, 0xbd, 3, 1, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 220, 0xea, 0x97, 0xf2, 0xcf, 0xce, 240, 180, 230, 0x73,
            150, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 110,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 14, 170, 0x18, 190, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 210, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 120, 0xcd, 90, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 7, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 13, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            160, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 200, 0xeb, 0xbb, 60, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2b, 4, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 20, 0x63, 0x55, 0x21, 12, 0x7d,
            0x5200, 0x900, 0x6a00, 0xd500, 0x3000, 0x3600, 0xa500, 0x3800, 0xbf00, 0x4000, 0xa300, 0x9e00, 0x8100, 0xf300, 0xd700, 0xfb00,
            0x7c00, 0xe300, 0x3900, 0x8200, 0x9b00, 0x2f00, 0xff00, 0x8700, 0x3400, 0x8e00, 0x4300, 0x4400, 0xc400, 0xde00, 0xe900, 0xcb00,
            0x5400, 0x7b00, 0x9400, 0x3200, 0xa600, 0xc200, 0x2300, 0x3d00, 0xee00, 0x4c00, 0x9500, 0xb00, 0x4200, 0xfa00, 0xc300, 0x4e00,
            0x800, 0x2e00, 0xa100, 0x6600, 0x2800, 0xd900, 0x2400, 0xb200, 0x7600, 0x5b00, 0xa200, 0x4900, 0x6d00, 0x8b00, 0xd100, 0x2500,
            0x7200, 0xf800, 0xf600, 0x6400, 0x8600, 0x6800, 0x9800, 0x1600, 0xd400, 0xa400, 0x5c00, 0xcc00, 0x5d00, 0x6500, 0xb600, 0x9200,
            0x6c00, 0x7000, 0x4800, 0x5000, 0xfd00, 0xed00, 0xb900, 0xda00, 0x5e00, 0x1500, 0x4600, 0x5700, 0xa700, 0x8d00, 0x9d00, 0x8400,
            0x9000, 0xd800, 0xab00, 0, 0x8c00, 0xbc00, 0xd300, 0xa00, 0xf700, 0xe400, 0x5800, 0x500, 0xb800, 0xb300, 0x4500, 0x600,
            0xd000, 0x2c00, 0x1e00, 0x8f00, 0xca00, 0x3f00, 0xf00, 0x200, 0xc100, 0xaf00, 0xbd00, 0x300, 0x100, 0x1300, 0x8a00, 0x6b00,
            0x3a00, 0x9100, 0x1100, 0x4100, 0x4f00, 0x6700, 0xdc00, 0xea00, 0x9700, 0xf200, 0xcf00, 0xce00, 0xf000, 0xb400, 0xe600, 0x7300,
            0x9600, 0xac00, 0x7400, 0x2200, 0xe700, 0xad00, 0x3500, 0x8500, 0xe200, 0xf900, 0x3700, 0xe800, 0x1c00, 0x7500, 0xdf00, 0x6e00,
            0x4700, 0xf100, 0x1a00, 0x7100, 0x1d00, 0x2900, 0xc500, 0x8900, 0x6f00, 0xb700, 0x6200, 0xe00, 0xaa00, 0x1800, 0xbe00, 0x1b00,
            0xfc00, 0x5600, 0x3e00, 0x4b00, 0xc600, 0xd200, 0x7900, 0x2000, 0x9a00, 0xdb00, 0xc000, 0xfe00, 0x7800, 0xcd00, 0x5a00, 0xf400,
            0x1f00, 0xdd00, 0xa800, 0x3300, 0x8800, 0x700, 0xc700, 0x3100, 0xb100, 0x1200, 0x1000, 0x5900, 0x2700, 0x8000, 0xec00, 0x5f00,
            0x6000, 0x5100, 0x7f00, 0xa900, 0x1900, 0xb500, 0x4a00, 0xd00, 0x2d00, 0xe500, 0x7a00, 0x9f00, 0x9300, 0xc900, 0x9c00, 0xef00,
            0xa000, 0xe000, 0x3b00, 0x4d00, 0xae00, 0x2a00, 0xf500, 0xb000, 0xc800, 0xeb00, 0xbb00, 0x3c00, 0x8300, 0x5300, 0x9900, 0x6100,
            0x1700, 0x2b00, 0x400, 0x7e00, 0xba00, 0x7700, 0xd600, 0x2600, 0xe100, 0x6900, 0x1400, 0x6300, 0x5500, 0x2100, 0xc00, 0x7d00,
            0x520000, 0x90000, 0x6a0000, 0xd50000, 0x300000, 0x360000, 0xa50000, 0x380000, 0xbf0000, 0x400000, 0xa30000, 0x9e0000, 0x810000, 0xf30000, 0xd70000, 0xfb0000,
            0x7c0000, 0xe30000, 0x390000, 0x820000, 0x9b0000, 0x2f0000, 0xff0000, 0x870000, 0x340000, 0x8e0000, 0x430000, 0x440000, 0xc40000, 0xde0000, 0xe90000, 0xcb0000,
            0x540000, 0x7b0000, 0x940000, 0x320000, 0xa60000, 0xc20000, 0x230000, 0x3d0000, 0xee0000, 0x4c0000, 0x950000, 0xb0000, 0x420000, 0xfa0000, 0xc30000, 0x4e0000,
            0x80000, 0x2e0000, 0xa10000, 0x660000, 0x280000, 0xd90000, 0x240000, 0xb20000, 0x760000, 0x5b0000, 0xa20000, 0x490000, 0x6d0000, 0x8b0000, 0xd10000, 0x250000,
            0x720000, 0xf80000, 0xf60000, 0x640000, 0x860000, 0x680000, 0x980000, 0x160000, 0xd40000, 0xa40000, 0x5c0000, 0xcc0000, 0x5d0000, 0x650000, 0xb60000, 0x920000,
            0x6c0000, 0x700000, 0x480000, 0x500000, 0xfd0000, 0xed0000, 0xb90000, 0xda0000, 0x5e0000, 0x150000, 0x460000, 0x570000, 0xa70000, 0x8d0000, 0x9d0000, 0x840000,
            0x900000, 0xd80000, 0xab0000, 0, 0x8c0000, 0xbc0000, 0xd30000, 0xa0000, 0xf70000, 0xe40000, 0x580000, 0x50000, 0xb80000, 0xb30000, 0x450000, 0x60000,
            0xd00000, 0x2c0000, 0x1e0000, 0x8f0000, 0xca0000, 0x3f0000, 0xf0000, 0x20000, 0xc10000, 0xaf0000, 0xbd0000, 0x30000, 0x10000, 0x130000, 0x8a0000, 0x6b0000,
            0x3a0000, 0x910000, 0x110000, 0x410000, 0x4f0000, 0x670000, 0xdc0000, 0xea0000, 0x970000, 0xf20000, 0xcf0000, 0xce0000, 0xf00000, 0xb40000, 0xe60000, 0x730000,
            0x960000, 0xac0000, 0x740000, 0x220000, 0xe70000, 0xad0000, 0x350000, 0x850000, 0xe20000, 0xf90000, 0x370000, 0xe80000, 0x1c0000, 0x750000, 0xdf0000, 0x6e0000,
            0x470000, 0xf10000, 0x1a0000, 0x710000, 0x1d0000, 0x290000, 0xc50000, 0x890000, 0x6f0000, 0xb70000, 0x620000, 0xe0000, 0xaa0000, 0x180000, 0xbe0000, 0x1b0000,
            0xfc0000, 0x560000, 0x3e0000, 0x4b0000, 0xc60000, 0xd20000, 0x790000, 0x200000, 0x9a0000, 0xdb0000, 0xc00000, 0xfe0000, 0x780000, 0xcd0000, 0x5a0000, 0xf40000,
            0x1f0000, 0xdd0000, 0xa80000, 0x330000, 0x880000, 0x70000, 0xc70000, 0x310000, 0xb10000, 0x120000, 0x100000, 0x590000, 0x270000, 0x800000, 0xec0000, 0x5f0000,
            0x600000, 0x510000, 0x7f0000, 0xa90000, 0x190000, 0xb50000, 0x4a0000, 0xd0000, 0x2d0000, 0xe50000, 0x7a0000, 0x9f0000, 0x930000, 0xc90000, 0x9c0000, 0xef0000,
            0xa00000, 0xe00000, 0x3b0000, 0x4d0000, 0xae0000, 0x2a0000, 0xf50000, 0xb00000, 0xc80000, 0xeb0000, 0xbb0000, 0x3c0000, 0x830000, 0x530000, 0x990000, 0x610000,
            0x170000, 0x2b0000, 0x40000, 0x7e0000, 0xba0000, 0x770000, 0xd60000, 0x260000, 0xe10000, 0x690000, 0x140000, 0x630000, 0x550000, 0x210000, 0xc0000, 0x7d0000,
            0x52000000, 0x9000000, 0x6a000000, -721420288, 0x30000000, 0x36000000, -1526726656, 0x38000000, -1090519040, 0x40000000, -1560281088, -1644167168, -2130706432, -218103808, -687865856, -83886080,
            0x7c000000, -486539264, 0x39000000, -2113929216, -1694498816, 0x2f000000, -16777216, -2030043136, 0x34000000, -1912602624, 0x43000000, 0x44000000, -1006632960, -570425344, -385875968, -889192448,
            0x54000000, 0x7b000000, -1811939328, 0x32000000, -1509949440, -1040187392, 0x23000000, 0x3d000000, -301989888, 0x4c000000, -1795162112, 0xb000000, 0x42000000, -100663296, -1023410176, 0x4e000000,
            0x8000000, 0x2e000000, -1593835520, 0x66000000, 0x28000000, -654311424, 0x24000000, -1308622848, 0x76000000, 0x5b000000, -1577058304, 0x49000000, 0x6d000000, -1962934272, -788529152, 0x25000000,
            0x72000000, -134217728, -167772160, 0x64000000, -2046820352, 0x68000000, -1744830464, 0x16000000, -738197504, -1543503872, 0x5c000000, -872415232, 0x5d000000, 0x65000000, -1241513984, -1845493760,
            0x6c000000, 0x70000000, 0x48000000, 0x50000000, -50331648, -318767104, -1191182336, -637534208, 0x5e000000, 0x15000000, 0x46000000, 0x57000000, -1493172224, -1929379840, -1660944384, -2080374784,
            -1879048192, -671088640, -1426063360, 0, -1946157056, -1140850688, -754974720, 0xa000000, -150994944, -469762048, 0x58000000, 0x5000000, -1207959552, -1291845632, 0x45000000, 0x6000000,
            -805306368, 0x2c000000, 0x1e000000, -1895825408, -905969664, 0x3f000000, 0xf000000, 0x2000000, -1056964608, -1358954496, -1124073472, 0x3000000, 0x1000000, 0x13000000, -1979711488, 0x6b000000,
            0x3a000000, -1862270976, 0x11000000, 0x41000000, 0x4f000000, 0x67000000, -603979776, -369098752, -1761607680, -234881024, -822083584, -838860800, -268435456, -1275068416, -436207616, 0x73000000,
            -1778384896, -1409286144, 0x74000000, 0x22000000, -419430400, -1392508928, 0x35000000, -2063597568, -503316480, -117440512, 0x37000000, -402653184, 0x1c000000, 0x75000000, -553648128, 0x6e000000,
            0x47000000, -251658240, 0x1a000000, 0x71000000, 0x1d000000, 0x29000000, -989855744, -1996488704, 0x6f000000, -1224736768, 0x62000000, 0xe000000, -1442840576, 0x18000000, -1107296256, 0x1b000000,
            -67108864, 0x56000000, 0x3e000000, 0x4b000000, -973078528, -771751936, 0x79000000, 0x20000000, -1711276032, -620756992, -1073741824, -33554432, 0x78000000, -855638016, 0x5a000000, -201326592,
            0x1f000000, -587202560, -1476395008, 0x33000000, -2013265920, 0x7000000, -956301312, 0x31000000, -1325400064, 0x12000000, 0x10000000, 0x59000000, 0x27000000, -2147483648, -335544320, 0x5f000000,
            0x60000000, 0x51000000, 0x7f000000, -1459617792, 0x19000000, -1258291200, 0x4a000000, 0xd000000, 0x2d000000, -452984832, 0x7a000000, -1627389952, -1828716544, -922746880, -1677721600, -285212672,
            -1610612736, -536870912, 0x3b000000, 0x4d000000, -1375731712, 0x2a000000, -184549376, -1342177280, -939524096, -352321536, -1157627904, 0x3c000000, -2097152000, 0x53000000, -1728053248, 0x61000000,
            0x17000000, 0x2b000000, 0x4000000, 0x7e000000, -1174405120, 0x77000000, -704643072, 0x26000000, -520093696, 0x69000000, 0x14000000, 0x63000000, 0x55000000, 0x21000000, 0xc000000, 0x7d000000
        };
        private static readonly int[] s_Rcon = new int[] { 
            1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,
            0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 250, 0xef, 0xc5, 0x91
        };
        private static readonly byte[] s_Sbox = new byte[] { 
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 1, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
            0xca, 130, 0xc9, 0x7d, 250, 0x59, 0x47, 240, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
            4, 0xc7, 0x23, 0xc3, 0x18, 150, 5, 0x9a, 7, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
            9, 0x83, 0x2c, 0x1a, 0x1b, 110, 90, 160, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
            0x53, 0xd1, 0, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 190, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
            0xd0, 0xef, 170, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 2, 0x7f, 80, 60, 0x9f, 0xa8,
            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 210,
            0xcd, 12, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 100, 0x5d, 0x19, 0x73,
            0x60, 0x81, 0x4f, 220, 0x22, 0x2a, 0x90, 0x88, 70, 0xee, 0xb8, 20, 0xde, 0x5e, 11, 0xdb,
            0xe0, 50, 0x3a, 10, 0x49, 6, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 200, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 8,
            0xba, 120, 0x25, 0x2e, 0x1c, 0xa6, 180, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
            0x70, 0x3e, 0xb5, 0x66, 0x48, 3, 0xf6, 14, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
            0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 30, 0x87, 0xe9, 0xce, 0x55, 40, 0xdf,
            140, 0xa1, 0x89, 13, 0xbf, 230, 0x42, 0x68, 0x41, 0x99, 0x2d, 15, 0xb0, 0x54, 0xbb, 0x16
        };
        private static readonly int[] s_T = new int[] { 
            -1520213050, -2072216328, -1720223762, -1921287178, 0xdf2f2ff, -1117033514, -1318096930, 0x54c5c591, 0x50303060, 0x3010102, -1452841010, 0x7d2b2b56, 0x19fefee7, 0x62d7d7b5, -424957107, -1703512340,
            0x45caca8f, -1652391393, 0x40c9c989, -2021818886, 0x15fafaef, -346465870, -918075506, 0xbf0f0fb, -324162239, 0x67d4d4b3, -39673249, -357585083, -1080255453, -140204973, -1770884380, 0x5bc0c09b,
            -1028147339, 0x1cfdfde1, -1366060227, 0x6a26264c, 0x5a36366c, 0x413f3f7e, 0x2f7f7f5, 0x4fcccc83, 0x5c343468, -190470831, 0x34e5e5d1, 0x8f1f1f9, -1821281822, 0x73d8d8ab, 0x53313162, 0x3f15152a,
            0xc040408, 0x52c7c795, 0x65232346, 0x5ec3c39d, 0x28181830, -1583966665, 0xf05050a, -1248159185, 0x907070e, 0x36121224, -1686077413, 0x3de2e2df, 0x26ebebcd, 0x6927274e, -843926913, -1619692054,
            0x1b090912, -1635548387, 0x742c2c58, 0x2e1a1a34, 0x2d1b1b36, -1301385508, -296068428, -73359269, -162377052, 0x4d3b3b76, 0x61d6d6b7, -827083907, 0x7b292952, 0x3ee3e3dd, 0x712f2f5e, -1752923117,
            -179088474, 0x68d1d1b9, 0, 0x2cededc1, 0x60202040, 0x1ffcfce3, -927878791, -312779850, -1100322092, 0x46cbcb8d, -641810841, 0x4b393972, -565556588, -733197160, -396863312, 0x4acfcf85,
            0x6bd0d0bb, 0x2aefefc5, -441800113, 0x16fbfbed, -985447546, -682799718, 0x55333366, -1803188975, -817543798, 0x10f9f9e9, 0x6020204, -2122350594, -263171936, 0x443c3c78, -1163944155, -475486133,
            -212774494, -22830243, -1069531008, -1970303227, -1382903233, -1130521311, 0x48383870, 0x4f5f5f1, -541279133, -1044990345, 0x75dadaaf, 0x63212142, 0x30101020, 0x1affffe5, 0xef3f3fd, 0x6dd2d2bf,
            0x4ccdcd81, 0x140c0c18, 0x35131326, 0x2fececc3, -513843266, -1567123659, -867941240, 0x3917172e, 0x57c4c493, -223893675, -2105639172, 0x473d3d7a, -1402706744, -413311558, 0x2b191932, -1787595802,
            -1604296512, -1736343271, -783331426, 0x7fdcdca3, 0x66222244, 0x7e2a2a54, -1416589253, -2088204277, -901364084, 0x29eeeec7, -742868885, 0x3c141428, 0x79dedea7, -497131844, 0x1d0b0b16, 0x76dbdbad,
            0x3be0e0db, 0x56323264, 0x4e3a3a74, 0x1e0a0a14, -615954030, 0xa06060c, 0x6c242448, -463709000, 0x5dc2c29f, 0x6ed3d3bd, -273896381, -1503501628, -1466855111, -1533700815, 0x37e4e4d3, -1954973198,
            0x32e7e7d5, 0x43c8c88b, 0x5937376e, -1217565222, -1936880383, 0x64d5d5b1, -766620004, -525751991, -1267962664, -95005012, 0x7f4f4f3, 0x25eaeacf, -1352309302, -1904575756, -374428089, 0x18080810,
            -709182865, -2005370640, 0x6f25254a, 0x722e2e5c, 0x241c1c38, -240736681, -944458637, 0x51c6c697, 0x23e8e8cb, 0x7cdddda1, -1670089496, 0x211f1f3e, -582268010, -591544991, -2037675251, -2054518257,
            -1871679264, 0x423e3e7c, -994724495, -1436129588, -666351472, 0x5030306, 0x1f6f6f7, 0x120e0e1c, -1553899070, 0x5f35356a, -111716434, -793134743, -1853454825, 0x58c1c199, 0x271d1d3a, -1180787161,
            0x38e1e1d9, 0x13f8f8eb, -1281845205, 0x33111122, -1150719534, 0x70d9d9a9, -1987146233, -1483434957, -1231316179, 0x221e1e3c, -1836611819, 0x20e9e9c9, 0x49cece87, -11184726, 0x78282850, 0x7adfdfa5,
            -1886614525, -123625127, -2138470135, 0x170d0d1a, -624967835, 0x31e6e6d7, -968736124, -1201116976, -1019133566, -1332111063, 0x772d2d5a, 0x110f0f1e, -877612933, -61582168, -692339859, 0x3a16162c,
            0x6363c6a5, 0x7c7cf884, 0x7777ee99, 0x7b7bf68d, -218956019, 0x6b6bd6bd, 0x6f6fdeb1, -976907948, 0x30306050, 0x1010203, 0x6767cea9, 0x2b2b567d, -16849127, -673729182, -1414836762, 0x7676ec9a,
            -892694715, -2105401443, -909539008, 0x7d7dfa87, -84218091, 0x5959b2eb, 0x47478ec9, -252642549, -1381154324, -724257945, -1566416899, -1347467798, -1667488833, -1532734473, 0x7272e496, -1061119141,
            -1212713534, -33693412, -1819066962, 0x26264c6a, 0x36366c5a, 0x3f3f7e41, -134744830, -859012273, 0x3434685c, -1515892236, -437923532, -235800312, 0x7171e293, -656888973, 0x31316253, 0x15152a3f,
            0x404080c, -943221422, 0x23234665, -1010590370, 0x18183028, -1768540255, 0x5050a0f, -1701171275, 0x7070e09, 0x12122436, -2139087973, -488448195, -336868058, 0x27274e69, -1296924723, 0x7575ea9f,
            0x909121b, -2088559202, 0x2c2c5874, 0x1a1a342e, 0x1b1b362d, 0x6e6edcb2, 0x5a5ab4ee, -1600103429, 0x5252a4f6, 0x3b3b764d, -690571423, -1280082482, 0x2929527b, -471605954, 0x2f2f5e71, -2071719017,
            0x5353a6f5, -774784664, 0, -303185620, 0x20204060, -50535649, -1313769016, 0x5b5bb6ed, 0x6a6ad4be, -875852474, -1094817831, 0x3939724b, 0x4a4a94de, 0x4c4c98d4, 0x5858b0e8, -808483510,
            -791626901, -269499094, -1431679003, -67375850, 0x434386c5, 0x4d4d9ad7, 0x33336655, -2054876780, 0x45458acf, -101062384, 0x2020406, 0x7f7ffe81, 0x5050a0f0, 0x3c3c7844, -1616960070, -1465365533,
            0x5151a2f3, -1549574658, 0x404080c0, -1886452342, -1835909203, -1650646596, 0x38387048, -168431356, -1128504353, -1229555775, -623202443, 0x21214263, 0x10102030, -6886, -202113778, -757940371,
            -842170036, 0xc0c1814, 0x13132635, -320027857, 0x5f5fbee1, -1751698014, 0x444488cc, 0x17172e39, -993750185, -1482205710, 0x7e7efc82, 0x3d3d7a47, 0x6464c8ac, 0x5d5dbae7, 0x1919322b, 0x7373e695,
            0x6060c0a0, -2122245736, 0x4f4f9ed1, -589520001, 0x22224466, 0x2a2a547e, -1869595733, -2004350077, 0x46468cca, -286341335, -1195873325, 0x1414283c, -555833479, 0x5e5ebce2, 0xb0b161d, -606360202,
            -522134725, 0x32326456, 0x3a3a744e, 0xa0a141e, 0x494992db, 0x6060c0a, 0x2424486c, 0x5c5cb8e4, -1027432611, -741098130, -1397996561, 0x6262c4a6, -1852753496, -1785384540, -454765769, 0x7979f28b,
            -404237006, -926381245, 0x37376e59, 0x6d6ddab7, -1920138868, -707415708, 0x4e4e9cd2, -1448523296, 0x6c6cd8b4, 0x5656acfa, -185273593, -353710299, 0x6565caaf, 0x7a7af48e, -1364310039, 0x8081018,
            -1162186795, 0x7878f088, 0x25254a6f, 0x2e2e5c72, 0x1c1c3824, -1499047951, -1263242297, -960063663, -387396829, -572677764, 0x7474e89c, 0x1f1f3e21, 0x4b4b96dd, -1111662116, -1953821306, -1970663547,
            0x7070e090, 0x3e3e7c42, -1246400060, 0x6666ccaa, 0x484890d8, 0x3030605, -151587071, 0xe0e1c12, 0x6161c2a3, 0x35356a5f, 0x5757aef9, -1179031088, -2038032495, -1044276904, 0x1d1d3a27, -1633802311,
            -505292488, -117904621, -1734857805, 0x11112233, 0x6969d2bb, -640046736, -1903294583, -1802226777, -1684329034, 0x1e1e3c22, -2021190254, -370554592, -825325751, 0x5555aaff, 0x28285078, -538991238,
            -1936981105, -1583261192, -1987507840, 0xd0d1a17, -1077975590, -421079247, 0x424284c6, 0x6868d0b8, 0x414182c3, -1718015568, 0x2d2d5a77, 0xf0f1e11, -1330611253, 0x5454a8fc, -1145344554, 0x16162c3a,
            0x63c6a563, 0x7cf8847c, 0x77ee9977, 0x7bf68d7b, -218165774, 0x6bd6bd6b, 0x6fdeb16f, -980331323, 0x30605030, 0x1020301, 0x67cea967, 0x2b567d2b, -18408962, -675978537, -1420958037, 0x76ec9a76,
            -896580150, -2111857278, -913751863, 0x7dfa877d, -84994566, 0x59b2eb59, 0x478ec947, -251982864, -1388188499, -726439980, -1570767454, -1354372433, -1675378788, -1538000988, 0x72e49672, -1063560256,
            -1217019209, -35578627, -1824674157, 0x264c6a26, 0x366c5a36, 0x3f7e413f, -134937865, -863809588, 0x34685c34, -1521355611, -439274267, -235337487, 0x71e29371, -659852328, 0x31625331, 0x152a3f15,
            0x4080c04, -946515257, 0x23466523, -1013096765, 0x18302818, -1774739050, 0x50a0f05, -1708149350, 0x70e0907, 0x12243612, -2145674368, -488686110, -338876693, 0x274e6927, -1300247118, 0x75ea9f75,
            0x9121b09, -2095210877, 0x2c58742c, 0x1a342e1a, 0x1b362d1b, 0x6edcb26e, 0x5ab4ee5a, -1604584544, 0x52a4f652, 0x3b764d3b, -692624938, -1283600717, 0x29527b29, -472039709, 0x2f5e712f, -2079090812,
            0x53a6f553, -776378159, 0, -306107155, 0x20406020, -52224004, -1317418831, 0x5bb6ed5b, 0x6ad4be6a, -879933749, -1100490306, 0x39724b39, 0x4a94de4a, 0x4c98d44c, 0x58b0e858, -813348145,
            -793023536, -272291089, -1437604438, -68348165, 0x4386c543, 0x4d9ad74d, 0x33665533, -2062445435, 0x458acf45, -102166279, 0x2040602, 0x7ffe817f, 0x50a0f050, 0x3c78443c, -1624917345, -1471421528,
            0x51a2f351, -1554121053, 0x4080c040, -1895462257, -1841320558, -1658733411, 0x38704838, -168753931, -1134305348, -1233665610, -626035238, 0x21426321, 0x10203010, -1762561, -201519373, -759206446,
            -847164211, 0xc18140c, 0x13263513, -322752532, 0x5fbee15f, -1758092649, 0x4488cc44, 0x172e3917, -996976700, -1487539545, 0x7efc827e, 0x3d7a473d, 0x64c8ac64, 0x5dbae75d, 0x19322b19, 0x73e69573,
            0x60c0a060, -2129028991, 0x4f9ed14f, -593264676, 0x22446622, 0x2a547e2a, -1875137648, -2012511352, 0x468cca46, -288937490, -1200893000, 0x14283c14, -559449634, 0x5ebce25e, 0xb161d0b, -609388837,
            -522503200, 0x32645632, 0x3a744e3a, 0xa141e0a, 0x4992db49, 0x60c0a06, 0x24486c24, 0x5cb8e45c, -1029743166, -742560045, -1404833876, 0x62c4a662, -1858492271, -1791908715, -455919644, 0x79f28b79,
            -405458201, -930397240, 0x376e5937, 0x6ddab76d, -1929278323, -709794603, 0x4e9cd24e, -1454776151, 0x6cd8b46c, 0x56acfa56, -185399308, -355523094, 0x65caaf65, 0x7af48e7a, -1371018834, 0x8101808,
            -1167075910, 0x78f08878, 0x254a6f25, 0x2e5c722e, 0x1c38241c, -1504185946, -1267480652, -963161658, -389340184, -576619299, 0x74e89c74, 0x1f3e211f, 0x4b96dd4b, -1117659971, -1962047861, -1978694262,
            0x70e09070, 0x3e7c423e, -1250835275, 0x66ccaa66, 0x4890d848, 0x3060503, -151584266, 0xe1c120e, 0x61c2a361, 0x356a5f35, 0x57aef957, -1184247623, -2045275770, -1046914879, 0x1d3a271d, -1641563746,
            -505857823, -118811656, -1741966440, 0x11223311, 0x69d2bb69, -643206951, -1912108658, -1808554092, -1691502949, 0x1e3c221e, -2028629369, -372694807, -829994546, 0x55aaff55, 0x28507828, -542803233,
            -1945923700, -1587939167, -1995865975, 0xd1a170d, -1083843905, -422104602, 0x4284c642, 0x68d0b868, 0x4182c341, -1725321063, 0x2d5a772d, 0xf1e110f, -1334064208, 0x54a8fc54, -1150429509, 0x162c3a16,
            -962239645, -125535108, -291932297, -158499973, -15863054, -692229269, -558796945, -1856715323, 0x60503030, 0x2030101, -827758745, 0x567d2b2b, -417726722, -1251813417, 0x4de6abab, -325421450,
            -1891251510, 0x1f9d8282, -1992242743, -91783811, -283772166, -1293199015, -1899411641, -83103504, 0x41ecadad, -1285040940, 0x5ffda2a2, 0x45eaafaf, 0x23bf9c9c, 0x53f7a4a4, -459902350, -1688485696,
            0x75c2b7b7, -518193667, 0x3dae9393, 0x4c6a2626, 0x6c5a3636, 0x7e413f3f, -184354825, -2091922228, 0x685c3434, 0x51f4a5a5, -785062427, -116854287, -493653647, -1418471208, 0x62533131, 0x2a3f1515,
            0x80c0404, -1789737017, 0x46652323, -1654733885, 0x30281818, 0x37a19696, 0xa0f0505, 0x2fb59a9a, 0xe090707, 0x24361212, 0x1b9b8080, -549592350, -853087253, 0x4e692727, 0x7fcdb2b2, -358648459,
            0x121b0909, 0x1d9e8383, 0x58742c2c, 0x342e1a1a, 0x362d1b1b, -592286098, -1259447718, 0x5bfba0a0, -1527360942, 0x764d3b3b, -1218324778, 0x7dceb3b3, 0x527b2929, -583080989, 0x5e712f2f, 0x13978484,
            -1493871789, -1184312879, 0, -1054020115, 0x40602020, -484442884, 0x79c8b1b1, -1225958565, -725718422, -1924740149, 0x67d9bebe, 0x724b3939, -1797371318, -1730917300, -1326950312, -2058694705,
            -1150562096, -987041809, 0x4fe5aaaa, -317260805, -2033892541, -1697166003, 0x66553333, 0x11948585, -1966127803, -384763399, 0x4060202, -25067649, -1594863536, 0x78443c3c, 0x25ba9f9f, 0x4be3a8a8,
            -1561112239, 0x5dfea3a3, -2134884288, 0x58a8f8f, 0x3fad9292, 0x21bc9d9d, 0x70483838, -251333131, 0x63dfbcbc, 0x77c1b6b6, -1351230758, 0x42632121, 0x20301010, -451215361, -49351693, -1083321646,
            -2125673011, 0x18140c0c, 0x26351313, -1020269332, -1092526241, 0x35a29797, -1999879100, 0x2e391717, -1822964540, 0x55f2a7a7, -58556802, 0x7a473d3d, -928226204, -1159242403, 0x322b1919, -426413197,
            -1063231392, 0x19988181, -1630449841, -1551901476, 0x44662222, 0x547e2a2a, 0x3bab9090, 0xb838888, -1932900794, -953553170, 0x6bd3b8b8, 0x283c1414, -1485185314, -1126015394, 0x161d0b0b, -1384719397,
            -616832800, 0x64563232, 0x744e3a3a, 0x141e0a0a, -1831122615, 0xc0a0606, 0x486c2424, -1192993700, -1621245246, -1116810285, 0x43efacac, -995728798, 0x39a89191, 0x31a49595, -751311644, -225740423,
            -718084121, -1958491960, 0x6e593737, -625513107, 0x18c8d8d, -1318791723, -1663938994, 0x49e0a9a9, -659264404, -1392880042, -217582348, -819598614, -894474907, -191989126, 0x47e9aeae, 0x10180808,
            0x6fd5baba, -259491720, 0x4a6f2525, 0x5c722e2e, 0x38241c1c, 0x57f1a6a6, 0x73c7b4b4, -1756248378, -886839064, -1585652259, -392399756, 0x3e211f1f, -1763882165, 0x61dcbdbd, 0xd868b8b, 0xf858a8a,
            -527404944, 0x7c423e3e, 0x71c4b5b5, -861247898, -1864873912, 0x6050303, -150866186, 0x1c120e0e, -1029480095, 0x6a5f3535, -1359390889, 0x69d0b9b9, 0x17918686, -1722236479, 0x3a271d1d, 0x27b99e9e,
            -650583583, -351012616, 0x2bb39898, 0x22331111, -759469719, -1452221991, 0x7898e8e, 0x33a79494, 0x2db69b9b, 0x3c221e1e, 0x15928787, -920589847, -2025206066, -1426107051, 0x50782828, -1518673953,
            0x38f8c8c, 0x59f8a1a1, 0x9808989, 0x1a170d0d, 0x65dabfbf, -684595482, -2067381694, -793221016, -2101132991, 0x29b09999, 0x5a772d2d, 0x1e110f0f, 0x7bcbb0b0, -1459858348, 0x6dd6bbbb, 0x2c3a1616
        };
        private static readonly int[] s_TF = new int[] { 
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 1, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
            0xca, 130, 0xc9, 0x7d, 250, 0x59, 0x47, 240, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
            4, 0xc7, 0x23, 0xc3, 0x18, 150, 5, 0x9a, 7, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
            9, 0x83, 0x2c, 0x1a, 0x1b, 110, 90, 160, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
            0x53, 0xd1, 0, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 190, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
            0xd0, 0xef, 170, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 2, 0x7f, 80, 60, 0x9f, 0xa8,
            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 210,
            0xcd, 12, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 100, 0x5d, 0x19, 0x73,
            0x60, 0x81, 0x4f, 220, 0x22, 0x2a, 0x90, 0x88, 70, 0xee, 0xb8, 20, 0xde, 0x5e, 11, 0xdb,
            0xe0, 50, 0x3a, 10, 0x49, 6, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 200, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 8,
            0xba, 120, 0x25, 0x2e, 0x1c, 0xa6, 180, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
            0x70, 0x3e, 0xb5, 0x66, 0x48, 3, 0xf6, 14, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
            0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 30, 0x87, 0xe9, 0xce, 0x55, 40, 0xdf,
            140, 0xa1, 0x89, 13, 0xbf, 230, 0x42, 0x68, 0x41, 0x99, 0x2d, 15, 0xb0, 0x54, 0xbb, 0x16,
            0x6300, 0x7c00, 0x7700, 0x7b00, 0xf200, 0x6b00, 0x6f00, 0xc500, 0x3000, 0x100, 0x6700, 0x2b00, 0xfe00, 0xd700, 0xab00, 0x7600,
            0xca00, 0x8200, 0xc900, 0x7d00, 0xfa00, 0x5900, 0x4700, 0xf000, 0xad00, 0xd400, 0xa200, 0xaf00, 0x9c00, 0xa400, 0x7200, 0xc000,
            0xb700, 0xfd00, 0x9300, 0x2600, 0x3600, 0x3f00, 0xf700, 0xcc00, 0x3400, 0xa500, 0xe500, 0xf100, 0x7100, 0xd800, 0x3100, 0x1500,
            0x400, 0xc700, 0x2300, 0xc300, 0x1800, 0x9600, 0x500, 0x9a00, 0x700, 0x1200, 0x8000, 0xe200, 0xeb00, 0x2700, 0xb200, 0x7500,
            0x900, 0x8300, 0x2c00, 0x1a00, 0x1b00, 0x6e00, 0x5a00, 0xa000, 0x5200, 0x3b00, 0xd600, 0xb300, 0x2900, 0xe300, 0x2f00, 0x8400,
            0x5300, 0xd100, 0, 0xed00, 0x2000, 0xfc00, 0xb100, 0x5b00, 0x6a00, 0xcb00, 0xbe00, 0x3900, 0x4a00, 0x4c00, 0x5800, 0xcf00,
            0xd000, 0xef00, 0xaa00, 0xfb00, 0x4300, 0x4d00, 0x3300, 0x8500, 0x4500, 0xf900, 0x200, 0x7f00, 0x5000, 0x3c00, 0x9f00, 0xa800,
            0x5100, 0xa300, 0x4000, 0x8f00, 0x9200, 0x9d00, 0x3800, 0xf500, 0xbc00, 0xb600, 0xda00, 0x2100, 0x1000, 0xff00, 0xf300, 0xd200,
            0xcd00, 0xc00, 0x1300, 0xec00, 0x5f00, 0x9700, 0x4400, 0x1700, 0xc400, 0xa700, 0x7e00, 0x3d00, 0x6400, 0x5d00, 0x1900, 0x7300,
            0x6000, 0x8100, 0x4f00, 0xdc00, 0x2200, 0x2a00, 0x9000, 0x8800, 0x4600, 0xee00, 0xb800, 0x1400, 0xde00, 0x5e00, 0xb00, 0xdb00,
            0xe000, 0x3200, 0x3a00, 0xa00, 0x4900, 0x600, 0x2400, 0x5c00, 0xc200, 0xd300, 0xac00, 0x6200, 0x9100, 0x9500, 0xe400, 0x7900,
            0xe700, 0xc800, 0x3700, 0x6d00, 0x8d00, 0xd500, 0x4e00, 0xa900, 0x6c00, 0x5600, 0xf400, 0xea00, 0x6500, 0x7a00, 0xae00, 0x800,
            0xba00, 0x7800, 0x2500, 0x2e00, 0x1c00, 0xa600, 0xb400, 0xc600, 0xe800, 0xdd00, 0x7400, 0x1f00, 0x4b00, 0xbd00, 0x8b00, 0x8a00,
            0x7000, 0x3e00, 0xb500, 0x6600, 0x4800, 0x300, 0xf600, 0xe00, 0x6100, 0x3500, 0x5700, 0xb900, 0x8600, 0xc100, 0x1d00, 0x9e00,
            0xe100, 0xf800, 0x9800, 0x1100, 0x6900, 0xd900, 0x8e00, 0x9400, 0x9b00, 0x1e00, 0x8700, 0xe900, 0xce00, 0x5500, 0x2800, 0xdf00,
            0x8c00, 0xa100, 0x8900, 0xd00, 0xbf00, 0xe600, 0x4200, 0x6800, 0x4100, 0x9900, 0x2d00, 0xf00, 0xb000, 0x5400, 0xbb00, 0x1600,
            0x630000, 0x7c0000, 0x770000, 0x7b0000, 0xf20000, 0x6b0000, 0x6f0000, 0xc50000, 0x300000, 0x10000, 0x670000, 0x2b0000, 0xfe0000, 0xd70000, 0xab0000, 0x760000,
            0xca0000, 0x820000, 0xc90000, 0x7d0000, 0xfa0000, 0x590000, 0x470000, 0xf00000, 0xad0000, 0xd40000, 0xa20000, 0xaf0000, 0x9c0000, 0xa40000, 0x720000, 0xc00000,
            0xb70000, 0xfd0000, 0x930000, 0x260000, 0x360000, 0x3f0000, 0xf70000, 0xcc0000, 0x340000, 0xa50000, 0xe50000, 0xf10000, 0x710000, 0xd80000, 0x310000, 0x150000,
            0x40000, 0xc70000, 0x230000, 0xc30000, 0x180000, 0x960000, 0x50000, 0x9a0000, 0x70000, 0x120000, 0x800000, 0xe20000, 0xeb0000, 0x270000, 0xb20000, 0x750000,
            0x90000, 0x830000, 0x2c0000, 0x1a0000, 0x1b0000, 0x6e0000, 0x5a0000, 0xa00000, 0x520000, 0x3b0000, 0xd60000, 0xb30000, 0x290000, 0xe30000, 0x2f0000, 0x840000,
            0x530000, 0xd10000, 0, 0xed0000, 0x200000, 0xfc0000, 0xb10000, 0x5b0000, 0x6a0000, 0xcb0000, 0xbe0000, 0x390000, 0x4a0000, 0x4c0000, 0x580000, 0xcf0000,
            0xd00000, 0xef0000, 0xaa0000, 0xfb0000, 0x430000, 0x4d0000, 0x330000, 0x850000, 0x450000, 0xf90000, 0x20000, 0x7f0000, 0x500000, 0x3c0000, 0x9f0000, 0xa80000,
            0x510000, 0xa30000, 0x400000, 0x8f0000, 0x920000, 0x9d0000, 0x380000, 0xf50000, 0xbc0000, 0xb60000, 0xda0000, 0x210000, 0x100000, 0xff0000, 0xf30000, 0xd20000,
            0xcd0000, 0xc0000, 0x130000, 0xec0000, 0x5f0000, 0x970000, 0x440000, 0x170000, 0xc40000, 0xa70000, 0x7e0000, 0x3d0000, 0x640000, 0x5d0000, 0x190000, 0x730000,
            0x600000, 0x810000, 0x4f0000, 0xdc0000, 0x220000, 0x2a0000, 0x900000, 0x880000, 0x460000, 0xee0000, 0xb80000, 0x140000, 0xde0000, 0x5e0000, 0xb0000, 0xdb0000,
            0xe00000, 0x320000, 0x3a0000, 0xa0000, 0x490000, 0x60000, 0x240000, 0x5c0000, 0xc20000, 0xd30000, 0xac0000, 0x620000, 0x910000, 0x950000, 0xe40000, 0x790000,
            0xe70000, 0xc80000, 0x370000, 0x6d0000, 0x8d0000, 0xd50000, 0x4e0000, 0xa90000, 0x6c0000, 0x560000, 0xf40000, 0xea0000, 0x650000, 0x7a0000, 0xae0000, 0x80000,
            0xba0000, 0x780000, 0x250000, 0x2e0000, 0x1c0000, 0xa60000, 0xb40000, 0xc60000, 0xe80000, 0xdd0000, 0x740000, 0x1f0000, 0x4b0000, 0xbd0000, 0x8b0000, 0x8a0000,
            0x700000, 0x3e0000, 0xb50000, 0x660000, 0x480000, 0x30000, 0xf60000, 0xe0000, 0x610000, 0x350000, 0x570000, 0xb90000, 0x860000, 0xc10000, 0x1d0000, 0x9e0000,
            0xe10000, 0xf80000, 0x980000, 0x110000, 0x690000, 0xd90000, 0x8e0000, 0x940000, 0x9b0000, 0x1e0000, 0x870000, 0xe90000, 0xce0000, 0x550000, 0x280000, 0xdf0000,
            0x8c0000, 0xa10000, 0x890000, 0xd0000, 0xbf0000, 0xe60000, 0x420000, 0x680000, 0x410000, 0x990000, 0x2d0000, 0xf0000, 0xb00000, 0x540000, 0xbb0000, 0x160000,
            0x63000000, 0x7c000000, 0x77000000, 0x7b000000, -234881024, 0x6b000000, 0x6f000000, -989855744, 0x30000000, 0x1000000, 0x67000000, 0x2b000000, -33554432, -687865856, -1426063360, 0x76000000,
            -905969664, -2113929216, -922746880, 0x7d000000, -100663296, 0x59000000, 0x47000000, -268435456, -1392508928, -738197504, -1577058304, -1358954496, -1677721600, -1543503872, 0x72000000, -1073741824,
            -1224736768, -50331648, -1828716544, 0x26000000, 0x36000000, 0x3f000000, -150994944, -872415232, 0x34000000, -1526726656, -452984832, -251658240, 0x71000000, -671088640, 0x31000000, 0x15000000,
            0x4000000, -956301312, 0x23000000, -1023410176, 0x18000000, -1778384896, 0x5000000, -1711276032, 0x7000000, 0x12000000, -2147483648, -503316480, -352321536, 0x27000000, -1308622848, 0x75000000,
            0x9000000, -2097152000, 0x2c000000, 0x1a000000, 0x1b000000, 0x6e000000, 0x5a000000, -1610612736, 0x52000000, 0x3b000000, -704643072, -1291845632, 0x29000000, -486539264, 0x2f000000, -2080374784,
            0x53000000, -788529152, 0, -318767104, 0x20000000, -67108864, -1325400064, 0x5b000000, 0x6a000000, -889192448, -1107296256, 0x39000000, 0x4a000000, 0x4c000000, 0x58000000, -822083584,
            -805306368, -285212672, -1442840576, -83886080, 0x43000000, 0x4d000000, 0x33000000, -2063597568, 0x45000000, -117440512, 0x2000000, 0x7f000000, 0x50000000, 0x3c000000, -1627389952, -1476395008,
            0x51000000, -1560281088, 0x40000000, -1895825408, -1845493760, -1660944384, 0x38000000, -184549376, -1140850688, -1241513984, -637534208, 0x21000000, 0x10000000, -16777216, -218103808, -771751936,
            -855638016, 0xc000000, 0x13000000, -335544320, 0x5f000000, -1761607680, 0x44000000, 0x17000000, -1006632960, -1493172224, 0x7e000000, 0x3d000000, 0x64000000, 0x5d000000, 0x19000000, 0x73000000,
            0x60000000, -2130706432, 0x4f000000, -603979776, 0x22000000, 0x2a000000, -1879048192, -2013265920, 0x46000000, -301989888, -1207959552, 0x14000000, -570425344, 0x5e000000, 0xb000000, -620756992,
            -536870912, 0x32000000, 0x3a000000, 0xa000000, 0x49000000, 0x6000000, 0x24000000, 0x5c000000, -1040187392, -754974720, -1409286144, 0x62000000, -1862270976, -1795162112, -469762048, 0x79000000,
            -419430400, -939524096, 0x37000000, 0x6d000000, -1929379840, -721420288, 0x4e000000, -1459617792, 0x6c000000, 0x56000000, -201326592, -369098752, 0x65000000, 0x7a000000, -1375731712, 0x8000000,
            -1174405120, 0x78000000, 0x25000000, 0x2e000000, 0x1c000000, -1509949440, -1275068416, -973078528, -402653184, -587202560, 0x74000000, 0x1f000000, 0x4b000000, -1124073472, -1962934272, -1979711488,
            0x70000000, 0x3e000000, -1258291200, 0x66000000, 0x48000000, 0x3000000, -167772160, 0xe000000, 0x61000000, 0x35000000, 0x57000000, -1191182336, -2046820352, -1056964608, 0x1d000000, -1644167168,
            -520093696, -134217728, -1744830464, 0x11000000, 0x69000000, -654311424, -1912602624, -1811939328, -1694498816, 0x1e000000, -2030043136, -385875968, -838860800, 0x55000000, 0x28000000, -553648128,
            -1946157056, -1593835520, -1996488704, 0xd000000, -1090519040, -436207616, 0x42000000, 0x68000000, 0x41000000, -1728053248, 0x2d000000, 0xf000000, -1342177280, 0x54000000, -1157627904, 0x16000000
        };

        private RijndaelManagedTransform()
        {
        }

        internal RijndaelManagedTransform(byte[] rgbKey, CipherMode mode, byte[] rgbIV, int blockSize, int feedbackSize, PaddingMode PaddingValue, RijndaelManagedTransformMode transformMode)
        {
            this.m_blockSizeBits = blockSize;
            this.m_blockSizeBytes = blockSize / 8;
            this.m_cipherMode = mode;
            this.m_paddingValue = PaddingValue;
            this.m_transformMode = transformMode;
            this.m_Nb = blockSize / 0x20;
            this.m_Nk = rgbKey.Length / 4;
            int num = (this.m_Nb > 6) ? 3 : 2;
            int num2 = (this.m_Nb > 6) ? 4 : 3;
            int[] sourceArray = new int[this.m_Nb];
            int[] numArray2 = new int[this.m_Nb];
            int[] numArray3 = new int[this.m_Nb];
            int[] numArray4 = new int[this.m_Nb];
            int[] numArray5 = new int[this.m_Nb];
            int[] numArray6 = new int[this.m_Nb];
            for (int i = 0; i < this.m_Nb; i++)
            {
                sourceArray[i] = (i + 1) % this.m_Nb;
                numArray2[i] = (i + num) % this.m_Nb;
                numArray3[i] = (i + num2) % this.m_Nb;
                numArray4[i] = ((i - 1) + this.m_Nb) % this.m_Nb;
                numArray5[i] = ((i - num) + this.m_Nb) % this.m_Nb;
                numArray6[i] = ((i - num2) + this.m_Nb) % this.m_Nb;
            }
            this.m_encryptindex = new int[this.m_Nb * 3];
            Array.Copy(sourceArray, 0, this.m_encryptindex, 0, this.m_Nb);
            Array.Copy(numArray2, 0, this.m_encryptindex, this.m_Nb, this.m_Nb);
            Array.Copy(numArray3, 0, this.m_encryptindex, this.m_Nb * 2, this.m_Nb);
            this.m_decryptindex = new int[this.m_Nb * 3];
            Array.Copy(numArray4, 0, this.m_decryptindex, 0, this.m_Nb);
            Array.Copy(numArray5, 0, this.m_decryptindex, this.m_Nb, this.m_Nb);
            Array.Copy(numArray6, 0, this.m_decryptindex, this.m_Nb * 2, this.m_Nb);
            switch (this.m_cipherMode)
            {
                case CipherMode.CBC:
                case CipherMode.ECB:
                    this.m_inputBlockSize = this.m_blockSizeBytes;
                    this.m_outputBlockSize = this.m_blockSizeBytes;
                    break;

                case CipherMode.CFB:
                    this.m_inputBlockSize = feedbackSize / 8;
                    this.m_outputBlockSize = feedbackSize / 8;
                    break;

                default:
                    throw new CryptographicException(Environment.GetResourceString("Cryptography_InvalidCipherMode"));
            }
            if ((mode == CipherMode.CBC) || (mode == CipherMode.CFB))
            {
                if (rgbIV == null)
                {
                    throw new ArgumentNullException("rgbIV");
                }
                if ((rgbIV.Length / 4) != this.m_Nb)
                {
                    throw new CryptographicException(Environment.GetResourceString("Cryptography_InvalidIVSize"));
                }
                this.m_IV = new int[this.m_Nb];
                int num4 = 0;
                for (int j = 0; j < this.m_Nb; j++)
                {
                    int num6 = rgbIV[num4++];
                    int num7 = rgbIV[num4++];
                    int num8 = rgbIV[num4++];
                    int num9 = rgbIV[num4++];
                    this.m_IV[j] = (((num9 << 0x18) | (num8 << 0x10)) | (num7 << 8)) | num6;
                }
            }
            if (rgbKey == null)
            {
                throw new ArgumentNullException("rgbKey");
            }
            this.GenerateKeyExpansion(rgbKey);
            if (this.m_cipherMode == CipherMode.CBC)
            {
                this.m_lastBlockBuffer = new int[this.m_Nb];
                Buffer.InternalBlockCopy(this.m_IV, 0, this.m_lastBlockBuffer, 0, this.m_blockSizeBytes);
            }
            if (this.m_cipherMode == CipherMode.CFB)
            {
                this.m_shiftRegister = new byte[4 * this.m_Nb];
                Buffer.InternalBlockCopy(this.m_IV, 0, this.m_shiftRegister, 0, 4 * this.m_Nb);
            }
        }

        public void Clear()
        {
            ((IDisposable) this).Dispose();
        }

        private unsafe void Dec(int* decryptindex, int* decryptKeyExpansion, int* iT, int* iTF, int* work, int* temp)
        {
            int* numPtr;
            int* numPtr2;
            int index = this.m_Nb * this.m_Nr;
            for (int i = 0; i < this.m_Nb; i++)
            {
                int* numPtr1 = work + i;
                numPtr1[0] ^= decryptKeyExpansion[index];
                index++;
            }
            for (int j = 1; j < this.m_Nr; j++)
            {
                index -= 2 * this.m_Nb;
                numPtr = decryptindex;
                numPtr2 = decryptKeyExpansion + index;
                for (int m = 0; m < this.m_Nb; m++)
                {
                    temp[m] = (((iT[work[m] & 0xff] ^ iT[0x100 + ((work[numPtr[0]] >> 8) & 0xff)]) ^ iT[0x200 + ((work[numPtr[this.m_Nb]] >> 0x10) & 0xff)]) ^ iT[0x300 + ((work[numPtr[this.m_Nb * 2]] >> 0x18) & 0xff)]) ^ numPtr2[0];
                    index++;
                    numPtr++;
                    numPtr2++;
                }
                for (int n = 0; n < this.m_Nb; n++)
                {
                    work[n] = temp[n];
                }
            }
            index = 0;
            numPtr = decryptindex;
            numPtr2 = decryptKeyExpansion + index;
            for (int k = 0; k < this.m_Nb; k++)
            {
                temp[k] = (((iTF[work[k] & 0xff] ^ iTF[0x100 + ((work[numPtr[0]] >> 8) & 0xff)]) ^ iTF[0x200 + ((work[numPtr[this.m_Nb]] >> 0x10) & 0xff)]) ^ iTF[0x300 + ((work[numPtr[this.m_Nb * 2]] >> 0x18) & 0xff)]) ^ numPtr2[0];
                numPtr++;
                numPtr2++;
            }
        }

        private unsafe int DecryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, PaddingMode paddingMode, bool fLast)
        {
            if (inputBuffer.Length < (inputOffset + inputCount))
            {
                throw new CryptographicException(Environment.GetResourceString("Cryptography_InsufficientBuffer"));
            }
            if (outputBuffer == null)
            {
                outputBuffer = new byte[inputCount];
                outputOffset = 0;
            }
            else if ((outputBuffer.Length - outputOffset) < inputCount)
            {
                throw new CryptographicException(Environment.GetResourceString("Cryptography_InsufficientBuffer"));
            }
            fixed (int* numRef = this.m_encryptindex)
            {
                fixed (int* numRef2 = this.m_encryptKeyExpansion)
                {
                    fixed (int* numRef3 = this.m_decryptindex)
                    {
                        fixed (int* numRef4 = this.m_decryptKeyExpansion)
                        {
                            fixed (int* numRef5 = s_T)
                            {
                                fixed (int* numRef6 = s_TF)
                                {
                                    fixed (int* numRef7 = s_iT)
                                    {
                                        fixed (int* numRef8 = s_iTF)
                                        {
                                            int* work = stackalloc int[this.m_Nb];
                                            int* temp = stackalloc int[this.m_Nb];
                                            int num = inputCount / this.m_inputBlockSize;
                                            int srcOffset = inputOffset;
                                            int index = 0;
                                            int num4 = outputOffset;
                                            for (int i = 0; i < num; i++)
                                            {
                                                if (this.m_cipherMode == CipherMode.CFB)
                                                {
                                                    index = 0;
                                                    for (int j = 0; j < this.m_Nb; j++)
                                                    {
                                                        int num7 = this.m_shiftRegister[index++];
                                                        int num8 = this.m_shiftRegister[index++];
                                                        int num9 = this.m_shiftRegister[index++];
                                                        int num10 = this.m_shiftRegister[index++];
                                                        work[j] = (((num10 << 0x18) | (num9 << 0x10)) | (num8 << 8)) | num7;
                                                    }
                                                }
                                                else
                                                {
                                                    index = srcOffset;
                                                    for (int k = 0; k < this.m_Nb; k++)
                                                    {
                                                        int num12 = inputBuffer[index++];
                                                        int num13 = inputBuffer[index++];
                                                        int num14 = inputBuffer[index++];
                                                        int num15 = inputBuffer[index++];
                                                        work[k] = (((num15 << 0x18) | (num14 << 0x10)) | (num13 << 8)) | num12;
                                                    }
                                                }
                                                if (this.m_cipherMode == CipherMode.CFB)
                                                {
                                                    this.Enc(numRef, numRef2, numRef5, numRef6, work, temp);
                                                    index = srcOffset;
                                                    for (int m = 0; m < this.m_Nb; m++)
                                                    {
                                                        if (index >= (srcOffset + this.m_inputBlockSize))
                                                        {
                                                            break;
                                                        }
                                                        outputBuffer[num4++] = (byte) ((temp[m] & 0xff) ^ inputBuffer[index++]);
                                                        if (index >= (srcOffset + this.m_inputBlockSize))
                                                        {
                                                            break;
                                                        }
                                                        outputBuffer[num4++] = (byte) (((temp[m] >> 8) & 0xff) ^ inputBuffer[index++]);
                                                        if (index >= (srcOffset + this.m_inputBlockSize))
                                                        {
                                                            break;
                                                        }
                                                        outputBuffer[num4++] = (byte) (((temp[m] >> 0x10) & 0xff) ^ inputBuffer[index++]);
                                                        if (index >= (srcOffset + this.m_inputBlockSize))
                                                        {
                                                            break;
                                                        }
                                                        outputBuffer[num4++] = (byte) (((temp[m] >> 0x18) & 0xff) ^ inputBuffer[index++]);
                                                    }
                                                    index = 0;
                                                    while (index < (this.m_blockSizeBytes - this.m_inputBlockSize))
                                                    {
                                                        this.m_shiftRegister[index] = this.m_shiftRegister[index + this.m_inputBlockSize];
                                                        index++;
                                                    }
                                                    Buffer.InternalBlockCopy(inputBuffer, srcOffset, this.m_shiftRegister, this.m_blockSizeBytes - this.m_inputBlockSize, this.m_inputBlockSize);
                                                }
                                                else
                                                {
                                                    this.Dec(numRef3, numRef4, numRef7, numRef8, work, temp);
                                                    if (this.m_cipherMode == CipherMode.CBC)
                                                    {
                                                        index = srcOffset;
                                                        for (int num17 = 0; num17 < this.m_Nb; num17++)
                                                        {
                                                            int* numPtr1 = temp + num17;
                                                            numPtr1[0] ^= this.m_lastBlockBuffer[num17];
                                                            int num18 = inputBuffer[index++];
                                                            int num19 = inputBuffer[index++];
                                                            int num20 = inputBuffer[index++];
                                                            int num21 = inputBuffer[index++];
                                                            this.m_lastBlockBuffer[num17] = (((num21 << 0x18) | (num20 << 0x10)) | (num19 << 8)) | num18;
                                                        }
                                                    }
                                                    for (int n = 0; n < this.m_Nb; n++)
                                                    {
                                                        outputBuffer[num4++] = (byte) (temp[n] & 0xff);
                                                        outputBuffer[num4++] = (byte) ((temp[n] >> 8) & 0xff);
                                                        outputBuffer[num4++] = (byte) ((temp[n] >> 0x10) & 0xff);
                                                        outputBuffer[num4++] = (byte) ((temp[n] >> 0x18) & 0xff);
                                                    }
                                                }
                                                srcOffset += this.m_inputBlockSize;
                                            }
                                            if (!fLast)
                                            {
                                                return inputCount;
                                            }
                                            byte[] dst = outputBuffer;
                                            int num23 = 0;
                                            switch (paddingMode)
                                            {
                                                case PaddingMode.PKCS7:
                                                    num23 = outputBuffer[inputCount - 1];
                                                    if (((num23 > outputBuffer.Length) || (num23 > this.InputBlockSize)) || (num23 <= 0))
                                                    {
                                                        throw new CryptographicException(Environment.GetResourceString("Cryptography_PKCS7_InvalidPadding"));
                                                    }
                                                    break;

                                                case PaddingMode.ANSIX923:
                                                    num23 = outputBuffer[inputCount - 1];
                                                    if (((num23 > outputBuffer.Length) || (num23 > this.InputBlockSize)) || (num23 <= 0))
                                                    {
                                                        throw new CryptographicException(Environment.GetResourceString("Cryptography_PKCS7_InvalidPadding"));
                                                    }
                                                    goto Label_05F0;

                                                case PaddingMode.ISO10126:
                                                    num23 = outputBuffer[inputCount - 1];
                                                    if (((num23 > outputBuffer.Length) || (num23 > this.InputBlockSize)) || (num23 <= 0))
                                                    {
                                                        throw new CryptographicException(Environment.GetResourceString("Cryptography_PKCS7_InvalidPadding"));
                                                    }
                                                    goto Label_0671;

                                                default:
                                                    goto Label_0694;
                                            }
                                            for (index = 1; index <= num23; index++)
                                            {
                                                if (outputBuffer[inputCount - index] != num23)
                                                {
                                                    throw new CryptographicException(Environment.GetResourceString("Cryptography_PKCS7_InvalidPadding"));
                                                }
                                            }
                                            dst = new byte[outputBuffer.Length - num23];
                                            Buffer.InternalBlockCopy(outputBuffer, 0, dst, 0, outputBuffer.Length - num23);
                                            goto Label_0694;
                                        Label_05F0:
                                            index = 2;
                                            while (index <= num23)
                                            {
                                                if (outputBuffer[inputCount - index] != 0)
                                                {
                                                    throw new CryptographicException(Environment.GetResourceString("Cryptography_PKCS7_InvalidPadding"));
                                                }
                                                index++;
                                            }
                                            dst = new byte[outputBuffer.Length - num23];
                                            Buffer.InternalBlockCopy(outputBuffer, 0, dst, 0, outputBuffer.Length - num23);
                                            goto Label_0694;
                                        Label_0671:
                                            dst = new byte[outputBuffer.Length - num23];
                                            Buffer.InternalBlockCopy(outputBuffer, 0, dst, 0, outputBuffer.Length - num23);
                                        Label_0694:
                                            outputBuffer = dst;
                                            return dst.Length;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        private void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (this.m_IV != null)
                {
                    Array.Clear(this.m_IV, 0, this.m_IV.Length);
                    this.m_IV = null;
                }
                if (this.m_lastBlockBuffer != null)
                {
                    Array.Clear(this.m_lastBlockBuffer, 0, this.m_lastBlockBuffer.Length);
                    this.m_lastBlockBuffer = null;
                }
                if (this.m_encryptKeyExpansion != null)
                {
                    Array.Clear(this.m_encryptKeyExpansion, 0, this.m_encryptKeyExpansion.Length);
                    this.m_encryptKeyExpansion = null;
                }
                if (this.m_decryptKeyExpansion != null)
                {
                    Array.Clear(this.m_decryptKeyExpansion, 0, this.m_decryptKeyExpansion.Length);
                    this.m_decryptKeyExpansion = null;
                }
                if (this.m_depadBuffer != null)
                {
                    Array.Clear(this.m_depadBuffer, 0, this.m_depadBuffer.Length);
                    this.m_depadBuffer = null;
                }
                if (this.m_shiftRegister != null)
                {
                    Array.Clear(this.m_shiftRegister, 0, this.m_shiftRegister.Length);
                    this.m_shiftRegister = null;
                }
            }
        }

        private unsafe void Enc(int* encryptindex, int* encryptKeyExpansion, int* T, int* TF, int* work, int* temp)
        {
            int* numPtr;
            for (int i = 0; i < this.m_Nb; i++)
            {
                int* numPtr1 = work + i;
                numPtr1[0] ^= encryptKeyExpansion[i];
            }
            int* numPtr2 = encryptKeyExpansion + this.m_Nb;
            for (int j = 1; j < this.m_Nr; j++)
            {
                numPtr = encryptindex;
                for (int m = 0; m < this.m_Nb; m++)
                {
                    temp[m] = (((T[work[m] & 0xff] ^ T[0x100 + ((work[numPtr[0]] >> 8) & 0xff)]) ^ T[0x200 + ((work[numPtr[this.m_Nb]] >> 0x10) & 0xff)]) ^ T[0x300 + ((work[numPtr[this.m_Nb * 2]] >> 0x18) & 0xff)]) ^ numPtr2[0];
                    numPtr++;
                    numPtr2++;
                }
                for (int n = 0; n < this.m_Nb; n++)
                {
                    work[n] = temp[n];
                }
            }
            numPtr = encryptindex;
            for (int k = 0; k < this.m_Nb; k++)
            {
                temp[k] = (((TF[work[k] & 0xff] ^ TF[0x100 + ((work[numPtr[0]] >> 8) & 0xff)]) ^ TF[0x200 + ((work[numPtr[this.m_Nb]] >> 0x10) & 0xff)]) ^ TF[0x300 + ((work[numPtr[this.m_Nb * 2]] >> 0x18) & 0xff)]) ^ numPtr2[0];
                numPtr++;
                numPtr2++;
            }
        }

        private unsafe int EncryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, PaddingMode paddingMode, bool fLast)
        {
            int[] numArray;
            if (inputBuffer.Length < (inputOffset + inputCount))
            {
                throw new CryptographicException(Environment.GetResourceString("Cryptography_InsufficientBuffer"));
            }
            int count = 0;
            int num2 = inputCount % this.m_inputBlockSize;
            byte[] data = null;
            int srcOffset = inputOffset;
            int index = 0;
            if (fLast)
            {
                switch (paddingMode)
                {
                    case PaddingMode.None:
                        if (num2 != 0)
                        {
                            throw new CryptographicException(Environment.GetResourceString("Cryptography_SSE_InvalidDataSize"));
                        }
                        break;

                    case PaddingMode.PKCS7:
                        count = this.m_inputBlockSize - num2;
                        break;

                    case PaddingMode.Zeros:
                        if (num2 != 0)
                        {
                            count = this.m_inputBlockSize - num2;
                        }
                        break;

                    case PaddingMode.ANSIX923:
                        count = this.m_inputBlockSize - num2;
                        break;

                    case PaddingMode.ISO10126:
                        count = this.m_inputBlockSize - num2;
                        break;
                }
                if (count != 0)
                {
                    data = new byte[count];
                    switch (paddingMode)
                    {
                        case PaddingMode.PKCS7:
                            index = 0;
                            while (index < count)
                            {
                                data[index] = (byte) count;
                                index++;
                            }
                            break;

                        case PaddingMode.ANSIX923:
                            data[count - 1] = (byte) count;
                            break;

                        case PaddingMode.ISO10126:
                            Utils.StaticRandomNumberGenerator.GetBytes(data);
                            data[count - 1] = (byte) count;
                            break;
                    }
                }
            }
            if (outputBuffer == null)
            {
                outputBuffer = new byte[inputCount + count];
                outputOffset = 0;
            }
            else if ((outputBuffer.Length - outputOffset) < (inputCount + count))
            {
                throw new CryptographicException(Environment.GetResourceString("Cryptography_InsufficientBuffer"));
            }
            if (((numArray = this.m_encryptindex) == null) || (numArray.Length == 0))
            {
                numRef = null;
                goto Label_0147;
            }
            fixed (int* numRef = numArray)
            {
                int[] numArray2;
            Label_0147:
                if (((numArray2 = this.m_encryptKeyExpansion) == null) || (numArray2.Length == 0))
                {
                    numRef2 = null;
                    goto Label_0168;
                }
                fixed (int* numRef2 = numArray2)
                {
                    int[] numArray3;
                Label_0168:
                    if (((numArray3 = s_T) == null) || (numArray3.Length == 0))
                    {
                        numRef3 = null;
                        goto Label_0188;
                    }
                    fixed (int* numRef3 = numArray3)
                    {
                        int[] numArray4;
                    Label_0188:
                        if (((numArray4 = s_TF) == null) || (numArray4.Length == 0))
                        {
                            numRef4 = null;
                            goto Label_01A8;
                        }
                        fixed (int* numRef4 = numArray4)
                        {
                            int* numPtr;
                        Label_01A8:
                            numPtr = stackalloc int[this.m_Nb];
                            int* temp = stackalloc int[this.m_Nb];
                            int num5 = (inputCount + count) / this.m_inputBlockSize;
                            int num6 = outputOffset;
                            for (int i = 0; i < num5; i++)
                            {
                                if (this.m_cipherMode == CipherMode.CFB)
                                {
                                    Utils.BlockCopy(this.m_shiftRegister, 0, numPtr, 0, this.m_blockSizeBytes);
                                }
                                else if ((i != (num5 - 1)) || (count == 0))
                                {
                                    Utils.BlockCopy(inputBuffer, srcOffset, numPtr, 0, this.m_blockSizeBytes);
                                }
                                else
                                {
                                    int num8 = 0;
                                    index = srcOffset;
                                    for (int j = 0; j < this.m_Nb; j++)
                                    {
                                        int num10 = (index >= (srcOffset + num2)) ? data[num8++] : inputBuffer[index++];
                                        int num11 = (index >= (srcOffset + num2)) ? data[num8++] : inputBuffer[index++];
                                        int num12 = (index >= (srcOffset + num2)) ? data[num8++] : inputBuffer[index++];
                                        int num13 = (index >= (srcOffset + num2)) ? data[num8++] : inputBuffer[index++];
                                        numPtr[j] = (((num13 << 0x18) | (num12 << 0x10)) | (num11 << 8)) | num10;
                                    }
                                }
                                if (this.m_cipherMode == CipherMode.CBC)
                                {
                                    for (int k = 0; k < this.m_Nb; k++)
                                    {
                                        int* numPtr1 = numPtr + k;
                                        numPtr1[0] ^= this.m_lastBlockBuffer[k];
                                    }
                                }
                                this.Enc(numRef, numRef2, numRef3, numRef4, numPtr, temp);
                                if (this.m_cipherMode == CipherMode.CFB)
                                {
                                    index = srcOffset;
                                    if ((i != (num5 - 1)) || (count == 0))
                                    {
                                        for (int m = 0; m < this.m_Nb; m++)
                                        {
                                            if (index >= (srcOffset + this.m_inputBlockSize))
                                            {
                                                break;
                                            }
                                            outputBuffer[num6++] = (byte) ((temp[m] & 0xff) ^ inputBuffer[index++]);
                                            if (index >= (srcOffset + this.m_inputBlockSize))
                                            {
                                                break;
                                            }
                                            outputBuffer[num6++] = (byte) (((temp[m] >> 8) & 0xff) ^ inputBuffer[index++]);
                                            if (index >= (srcOffset + this.m_inputBlockSize))
                                            {
                                                break;
                                            }
                                            outputBuffer[num6++] = (byte) (((temp[m] >> 0x10) & 0xff) ^ inputBuffer[index++]);
                                            if (index >= (srcOffset + this.m_inputBlockSize))
                                            {
                                                break;
                                            }
                                            outputBuffer[num6++] = (byte) (((temp[m] >> 0x18) & 0xff) ^ inputBuffer[index++]);
                                        }
                                    }
                                    else
                                    {
                                        byte[] dst = new byte[this.m_inputBlockSize];
                                        Buffer.InternalBlockCopy(inputBuffer, srcOffset, dst, 0, num2);
                                        Buffer.InternalBlockCopy(data, 0, dst, num2, count);
                                        index = 0;
                                        for (int n = 0; n < this.m_Nb; n++)
                                        {
                                            if (index >= this.m_inputBlockSize)
                                            {
                                                break;
                                            }
                                            outputBuffer[num6++] = (byte) ((temp[n] & 0xff) ^ dst[index++]);
                                            if (index >= this.m_inputBlockSize)
                                            {
                                                break;
                                            }
                                            outputBuffer[num6++] = (byte) (((temp[n] >> 8) & 0xff) ^ dst[index++]);
                                            if (index >= this.m_inputBlockSize)
                                            {
                                                break;
                                            }
                                            outputBuffer[num6++] = (byte) (((temp[n] >> 0x10) & 0xff) ^ dst[index++]);
                                            if (index >= this.m_inputBlockSize)
                                            {
                                                break;
                                            }
                                            outputBuffer[num6++] = (byte) (((temp[n] >> 0x18) & 0xff) ^ dst[index++]);
                                        }
                                    }
                                    for (index = 0; index < (this.m_blockSizeBytes - this.m_inputBlockSize); index++)
                                    {
                                        this.m_shiftRegister[index] = this.m_shiftRegister[index + this.m_inputBlockSize];
                                    }
                                    Buffer.InternalBlockCopy(outputBuffer, i * this.m_inputBlockSize, this.m_shiftRegister, this.m_blockSizeBytes - this.m_inputBlockSize, this.m_inputBlockSize);
                                }
                                else
                                {
                                    for (int num17 = 0; num17 < this.m_Nb; num17++)
                                    {
                                        outputBuffer[num6++] = (byte) (temp[num17] & 0xff);
                                        outputBuffer[num6++] = (byte) ((temp[num17] >> 8) & 0xff);
                                        outputBuffer[num6++] = (byte) ((temp[num17] >> 0x10) & 0xff);
                                        outputBuffer[num6++] = (byte) ((temp[num17] >> 0x18) & 0xff);
                                    }
                                    if (this.m_cipherMode == CipherMode.CBC)
                                    {
                                        Utils.BlockCopy(temp, 0, this.m_lastBlockBuffer, 0, this.m_blockSizeBytes);
                                    }
                                }
                                srcOffset += this.m_inputBlockSize;
                            }
                        }
                    }
                }
            }
            return (inputCount + count);
        }

        private void GenerateKeyExpansion(byte[] rgbKey)
        {
            int num;
            switch (((this.m_blockSizeBits > (rgbKey.Length * 8)) ? this.m_blockSizeBits : (rgbKey.Length * 8)))
            {
                case 0x80:
                    this.m_Nr = 10;
                    break;

                case 0xc0:
                    this.m_Nr = 12;
                    break;

                case 0x100:
                    this.m_Nr = 14;
                    break;

                default:
                    throw new CryptographicException(Environment.GetResourceString("Cryptography_InvalidKeySize"));
            }
            this.m_encryptKeyExpansion = new int[this.m_Nb * (this.m_Nr + 1)];
            this.m_decryptKeyExpansion = new int[this.m_Nb * (this.m_Nr + 1)];
            int num2 = 0;
            for (int i = 0; i < this.m_Nk; i++)
            {
                int num4 = rgbKey[num2++];
                int num5 = rgbKey[num2++];
                int num6 = rgbKey[num2++];
                int num7 = rgbKey[num2++];
                this.m_encryptKeyExpansion[i] = (((num7 << 0x18) | (num6 << 0x10)) | (num5 << 8)) | num4;
            }
            if (this.m_Nk <= 6)
            {
                for (int m = this.m_Nk; m < (this.m_Nb * (this.m_Nr + 1)); m++)
                {
                    num = this.m_encryptKeyExpansion[m - 1];
                    if ((m % this.m_Nk) == 0)
                    {
                        num = SubWord(rot3(num)) ^ s_Rcon[(m / this.m_Nk) - 1];
                    }
                    this.m_encryptKeyExpansion[m] = this.m_encryptKeyExpansion[m - this.m_Nk] ^ num;
                }
            }
            else
            {
                for (int n = this.m_Nk; n < (this.m_Nb * (this.m_Nr + 1)); n++)
                {
                    num = this.m_encryptKeyExpansion[n - 1];
                    if ((n % this.m_Nk) == 0)
                    {
                        num = SubWord(rot3(num)) ^ s_Rcon[(n / this.m_Nk) - 1];
                    }
                    else if ((n % this.m_Nk) == 4)
                    {
                        num = SubWord(num);
                    }
                    this.m_encryptKeyExpansion[n] = this.m_encryptKeyExpansion[n - this.m_Nk] ^ num;
                }
            }
            for (int j = 0; j < this.m_Nb; j++)
            {
                this.m_decryptKeyExpansion[j] = this.m_encryptKeyExpansion[j];
                this.m_decryptKeyExpansion[(this.m_Nb * this.m_Nr) + j] = this.m_encryptKeyExpansion[(this.m_Nb * this.m_Nr) + j];
            }
            for (int k = this.m_Nb; k < (this.m_Nb * this.m_Nr); k++)
            {
                int x = this.m_encryptKeyExpansion[k];
                int num13 = MulX(x);
                int num14 = MulX(num13);
                int num15 = MulX(num14);
                int val = x ^ num15;
                this.m_decryptKeyExpansion[k] = ((((num13 ^ num14) ^ num15) ^ rot3(num13 ^ val)) ^ rot2(num14 ^ val)) ^ rot1(val);
            }
        }

        private static int MulX(int x)
        {
            int num = x & -2139062144;
            return (((x & 0x7f7f7f7f) << 1) ^ ((num - ((num >> 7) & 0x1ffffff)) & 0x1b1b1b1b));
        }

        public void Reset()
        {
            this.m_depadBuffer = null;
            if (this.m_cipherMode == CipherMode.CBC)
            {
                Buffer.InternalBlockCopy(this.m_IV, 0, this.m_lastBlockBuffer, 0, this.m_blockSizeBytes);
            }
            if (this.m_cipherMode == CipherMode.CFB)
            {
                Buffer.InternalBlockCopy(this.m_IV, 0, this.m_shiftRegister, 0, 4 * this.m_Nb);
            }
        }

        private static int rot1(int val) => 
            (((val << 8) & -256) | ((val >> 0x18) & 0xff));

        private static int rot2(int val) => 
            (((val << 0x10) & -65536) | ((val >> 0x10) & 0xffff));

        private static int rot3(int val) => 
            (((val << 0x18) & -16777216) | ((val >> 8) & 0xffffff));

        private static int SubWord(int a) => 
            (((s_Sbox[a & 0xff] | (s_Sbox[(a >> 8) & 0xff] << 8)) | (s_Sbox[(a >> 0x10) & 0xff] << 0x10)) | (s_Sbox[(a >> 0x18) & 0xff] << 0x18));

        void IDisposable.Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset)
        {
            if (inputBuffer == null)
            {
                throw new ArgumentNullException("inputBuffer");
            }
            if (outputBuffer == null)
            {
                throw new ArgumentNullException("outputBuffer");
            }
            if (inputOffset < 0)
            {
                throw new ArgumentOutOfRangeException("inputOffset", Environment.GetResourceString("ArgumentOutOfRange_NeedNonNegNum"));
            }
            if (((inputCount <= 0) || ((inputCount % this.InputBlockSize) != 0)) || (inputCount > inputBuffer.Length))
            {
                throw new ArgumentException(Environment.GetResourceString("Argument_InvalidValue"));
            }
            if ((inputBuffer.Length - inputCount) < inputOffset)
            {
                throw new ArgumentException(Environment.GetResourceString("Argument_InvalidOffLen"));
            }
            if (this.m_transformMode == RijndaelManagedTransformMode.Encrypt)
            {
                return this.EncryptData(inputBuffer, inputOffset, inputCount, ref outputBuffer, outputOffset, this.m_paddingValue, false);
            }
            if ((this.m_paddingValue == PaddingMode.Zeros) || (this.m_paddingValue == PaddingMode.None))
            {
                return this.DecryptData(inputBuffer, inputOffset, inputCount, ref outputBuffer, outputOffset, this.m_paddingValue, false);
            }
            if (this.m_depadBuffer == null)
            {
                this.m_depadBuffer = new byte[this.InputBlockSize];
                int num = inputCount - this.InputBlockSize;
                Buffer.InternalBlockCopy(inputBuffer, inputOffset + num, this.m_depadBuffer, 0, this.InputBlockSize);
                return this.DecryptData(inputBuffer, inputOffset, num, ref outputBuffer, outputOffset, this.m_paddingValue, false);
            }
            int num2 = this.DecryptData(this.m_depadBuffer, 0, this.m_depadBuffer.Length, ref outputBuffer, outputOffset, this.m_paddingValue, false);
            outputOffset += this.OutputBlockSize;
            int num3 = inputCount - this.InputBlockSize;
            Buffer.InternalBlockCopy(inputBuffer, inputOffset + num3, this.m_depadBuffer, 0, this.InputBlockSize);
            num2 = this.DecryptData(inputBuffer, inputOffset, num3, ref outputBuffer, outputOffset, this.m_paddingValue, false);
            return (this.OutputBlockSize + num2);
        }

        public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount)
        {
            if (inputBuffer == null)
            {
                throw new ArgumentNullException("inputBuffer");
            }
            if (inputOffset < 0)
            {
                throw new ArgumentOutOfRangeException("inputOffset", Environment.GetResourceString("ArgumentOutOfRange_NeedNonNegNum"));
            }
            if ((inputCount < 0) || (inputCount > inputBuffer.Length))
            {
                throw new ArgumentException(Environment.GetResourceString("Argument_InvalidValue"));
            }
            if ((inputBuffer.Length - inputCount) < inputOffset)
            {
                throw new ArgumentException(Environment.GetResourceString("Argument_InvalidOffLen"));
            }
            if (this.m_transformMode == RijndaelManagedTransformMode.Encrypt)
            {
                byte[] buffer = null;
                this.EncryptData(inputBuffer, inputOffset, inputCount, ref buffer, 0, this.m_paddingValue, true);
                this.Reset();
                return buffer;
            }
            if ((inputCount % this.InputBlockSize) != 0)
            {
                throw new CryptographicException(Environment.GetResourceString("Cryptography_SSD_InvalidDataSize"));
            }
            if (this.m_depadBuffer == null)
            {
                byte[] buffer2 = null;
                this.DecryptData(inputBuffer, inputOffset, inputCount, ref buffer2, 0, this.m_paddingValue, true);
                this.Reset();
                return buffer2;
            }
            byte[] dst = new byte[this.m_depadBuffer.Length + inputCount];
            Buffer.InternalBlockCopy(this.m_depadBuffer, 0, dst, 0, this.m_depadBuffer.Length);
            Buffer.InternalBlockCopy(inputBuffer, inputOffset, dst, this.m_depadBuffer.Length, inputCount);
            byte[] outputBuffer = null;
            this.DecryptData(dst, 0, dst.Length, ref outputBuffer, 0, this.m_paddingValue, true);
            this.Reset();
            return outputBuffer;
        }

        public int BlockSizeValue =>
            this.m_blockSizeBits;

        public bool CanReuseTransform =>
            true;

        public bool CanTransformMultipleBlocks =>
            true;

        public int InputBlockSize =>
            this.m_inputBlockSize;

        public int OutputBlockSize =>
            this.m_outputBlockSize;
    }
}

