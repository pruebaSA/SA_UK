namespace System.Xml.Xsl.XsltOld
{
    using System;
    using System.Xml.XPath;

    internal class StateMachine
    {
        private int _State = 0;
        private const int Assrt = 0x30;
        private const int Attr = 7;
        private const int AttrN = 5;
        private const int AttrV = 6;
        private const int B = 0x2000;
        internal const int BeginChild = 0x400;
        internal const int BeginRecord = 0x2000;
        private const int C = 0x400;
        private const int D = 0x200;
        internal const int DepthDown = 0x200;
        internal const int DepthMask = 0x300;
        internal const int DepthUp = 0x100;
        private const int E = 0x4000;
        private const int Elem = 1;
        internal const int EmptyTag = 0x1000;
        private const int EndEm = 9;
        internal const int EndRecord = 0x4000;
        internal const int Error = 0x10;
        private const int H = 0x800;
        internal const int HadChild = 0x800;
        private const int Ignor = 0x20;
        private const int InCmt = 10;
        private const int InElm = 8;
        private const int Init = 0;
        private const int InPI = 11;
        private const int M = 0x1000;
        private const int Ns = 4;
        private const int NsN = 2;
        private const int NsV = 3;
        private const int P = 0x10000;
        internal const int PopScope = 0x10000;
        internal const int PushScope = 0x8000;
        private const int S = 0x8000;
        private static readonly int[][] s_BeginTransitions = new int[][] { new int[] { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 }, new int[] { 0xa001, 0xa501, 0x10, 0x10, 0xa401, 0x10, 0x10, 0xa401, 0xa001, 0x1a001, 0x10, 0x10 }, new int[] { 0x10, 0x105, 0x10, 0x10, 5, 0x10, 0x10, 5, 0x10, 0x10, 0x10, 0x10 }, new int[] { 0x10, 0x102, 0x10, 0x10, 2, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 }, new int[] { 0x2008, 0x2508, 0x103, 3, 0x2408, 0x106, 6, 0x2408, 8, 0x12008, 10, 11 }, new int[] { 0x2008, 0x2508, 0x103, 3, 0x2408, 0x106, 6, 0x2408, 8, 0x12008, 10, 11 }, new int[] { 0x2008, 0x2508, 0x103, 3, 0x2408, 0x106, 6, 0x2408, 8, 0x12008, 10, 11 }, new int[] { 0x200b, 0x250b, 0x10, 0x10, 0x240b, 0x10, 0x10, 0x240b, 0x200b, 0x1200b, 0x10, 0x10 }, new int[] { 0x200a, 0x250a, 0x10, 0x10, 0x240a, 0x10, 0x10, 0x240a, 0x200a, 0x1200a, 0x10, 0x10 }, new int[] { 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 } };
        private static readonly int[][] s_EndTransitions = new int[][] { new int[] { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30 }, new int[] { 0x30, 0x17009, 0x30, 0x30, 0x17209, 0x30, 0x30, 0x17209, 0x16a09, 0x16a09, 0x30, 0x30 }, new int[] { 0x30, 0x30, 0x30, 0x30, 0x30, 7, 0x207, 0x30, 0x30, 0x30, 0x30, 0x30 }, new int[] { 0x30, 0x30, 4, 0x204, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30 }, new int[] { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30 }, new int[] { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30 }, new int[] { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30 }, new int[] { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x4009 }, new int[] { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x4009, 0x30 }, new int[] { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30 } };
        private const int StateMask = 15;
        private const int U = 0x100;

        internal StateMachine()
        {
        }

        internal int Begin(XPathNodeType nodeType)
        {
            int num = s_BeginTransitions[(int) nodeType][this._State];
            if ((num != 0x10) && (num != 0x20))
            {
                this._State = num & 15;
            }
            return num;
        }

        internal int BeginOutlook(XPathNodeType nodeType) => 
            s_BeginTransitions[(int) nodeType][this._State];

        internal int End(XPathNodeType nodeType)
        {
            int num = s_EndTransitions[(int) nodeType][this._State];
            if ((num != 0x10) && (num != 0x20))
            {
                this._State = num & 15;
            }
            return num;
        }

        internal int EndOutlook(XPathNodeType nodeType) => 
            s_EndTransitions[(int) nodeType][this._State];

        internal void Reset()
        {
            this._State = 0;
        }

        internal static int StateOnly(int state) => 
            (state & 15);

        internal int State
        {
            get => 
                this._State;
            set
            {
                this._State = value;
            }
        }
    }
}

