namespace System.Data
{
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.Data.Common;
    using System.Data.SqlTypes;
    using System.Globalization;
    using System.IO;
    using System.Text;
    using System.Xml;

    internal sealed class XmlTreeGen
    {
        private XmlDocument _dc;
        private DataSet _ds;
        private ArrayList _relations = new ArrayList();
        private XmlElement _sRoot;
        private ArrayList _tables = new ArrayList();
        private Hashtable autogenerated;
        private ArrayList ConstraintNames;
        private XmlElement constraintSeparator;
        private XmlElement dsElement;
        private string fileExt;
        private string fileName;
        private string filePath;
        private Hashtable namespaces;
        private int prefixCount;
        private Hashtable prefixes;
        private SchemaFormat schFormat = SchemaFormat.Public;

        internal XmlTreeGen(SchemaFormat format)
        {
            this.schFormat = format;
        }

        private static bool _PropsNotEmpty(PropertyCollection props) => 
            ((props != null) && (props.Count != 0));

        internal void AddColumnProperties(DataColumn col, XmlElement root)
        {
            if (col.DataType != typeof(string))
            {
                string str = XmlDataTypeName(col.DataType);
                if ((col.IsSqlType && ((str.Length == 0) || col.ImplementsINullable)) || ((typeof(SqlXml) == col.DataType) || (col.DataType == typeof(DateTimeOffset))))
                {
                    root.SetAttribute("DataType", "urn:schemas-microsoft-com:xml-msdata", col.DataType.FullName);
                }
                else if (((str.Length == 0) || col.ImplementsINullable) || ((str == "anyType") && (col.XmlDataType != "anyType")))
                {
                    root.SetAttribute("DataType", "urn:schemas-microsoft-com:xml-msdata", col.DataType.AssemblyQualifiedName);
                }
            }
            if (col.ReadOnly)
            {
                root.SetAttribute("ReadOnly", "urn:schemas-microsoft-com:xml-msdata", "true");
            }
            if (col.Expression.Length != 0)
            {
                root.SetAttribute("Expression", "urn:schemas-microsoft-com:xml-msdata", col.Expression);
            }
            if (col.AutoIncrement)
            {
                root.SetAttribute("AutoIncrement", "urn:schemas-microsoft-com:xml-msdata", "true");
            }
            if (col.AutoIncrementSeed != 0L)
            {
                root.SetAttribute("AutoIncrementSeed", "urn:schemas-microsoft-com:xml-msdata", col.AutoIncrementSeed.ToString(CultureInfo.InvariantCulture));
            }
            if (col.AutoIncrementStep != 1L)
            {
                root.SetAttribute("AutoIncrementStep", "urn:schemas-microsoft-com:xml-msdata", col.AutoIncrementStep.ToString(CultureInfo.InvariantCulture));
            }
            if (col.Caption != col.ColumnName)
            {
                root.SetAttribute("Caption", "urn:schemas-microsoft-com:xml-msdata", col.Caption);
            }
            if (col.Prefix.Length != 0)
            {
                root.SetAttribute("Prefix", "urn:schemas-microsoft-com:xml-msdata", col.Prefix);
            }
            if ((col.DataType == typeof(DateTime)) && (col.DateTimeMode != DataSetDateTime.UnspecifiedLocal))
            {
                root.SetAttribute("DateTimeMode", "urn:schemas-microsoft-com:xml-msdata", col.DateTimeMode.ToString());
            }
        }

        internal static void AddExtendedProperties(PropertyCollection props, XmlElement node)
        {
            AddExtendedProperties(props, node, null);
        }

        internal static void AddExtendedProperties(PropertyCollection props, XmlElement node, Type type)
        {
            if (props != null)
            {
                foreach (DictionaryEntry entry in props)
                {
                    string str;
                    string str2;
                    if (entry.Key is INullable)
                    {
                        str = (string) SqlConvert.ChangeTypeForXML(entry.Key, typeof(string));
                    }
                    else
                    {
                        str = Convert.ToString(entry.Key, CultureInfo.InvariantCulture);
                    }
                    if (entry.Value is INullable)
                    {
                        str2 = (string) SqlConvert.ChangeTypeForXML(entry.Value, typeof(string));
                    }
                    else
                    {
                        str2 = Convert.ToString(entry.Value, CultureInfo.InvariantCulture);
                    }
                    if (type == typeof(DataRelation))
                    {
                        str = "rel_" + str;
                    }
                    else if (type == typeof(ForeignKeyConstraint))
                    {
                        str = "fk_" + str;
                    }
                    node.SetAttribute(XmlConvert.EncodeLocalName(str), "urn:schemas-microsoft-com:xml-msprop", str2);
                }
            }
        }

        internal static void AddXdoProperties(object instance, XmlElement root, XmlDocument xd)
        {
            if (instance != null)
            {
                PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(instance);
                if (((instance is DataSet) || (instance is DataTable)) || ((instance is DataColumn) || (instance is DataRelation)))
                {
                    for (int i = 0; i < properties.Count; i++)
                    {
                        AddXdoProperty(properties[i], instance, root, xd);
                    }
                }
            }
        }

        internal static void AddXdoProperty(PropertyDescriptor pd, object instance, XmlElement root, XmlDocument xd)
        {
            Type propertyType = pd.PropertyType;
            bool flag3 = false;
            DataColumn column = null;
            bool isSqlType = false;
            bool implementsINullable = false;
            if (instance is DataColumn)
            {
                column = (DataColumn) instance;
                flag3 = true;
                isSqlType = column.IsSqlType;
                implementsINullable = column.ImplementsINullable;
            }
            if ((((implementsINullable || (propertyType == typeof(string))) || ((propertyType == typeof(bool)) || (propertyType == typeof(Type)))) || (((propertyType == typeof(object)) || (propertyType == typeof(CultureInfo))) || ((propertyType == typeof(long)) || (propertyType == typeof(int))))) && ((pd.ShouldSerializeValue(instance) && pd.Attributes.Contains(DesignerSerializationVisibilityAttribute.Visible)) || isSqlType))
            {
                object obj2 = pd.GetValue(instance);
                if ((!(obj2 is InternalDataCollectionBase) && !(obj2 is PropertyCollection)) && (((((string.Compare(pd.Name, "Namespace", StringComparison.Ordinal) != 0) && (string.Compare(pd.Name, "PrimaryKey", StringComparison.Ordinal) != 0)) && ((string.Compare(pd.Name, "ColumnName", StringComparison.Ordinal) != 0) && (string.Compare(pd.Name, "DefaultValue", StringComparison.Ordinal) != 0))) && (((string.Compare(pd.Name, "TableName", StringComparison.Ordinal) != 0) && (string.Compare(pd.Name, "DataSetName", StringComparison.Ordinal) != 0)) && ((string.Compare(pd.Name, "AllowDBNull", StringComparison.Ordinal) != 0) && (string.Compare(pd.Name, "Unique", StringComparison.Ordinal) != 0)))) && (((string.Compare(pd.Name, "NestedInDataSet", StringComparison.Ordinal) != 0) && (string.Compare(pd.Name, "Locale", StringComparison.Ordinal) != 0)) && ((string.Compare(pd.Name, "CaseSensitive", StringComparison.Ordinal) != 0) && (string.Compare(pd.Name, "RemotingFormat", StringComparison.Ordinal) != 0)))))
                {
                    if (flag3)
                    {
                        if (string.Compare(pd.Name, "DataType", StringComparison.Ordinal) == 0)
                        {
                            string str = XmlDataTypeName(column.DataType);
                            if (isSqlType)
                            {
                                root.SetAttribute("DataType", "urn:schemas-microsoft-com:xml-msdata", column.DataType.FullName);
                                return;
                            }
                            if ((((str.Length == 0) || implementsINullable) || ((str == "anyType") && (column.XmlDataType != "anyType"))) || (column.DataType == typeof(DateTimeOffset)))
                            {
                                root.SetAttribute("DataType", "urn:schemas-microsoft-com:xml-msdata", column.DataType.AssemblyQualifiedName);
                            }
                            return;
                        }
                        if (string.Compare(pd.Name, "Attribute", StringComparison.Ordinal) == 0)
                        {
                            return;
                        }
                    }
                    string str2 = pd.Converter.ConvertToString(obj2);
                    root.SetAttribute(pd.Name, "urn:schemas-microsoft-com:xml-msdata", str2);
                }
            }
        }

        internal void AppendChildWithoutRef(XmlElement node, string Namespace, XmlElement el, string refString)
        {
            XmlElement schema = this.GetSchema(Namespace);
            if (this.FindTypeNode(schema, el.GetAttribute("name")) == null)
            {
                schema.AppendChild(el);
            }
        }

        internal static bool AutoGenerated(DataColumn col)
        {
            if (col.ColumnMapping != MappingType.Hidden)
            {
                return false;
            }
            if (col.DataType != typeof(int))
            {
                return false;
            }
            string str = col.Table.TableName + "_Id";
            if ((col.ColumnName != str) && (col.ColumnName != (str + "_0")))
            {
                str = "";
                foreach (DataRelation relation in col.Table.ParentRelations)
                {
                    if ((relation.Nested && (relation.ChildColumnsReference.Length == 1)) && ((relation.ChildColumnsReference[0] == col) && (relation.ParentColumnsReference.Length == 1)))
                    {
                        str = relation.ParentColumnsReference[0].Table.TableName + "_Id";
                    }
                }
                if ((col.ColumnName != str) && (col.ColumnName != (str + "_0")))
                {
                    return false;
                }
            }
            return true;
        }

        internal static bool AutoGenerated(DataRelation rel)
        {
            string str = rel.ParentTable.TableName + "_" + rel.ChildTable.TableName;
            if (!rel.RelationName.StartsWith(str, StringComparison.Ordinal))
            {
                return false;
            }
            if (rel.ExtendedProperties.Count > 0)
            {
                return false;
            }
            return true;
        }

        private bool AutoGenerated(ForeignKeyConstraint fk) => 
            AutoGenerated(fk, true);

        internal static bool AutoGenerated(UniqueConstraint unique)
        {
            if (!unique.ConstraintName.StartsWith("Constraint", StringComparison.Ordinal))
            {
                return false;
            }
            if (unique.Key.ColumnsReference.Length != 1)
            {
                return false;
            }
            if (unique.ExtendedProperties.Count > 0)
            {
                return false;
            }
            return AutoGenerated(unique.Key.ColumnsReference[0]);
        }

        internal static bool AutoGenerated(ForeignKeyConstraint fk, bool checkRelation)
        {
            DataRelation rel = fk.FindParentRelation();
            if (checkRelation)
            {
                if (rel == null)
                {
                    return false;
                }
                if (!AutoGenerated(rel))
                {
                    return false;
                }
                if (rel.RelationName != fk.ConstraintName)
                {
                    return false;
                }
            }
            if (fk.ExtendedProperties.Count > 0)
            {
                return false;
            }
            if (fk.AcceptRejectRule != AcceptRejectRule.None)
            {
                return false;
            }
            if (fk.DeleteRule != Rule.Cascade)
            {
                return false;
            }
            if (fk.DeleteRule != Rule.Cascade)
            {
                return false;
            }
            if (fk.RelatedColumnsReference.Length != 1)
            {
                return false;
            }
            return AutoGenerated(fk.RelatedColumnsReference[0]);
        }

        private void CreateRelations(DataTable dt)
        {
            foreach (DataRelation relation in dt.ChildRelations)
            {
                if (!this._relations.Contains(relation))
                {
                    this._relations.Add(relation);
                    this.CreateRelations(relation.ChildTable);
                }
            }
        }

        private void CreateTablesHierarchy(DataTable dt)
        {
            foreach (DataRelation relation in dt.ChildRelations)
            {
                if (!this._tables.Contains(relation.ChildTable))
                {
                    this._tables.Add(relation.ChildTable);
                    this.CreateTablesHierarchy(relation.ChildTable);
                }
            }
        }

        private DataTable[] CreateToplevelTables()
        {
            ArrayList list = new ArrayList();
            for (int i = 0; i < this._tables.Count; i++)
            {
                DataTable table = (DataTable) this._tables[i];
                if (table.ParentRelations.Count == 0)
                {
                    list.Add(table);
                    continue;
                }
                bool flag = false;
                for (int j = 0; j < table.ParentRelations.Count; j++)
                {
                    if (table.ParentRelations[j].Nested)
                    {
                        if (table.ParentRelations[j].ParentTable == table)
                        {
                            flag = false;
                            break;
                        }
                        flag = true;
                    }
                }
                if (!flag)
                {
                    list.Add(table);
                }
            }
            if (list.Count == 0)
            {
                return new DataTable[0];
            }
            DataTable[] array = new DataTable[list.Count];
            list.CopyTo(array, 0);
            return array;
        }

        internal XmlElement FillDataSetElement(XmlDocument xd, DataSet ds, DataTable dt)
        {
            DataSet set = (ds != null) ? ds : dt.DataSet;
            if (set != null)
            {
                this.dsElement.SetAttribute("name", XmlConvert.EncodeLocalName(set.DataSetName));
                this.dsElement.SetAttribute("IsDataSet", "urn:schemas-microsoft-com:xml-msdata", "true");
                if (ds == null)
                {
                    this.dsElement.SetAttribute("MainDataTable", "urn:schemas-microsoft-com:xml-msdata", XmlConvert.EncodeLocalName((dt.Namespace.Length == 0) ? dt.TableName : (dt.Namespace + ":" + dt.TableName)));
                }
                if (set.CaseSensitive)
                {
                    this.dsElement.SetAttribute("CaseSensitive", "urn:schemas-microsoft-com:xml-msdata", "true");
                }
                if (set.ShouldSerializeLocale() || !set.Locale.Equals(CultureInfo.CurrentCulture))
                {
                    this.dsElement.SetAttribute("Locale", "urn:schemas-microsoft-com:xml-msdata", set.Locale.ToString());
                }
                else
                {
                    this.dsElement.SetAttribute("UseCurrentLocale", "urn:schemas-microsoft-com:xml-msdata", "true");
                }
            }
            else if (dt != null)
            {
                this.dsElement.SetAttribute("name", XmlConvert.EncodeLocalName("NewDataSet"));
                this.dsElement.SetAttribute("IsDataSet", "urn:schemas-microsoft-com:xml-msdata", "true");
                this.dsElement.SetAttribute("MainDataTable", "urn:schemas-microsoft-com:xml-msdata", XmlConvert.EncodeLocalName((dt.Namespace.Length == 0) ? dt.TableName : (dt.Namespace + ":" + dt.TableName)));
                if (dt.CaseSensitive)
                {
                    this.dsElement.SetAttribute("CaseSensitive", "urn:schemas-microsoft-com:xml-msdata", "true");
                }
                if (dt.ShouldSerializeLocale() || !dt.Locale.Equals(CultureInfo.CurrentCulture))
                {
                    this.dsElement.SetAttribute("Locale", "urn:schemas-microsoft-com:xml-msdata", dt.Locale.ToString());
                }
                else
                {
                    this.dsElement.SetAttribute("UseCurrentLocale", "urn:schemas-microsoft-com:xml-msdata", "true");
                }
            }
            XmlElement newChild = xd.CreateElement("xs", "complexType", "http://www.w3.org/2001/XMLSchema");
            this.dsElement.AppendChild(newChild);
            XmlElement element = xd.CreateElement("xs", "choice", "http://www.w3.org/2001/XMLSchema");
            element.SetAttribute("minOccurs", "0");
            element.SetAttribute("maxOccurs", "unbounded");
            newChild.AppendChild(element);
            return element;
        }

        private static XmlElement FindSimpleType(XmlElement schema, string name)
        {
            for (XmlNode node = schema.FirstChild; node != null; node = node.NextSibling)
            {
                if (node is XmlElement)
                {
                    XmlElement element = (XmlElement) node;
                    if (element.GetAttribute("name") == name)
                    {
                        return element;
                    }
                }
            }
            return null;
        }

        private string FindTargetNamespace(DataTable table)
        {
            string str = table.TypeName.IsEmpty ? table.Namespace : table.TypeName.Namespace;
            if (!ADP.IsEmpty(str))
            {
                return str;
            }
            DataRelation[] nestedParentRelations = table.NestedParentRelations;
            if (nestedParentRelations.Length != 0)
            {
                for (int i = 0; i < nestedParentRelations.Length; i++)
                {
                    DataTable parentTable = nestedParentRelations[i].ParentTable;
                    if (table != parentTable)
                    {
                        str = this.FindTargetNamespace(parentTable);
                        if (!ADP.IsEmpty(str))
                        {
                            return str;
                        }
                    }
                }
                return str;
            }
            return this._ds.Namespace;
        }

        internal XmlElement FindTypeNode(XmlElement node, string strType)
        {
            if (node != null)
            {
                for (XmlNode node2 = node.FirstChild; node2 != null; node2 = node2.NextSibling)
                {
                    if (node2 is XmlElement)
                    {
                        XmlElement element = (XmlElement) node2;
                        if (((XMLSchema.FEqualIdentity(element, "element", "http://www.w3.org/2001/XMLSchema") || XMLSchema.FEqualIdentity(element, "attribute", "http://www.w3.org/2001/XMLSchema")) || (XMLSchema.FEqualIdentity(element, "complexType", "http://www.w3.org/2001/XMLSchema") || XMLSchema.FEqualIdentity(element, "simpleType", "http://www.w3.org/2001/XMLSchema"))) && (element.GetAttribute("name") == strType))
                        {
                            return element;
                        }
                    }
                }
            }
            return null;
        }

        private void GenerateConstraintNames(ArrayList tables)
        {
            for (int i = 0; i < tables.Count; i++)
            {
                this.GenerateConstraintNames((DataTable) tables[i], true);
            }
        }

        private void GenerateConstraintNames(DataSet ds)
        {
            foreach (DataTable table in ds.Tables)
            {
                this.GenerateConstraintNames(table, false);
            }
        }

        private void GenerateConstraintNames(DataTable table, bool fromTable)
        {
            StringBuilder builder = null;
            foreach (Constraint constraint in table.Constraints)
            {
                if ((!fromTable || !(constraint is ForeignKeyConstraint)) || this._tables.Contains(((ForeignKeyConstraint) constraint).RelatedTable))
                {
                    int num = 0;
                    string constraintName = constraint.ConstraintName;
                    while (this.ConstraintNames.Contains(constraintName))
                    {
                        if (builder == null)
                        {
                            builder = new StringBuilder();
                        }
                        builder.Append(table.TableName).Append('_').Append(constraint.ConstraintName);
                        if (0 < num)
                        {
                            builder.Append('_').Append(num);
                        }
                        num++;
                        constraintName = builder.ToString();
                        builder.Length = 0;
                    }
                    this.ConstraintNames.Add(constraintName);
                    constraint.SchemaName = constraintName;
                }
            }
        }

        internal XmlElement GetSchema(string NamespaceURI)
        {
            XmlElement rootSchema = (XmlElement) this.namespaces[NamespaceURI];
            if (rootSchema == null)
            {
                rootSchema = this._dc.CreateElement("xs", "schema", "http://www.w3.org/2001/XMLSchema");
                this.WriteSchemaRoot(this._dc, rootSchema, NamespaceURI);
                if (!ADP.IsEmpty(NamespaceURI))
                {
                    string str = "app" + Convert.ToString(++this.prefixCount, CultureInfo.InvariantCulture);
                    this._sRoot.SetAttribute("xmlns:" + str, NamespaceURI);
                    rootSchema.SetAttribute("xmlns:" + str, NamespaceURI);
                    this.prefixes[NamespaceURI] = str;
                }
                this.namespaces[NamespaceURI] = rootSchema;
            }
            return rootSchema;
        }

        internal XmlElement HandleColumn(DataColumn col, XmlDocument dc, XmlElement schema, bool fWriteOrdinal)
        {
            string localName = (col.ColumnMapping != MappingType.Element) ? "attribute" : "element";
            XmlElement root = dc.CreateElement("xs", localName, "http://www.w3.org/2001/XMLSchema");
            root.SetAttribute("name", col.EncodedColumnName);
            if (col.Namespace.Length == 0)
            {
                DataTable table = col.Table;
                string str2 = this.FindTargetNamespace(table);
                if (col.Namespace != str2)
                {
                    root.SetAttribute("form", "unqualified");
                }
            }
            if (col.GetType() != typeof(DataColumn))
            {
                AddXdoProperties(col, root, dc);
            }
            else
            {
                this.AddColumnProperties(col, root);
            }
            AddExtendedProperties(col.extendedProperties, root);
            this.HandleColumnType(col, dc, root, schema);
            if (col.ColumnMapping == MappingType.Hidden)
            {
                if (!col.AllowDBNull)
                {
                    root.SetAttribute("AllowDBNull", "urn:schemas-microsoft-com:xml-msdata", "false");
                }
                if (!col.DefaultValueIsNull)
                {
                    if (col.DataType == typeof(bool))
                    {
                        root.SetAttribute("DefaultValue", "urn:schemas-microsoft-com:xml-msdata", ((bool) col.DefaultValue) ? "true" : "false");
                    }
                    else
                    {
                        ValidateColumnMapping(col.DataType);
                        root.SetAttribute("DefaultValue", "urn:schemas-microsoft-com:xml-msdata", col.ConvertObjectToXml(col.DefaultValue));
                    }
                }
            }
            if (!col.DefaultValueIsNull && (col.ColumnMapping != MappingType.Hidden))
            {
                ValidateColumnMapping(col.DataType);
                if ((col.ColumnMapping == MappingType.Attribute) && !col.AllowDBNull)
                {
                    if (col.DataType == typeof(bool))
                    {
                        root.SetAttribute("DefaultValue", "urn:schemas-microsoft-com:xml-msdata", ((bool) col.DefaultValue) ? "true" : "false");
                    }
                    else
                    {
                        root.SetAttribute("DefaultValue", "urn:schemas-microsoft-com:xml-msdata", col.ConvertObjectToXml(col.DefaultValue));
                    }
                }
                else if (col.DataType == typeof(bool))
                {
                    root.SetAttribute("default", ((bool) col.DefaultValue) ? "true" : "false");
                }
                else if (!col.IsCustomType)
                {
                    root.SetAttribute("default", col.ConvertObjectToXml(col.DefaultValue));
                }
            }
            if (this.schFormat == SchemaFormat.Remoting)
            {
                root.SetAttribute("targetNamespace", "urn:schemas-microsoft-com:xml-msdata", col.Namespace);
            }
            else if ((col.Namespace != (col.Table.TypeName.IsEmpty ? col.Table.Namespace : col.Table.TypeName.Namespace)) && (col.Namespace.Length != 0))
            {
                XmlElement node = this.GetSchema(col.Namespace);
                if (this.FindTypeNode(node, col.EncodedColumnName) == null)
                {
                    node.AppendChild(root);
                }
                root = this._dc.CreateElement("xs", localName, "http://www.w3.org/2001/XMLSchema");
                root.SetAttribute("ref", this.prefixes[col.Namespace] + ":" + col.EncodedColumnName);
                if (col.Table.Namespace != this._ds.Namespace)
                {
                    string text1 = (string) this.prefixes[col.Namespace];
                    this.GetSchema(col.Table.Namespace);
                }
            }
            int num = col.AllowDBNull ? 0 : 1;
            if ((col.ColumnMapping == MappingType.Attribute) && (num != 0))
            {
                root.SetAttribute("use", "required");
            }
            if (col.ColumnMapping == MappingType.Hidden)
            {
                root.SetAttribute("use", "prohibited");
            }
            else if ((col.ColumnMapping != MappingType.Attribute) && (num != 1))
            {
                root.SetAttribute("minOccurs", num.ToString(CultureInfo.InvariantCulture));
            }
            if ((col.ColumnMapping == MappingType.Element) && fWriteOrdinal)
            {
                root.SetAttribute("Ordinal", "urn:schemas-microsoft-com:xml-msdata", col.Ordinal.ToString(CultureInfo.InvariantCulture));
            }
            return root;
        }

        internal void HandleColumnType(DataColumn col, XmlDocument dc, XmlElement root, XmlElement schema)
        {
            string name = "type";
            if (col.ColumnMapping == MappingType.SimpleContent)
            {
                name = "base";
            }
            if (col.SimpleType != null)
            {
                for (SimpleType type = col.SimpleType; type != null; type = type.BaseSimpleType)
                {
                    XmlNode node;
                    string str = type.Name;
                    if ((str != null) && (str.Length != 0))
                    {
                        string namespaceURI = (this.schFormat != SchemaFormat.Remoting) ? type.Namespace : ((col.Table.DataSet != null) ? col.Table.DataSet.Namespace : col.Table.Namespace);
                        XmlElement element = this.GetSchema(namespaceURI);
                        if (((type.BaseSimpleType != null) && (type.BaseSimpleType.Namespace != null)) && (type.BaseSimpleType.Namespace.Length > 0))
                        {
                            this.GetSchema(type.BaseSimpleType.Namespace);
                        }
                        node = type.ToNode(dc, this.prefixes, this.schFormat == SchemaFormat.Remoting);
                        if (type == col.SimpleType)
                        {
                            string str4 = (string) this.prefixes[namespaceURI];
                            if ((str4 != null) && (str4.Length > 0))
                            {
                                if (this.schFormat != SchemaFormat.Remoting)
                                {
                                    root.SetAttribute(name, str4 + ":" + str);
                                }
                                else
                                {
                                    root.SetAttribute(name, str);
                                }
                            }
                            else
                            {
                                root.SetAttribute(name, str);
                            }
                        }
                        if (FindSimpleType(element, str) == null)
                        {
                            element.AppendChild(node);
                        }
                    }
                    else
                    {
                        if (((type.BaseSimpleType != null) && (type.BaseSimpleType.Namespace != null)) && (type.BaseSimpleType.Namespace.Length > 0))
                        {
                            this.GetSchema(type.BaseSimpleType.Namespace);
                        }
                        node = type.ToNode(dc, this.prefixes, this.schFormat == SchemaFormat.Remoting);
                        root.AppendChild(node);
                    }
                }
            }
            else if (((col.XmlDataType != null) && (col.XmlDataType.Length != 0)) && XSDSchema.IsXsdType(col.XmlDataType))
            {
                root.SetAttribute(name, XSDSchema.QualifiedName(col.XmlDataType));
            }
            else
            {
                string str3 = XmlDataTypeName(col.DataType);
                if ((str3 == null) || (str3.Length == 0))
                {
                    if ((col.DataType == typeof(Guid)) || (col.DataType == typeof(Type)))
                    {
                        str3 = "string";
                    }
                    else
                    {
                        if (col.ColumnMapping == MappingType.Attribute)
                        {
                            ValidateColumnMapping(col.DataType);
                        }
                        str3 = "anyType";
                    }
                }
                root.SetAttribute(name, XSDSchema.QualifiedName(str3));
            }
        }

        internal XmlElement HandleRelation(DataRelation rel, XmlDocument dc)
        {
            XmlElement node = dc.CreateElement("msdata", "Relationship", "urn:schemas-microsoft-com:xml-msdata");
            node.SetAttribute("name", XmlConvert.EncodeLocalName(rel.RelationName));
            node.SetAttribute("parent", "urn:schemas-microsoft-com:xml-msdata", rel.ParentKey.Table.EncodedTableName);
            node.SetAttribute("child", "urn:schemas-microsoft-com:xml-msdata", rel.ChildKey.Table.EncodedTableName);
            if ((this._ds == null) || (this._ds.Tables.InternalIndexOf(rel.ParentKey.Table.TableName) == -3))
            {
                node.SetAttribute("ParentTableNamespace", "urn:schemas-microsoft-com:xml-msdata", rel.ParentKey.Table.Namespace);
            }
            if ((this._ds == null) || (this._ds.Tables.InternalIndexOf(rel.ChildKey.Table.TableName) == -3))
            {
                node.SetAttribute("ChildTableNamespace", "urn:schemas-microsoft-com:xml-msdata", rel.ChildKey.Table.Namespace);
            }
            DataColumn[] columnsReference = rel.ParentKey.ColumnsReference;
            string encodedColumnName = columnsReference[0].EncodedColumnName;
            StringBuilder builder = null;
            if (1 < columnsReference.Length)
            {
                builder = new StringBuilder();
                builder.Append(encodedColumnName);
                for (int i = 1; i < columnsReference.Length; i++)
                {
                    builder.Append(' ').Append(columnsReference[i].EncodedColumnName);
                }
                encodedColumnName = builder.ToString();
            }
            node.SetAttribute("parentkey", "urn:schemas-microsoft-com:xml-msdata", encodedColumnName);
            columnsReference = rel.ChildKey.ColumnsReference;
            encodedColumnName = columnsReference[0].EncodedColumnName;
            if (1 < columnsReference.Length)
            {
                if (builder != null)
                {
                    builder.Length = 0;
                }
                else
                {
                    builder = new StringBuilder();
                }
                builder.Append(encodedColumnName);
                for (int j = 1; j < columnsReference.Length; j++)
                {
                    builder.Append(' ').Append(columnsReference[j].EncodedColumnName);
                }
                encodedColumnName = builder.ToString();
            }
            node.SetAttribute("childkey", "urn:schemas-microsoft-com:xml-msdata", encodedColumnName);
            AddExtendedProperties(rel.extendedProperties, node);
            return node;
        }

        internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema) => 
            this.HandleTable(table, dc, schema, true);

        internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema, bool genNested)
        {
            XmlElement root = dc.CreateElement("xs", "element", "http://www.w3.org/2001/XMLSchema");
            bool fWriteOrdinal = false;
            bool flag = false;
            if (((table.DataSet == null) || ((this._ds != null) && (table.Namespace != this._ds.Namespace))) && (this.schFormat == SchemaFormat.Remoting))
            {
                root.SetAttribute("targetNamespace", "urn:schemas-microsoft-com:xml-msdata", table.Namespace);
            }
            root.SetAttribute("name", table.EncodedTableName);
            if (table.Namespace.Length == 0)
            {
                DataTable parentTable = table;
                string str3 = parentTable.Namespace;
                while (ADP.IsEmpty(str3))
                {
                    DataRelation[] nestedParentRelations = parentTable.NestedParentRelations;
                    if (nestedParentRelations.Length == 0)
                    {
                        str3 = (this._ds != null) ? this._ds.Namespace : "";
                        break;
                    }
                    int index = -1;
                    for (int k = 0; k < nestedParentRelations.Length; k++)
                    {
                        if (nestedParentRelations[k].ParentTable != parentTable)
                        {
                            index = k;
                            break;
                        }
                    }
                    if (index == -1)
                    {
                        break;
                    }
                    parentTable = nestedParentRelations[index].ParentTable;
                    str3 = parentTable.Namespace;
                }
                if (table.Namespace != str3)
                {
                    root.SetAttribute("form", "unqualified");
                    flag = true;
                }
            }
            if (table.ShouldSerializeCaseSensitive())
            {
                root.SetAttribute("CaseSensitive", "urn:schemas-microsoft-com:xml-msdata", table.CaseSensitive.ToString(CultureInfo.InvariantCulture));
            }
            if (table.ShouldSerializeLocale())
            {
                root.SetAttribute("Locale", "urn:schemas-microsoft-com:xml-msdata", table.Locale.ToString());
            }
            AddXdoProperties(table, root, dc);
            DataColumnCollection columns = table.Columns;
            int count = columns.Count;
            int num7 = 0;
            switch (count)
            {
                case 1:
                case 2:
                    for (int m = 0; m < count; m++)
                    {
                        DataColumn column3 = columns[m];
                        if (column3.ColumnMapping == MappingType.Hidden)
                        {
                            DataRelationCollection childRelations = table.ChildRelations;
                            for (int n = 0; n < childRelations.Count; n++)
                            {
                                if ((childRelations[n].Nested && (childRelations[n].ParentKey.ColumnsReference.Length == 1)) && (childRelations[n].ParentKey.ColumnsReference[0] == column3))
                                {
                                    num7++;
                                }
                            }
                        }
                        if (column3.ColumnMapping == MappingType.Element)
                        {
                            num7++;
                        }
                    }
                    break;
            }
            if (table.repeatableElement && (num7 == 1))
            {
                DataColumn column4 = table.Columns[0];
                string name = XmlDataTypeName(column4.DataType);
                if ((name == null) || (name.Length == 0))
                {
                    name = "anyType";
                }
                root.SetAttribute("type", XSDSchema.QualifiedName(name));
                return root;
            }
            XmlElement newChild = dc.CreateElement("xs", "complexType", "http://www.w3.org/2001/XMLSchema");
            if (!table.TypeName.IsEmpty && (this.schFormat != SchemaFormat.Remoting))
            {
                XmlElement node = this.GetSchema(table.TypeName.Namespace);
                if (ADP.IsEmpty(table.TypeName.Namespace))
                {
                    if (this._ds == null)
                    {
                        node = this.GetSchema(table.Namespace);
                    }
                    else
                    {
                        node = flag ? this.GetSchema(this._ds.Namespace) : this.GetSchema(table.Namespace);
                    }
                }
                if (this.FindTypeNode(node, table.TypeName.Name) == null)
                {
                    node.AppendChild(newChild);
                }
                newChild.SetAttribute("name", table.TypeName.Name);
            }
            else
            {
                root.AppendChild(newChild);
            }
            if (!table.TypeName.IsEmpty && (this.schFormat != SchemaFormat.Remoting))
            {
                root.SetAttribute("type", NewDiffgramGen.QualifiedName((string) this.prefixes[table.TypeName.Namespace], table.TypeName.Name));
            }
            XmlElement element7 = null;
            DataColumn xmlText = table.XmlText;
            if (xmlText != null)
            {
                XmlElement element6 = dc.CreateElement("xs", "simpleContent", "http://www.w3.org/2001/XMLSchema");
                if (xmlText.GetType() != typeof(DataColumn))
                {
                    AddXdoProperties(xmlText, element6, dc);
                }
                else
                {
                    this.AddColumnProperties(xmlText, element6);
                }
                AddExtendedProperties(xmlText.extendedProperties, element6);
                if (xmlText.AllowDBNull)
                {
                    root.SetAttribute("nillable", string.Empty, "true");
                }
                if (!xmlText.DefaultValueIsNull)
                {
                    ValidateColumnMapping(xmlText.DataType);
                    element6.SetAttribute("DefaultValue", "urn:schemas-microsoft-com:xml-msdata", xmlText.ConvertObjectToXml(xmlText.DefaultValue));
                }
                element6.SetAttribute("ColumnName", "urn:schemas-microsoft-com:xml-msdata", xmlText.ColumnName);
                element6.SetAttribute("Ordinal", "urn:schemas-microsoft-com:xml-msdata", xmlText.Ordinal.ToString(CultureInfo.InvariantCulture));
                newChild.AppendChild(element6);
                XmlElement element10 = dc.CreateElement("xs", "extension", "http://www.w3.org/2001/XMLSchema");
                element6.AppendChild(element10);
                this.HandleColumnType(xmlText, dc, element10, schema);
                newChild = element10;
            }
            element7 = dc.CreateElement("xs", "sequence", "http://www.w3.org/2001/XMLSchema");
            newChild.AppendChild(element7);
            fWriteOrdinal = this.HasMixedColumns(table);
            for (int i = 0; i < count; i++)
            {
                DataColumn o = columns[i];
                if (((o.ColumnMapping != MappingType.SimpleContent) && (((o.ColumnMapping == MappingType.Attribute) || (o.ColumnMapping == MappingType.Element)) || (o.ColumnMapping == MappingType.Hidden))) && !this.IsAutoGenerated(o))
                {
                    bool flag3 = o.ColumnMapping != MappingType.Element;
                    XmlElement element14 = this.HandleColumn(o, dc, schema, fWriteOrdinal);
                    (flag3 ? newChild : element7).AppendChild(element14);
                }
            }
            if ((table.XmlText == null) && genNested)
            {
                DataRelationCollection relations = table.ChildRelations;
                for (int num5 = 0; num5 < relations.Count; num5++)
                {
                    if (relations[num5].Nested)
                    {
                        XmlElement element3;
                        DataTable childTable = relations[num5].ChildTable;
                        if (childTable == table)
                        {
                            element3 = dc.CreateElement("xs", "element", "http://www.w3.org/2001/XMLSchema");
                            element3.SetAttribute("ref", table.EncodedTableName);
                        }
                        else if (childTable.NestedParentsCount > 1)
                        {
                            element3 = dc.CreateElement("xs", "element", "http://www.w3.org/2001/XMLSchema");
                            element3.SetAttribute("ref", childTable.EncodedTableName);
                        }
                        else
                        {
                            element3 = this.HandleTable(childTable, dc, schema);
                        }
                        if (childTable.Namespace == table.Namespace)
                        {
                            element3.SetAttribute("minOccurs", "0");
                            element3.SetAttribute("maxOccurs", "unbounded");
                        }
                        if (((childTable.Namespace == table.Namespace) || (childTable.Namespace.Length == 0)) || (this.schFormat == SchemaFormat.Remoting))
                        {
                            element7.AppendChild(element3);
                        }
                        else
                        {
                            if (childTable.NestedParentsCount <= 1)
                            {
                                this.GetSchema(childTable.Namespace).AppendChild(element3);
                            }
                            element3 = dc.CreateElement("xs", "element", "http://www.w3.org/2001/XMLSchema");
                            element3.SetAttribute("ref", ((string) this.prefixes[childTable.Namespace]) + ':' + childTable.EncodedTableName);
                            element7.AppendChild(element3);
                        }
                        if (relations[num5].ChildKeyConstraint == null)
                        {
                            XmlElement element12 = this._dc.CreateElement("xs", "annotation", "http://www.w3.org/2001/XMLSchema");
                            element3.PrependChild(element12);
                            XmlElement element11 = this._dc.CreateElement("xs", "appinfo", "http://www.w3.org/2001/XMLSchema");
                            element12.AppendChild(element11);
                            element11.AppendChild(this.HandleRelation(relations[num5], dc));
                        }
                    }
                }
            }
            if ((element7 != null) && !element7.HasChildNodes)
            {
                newChild.RemoveChild(element7);
            }
            ConstraintCollection constraints = table.Constraints;
            string str = (this._ds != null) ? ((this._ds.Namespace.Length != 0) ? "mstns:" : string.Empty) : string.Empty;
            if (this.schFormat != SchemaFormat.Remoting)
            {
                this.GetSchema(table.Namespace);
                str = (table.Namespace.Length != 0) ? (((string) this.prefixes[table.Namespace]) + ':') : string.Empty;
            }
            for (int j = 0; j < constraints.Count; j++)
            {
                DataColumn[] columnsReference;
                XmlElement element4;
                XmlElement element5;
                XmlElement element = null;
                if (constraints[j] is UniqueConstraint)
                {
                    UniqueConstraint constraint2 = (UniqueConstraint) constraints[j];
                    if (!this.IsAutoGenerated(constraint2))
                    {
                        columnsReference = constraint2.Key.ColumnsReference;
                        element = dc.CreateElement("xs", "unique", "http://www.w3.org/2001/XMLSchema");
                        if ((this._ds == null) || (this._ds.Tables.InternalIndexOf(table.TableName) == -3))
                        {
                            element.SetAttribute("TableNamespace", "urn:schemas-microsoft-com:xml-msdata", table.Namespace);
                        }
                        element.SetAttribute("name", XmlConvert.EncodeLocalName(constraint2.SchemaName));
                        if (constraint2.ConstraintName != constraint2.SchemaName)
                        {
                            element.SetAttribute("ConstraintName", "urn:schemas-microsoft-com:xml-msdata", constraint2.ConstraintName);
                        }
                        AddExtendedProperties(constraint2.extendedProperties, element);
                        element5 = dc.CreateElement("xs", "selector", "http://www.w3.org/2001/XMLSchema");
                        element5.SetAttribute("xpath", ".//" + str + table.EncodedTableName);
                        element.AppendChild(element5);
                        if (constraint2.IsPrimaryKey)
                        {
                            element.SetAttribute("PrimaryKey", "urn:schemas-microsoft-com:xml-msdata", "true");
                        }
                        if (0 < columnsReference.Length)
                        {
                            StringBuilder builder3 = new StringBuilder();
                            for (int num3 = 0; num3 < columnsReference.Length; num3++)
                            {
                                builder3.Length = 0;
                                if (this.schFormat != SchemaFormat.Remoting)
                                {
                                    this.GetSchema(columnsReference[num3].Namespace);
                                    if (!ADP.IsEmpty(columnsReference[num3].Namespace))
                                    {
                                        builder3.Append(this.prefixes[columnsReference[num3].Namespace]).Append(':');
                                    }
                                    builder3.Append(columnsReference[num3].EncodedColumnName);
                                }
                                else
                                {
                                    builder3.Append(str).Append(columnsReference[num3].EncodedColumnName);
                                }
                                if ((columnsReference[num3].ColumnMapping == MappingType.Attribute) || (columnsReference[num3].ColumnMapping == MappingType.Hidden))
                                {
                                    builder3.Insert(0, '@');
                                }
                                element4 = dc.CreateElement("xs", "field", "http://www.w3.org/2001/XMLSchema");
                                element4.SetAttribute("xpath", builder3.ToString());
                                element.AppendChild(element4);
                            }
                        }
                        this.dsElement.InsertBefore(element, this.constraintSeparator);
                    }
                }
                else if ((constraints[j] is ForeignKeyConstraint) && genNested)
                {
                    ForeignKeyConstraint constraint = (ForeignKeyConstraint) constraints[j];
                    if (((this._tables.Count <= 0) || (this._tables.Contains(constraint.RelatedTable) && this._tables.Contains(constraint.Table))) && !this.IsAutoGenerated(constraint))
                    {
                        DataRelation relation = constraint.FindParentRelation();
                        columnsReference = constraint.RelatedColumnsReference;
                        UniqueConstraint constraint3 = (UniqueConstraint) constraint.RelatedTable.Constraints.FindConstraint(new UniqueConstraint("TEMP", columnsReference));
                        if (constraint3 == null)
                        {
                            element = dc.CreateElement("xs", "key", "http://www.w3.org/2001/XMLSchema");
                            element.SetAttribute("name", XmlConvert.EncodeLocalName(constraint.SchemaName));
                            if ((this._ds == null) || (this._ds.Tables.InternalIndexOf(table.TableName) == -3))
                            {
                                element.SetAttribute("TableNamespace", "urn:schemas-microsoft-com:xml-msdata", table.Namespace);
                            }
                            element5 = dc.CreateElement("xs", "selector", "http://www.w3.org/2001/XMLSchema");
                            element5.SetAttribute("xpath", ".//" + str + constraint.RelatedTable.EncodedTableName);
                            element.AppendChild(element5);
                            if (0 < columnsReference.Length)
                            {
                                StringBuilder builder2 = new StringBuilder();
                                for (int num2 = 0; num2 < columnsReference.Length; num2++)
                                {
                                    builder2.Length = 0;
                                    if (this.schFormat != SchemaFormat.Remoting)
                                    {
                                        this.GetSchema(columnsReference[num2].Namespace);
                                        if (!ADP.IsEmpty(columnsReference[num2].Namespace))
                                        {
                                            builder2.Append(this.prefixes[columnsReference[num2].Namespace]).Append(':');
                                        }
                                        builder2.Append(columnsReference[num2].EncodedColumnName);
                                    }
                                    else
                                    {
                                        builder2.Append(str).Append(columnsReference[num2].EncodedColumnName);
                                    }
                                    if ((columnsReference[num2].ColumnMapping == MappingType.Attribute) || (columnsReference[num2].ColumnMapping == MappingType.Hidden))
                                    {
                                        builder2.Insert(0, '@');
                                    }
                                    element4 = dc.CreateElement("xs", "field", "http://www.w3.org/2001/XMLSchema");
                                    element4.SetAttribute("xpath", builder2.ToString());
                                    element.AppendChild(element4);
                                }
                            }
                            this.dsElement.InsertBefore(element, this.constraintSeparator);
                        }
                        element = dc.CreateElement("xs", "keyref", "http://www.w3.org/2001/XMLSchema");
                        element.SetAttribute("name", XmlConvert.EncodeLocalName(constraint.SchemaName));
                        if ((this._ds == null) || (this._ds.Tables.InternalIndexOf(constraint.RelatedTable.TableName) == -3))
                        {
                            element.SetAttribute("TableNamespace", "urn:schemas-microsoft-com:xml-msdata", constraint.Table.Namespace);
                        }
                        if (constraint3 == null)
                        {
                            element.SetAttribute("refer", XmlConvert.EncodeLocalName(constraint.SchemaName));
                        }
                        else
                        {
                            element.SetAttribute("refer", XmlConvert.EncodeLocalName(constraint3.SchemaName));
                        }
                        AddExtendedProperties(constraint.extendedProperties, element, typeof(ForeignKeyConstraint));
                        if (constraint.ConstraintName != constraint.SchemaName)
                        {
                            element.SetAttribute("ConstraintName", "urn:schemas-microsoft-com:xml-msdata", constraint.ConstraintName);
                        }
                        if (relation == null)
                        {
                            element.SetAttribute("ConstraintOnly", "urn:schemas-microsoft-com:xml-msdata", "true");
                        }
                        else
                        {
                            if (relation.Nested)
                            {
                                element.SetAttribute("IsNested", "urn:schemas-microsoft-com:xml-msdata", "true");
                            }
                            AddExtendedProperties(relation.extendedProperties, element, typeof(DataRelation));
                            if (constraint.ConstraintName != relation.RelationName)
                            {
                                element.SetAttribute("RelationName", "urn:schemas-microsoft-com:xml-msdata", XmlConvert.EncodeLocalName(relation.RelationName));
                            }
                        }
                        element5 = dc.CreateElement("xs", "selector", "http://www.w3.org/2001/XMLSchema");
                        element5.SetAttribute("xpath", ".//" + str + table.EncodedTableName);
                        element.AppendChild(element5);
                        if (constraint.AcceptRejectRule != AcceptRejectRule.None)
                        {
                            element.SetAttribute("AcceptRejectRule", "urn:schemas-microsoft-com:xml-msdata", TranslateAcceptRejectRule(constraint.AcceptRejectRule));
                        }
                        if (constraint.UpdateRule != Rule.Cascade)
                        {
                            element.SetAttribute("UpdateRule", "urn:schemas-microsoft-com:xml-msdata", TranslateRule(constraint.UpdateRule));
                        }
                        if (constraint.DeleteRule != Rule.Cascade)
                        {
                            element.SetAttribute("DeleteRule", "urn:schemas-microsoft-com:xml-msdata", TranslateRule(constraint.DeleteRule));
                        }
                        columnsReference = constraint.Columns;
                        if (0 < columnsReference.Length)
                        {
                            StringBuilder builder = new StringBuilder();
                            for (int num = 0; num < columnsReference.Length; num++)
                            {
                                builder.Length = 0;
                                if (this.schFormat != SchemaFormat.Remoting)
                                {
                                    this.GetSchema(columnsReference[num].Namespace);
                                    if (!ADP.IsEmpty(columnsReference[num].Namespace))
                                    {
                                        builder.Append(this.prefixes[columnsReference[num].Namespace]).Append(':');
                                    }
                                    builder.Append(columnsReference[num].EncodedColumnName);
                                }
                                else
                                {
                                    builder.Append(str).Append(columnsReference[num].EncodedColumnName);
                                }
                                if ((columnsReference[num].ColumnMapping == MappingType.Attribute) || (columnsReference[num].ColumnMapping == MappingType.Hidden))
                                {
                                    builder.Insert(0, '@');
                                }
                                element4 = dc.CreateElement("xs", "field", "http://www.w3.org/2001/XMLSchema");
                                element4.SetAttribute("xpath", builder.ToString());
                                element.AppendChild(element4);
                            }
                        }
                        this.dsElement.InsertAfter(element, this.constraintSeparator);
                    }
                }
            }
            AddExtendedProperties(table.extendedProperties, root);
            return root;
        }

        private bool HasMixedColumns(DataTable table)
        {
            bool flag2 = false;
            bool flag = false;
            foreach (DataColumn column in table.Columns)
            {
                if (!flag && (column.ColumnMapping == MappingType.Element))
                {
                    flag = true;
                }
                if (!flag2 && ((column.ColumnMapping == MappingType.Attribute) || (column.ColumnMapping == MappingType.Hidden)))
                {
                    flag2 = !AutoGenerated(column);
                }
                if (flag2 && flag)
                {
                    return true;
                }
            }
            return false;
        }

        private bool HaveExtendedProperties(DataSet ds)
        {
            if (_PropsNotEmpty(ds.extendedProperties))
            {
                return true;
            }
            for (int i = 0; i < ds.Tables.Count; i++)
            {
                DataTable table = ds.Tables[i];
                if (_PropsNotEmpty(table.extendedProperties))
                {
                    return true;
                }
                for (int k = 0; k < table.Columns.Count; k++)
                {
                    if (_PropsNotEmpty(table.Columns[k].extendedProperties))
                    {
                        return true;
                    }
                }
            }
            for (int j = 0; j < ds.Relations.Count; j++)
            {
                if (_PropsNotEmpty(ds.Relations[j].extendedProperties))
                {
                    return true;
                }
            }
            return false;
        }

        private bool IsAutoGenerated(object o) => 
            ((this.schFormat != SchemaFormat.Remoting) && (this.autogenerated[o] != null));

        internal void Save(DataSet ds, XmlWriter xw)
        {
            this.Save(ds, null, xw);
        }

        internal void Save(DataTable dt, XmlWriter xw)
        {
            XmlDocument xd = new XmlDocument();
            if (this.schFormat == SchemaFormat.Public)
            {
                this.SetPath(xw);
            }
            XmlElement newChild = this.SchemaTree(xd, dt);
            xd.AppendChild(newChild);
            xd.Save(xw);
        }

        internal void Save(DataSet ds, DataTable dt, XmlWriter xw)
        {
            this.Save(ds, dt, xw, false);
        }

        internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy)
        {
            XmlDocument xd = new XmlDocument();
            if (this.schFormat == SchemaFormat.Public)
            {
                this.SetPath(xw);
            }
            if ((this.schFormat == SchemaFormat.WebServiceSkipSchema) && (xw.WriteState == WriteState.Element))
            {
                xw.WriteAttributeString("msdata", "SchemaSerializationMode", "urn:schemas-microsoft-com:xml-msdata", "ExcludeSchema");
            }
            this.SchemaTree(xd, xw, ds, dt, writeHierarchy);
        }

        internal XmlElement SchemaTree(XmlDocument xd, DataTable dt)
        {
            this.dsElement = xd.CreateElement("xs", "element", "http://www.w3.org/2001/XMLSchema");
            this.ConstraintNames = new ArrayList();
            this._ds = dt.DataSet;
            this._dc = xd;
            this.namespaces = new Hashtable();
            this.prefixes = new Hashtable();
            if (this.schFormat != SchemaFormat.Remoting)
            {
                this.autogenerated = new Hashtable();
            }
            XmlElement rootSchema = xd.CreateElement("xs", "schema", "http://www.w3.org/2001/XMLSchema");
            this._sRoot = rootSchema;
            this.WriteSchemaRoot(xd, rootSchema, dt.Namespace);
            this.FillDataSetElement(xd, null, dt);
            this.constraintSeparator = xd.CreateElement("xs", "SHOULDNOTBEHERE", "http://www.w3.org/2001/XMLSchema");
            this.dsElement.AppendChild(this.constraintSeparator);
            if (this.schFormat != SchemaFormat.Remoting)
            {
                if (this._ds != null)
                {
                    this.namespaces[this._ds.Namespace] = rootSchema;
                    if (this._ds.Namespace.Length == 0)
                    {
                        this.prefixes[this._ds.Namespace] = null;
                    }
                    else
                    {
                        rootSchema.SetAttribute("xmlns:mstns", this._ds.Namespace);
                        this.prefixes[this._ds.Namespace] = "mstns";
                    }
                }
                else
                {
                    this.namespaces[dt.Namespace] = rootSchema;
                    if (dt.Namespace.Length == 0)
                    {
                        this.prefixes[dt.Namespace] = null;
                    }
                    else
                    {
                        rootSchema.SetAttribute("xmlns:mstns", dt.Namespace);
                        this.prefixes[dt.Namespace] = "mstns";
                    }
                }
            }
            this.GenerateConstraintNames(dt, true);
            XmlElement newChild = this.HandleTable(dt, xd, rootSchema, false);
            rootSchema.AppendChild(newChild);
            this.dsElement.RemoveChild(this.constraintSeparator);
            rootSchema.AppendChild(this.dsElement);
            return rootSchema;
        }

        internal void SchemaTree(XmlDocument xd, XmlWriter xmlWriter, DataSet ds, DataTable dt, bool writeHierarchy)
        {
            this.ConstraintNames = new ArrayList();
            this.autogenerated = new Hashtable();
            bool flag = this.filePath != null;
            this.dsElement = xd.CreateElement("xs", "element", "http://www.w3.org/2001/XMLSchema");
            bool flag4 = false;
            DataTable table = dt;
            if (ds != null)
            {
                this._ds = ds;
                foreach (DataTable table2 in ds.Tables)
                {
                    this._tables.Add(table2);
                }
            }
            else
            {
                if (dt.DataSet != null)
                {
                    this._ds = dt.DataSet;
                }
                this._tables.Add(dt);
                if (writeHierarchy)
                {
                    this.CreateTablesHierarchy(dt);
                }
            }
            this._dc = xd;
            this.namespaces = new Hashtable();
            this.prefixes = new Hashtable();
            XmlElement rootSchema = xd.CreateElement("xs", "schema", "http://www.w3.org/2001/XMLSchema");
            this._sRoot = rootSchema;
            if (this._ds != null)
            {
                rootSchema.SetAttribute("id", XmlConvert.EncodeLocalName(this._ds.DataSetName));
            }
            else
            {
                rootSchema.SetAttribute("id", XmlConvert.EncodeLocalName("NewDataSet"));
            }
            if (this._ds != null)
            {
                this.WriteSchemaRoot(xd, rootSchema, this._ds.Namespace);
            }
            else
            {
                this.WriteSchemaRoot(xd, rootSchema, table.Namespace);
            }
            if (this.schFormat == SchemaFormat.Remoting)
            {
                if (this._ds != null)
                {
                    this.namespaces[this._ds.Namespace] = rootSchema;
                }
                else
                {
                    this.namespaces[table.Namespace] = rootSchema;
                }
            }
            if ((this.schFormat != SchemaFormat.Remoting) && (this._ds != null))
            {
                this.namespaces[this._ds.Namespace] = rootSchema;
                if (this._ds.Namespace.Length == 0)
                {
                    this.prefixes[this._ds.Namespace] = null;
                }
                else
                {
                    rootSchema.SetAttribute("xmlns:mstns", this._ds.Namespace);
                    this.prefixes[this._ds.Namespace] = "mstns";
                }
            }
            if (ds != null)
            {
                this.GenerateConstraintNames(ds);
            }
            else
            {
                this.GenerateConstraintNames(this._tables);
            }
            if (this.schFormat != SchemaFormat.Remoting)
            {
                if (ds != null)
                {
                    this.SetupAutoGenerated(ds);
                }
                else
                {
                    this.SetupAutoGenerated(this._tables);
                }
            }
            DataTable[] tableArray = (ds != null) ? ds.TopLevelTables(true) : this.CreateToplevelTables();
            if (((tableArray.Length == 0) || (this.schFormat == SchemaFormat.WebServiceSkipSchema)) || (this.schFormat == SchemaFormat.RemotingSkipSchema))
            {
                this.FillDataSetElement(xd, ds, dt);
                rootSchema.AppendChild(this.dsElement);
                AddXdoProperties(this._ds, this.dsElement, xd);
                AddExtendedProperties(ds.extendedProperties, this.dsElement);
                xd.AppendChild(rootSchema);
                xd.Save(xmlWriter);
                xmlWriter.Flush();
            }
            else
            {
                XmlElement element9 = this.FillDataSetElement(xd, ds, dt);
                this.constraintSeparator = xd.CreateElement("xs", "SHOULDNOTBEHERE", "http://www.w3.org/2001/XMLSchema");
                this.dsElement.AppendChild(this.constraintSeparator);
                if (this._ds != null)
                {
                    AddXdoProperties(this._ds, this.dsElement, xd);
                    AddExtendedProperties(this._ds.extendedProperties, this.dsElement);
                }
                for (int i = 0; i < tableArray.Length; i++)
                {
                    XmlElement element2 = this.HandleTable(tableArray[i], xd, rootSchema);
                    if (((this._ds != null) && (this._ds.Namespace == tableArray[i].Namespace)) || (ADP.IsEmpty(tableArray[i].Namespace) || (this.schFormat == SchemaFormat.Remoting)))
                    {
                        bool fNestedInDataset = tableArray[i].fNestedInDataset;
                        if (((this._ds != null) && (this._ds.Namespace.Length != 0)) && ADP.IsEmpty(tableArray[i].Namespace))
                        {
                            fNestedInDataset = true;
                        }
                        if (tableArray[i].SelfNested)
                        {
                            fNestedInDataset = false;
                        }
                        if (tableArray[i].NestedParentsCount > 1)
                        {
                            fNestedInDataset = false;
                        }
                        if (fNestedInDataset)
                        {
                            if (tableArray[i].MinOccurs != 1M)
                            {
                                element2.SetAttribute("minOccurs", tableArray[i].MinOccurs.ToString(CultureInfo.InvariantCulture));
                            }
                            if (tableArray[i].MaxOccurs == -1M)
                            {
                                element2.SetAttribute("maxOccurs", "unbounded");
                            }
                            else if (tableArray[i].MaxOccurs != 1M)
                            {
                                element2.SetAttribute("maxOccurs", tableArray[i].MaxOccurs.ToString(CultureInfo.InvariantCulture));
                            }
                        }
                        if (!fNestedInDataset)
                        {
                            rootSchema.AppendChild(element2);
                            XmlElement element8 = xd.CreateElement("xs", "element", "http://www.w3.org/2001/XMLSchema");
                            if (((this._ds != null) && (this._ds.Namespace == tableArray[i].Namespace)) || (ADP.IsEmpty(tableArray[i].Namespace) || (this.schFormat == SchemaFormat.Remoting)))
                            {
                                element8.SetAttribute("ref", tableArray[i].EncodedTableName);
                            }
                            else
                            {
                                element8.SetAttribute("ref", ((string) this.prefixes[tableArray[i].Namespace]) + ':' + tableArray[i].EncodedTableName);
                            }
                            element9.AppendChild(element8);
                        }
                        else
                        {
                            element9.AppendChild(element2);
                        }
                    }
                    else
                    {
                        this.AppendChildWithoutRef(rootSchema, tableArray[i].Namespace, element2, "element");
                        XmlElement element10 = xd.CreateElement("xs", "element", "http://www.w3.org/2001/XMLSchema");
                        element10.SetAttribute("ref", ((string) this.prefixes[tableArray[i].Namespace]) + ':' + tableArray[i].EncodedTableName);
                        element9.AppendChild(element10);
                    }
                }
                this.dsElement.RemoveChild(this.constraintSeparator);
                rootSchema.AppendChild(this.dsElement);
                DataRelation[] array = new DataRelation[0];
                if ((ds != null) && (this._tables.Count > 0))
                {
                    array = new DataRelation[ds.Relations.Count];
                    for (int k = 0; k < ds.Relations.Count; k++)
                    {
                        array[k] = ds.Relations[k];
                    }
                }
                else if (writeHierarchy && (this._tables.Count > 0))
                {
                    this.CreateRelations((DataTable) this._tables[0]);
                    array = new DataRelation[this._relations.Count];
                    this._relations.CopyTo(array, 0);
                }
                XmlElement newChild = null;
                XmlElement element7 = null;
                for (int j = 0; j < array.Length; j++)
                {
                    DataRelation rel = array[j];
                    if ((!rel.Nested || flag4) && (rel.ChildKeyConstraint == null))
                    {
                        if (newChild == null)
                        {
                            newChild = xd.CreateElement("xs", "annotation", "http://www.w3.org/2001/XMLSchema");
                            rootSchema.AppendChild(newChild);
                            element7 = xd.CreateElement("xs", "appinfo", "http://www.w3.org/2001/XMLSchema");
                            newChild.AppendChild(element7);
                        }
                        element7.AppendChild(this.HandleRelation(rel, xd));
                    }
                }
                XmlComment comment = null;
                bool flag2 = (this.namespaces.Count > 1) && !flag;
                if ((this.schFormat != SchemaFormat.Remoting) && (this.schFormat != SchemaFormat.RemotingSkipSchema))
                {
                    foreach (string str3 in this.namespaces.Keys)
                    {
                        if ((str3 != ((this._ds != null) ? this._ds.Namespace : table.Namespace)) && !ADP.IsEmpty(str3))
                        {
                            XmlElement element6 = xd.CreateElement("xs", "import", "http://www.w3.org/2001/XMLSchema");
                            element6.SetAttribute("namespace", str3);
                            if ((this.schFormat != SchemaFormat.WebService) && !flag2)
                            {
                                element6.SetAttribute("schemaLocation", string.Concat(new object[] { this.fileName, "_", this.prefixes[str3], ".xsd" }));
                            }
                            rootSchema.PrependChild(element6);
                        }
                    }
                    if ((this.schFormat != SchemaFormat.WebService) && flag2)
                    {
                        rootSchema.SetAttribute("schemafragmentcount", "urn:schemas-microsoft-com:xml-msdata", this.namespaces.Count.ToString(CultureInfo.InvariantCulture));
                    }
                    xd.AppendChild(rootSchema);
                    if ((this.schFormat != SchemaFormat.WebService) && flag2)
                    {
                        xd.WriteTo(xmlWriter);
                    }
                    else
                    {
                        xd.Save(xmlWriter);
                    }
                    xd.RemoveChild(rootSchema);
                    foreach (string str2 in this.namespaces.Keys)
                    {
                        if ((str2 != ((this._ds != null) ? this._ds.Namespace : table.Namespace)) && !ADP.IsEmpty(str2))
                        {
                            XmlWriter w = null;
                            if (!flag)
                            {
                                w = xmlWriter;
                            }
                            else
                            {
                                w = new XmlTextWriter(string.Concat(new object[] { this.filePath, this.fileName, "_", this.prefixes[str2], ".xsd" }), null);
                            }
                            try
                            {
                                if (flag)
                                {
                                    if (w is XmlTextWriter)
                                    {
                                        ((XmlTextWriter) w).Formatting = Formatting.Indented;
                                    }
                                    w.WriteStartDocument(true);
                                }
                                XmlElement element4 = (XmlElement) this.namespaces[str2];
                                this._dc.AppendChild(element4);
                                foreach (string str in this.namespaces.Keys)
                                {
                                    if (str2 != str)
                                    {
                                        string str4 = (string) this.prefixes[str];
                                        if (str4 != null)
                                        {
                                            element4.SetAttribute("xmlns:" + str4, str);
                                            XmlElement element3 = this._dc.CreateElement("xs", "import", "http://www.w3.org/2001/XMLSchema");
                                            element3.SetAttribute("namespace", str);
                                            if ((this.schFormat != SchemaFormat.WebService) && !flag2)
                                            {
                                                if (str == ((this._ds != null) ? this._ds.Namespace : table.Namespace))
                                                {
                                                    element3.SetAttribute("schemaLocation", this.fileName + this.fileExt);
                                                }
                                                else
                                                {
                                                    element3.SetAttribute("schemaLocation", this.fileName + "_" + str4 + ".xsd");
                                                }
                                            }
                                            element4.PrependChild(element3);
                                        }
                                    }
                                }
                                if ((this.schFormat != SchemaFormat.WebService) && flag2)
                                {
                                    this._dc.WriteTo(w);
                                }
                                else
                                {
                                    this._dc.Save(w);
                                }
                                this._dc.RemoveChild(element4);
                                if (flag)
                                {
                                    w.WriteEndDocument();
                                }
                            }
                            finally
                            {
                                if (flag)
                                {
                                    w.Close();
                                }
                            }
                        }
                    }
                }
                else
                {
                    xd.AppendChild(rootSchema);
                    xd.Save(xmlWriter);
                }
                if (comment != null)
                {
                    rootSchema.PrependChild(comment);
                }
                if (!flag)
                {
                    xmlWriter.Flush();
                }
            }
        }

        internal void SetPath(XmlWriter xw)
        {
            FileStream baseStream = null;
            DataTextWriter writer2 = xw as DataTextWriter;
            baseStream = (writer2 != null) ? (writer2.BaseStream as FileStream) : null;
            if (baseStream == null)
            {
                XmlTextWriter writer = xw as XmlTextWriter;
                if (writer == null)
                {
                    return;
                }
                baseStream = writer.BaseStream as FileStream;
                if (baseStream == null)
                {
                    return;
                }
            }
            this.filePath = Path.GetDirectoryName(baseStream.Name);
            this.fileName = Path.GetFileNameWithoutExtension(baseStream.Name);
            this.fileExt = Path.GetExtension(baseStream.Name);
            if (!ADP.IsEmpty(this.filePath))
            {
                this.filePath = this.filePath + @"\";
            }
        }

        internal void SetupAutoGenerated(ArrayList dt)
        {
            for (int i = 0; i < dt.Count; i++)
            {
                this.SetupAutoGenerated((DataTable) dt[i]);
            }
        }

        internal void SetupAutoGenerated(DataSet ds)
        {
            foreach (DataTable table in ds.Tables)
            {
                this.SetupAutoGenerated(table);
            }
        }

        internal void SetupAutoGenerated(DataTable dt)
        {
            foreach (DataColumn column in dt.Columns)
            {
                if (AutoGenerated(column))
                {
                    this.autogenerated[column] = column;
                }
            }
            foreach (Constraint constraint4 in dt.Constraints)
            {
                ForeignKeyConstraint fk = constraint4 as ForeignKeyConstraint;
                if (fk != null)
                {
                    if (this.AutoGenerated(fk))
                    {
                        this.autogenerated[fk] = fk;
                    }
                    else
                    {
                        if (this.autogenerated[fk.Columns[0]] != null)
                        {
                            this.autogenerated[fk.Columns[0]] = null;
                        }
                        if (this.autogenerated[fk.RelatedColumnsReference[0]] != null)
                        {
                            this.autogenerated[fk.RelatedColumnsReference[0]] = null;
                        }
                        UniqueConstraint constraint3 = (UniqueConstraint) fk.RelatedTable.Constraints.FindConstraint(new UniqueConstraint("TEMP", fk.RelatedColumnsReference));
                        if (constraint3 != null)
                        {
                            if (this.autogenerated[constraint3] != null)
                            {
                                this.autogenerated[constraint3] = null;
                            }
                            if (this.autogenerated[constraint3.Key.ColumnsReference[0]] != null)
                            {
                                this.autogenerated[constraint3.Key.ColumnsReference[0]] = null;
                            }
                        }
                    }
                }
                else
                {
                    UniqueConstraint unique = (UniqueConstraint) constraint4;
                    if (AutoGenerated(unique))
                    {
                        this.autogenerated[unique] = unique;
                    }
                    else if (this.autogenerated[unique.Key.ColumnsReference[0]] != null)
                    {
                        this.autogenerated[unique.Key.ColumnsReference[0]] = null;
                    }
                }
            }
        }

        internal static string TranslateAcceptRejectRule(AcceptRejectRule rule)
        {
            switch (rule)
            {
                case AcceptRejectRule.None:
                    return "None";

                case AcceptRejectRule.Cascade:
                    return "Cascade";
            }
            return null;
        }

        internal static string TranslateRule(Rule rule)
        {
            switch (rule)
            {
                case Rule.None:
                    return "None";

                case Rule.Cascade:
                    return "Cascade";

                case Rule.SetNull:
                    return "SetNull";

                case Rule.SetDefault:
                    return "SetDefault";
            }
            return null;
        }

        internal static void ValidateColumnMapping(Type columnType)
        {
            if (DataStorage.IsTypeCustomType(columnType))
            {
                throw ExceptionBuilder.InvalidDataColumnMapping(columnType);
            }
        }

        internal void WriteSchemaRoot(XmlDocument xd, XmlElement rootSchema, string targetNamespace)
        {
            if (!ADP.IsEmpty(targetNamespace))
            {
                rootSchema.SetAttribute("targetNamespace", targetNamespace);
                rootSchema.SetAttribute("xmlns:mstns", targetNamespace);
            }
            rootSchema.SetAttribute("xmlns", targetNamespace);
            rootSchema.SetAttribute("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
            rootSchema.SetAttribute("xmlns:msdata", "urn:schemas-microsoft-com:xml-msdata");
            if ((this._ds != null) && this.HaveExtendedProperties(this._ds))
            {
                rootSchema.SetAttribute("xmlns:msprop", "urn:schemas-microsoft-com:xml-msprop");
            }
            if (!ADP.IsEmpty(targetNamespace))
            {
                rootSchema.SetAttribute("attributeFormDefault", "qualified");
                rootSchema.SetAttribute("elementFormDefault", "qualified");
            }
        }

        internal static string XmlDataTypeName(Type type)
        {
            if (type == typeof(char))
            {
                return "_";
            }
            if ((type == typeof(byte[])) || (type == typeof(SqlBytes)))
            {
                return "base64Binary";
            }
            if ((type == typeof(DateTime)) || (type == typeof(SqlDateTime)))
            {
                return "dateTime";
            }
            if (type == typeof(TimeSpan))
            {
                return "duration";
            }
            if (((type == typeof(decimal)) || (type == typeof(SqlDecimal))) || (type == typeof(SqlMoney)))
            {
                return "decimal";
            }
            if (type == typeof(int))
            {
                return "int";
            }
            if ((type == typeof(bool)) || (type == typeof(SqlBoolean)))
            {
                return "boolean";
            }
            if ((type == typeof(float)) || (type == typeof(SqlSingle)))
            {
                return "float";
            }
            if ((type == typeof(double)) || (type == typeof(SqlDouble)))
            {
                return "double";
            }
            if ((type == typeof(sbyte)) || (type == typeof(SqlByte)))
            {
                return "byte";
            }
            if (type == typeof(byte))
            {
                return "unsignedByte";
            }
            if ((type == typeof(short)) || (type == typeof(SqlInt16)))
            {
                return "short";
            }
            if ((type == typeof(int)) || (type == typeof(SqlInt32)))
            {
                return "int";
            }
            if ((type == typeof(long)) || (type == typeof(SqlInt64)))
            {
                return "long";
            }
            if (type == typeof(ushort))
            {
                return "unsignedShort";
            }
            if (type == typeof(uint))
            {
                return "unsignedInt";
            }
            if (type == typeof(ulong))
            {
                return "unsignedLong";
            }
            if (type == typeof(Uri))
            {
                return "anyURI";
            }
            if (type == typeof(SqlBinary))
            {
                return "hexBinary";
            }
            if (((type == typeof(string)) || (type == typeof(SqlGuid))) || ((type == typeof(SqlString)) || (type == typeof(SqlChars))))
            {
                return "string";
            }
            if (((type != typeof(object)) && (type != typeof(SqlXml))) && (type != typeof(DateTimeOffset)))
            {
                return string.Empty;
            }
            return "anyType";
        }
    }
}

