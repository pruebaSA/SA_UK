namespace System.Data.Common.EntitySql
{
    using System;
    using System.Data;
    using System.Data.Entity;
    using System.Globalization;

    internal sealed class CqlParser
    {
        private const string _internalYaccSyntaxErrorMessage = "syntax error";
        private CqlLexer _lexer;
        private uint _methodCallNodeCount;
        private Expr _parsedTree;
        private System.Data.Common.EntitySql.ParserOptions _parserOptions = new System.Data.Common.EntitySql.ParserOptions();
        private string _query;
        private string _version = (YYMAJOR.ToString(NumberFormatInfo.InvariantInfo) + '.' + YYMINOR.ToString(NumberFormatInfo.InvariantInfo));
        public static short ALL = 0x105;
        public static short AND = 0x106;
        public static short ANYELEMENT = 0x107;
        public static short APPLY = 0x108;
        public static short AS = 0x109;
        public static short ASC = 0x10a;
        public static short BETWEEN = 0x10b;
        public static short BY = 0x10c;
        public static short CASE = 0x10d;
        public static short CAST = 270;
        public static short COLLATE = 0x10f;
        public static short COLON = 0x144;
        public static short COMMA = 0x143;
        public static short CREATEREF = 0x111;
        public static short CROSS = 0x110;
        public static short DEREF = 0x112;
        public static short DESC = 0x113;
        public static short DISTINCT = 0x114;
        public static short DOT = 0x146;
        public static short ELEMENT = 0x115;
        public static short ELSE = 0x116;
        public static short END = 0x117;
        public static short EQUAL = 0x147;
        public static short ESCAPE = 0x11a;
        public static short ESCAPED_IDENTIFIER = 0x102;
        public static short EXCEPT = 280;
        public static short EXISTS = 0x119;
        public static short FLATTEN = 0x11b;
        public static short FROM = 0x11c;
        public static short FSLASH = 0x151;
        public static short FULL = 0x11d;
        public static short GROUP = 0x11e;
        public static short HAVING = 0x11f;
        public static short IDENTIFIER = 0x101;
        public static short IN = 0x120;
        public static short INNER = 0x121;
        public static short INTERSECT = 290;
        public static short IS = 0x123;
        public static short JOIN = 0x124;
        public static short KEY = 0x125;
        public static short L_BRACE = 330;
        public static short L_CURLY = 0x14c;
        public static short L_PAREN = 0x148;
        public static short LEFT = 0x126;
        public static short LIKE = 0x127;
        public static short LIMIT = 0x128;
        public static short LITERAL = 260;
        public static short MINUS = 0x14f;
        public static short MULTISET = 0x129;
        public static short NAVIGATE = 0x15a;
        public static short NOT = 0x12a;
        public static short NULL = 0x15b;
        public static short OF = 0x12b;
        public static short OFTYPE = 300;
        public static short ON = 0x12d;
        public static short ONLY = 0x132;
        public static short OP_EQ = 0x153;
        public static short OP_GE = 0x158;
        public static short OP_GT = 0x157;
        public static short OP_LE = 0x156;
        public static short OP_LT = 0x155;
        public static short OP_NEQ = 340;
        public static short OR = 0x12e;
        public static short ORDER = 0x12f;
        public static short OUTER = 0x130;
        public static short OVERLAPS = 0x131;
        public static short PARAMETER = 0x103;
        public static short PERCENT = 0x152;
        public static short PLUS = 0x14e;
        public static short QMARK = 0x159;
        public static short R_BRACE = 0x14b;
        public static short R_CURLY = 0x14d;
        public static short R_PAREN = 0x149;
        public static short REF = 0x133;
        public static short RELATIONSHIP = 0x134;
        public static short RIGHT = 0x135;
        public static short ROW = 310;
        public static short SCOLON = 0x145;
        public static short SELECT = 0x137;
        public static short SET = 0x138;
        public static short SKIP = 0x139;
        public static short STAR = 0x150;
        private int stateptr;
        private int[] statestk;
        public static short THEN = 0x13a;
        public static short TOP = 0x13b;
        public static short TREAT = 0x13c;
        public static short UNARYMINUS = 0x15d;
        public static short UNARYPLUS = 0x15c;
        public static short UNION = 0x13d;
        public static short USING = 0x13e;
        private int valptr;
        private object[] valstk;
        public static short VALUE = 0x13f;
        public static short WHEN = 320;
        public static short WHERE = 0x141;
        public static short WITH = 0x142;
        private int yychar;
        private static short[] yycheck = new short[] { 
            1, 0, 0x48, 0, 0, 0x102, 0x102, 0xe3, 0x13e, 0x148, 0, 0, 0x105, 0x124, 0x58, 0x4c,
            0x105, 0, 0xc7, 0x12b, 0x105, 0x12a, 0x12b, 0x143, 0xcd, 0x130, 0xb9, 0x114, 1, 0x149, 0xd3, 0x114,
            0, 4, 0, 0x114, 0x116, 0x117, 0x108, 220, 0x143, 0, 0x74, 0, 0x116, 0x117, 0x149, 0x116,
            0x117, 0x143, 0x15, 0, 0x110, 0, 0x10a, 0x149, 0x1b, 0x1c, 0x1d, 30, 0x124, 0, 320, 0x113,
            0, 0x124, 0x124, 0x15b, 0x120, 0, 0x15b, 0, 0x130, 0xfe, 0xe9, 0x148, 0x148, 0x130, 320, 0x95,
            0x149, 0x97, 0xf1, 0xf2, 0x109, 0x10a, 320, 0x143, 0x149, 320, 0x10b, 0x3e, 0x3f, 0x149, 0x41, 0x42,
            0x145, 0x44, 0x45, 70, 0x65, 0x48, 0xcd, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0xd3, 4, 0xb8, 0x120,
            0x148, 0x54, 0x143, 0x128, 0x139, 220, 0x127, 90, 0x5b, 0x5c, 0x5d, 0x5e, 0x14d, 0x60, 0x143, 0x62,
            0x63, 100, 0x137, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0x72,
            0x73, 0, 0x148, 0xd0, 0x146, 15, 0x79, 0xfe, 0x148, 0x13, 0x7d, 0x143, 0x7f, 0x148, 0x150, 0x151,
            0x152, 0x149, 0x109, 0x10a, 0x110, 0x14d, 0xe3, 0x3e, 0x145, 0x106, 0x143, 0x148, 0x8f, 0x44, 0x45, 70,
            0x149, 0x11d, 0x95, 0x143, 0x97, 0x121, 0x4d, 0x148, 0x124, 0x149, 0x126, 0x148, 0x148, 0x14d, 0xa1, 0xa2,
            0xa3, 0x128, 0x143, 0xa6, 0x130, 0x143, 0xc7, 0x148, 0x149, 0x135, 0x148, 0x149, 0xcd, 0x148, 0xcf, 0x143,
            0x137, 0x143, 0xd3, 0x110, 0xd5, 0x149, 0xb9, 0x149, 0x95, 0x143, 0x97, 220, 0xbf, 0x149, 0, 0x149,
            0xc3, 0x143, 0xc7, 0x120, 0x148, 200, 0x148, 0x149, 0xcd, 0x148, 0x146, 0x110, 0x145, 0xd0, 0xd3, 0x148,
            0xd5, 0x110, 0x14e, 0x14f, 0x150, 0x151, 0x152, 220, 0x11d, 0x148, 0xdd, 0x148, 0x121, 0xfe, 0x11d, 0x124,
            0xe3, 0x126, 0x121, 0x101, 0x102, 0x124, 0xe9, 0x126, 0x109, 0x10a, 0x148, 0x130, 0x106, 0x143, 0xf1, 0xf2,
            0x135, 0x130, 0x148, 0x149, 0x148, 0xf8, 0x135, 0x148, 0x145, 0xfe, 0x106, 0x107, 0x108, 0x149, 0x146, 0x11e,
            0x11f, 0x11c, 0x11e, 0x11f, 0x109, 0x10a, 0x13f, 0x128, 0x11e, 0x11f, 0x10d, 270, 0x12d, 0x110, 0x12f, 0x141,
            0x12f, 0, 0x149, 0x12f, 0x149, 0x117, 0x137, 0x13b, 0x149, 0x12f, 0x12f, 0x149, 0x149, 0x120, 0x148, 0x11e,
            0x11e, 0x11f, 0x141, 0x128, 0x143, 0x141, 0x145, 0x143, 0x128, 0x145, 0x149, 0x141, 0x149, 0x149, 0x124, 0x145,
            0x145, 0x12f, 0x137, 0x149, 0x149, 0x156, 0x145, 0x158, 0x12f, 0x139, 0x149, 0x11e, 0x11f, 0x128, 0x141, 0x11f,
            0x143, 0x149, 0x143, 0x143, 0x165, 0x145, 0x11f, 0x145, 0x108, 0x149, 0x10c, 0x149, 0x12f, 0x128, 0x145, 0x12f,
            0x145, 0x149, 0x149, 0x174, 0x149, 0x176, 0x12f, 0x15a, 0x145, 0x15c, 0x145, 380, 0x149, 0x17e, 0x149, 0x148,
            0x165, 0x148, 0x145, 0x149, 0, 0x145, 0x149, 0x16a, 0x16b, 0x149, 0x145, 0x149, 0x145, 0x11f, 0x149, 370,
            0x149, 0x149, 0x101, 0x102, 0x103, 260, 0x149, 0x110, 0x107, 0x149, 0x142, 0x149, 0x143, 0x124, 0x10d, 270,
            0x124, 0x124, 0x111, 0x112, 0x11d, 0x12d, 0x115, 0x134, 0x121, 0x12f, 0x119, 0x124, 0x11b, 0x126, 0x149, 0x149,
            0x149, 0x10c, 0x101, 0x149, 0x148, 0x128, 0x125, 0x130, 0x149, 0x149, 0x129, 0x12a, 0x135, 300, 0x149, 0x149,
            0x149, 0x106, 0x117, 0x106, 0x133, 0x11c, 0x11c, 310, 0x137, 0x138, 5, 1, 0x3a, 0x13c, 0xe4, 0xb9,
            0xb9, 0x16f, 0x167, 0x16b, 0x133, -1, -1, 0, -1, 0x148, -1, -1, -1, 0x14c, -1, 0x14e,
            0x14f, -1, -1, -1, 0x106, -1, -1, 0x109, 0x10a, 0x10b, -1, 0x15a, 0x15b, 0x10f, 0x110, -1,
            -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121,
            290, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131,
            -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1, 320, 0x141,
            -1, 0x143, -1, 0x145, 0x146, 0x147, -1, 0x149, -1, -1, 0, 0x14d, 0x14e, 0x14f, 0x150, 0x151,
            0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, 0x106, -1, -1, 0x109, 0x10a, 0x10b, -1, -1, -1,
            0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e,
            0x11f, 0x120, 0x121, 290, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e,
            0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1,
            -1, 320, 0x141, -1, 0x143, -1, 0x145, 0x146, 0x147, -1, 0x149, -1, -1, 0, 0x14d, 0x14e,
            0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, 0x106, -1, -1, 0x109, 0x10a, 0x10b,
            -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, -1,
            0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1,
            -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1,
            -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, 0x146, 0x147, -1, 0x149, -1, -1,
            0, 0x14d, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, 0x106, -1, -1,
            0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280,
            -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124, -1, 0x126, 0x127, 0x128,
            -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1,
            0x139, 0x13a, -1, -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, 0x146, 0x147, -1,
            0x149, -1, -1, 0, 0x14d, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158,
            0x106, -1, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1,
            0x116, 0x117, 280, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124, -1,
            0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1, 0x135,
            -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145,
            -1, 0x147, -1, 0x149, -1, -1, 0, 0x14d, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155,
            0x156, 0x157, 0x158, 0x106, -1, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1,
            0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290,
            0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1,
            -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1, 320, 0x141, -1,
            0x143, -1, 0x145, -1, 0x147, -1, 0x149, -1, -1, 0, 0x14d, 0x14e, 0x14f, 0x150, 0x151, 0x152,
            0x153, 340, 0x155, 0x156, 0x157, 0x158, 0x106, -1, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f,
            0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f,
            0x120, 0x121, 290, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f,
            0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1,
            320, 0x141, -1, 0x143, -1, 0x145, -1, 0x147, -1, 0x149, -1, -1, 0, 0x14d, 0x14e, 0x14f,
            0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, 0x106, -1, -1, 0x109, 0x10a, 0x10b, -1,
            -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, -1, 0x11c,
            0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1,
            0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1,
            0x13d, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, 0x147, -1, 0x149, -1, -1, 0,
            0x14d, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, 0x106, -1, -1, 0x109,
            0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1,
            0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1,
            0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139,
            0x13a, -1, -1, 0x13d, -1, 0, 320, 0x141, -1, 0x143, -1, 0x145, -1, 0x147, -1, 0x149,
            -1, -1, -1, 0x14d, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, 0x106,
            -1, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116,
            0x117, 280, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124, -1, 0x126,
            0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, 0, -1, -1, 0x135, -1,
            -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, -1,
            0x147, -1, 0x149, -1, -1, -1, 0x14d, 0x14e, 0x14f, -1, -1, -1, 0x153, 340, 0x155, 0x156,
            0x157, 0x158, 0x106, -1, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113,
            -1, -1, 0x116, 0x117, 280, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123,
            0x124, 0, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1,
            -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143,
            -1, 0x145, -1, 0x147, -1, 0x149, -1, -1, -1, 0x14d, 0x14e, 0x14f, -1, -1, -1, 0x153,
            340, 0x155, 0x156, 0x157, 0x158, 0x106, -1, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110,
            -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120,
            0x121, 290, 0x123, 0x124, 0, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130,
            0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1, 320,
            0x141, -1, 0x143, -1, 0x145, -1, 0x147, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109, 0x10a,
            0x10b, -1, 0x153, 340, 0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a,
            -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124, 0, 0x126, 0x127, 0x128, -1, 0x12a,
            -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a,
            -1, -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, 0x147, -1, 0x149, -1,
            -1, 0x106, 0x14d, -1, 0x109, 0x10a, 0x10b, -1, 0x153, 340, 0x10f, 0x110, -1, -1, 0x113, -1,
            -1, 0x116, 0x117, 280, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124,
            0, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1,
            0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143, -1,
            0x145, -1, 0x147, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109, 0x10a, 0x10b, -1, 0x153, 340,
            0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e,
            0x11f, 0x120, 0x121, 290, 0x123, 0x124, 0, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e,
            0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1,
            -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, 0x147, -1, 0x149, -1, -1, -1, 0x14d, -1,
            -1, -1, -1, -1, 0x153, 340, -1, -1, -1, -1, 0x106, -1, -1, 0x109, 0x10a, 0x10b,
            -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, 0,
            0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1,
            -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1,
            -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, -1, -1, 0x149, -1, -1,
            0x106, 0x14d, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1,
            0x116, 0x117, 280, -1, 0x11a, 0, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124, -1,
            0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1, 0x135,
            -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145,
            -1, -1, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f,
            0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, 0, 0x11c, 0x11d, 0x11e, 0x11f,
            0x120, 0x121, 290, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f,
            0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1,
            320, 0x141, -1, 0x143, -1, 0x145, -1, -1, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109,
            0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1,
            0x11a, 0, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 290, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1,
            0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139,
            0x13a, -1, -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, -1, -1, 0x149,
            -1, -1, -1, 0x14d, -1, 0x106, -1, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110,
            -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a, 0, 0x11c, 0x11d, 0x11e, 0x11f, 0x120,
            0x121, -1, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130,
            0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, 0x13d, -1, -1, 320,
            0x141, -1, 0x143, -1, 0x145, -1, -1, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109, 0x10a,
            0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 280, -1, 0x11a,
            0, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, -1, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a,
            -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a,
            -1, -1, 0x13d, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, -1, -1, 0x149, -1,
            -1, 0x106, 0x14d, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1,
            -1, 0x116, 0x117, 280, -1, 0x11a, 0, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, -1, 0x123, 0x124,
            -1, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, 0x131, -1, -1, -1,
            0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, -1, -1, -1, 320, 0x141, -1, 0x143, -1,
            0x145, -1, -1, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109, 0x10a, 0x10b, -1, -1, -1,
            0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, -1, -1, 0x11a, 0, 0x11c, 0x11d, 0x11e,
            0x11f, 0x120, 0x121, -1, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e,
            0x12f, 0x130, 0x131, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, -1, -1,
            -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, -1, -1, 0x149, -1, -1, -1, 0x14d, -1,
            0x106, -1, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1,
            0x116, 0x117, 0, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, -1, 0x123, 0x124, -1,
            0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, -1, -1, -1, -1, 0x135,
            -1, -1, -1, 0x139, 0x13a, -1, -1, -1, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145,
            -1, -1, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f,
            0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, 0, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f,
            0x120, 0x121, -1, 0x123, 0x124, -1, 0x126, 0x127, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f,
            0x130, -1, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, -1, -1, -1,
            320, 0x141, -1, 0x143, -1, 0x145, -1, -1, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109,
            0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, 0, -1, 0x116, 0x117, -1, -1,
            0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, -1, 0x121, -1, 0x123, 0x124, -1, 0x126, -1, 0x128, -1,
            0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, -1, -1, -1, -1, 0x135, -1, -1, -1, 0x139,
            0x13a, -1, -1, -1, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, -1, -1, 0x149,
            -1, -1, 0x106, 0x14d, -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113,
            0, -1, 0x116, 0x117, -1, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, -1, 0x121, -1, 0x123,
            0x124, -1, 0x126, -1, 0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, -1, -1, -1,
            -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, -1, -1, -1, 320, 0x141, -1, 0x143,
            -1, 0x145, -1, -1, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109, 0x10a, 0x10b, -1, -1,
            -1, 0x10f, 0x110, -1, -1, 0x113, 0, -1, 0x116, 0x117, -1, -1, -1, -1, 0x11c, 0x11d,
            0x11e, 0x11f, -1, 0x121, -1, 0x123, 0x124, -1, 0x126, -1, 0x128, -1, 0x12a, -1, -1, 0x12d,
            0x12e, 0x12f, 0x130, -1, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, -1,
            -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, -1, -1, 0x149, -1, -1, 0x106, 0x14d,
            -1, 0x109, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, 0, -1, 0x116, 0x117,
            -1, -1, -1, -1, 0x11c, 0x11d, 0x11e, 0x11f, -1, 0x121, -1, 0x123, 0x124, -1, 0x126, -1,
            0x128, -1, 0x12a, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, -1, -1, -1, -1, 0x135, -1, -1,
            -1, 0x139, 0x13a, -1, -1, -1, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, -1,
            0x106, 0x149, -1, 0x109, 0x10a, 0x14d, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, 0, -1,
            0x116, 0x117, -1, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, -1, 0x121, -1, -1, 0x124, -1,
            0x126, -1, 0x128, -1, -1, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, -1, -1, -1, -1, 0x135,
            -1, -1, -1, 0x139, 0x13a, -1, -1, -1, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145,
            0, -1, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109, 0x10a, -1, -1, -1, -1, 0x10f,
            0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, -1, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f,
            -1, 0x121, -1, -1, 0x124, -1, 0x126, -1, 0x128, 0, -1, -1, -1, 0x12d, 0x12e, 0x12f,
            0x130, -1, -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, -1, -1, -1,
            320, 0x141, -1, 0x143, -1, 0x145, -1, 0, -1, 0x149, -1, -1, 0x106, 0x14d, -1, 0x109,
            0x10a, -1, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113, -1, -1, 0x116, 0x117, -1, -1,
            0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, -1, 0x121, -1, -1, 0x124, -1, 0x126, -1, 0x128, -1,
            -1, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, -1, -1, -1, -1, 0x135, -1, -1, -1, 0x139,
            0x13a, -1, -1, -1, -1, -1, 320, 0x141, -1, 0x143, -1, 0x145, -1, -1, -1, 0x149,
            -1, -1, 0x106, 0x14d, -1, 0x109, 0x10a, -1, -1, -1, -1, 0x10f, 0x110, -1, -1, 0x113,
            -1, -1, 0x116, 0x117, -1, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, -1, 0x121, -1, -1,
            0x124, -1, 0x126, -1, 0x128, -1, -1, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, -1, -1, -1,
            -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, -1, -1, -1, 320, 0x141, -1, 0x143,
            -1, 0x145, -1, -1, -1, 0x149, -1, 0x109, 0x10a, 0x14d, -1, -1, -1, 0x10f, 0x110, -1,
            -1, 0x113, -1, -1, 0x116, 0x117, -1, -1, 0x11a, -1, 0x11c, 0x11d, 0x11e, 0x11f, -1, 0x121,
            -1, -1, 0x124, -1, 0x126, -1, 0x128, -1, -1, -1, -1, 0x12d, 0x12e, 0x12f, 0x130, -1,
            -1, -1, -1, 0x135, -1, -1, -1, 0x139, 0x13a, -1, -1, -1, -1, -1, 320, 0x141,
            0x110, 0x143, -1, 0x145, -1, -1, -1, 0x149, -1, -1, -1, 0x14d, 0x11c, 0x11d, 0x11e, 0x11f,
            -1, 0x121, -1, -1, 0x124, -1, 0x126, -1, -1, -1, -1, -1, -1, 0x12d, -1, 0x12f,
            0x130, -1, -1, -1, -1, 0x135, -1, -1, -1, 0x110, -1, -1, -1, -1, -1, -1,
            -1, 0x141, -1, 0x143, -1, 0x145, 0x11d, 0x11e, 0x11f, 0x149, 0x121, -1, -1, 0x124, -1, 0x126,
            -1, -1, -1, -1, -1, -1, 0x12d, 0x110, 0x12f, 0x130, -1, -1, -1, -1, 0x135, -1,
            -1, -1, -1, -1, 0x11d, 0x11e, 0x11f, -1, 0x121, -1, 0x141, 0x124, 0x143, 0x126, 0x145, -1,
            -1, -1, 0x149, -1, -1, -1, 0x12f, 0x130, -1, -1, -1, -1, 0x135, -1, -1, -1,
            -1, 0x101, 0x102, 0x103, 260, 0x105, -1, 0x107, 0x141, -1, 0x143, -1, 0x145, 0x10d, 270, -1,
            0x149, 0x111, 0x112, -1, 0x114, 0x115, -1, -1, -1, 0x119, -1, 0x11b, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, 0x125, -1, -1, -1, 0x129, 0x12a, -1, 300, -1, -1, -1,
            -1, -1, -1, 0x133, -1, -1, 310, -1, 0x138, -1, -1, 0x13b, 0x13c, -1, -1, 0x13f,
            -1, -1, -1, -1, 0x101, 0x102, 0x103, 260, 0x148, -1, 0x107, -1, 0x14c, -1, 0x14e, 0x14f,
            0x10d, 270, -1, -1, 0x111, 0x112, -1, -1, 0x115, -1, 0x15a, 0x15b, 0x119, -1, 0x11b, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, 0x125, -1, -1, -1, 0x129, 0x12a, -1, 300,
            -1, -1, -1, -1, -1, -1, 0x133, -1, 0x146, 310, 0x137, 0x138, -1, -1, -1, 0x13c,
            0x14e, 0x14f, 0x150, 0x151, 0x152, -1, -1, 0x155, 0x156, 0x157, 0x158, 0x148, -1, -1, -1, 0x14c,
            -1, 0x14e, 0x14f, 0x101, 0x102, 0x103, 260, 0x105, -1, 0x107, -1, -1, -1, 0x15a, 0x15b, 0x10d,
            270, -1, -1, 0x111, 0x112, -1, -1, 0x115, -1, -1, -1, 0x119, -1, 0x11b, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, 0x125, -1, -1, -1, 0x129, 0x12a, -1, 300, -1,
            -1, -1, -1, -1, -1, 0x133, -1, -1, 310, -1, 0x138, -1, -1, -1, 0x13c, -1,
            -1, -1, -1, -1, -1, -1, 0x101, 0x102, 0x103, 260, 0x148, -1, 0x107, -1, 0x14c, -1,
            0x14e, 0x14f, 0x10d, 270, -1, -1, 0x111, 0x112, -1, -1, 0x115, -1, 0x15a, 0x15b, 0x119, -1,
            0x11b, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x125, -1, -1, -1, 0x129, 0x12a,
            -1, 300, -1, -1, -1, -1, -1, -1, 0x133, -1, -1, 310, 0x137, 0x138, -1, -1,
            -1, 0x13c, -1, -1, -1, -1, -1, -1, -1, 0x101, 0x102, 0x103, 260, 0x148, -1, 0x107,
            -1, 0x14c, -1, 0x14e, 0x14f, 0x10d, 270, -1, -1, 0x111, 0x112, -1, -1, 0x115, -1, 0x15a,
            0x15b, 0x119, -1, 0x11b, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x125, -1, -1,
            -1, 0x129, 0x12a, -1, 300, -1, -1, -1, -1, -1, 0x132, 0x133, -1, -1, 310, -1,
            0x138, -1, -1, -1, 0x13c, -1, -1, -1, -1, -1, -1, -1, 0x101, 0x102, 0x103, 260,
            0x148, -1, 0x107, -1, 0x14c, -1, 0x14e, 0x14f, 0x10d, 270, -1, -1, 0x111, 0x112, -1, -1,
            0x115, -1, 0x15a, 0x15b, 0x119, -1, 0x11b, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            0x125, -1, -1, -1, 0x129, 0x12a, -1, 300, -1, -1, -1, -1, -1, 0x132, 0x133, -1,
            -1, 310, -1, 0x138, -1, -1, -1, 0x13c, -1, -1, -1, -1, -1, -1, -1, 0x101,
            0x102, 0x103, 260, 0x148, -1, 0x107, -1, 0x14c, -1, 0x14e, 0x14f, 0x10d, 270, -1, -1, 0x111,
            0x112, -1, -1, 0x115, -1, 0x15a, 0x15b, 0x119, -1, 0x11b, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, 0x125, -1, -1, -1, 0x129, 0x12a, -1, 300, -1, -1, -1, -1, -1,
            0x132, 0x133, -1, -1, 310, -1, 0x138, -1, -1, -1, 0x13c, -1, -1, -1, -1, -1,
            -1, -1, 0x101, 0x102, 0x103, 260, 0x148, -1, 0x107, -1, 0x14c, -1, 0x14e, 0x14f, 0x10d, 270,
            -1, -1, 0x111, 0x112, -1, -1, 0x115, -1, 0x15a, 0x15b, 0x119, -1, 0x11b, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, 0x125, -1, -1, -1, 0x129, 0x12a, -1, 300, -1, -1,
            -1, -1, -1, -1, 0x133, -1, -1, 310, 0x137, 0x138, -1, -1, -1, 0x13c, -1, -1,
            -1, -1, -1, -1, -1, 0x101, 0x102, 0x103, 260, 0x148, -1, 0x107, -1, 0x14c, -1, 0x14e,
            0x14f, 0x10d, 270, -1, -1, 0x111, 0x112, -1, -1, 0x115, -1, 0x15a, 0x15b, 0x119, -1, 0x11b,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x125, -1, -1, -1, 0x129, 0x12a, -1,
            300, -1, -1, -1, -1, -1, -1, 0x133, -1, -1, 310, 0x137, 0x138, -1, -1, -1,
            0x13c, -1, -1, -1, -1, -1, -1, -1, 0x101, 0x102, 0x103, 260, 0x148, -1, 0x107, -1,
            0x14c, -1, 0x14e, 0x14f, 0x10d, 270, -1, -1, 0x111, 0x112, -1, -1, 0x115, -1, 0x15a, 0x15b,
            0x119, -1, 0x11b, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x125, -1, -1, -1,
            0x129, 0x12a, -1, 300, -1, -1, -1, -1, -1, -1, 0x133, -1, -1, 310, -1, 0x138,
            -1, -1, 0x13b, 0x13c, -1, -1, -1, -1, -1, -1, -1, 0x101, 0x102, 0x103, 260, 0x148,
            -1, 0x107, -1, 0x14c, -1, 0x14e, 0x14f, 0x10d, 270, -1, -1, 0x111, 0x112, -1, -1, 0x115,
            -1, 0x15a, 0x15b, 0x119, -1, 0x11b, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x125,
            -1, -1, -1, 0x129, 0x12a, -1, 300, -1, -1, -1, -1, -1, -1, 0x133, -1, -1,
            310, -1, 0x138, -1, -1, -1, 0x13c, -1, -1, -1, -1, -1, -1, -1, 0x101, 0x102,
            0x103, 260, 0x148, -1, 0x107, -1, 0x14c, -1, 0x14e, 0x14f, 0x10d, 270, -1, -1, 0x111, 0x112,
            -1, -1, 0x115, -1, 0x15a, 0x15b, 0x119, -1, 0x11b, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 0x125, -1, -1, -1, 0x129, 0x12a, -1, 300, -1, -1, -1, -1, -1, -1,
            0x133, -1, -1, 310, -1, 0x138, -1, -1, -1, 0x13c, -1, -1, -1, -1, -1, -1,
            -1, 0x101, 0x102, 0x103, 260, 0x148, -1, 0x107, -1, 0x14c, -1, 0x14e, 0x14f, 0x10d, 270, -1,
            -1, 0x111, 0x112, -1, -1, 0x115, -1, 0x15a, 0x15b, 0x119, -1, 0x11b, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, 0x125, -1, -1, -1, 0x129, 0x12a, -1, 300, -1, -1, -1,
            -1, -1, -1, 0x133, -1, -1, 310, -1, 0x138, -1, -1, -1, 0x13c, -1, -1, -1,
            -1, -1, -1, -1, 0x101, 0x102, 0x103, 260, 0x148, -1, 0x107, -1, 0x14c, -1, 0x14e, 0x14f,
            0x10d, 270, -1, -1, 0x111, 0x112, -1, -1, 0x115, -1, 0x15a, 0x15b, 0x119, -1, 0x11b, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, 0x125, -1, -1, -1, 0x129, 0x12a, -1, 300,
            -1, -1, -1, -1, -1, -1, 0x133, -1, -1, 310, -1, 0x138, -1, -1, -1, 0x13c,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x148, -1, -1, -1, 0x14c,
            -1, 0x14e, 0x14f, 0x106, -1, -1, -1, 0x10a, 0x10b, -1, -1, -1, 0x10f, 0x15a, 0x15b, -1,
            0x113, -1, -1, -1, -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290,
            0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1,
            -1, -1, -1, 0x146, 0x147, 0x106, -1, -1, 0x109, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152,
            0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120,
            -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1,
            0x131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1,
            -1, -1, -1, -1, 0x145, 0x146, 0x147, 0x106, -1, -1, -1, -1, 0x10b, 0x14e, 0x14f, 0x150,
            0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1, -1, -1,
            -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e,
            -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1,
            -1, -1, -1, -1, 0x143, -1, -1, 0x146, 0x147, 0x106, 0x149, -1, -1, -1, 0x10b, 0x14e,
            0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1,
            -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1,
            -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            0x13d, -1, -1, -1, -1, -1, -1, -1, 0x145, 0x146, 0x147, 0x106, -1, -1, -1, -1,
            0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1,
            -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a,
            -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1, -1, 0x13a,
            -1, -1, 0x13d, -1, -1, -1, -1, -1, -1, -1, -1, 0x146, 0x147, 0x106, -1, -1,
            0x109, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280,
            -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1,
            -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1, -1, -1, -1, 0x146, 0x147, 0x106,
            -1, -1, -1, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158,
            -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1,
            0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1, 0x143, -1, -1, 0x146,
            0x147, 0x106, -1, -1, -1, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156,
            0x157, 0x158, -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1,
            -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1, 0x143, -1,
            -1, 0x146, 0x147, 0x106, -1, -1, -1, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340,
            0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290,
            0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1,
            -1, -1, -1, 0x146, 0x147, 0x106, 0x149, -1, 0x109, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152,
            0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120,
            -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1,
            0x131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1,
            -1, -1, -1, -1, -1, 0x146, 0x147, 0x106, -1, -1, 0x109, -1, 0x10b, 0x14e, 0x14f, 0x150,
            0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1, -1, -1,
            -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e,
            -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1,
            -1, -1, -1, -1, -1, -1, -1, 0x146, 0x147, 0x106, -1, -1, -1, -1, 0x10b, 0x14e,
            0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1,
            -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1,
            -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            0x13d, -1, -1, -1, -1, -1, 0x143, -1, -1, 0x146, 0x147, 0x106, -1, -1, -1, -1,
            0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1,
            -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a,
            -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1, -1, 0x13a,
            -1, -1, 0x13d, -1, -1, -1, -1, -1, -1, -1, -1, 0x146, 0x147, 0x106, -1, -1,
            -1, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280,
            -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1,
            -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1, -1, -1, -1, 0x146, 0x147, 0x106,
            0x149, -1, -1, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158,
            -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1,
            0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1, 0x143, -1, -1, 0x146,
            0x147, 0x106, -1, -1, -1, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156,
            0x157, 0x158, -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1,
            -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1, -1, -1,
            -1, 0x146, 0x147, 0x106, 0x149, -1, -1, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340,
            0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290,
            0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1,
            -1, -1, -1, 0x146, 0x147, 0x106, 0x149, -1, -1, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152,
            0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120,
            -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1,
            0x131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1,
            -1, -1, -1, -1, -1, 0x146, 0x147, 0x106, 0x149, -1, -1, -1, 0x10b, 0x14e, 0x14f, 0x150,
            0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1, -1, -1,
            -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e,
            -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, -1,
            -1, -1, -1, -1, -1, -1, -1, 0x146, 0x147, 0x106, -1, -1, -1, -1, 0x10b, 0x14e,
            0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1, -1, -1,
            -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a, -1, -1,
            -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            0x13d, -1, -1, -1, -1, -1, -1, -1, -1, 0x146, 0x147, 0x106, -1, -1, -1, -1,
            0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280, -1, -1,
            -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1, -1, 0x12a,
            -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, 0x13d, -1, -1, -1, -1, -1, -1, -1, -1, 0x146, 0x147, 0x106, -1, -1,
            -1, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, 280,
            -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1, 0x127, -1,
            -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1, -1, -1, -1, 0x146, 0x147, 0x106,
            -1, -1, -1, -1, 0x10b, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158,
            -1, 280, -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1, -1,
            0x127, -1, -1, 0x12a, -1, -1, -1, -1, -1, -1, 0x131, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1, -1, -1, -1, 0x146,
            0x147, -1, -1, -1, -1, 0x10b, -1, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156,
            0x157, 0x158, 280, -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1, -1,
            -1, 0x127, -1, -1, 0x12a, -1, -1, -1, 0x12e, -1, -1, 0x131, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, 0x13d, -1, -1, -1, -1, -1, -1, -1, -1,
            0x146, 0x147, -1, -1, -1, -1, 0x10b, -1, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155,
            0x156, 0x157, 0x158, 280, -1, -1, -1, -1, -1, -1, -1, 0x120, -1, 290, 0x123, -1,
            -1, -1, 0x127, -1, -1, 0x12a, -1, -1, -1, -1, -1, -1, 0x131, -1, -1, 280,
            -1, 0x11a, -1, -1, -1, -1, -1, -1, 0x13d, 290, -1, -1, -1, -1, -1, -1,
            -1, 0x146, 0x147, -1, -1, -1, -1, -1, 0x131, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340,
            0x155, 0x156, 0x157, 0x158, 0x13d, -1, -1, 280, -1, 0x11a, -1, -1, -1, 0x146, 0x147, -1,
            -1, 290, -1, -1, -1, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158,
            0x131, -1, -1, 280, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, 290, -1, -1,
            -1, -1, -1, -1, -1, 0x146, 0x147, -1, -1, -1, -1, -1, 0x131, 0x14e, 0x14f, 0x150,
            0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, 0x13d, 280, -1, -1, -1, -1, -1, -1,
            -1, 0x146, 0x147, 290, -1, -1, -1, -1, -1, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340,
            0x155, 0x156, 0x157, 0x158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x13d, 290,
            -1, -1, -1, -1, -1, -1, -1, 0x146, 0x147, -1, -1, -1, -1, -1, -1, 0x14e,
            0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156, 0x157, 0x158, 0x13d, 290, -1, -1, -1, -1,
            -1, -1, -1, 0x146, 0x147, -1, -1, -1, -1, -1, -1, 0x14e, 0x14f, 0x150, 0x151, 0x152,
            0x153, 340, 0x155, 0x156, 0x157, 0x158, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0x146,
            0x147, -1, -1, -1, -1, -1, -1, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 340, 0x155, 0x156,
            0x157, 0x158, 0x146, 0x147, -1, -1, -1, -1, -1, -1, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153,
            340, 0x155, 0x156, 0x157, 0x158
        };
        private bool yydebug;
        private static short[] yydefred = new short[] { 
            0, 0, 0, 2, 0, 0, 6, 0xbb, 0xb9, 0x4c, 0xbc, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0xbd, 0, 0, 0, 0, 0xba, 0x4b, 0x4e, 80, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
            0, 0, 0x75, 0x87, 0x89, 0, 3, 0, 0, 0x88, 0, 0, 0, 7, 0, 0,
            0, 0, 0, 0x9a, 0, 0, 0, 0x9d, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 8, 0, 9, 0, 10, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 14, 11, 12, 0, 0, 0, 0, 0, 0x90, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x8e, 0, 0, 0x58, 0,
            0x97, 0, 0x15, 0x16, 0xa1, 0, 0x9e, 0, 0, 0, 0, 0, 0, 0, 0, 0x73,
            0, 0, 0, 0, 0, 0, 0, 0, 0x98, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x1c, 30, 0x20, 0,
            0, 0x31, 0x6f, 0, 0, 0, 0x91, 0, 0, 0x70, 110, 0x71, 150, 0, 0x99, 0,
            0, 0x95, 0x72, 0, 0, 0, 0, 0, 0, 0, 0, 0x74, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x29, 0, 0,
            0, 0, 0, 0, 0, 0, 0x34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            140, 0x8f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0x1d, 0x1f, 0, 0x2e, 0x24, 0x2b, 0, 0x2a, 0x26, 0, 0x2f, 40, 0, 0, 0x23,
            0, 0x38, 0, 0x37, 0, 0xb6, 0xb7, 0x77, 0, 0x9b, 0, 120, 0x76, 0, 0xa5, 0,
            0xa4, 0, 0xa3, 0, 0xa2, 160, 0x9f, 0, 0, 0, 0x7a, 0, 0, 0, 0x2c, 0x25,
            0x27, 0, 0, 0, 0, 15, 0x3b, 0, 0x79, 0, 0, 0, 0xac, 0xad, 0, 0x7b,
            0x7c, 0x18, 0, 0, 60, 0x9c, 0, 0xa7, 0, 0xa6, 0, 0x7d, 0, 0, 0, 0,
            0, 0, 0x42, 0xa9, 0xa8, 0, 0x47, 0, 0x48, 0x44, 0, 0, 0, 0, 0, 0,
            0, 0x43, 0, 0x3d, 0, 0xaf, 0, 0xae, 0x45, 0, 0, 0, 0, 0xb1, 0, 0xb0,
            0, 0, 0xb3, 0xb2
        };
        private static short[] yydgoto = new short[] { 
            2, 3, 4, 0x4f, 5, 6, 0x37, 0x38, 0x39, 0x3a, 120, 0x24, 60, 0x7a, 0xc0, 0xf5,
            290, 0x145, 0x95, 0x74, 0xe3, 0x8a, 0x75, 0xba, 0xbb, 0xbc, 0xbd, 190, 0xf1, 0xf2, 0xc1, 0xf6,
            0x123, 0x143, 0x146, 0x161, 0x15c, 0x16c, 0x173, 0x162, 0x169, 0x25, 0x51, 0x26, 0x27, 40, 0x29, 0x2a,
            0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 50, 0xfc, 0x33, 0x34, 0x40, 0x80, 0x132, 0x133, 0x14c
        };
        public static short YYERRCODE = 0x100;
        private int yyerrflag;
        private static short YYFINAL = 2;
        private static short[] yygindex = new short[] { 
            0, 0, 0, 0x69, 0, 0x1c5, -1, 0x1b, 0x1ca, 0x43, 0x192, 0x1d, 0, 0, 0, 0,
            0, 0, -74, 0, 0xea, -220, 0, 0, -159, -61, 0x116, 0x117, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0x68, 0x62, 0x6b, -70, 0x86, 0, 0, 0, 0,
            -181, 0, 0, 0, 0, 0, 0, 0, -103, 0, 0, 0, 0, 20, 0, 0xa1
        };
        private static short[] yylen = new short[] { 
            2, 0, 1, 2, 0, 1, 1, 2, 3, 3, 3, 2, 2, 0, 1, 6,
            0, 5, 0, 6, 0, 1, 1, 0, 4, 2, 1, 3, 1, 3, 1, 3,
            1, 3, 5, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 2, 2, 2,
            0, 1, 2, 0, 1, 3, 0, 1, 0, 3, 0, 1, 0, 6, 0, 2,
            0, 2, 1, 3, 2, 4, 0, 1, 1, 1, 3, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 4, 3, 3, 3, 3, 3,
            2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 4, 4, 4,
            4, 4, 4, 3, 4, 1, 6, 6, 6, 7, 6, 7, 7, 8, 3, 4,
            5, 6, 3, 3, 3, 2, 3, 1, 1, 1, 3, 3, 3, 1, 1, 3,
            3, 4, 4, 5, 2, 4, 4, 3, 3, 4, 2, 6, 8, 2, 3, 6,
            6, 3, 6, 6, 6, 6, 8, 8, 10, 10, 0, 1, 2, 2, 6, 6,
            8, 8, 10, 10, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1
        };
        private static short[] yylhs = new short[] { 
            -1, 0, 0, 1, 2, 2, 4, 4, 5, 5, 5, 3, 3, 10, 10, 9,
            0x13, 12, 0x16, 12, 0x12, 0x12, 0x12, 20, 20, 13, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18,
            0x18, 0x1a, 0x1a, 0x1b, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1d, 0x1d,
            14, 14, 30, 15, 15, 0x1f, 0x10, 0x10, 0x21, 0x20, 0x11, 0x11, 0x24, 0x22, 0x25, 0x25,
            0x26, 0x26, 0x23, 0x23, 0x27, 0x27, 40, 40, 40, 0x2a, 0x2a, 11, 11, 11, 11, 11,
            11, 11, 11, 11, 11, 11, 11, 11, 0x2b, 0x35, 0x36, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c,
            0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c,
            0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c,
            0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x2c, 0x39, 0x39, 8, 0x3a, 0x19, 0x19, 0x15, 0x15,
            0x37, 0x37, 0x3b, 0x3b, 60, 0x31, 0x31, 0x31, 7, 0x2d, 50, 0x2e, 0x2e, 0x2f, 0x30, 0x30,
            0x30, 0x30, 0x30, 0x30, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3d, 0x3d, 0x3e, 0x3e, 0x3f, 0x3f,
            0x3f, 0x3f, 0x3f, 0x3f, 0x38, 0x38, 0x38, 0x38, 0x38, 6, 6, 0x29, 0x34, 0x34
        };
        private object yylval;
        private static int YYMAJOR = 1;
        private static short YYMAXTOKEN = 0x15d;
        private static int YYMINOR = 9;
        private static string[] yyname;
        private int yynerrs;
        private static short[] yyrindex = new short[] { 
            0x91, 0, 0, 0, 0, 0xd11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0x13d3, 0x1415, 0x1457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0xb30, 0, 0xde, 0x131, 0, 3, 3, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0x96a, 0, 0, 0, 0, 0, 0,
            -168, 0, 0x22a, 0x27d, 0, 0, 0xd54, 0, 0xd54, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0xd97, 0, 0, 0, 0, 0, 0x22, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0xab0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0x9b0, 0xbb, 0x73b, 0x856, 0x594, 0, 0, 0,
            0x8e2, 0, 0, 0, 0xa7e, 0x781, 0, 0x6af, 0, 0x5da, 0x3c9, 0x41c, 720, 0x323, 0x376, 0x620,
            0x666, 0x46f, 0x4b5, 0x4fb, 0x541, 0x9f6, 0xa3c, 0xe60, 0xd97, 0, 10, 1, 0, 0, 0, 0,
            0x40, 0, 0, 0, 0xab, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xbd, 0x89c,
            0x928, 0x6f5, 0, 0, 0xe60, -108, 0, -31, 0x87, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0x3d, 0, 11, 0, -234, 0, 0x12cb, 0x130d, 0x134f, 0, 0, 0, 0,
            0, 0, 0, 0x13d3, 0x1415, 0x184, 0x184, 0x184, 0x184, 0, 0, 0, 0x7ca, 0, 0, 0xa9,
            0, 0, 0, 4, 0, 0, 0, 0xea3, 0, 0, 0, 0, 0, 0, 0xaf7, 0,
            0, 0, 0x11, 0, -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0x1d7, 0, 0, 0, 0, 0, 0, 0, 0x810, 0, 170, 0, 0,
            0, 0, 0x47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0xad9, 0x29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0x20, 0x35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2b, 0x13d3, 0x1415, 0x20,
            0x45, 0, 0, 0, 0, 0, 0, 0, 0, 0x33, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0
        };
        private static string[] yyrule;
        private static short[] yysindex = new short[] { 
            -310, 0xdda, 0, 0, 0xb73, -310, 0, 0, 0, 0, 0, -319, -258, -216, -182, -176,
            -171, -145, -141, -176, -140, 0xdda, -123, -100, -95, -79, -77, 0xb73, 0xdda, 0xdda, 0xdda, -62,
            0, -157, -89, -229, 0x1391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            -93, 6, 0, 0, 0, 0, 0, -52, -49, 0, -45, 0xfb3, 5, 0, 0xb73, 0xdda,
            -242, 0xdda, 0xdda, 0, 0xb73, 0xb73, 0xb73, 0, 0xdda, 0x151b, 0xdda, 0xdda, 0xdda, 0xb73, 0xdda, -44,
            0x1391, -209, -40, -40, 0xdda, 0, -249, 0, -241, 0, 0xdda, 0xdda, 0xdda, 0xdda, 0xdda, -277,
            0xdda, -177, 0xdda, 0xdda, 0xbc2, 2, 0xdda, 0xdda, 0xdda, 0xdda, 0xdda, 0xdda, 0xdda, 0xdda, 0xdda, 0xdda,
            0xdda, 0xdda, 0xdda, 0xdda, -245, -25, 0, 0, 0, 0xe1d, -18, -23, 0xff5, 0xdda, 0, 0xdda,
            30, 0x1037, 0x1079, -21, -17, -14, -300, 0x10bb, 0x10fd, 0x113f, -283, 0, -13, 0x1181, 0, 0xdda,
            0, 0x11c3, 0, 0, 0, 0xb73, 0, 0xb73, 0x151b, 0x14da, 0x15bd, 0x157b, 0x15ec, -280, -10, 0,
            0x1537, 0xdda, 0xdda, 0xdda, 0x1499, 0x15a1, 0xdda, 0x15d9, 0, 0xb62, -178, -178, -40, -40, -40, 0xb62,
            0xb62, -92, -92, -92, -92, 0x151b, 0x151b, -4, -245, 0xc05, 0x1f, -37, 0, 0, 0, 0xdda,
            0x21, 0, 0, 0xdda, 0x1391, 0x1205, 0, 0xdda, 0xdda, 0, 0, 0, 0, 0xc48, 0, 2,
            0xdda, 0, 0, 0xdda, 0x1391, 0xdda, 0x18, -274, 40, -236, 0x37, 0, 0xc8b, 0xdda, 0x14da, 0x157b,
            0x155f, 0x15d9, 0x39, 0xdda, -4, 0xf2f, -37, 0x3a, 0x42, 0xe1d, -226, -279, 0x2a, 0, -232, 0x60,
            -227, 0xe1d, 0xe1d, 0x1391, 0x5e, 110, 0, 0x1391, 0xdda, -253, -252, 0, 0x48, 0xf71, 0xdda, 0x4d,
            0, 0, 80, -129, -126, 0x58, 0x58, 0x58, 0x58, 0xcce, 0xdda, 0x52, 0x157b, 0xdda, 0xdda, 0x59,
            0xdda, 0, 0, -37, 0, 0, 0, 0x79, 0, 0, 0x7c, 0, 0, 0x7d, 120, 0,
            0xdda, 0, 0x7a, 0, 0x1391, 0, 0, 0, 0xdda, 0, 0x65, 0, 0, 2, 0, 2,
            0, 0x73, 0, 0x73, 0, 0, 0, 0xdda, 0x66, 0x67, 0, 0x157b, 0x1247, 0x59, 0, 0,
            0, 0xdda, 0x59, 0xdda, 0xa5, 0, 0, 0x6a, 0, -153, -116, 0x6c, 0, 0, 0x6f, 0,
            0, 0, 0x1391, 0x1391, 0, 0, 2, 0, 2, 0, 0xdda, 0, 0xdda, 0x70, 0x75, 0x1289,
            0xeed, -197, 0, 0, 0, 0xdda, 0, 0xb1, 0, 0, 0xdda, 0xdda, 0x8d, -98, -54, -212,
            0x1391, 0, 0xdda, 0, 2, 0, 2, 0, 0, 0x1391, -114, -106, 2, 0, 2, 0,
            0x76, 0x77, 0, 0
        };
        private static int YYSTACKSIZE = 500;
        private static short[] yytable = new short[] { 
            0x21, 0x1a, 0x86, 13, 0x1b, 0x125, 0x126, 0x10f, 1, 0x3e, 0x19, 0x36, 0x92, 0x116, 0x97, 0x8b,
            0x92, 0x3a, 0xfb, 0xda, 0x92, 0x9d, 0x9e, 0x8f, 0xfb, 0x117, 230, 0x93, 0x22, 0xcc, 0xfb, 0x93,
            70, 0x3b, 0x30, 0x93, 0x7d, 0x7e, 0x114, 0xfb, 0xd0, 0x39, 0xb7, 0x40, 0x92, 0x92, 0xd1, 0x93,
            0x93, 0x8f, 0x49, 0x41, 0x13d, 0x3e, 0x166, 0x106, 0x3b, 80, 0x52, 0x53, 0x119, 50, 0x3f, 360,
            0x33, 0x11c, 0x115, 0xdb, 0x142, 0x3f, 0x9f, 0x35, 0x11a, 0xfb, 0x113, 0x56, 0x58, 0x11d, 0x7f, 0xd7,
            0x94, 0xd9, 0x11e, 0x11f, 0xfb, 0xfb, 0x92, 0x8f, 150, 0x93, 0xa1, 0x3b, 0x7c, 0x108, 0x81, 130,
            0x59, 0x3b, 0x3b, 0x3b, 0xa8, 80, 0xff, 0x87, 0x88, 0x89, 0x3b, 0x8d, 0x102, 0x36, 0xe4, 0xa2,
            0x41, 0x91, 0x8f, 0xfb, 0x16a, 0x10b, 0xa3, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x90, 160, 0x16b, 0xa4,
            0xa5, 0xa7, 0xfb, 0xa9, 170, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 180, 0xb5,
            0xb6, 1, 0x42, 0x101, 0x65, 0x43, 0x89, 0x12a, 0x1b, 0x47, 0xc4, 0x49, 0xc5, 0x44, 0x69, 0x6a,
            0x6b, 0x49, 0x138, 0x139, 0x8d, 0x49, 0x8b, 0x7b, 0x55, 0x72, 0x156, 0x56, 0xd4, 0x83, 0x84, 0x85,
            0x157, 0x8d, 80, 0x4a, 80, 0x8d, 140, 0x45, 0x8d, 0x4a, 0x8d, 70, 0x48, 0x4a, 0xde, 0xdf,
            0xe0, 0x147, 0x12d, 0xe1, 0x8d, 0x12f, 0xf9, 0x56, 0x12e, 0x8d, 0x58, 0x130, 0xf9, 0x4a, 0x100, 0x158,
            0x14e, 380, 0xf9, 0x8b, 0x103, 0x159, 0xe5, 0x17d, 0xd6, 0x17e, 0xd8, 0xf9, 0xf3, 13, 0x4d, 0x17f,
            0xf7, 0x174, 250, 0x8b, 0x4b, 0xfd, 0x56, 0x175, 250, 0x4c, 0x65, 0xea, 0x57, 0x89, 250, 0x58,
            260, 30, 0x67, 0x68, 0x69, 0x6a, 0x6b, 250, 0xeb, 0x4d, 0x10c, 0x4e, 0xec, 0xf9, 30, 0xed,
            0x89, 0xee, 30, 7, 8, 30, 0x89, 30, 0xf9, 0xf9, 0x54, 0xef, 0x73, 0x176, 0x89, 0x89,
            240, 30, 0x58, 0x177, 0x56, 0x124, 30, 0x58, 0x76, 250, 0x134, 0x135, 310, 0x8e, 0x65, 0x1a,
            0x1a, 0x79, 0x1b, 0x1b, 250, 250, 0xb8, 0xf9, 0x19, 0x19, 0x13b, 0x13c, 0x149, 0x89, 330, 0xbf,
            0x1a, 0x4f, 0xc2, 0x1b, 0xc9, 0xc6, 0xf9, 0xe2, 0xca, 0x19, 0x36, 0xcb, 210, 0x89, 220, 0xf4,
            0x30, 0x30, 0x1a, 250, 0x1a, 0x1b, 0x1a, 0x1b, 70, 0x1b, 0x1a, 0x19, 13, 0x1b, 280, 0x19,
            0x36, 0x30, 250, 0x19, 0x36, 0x15d, 0x3a, 350, 0x39, 70, 0x3a, 50, 50, 0x3e, 0x152, 0x33,
            0x153, 0x105, 0xe9, 70, 0x16d, 70, 0x35, 0x30, 0x11b, 70, 0x120, 0x30, 50, 0x3f, 0x39, 0x33,
            0x40, 0x107, 0x39, 0x17a, 0x40, 0x17b, 0x35, 0x15f, 0x41, 0x160, 0x3e, 0x180, 0x41, 0x181, 0x3e, 0x109,
            0x16e, 270, 50, 0x111, 170, 0x33, 50, 0x170, 0x160, 0x33, 0x3f, 0x112, 0x35, 0x121, 0x3f, 0x179,
            0x35, 0x127, 4, 4, 4, 4, 0x12b, 0x20, 4, 300, 0x131, 0x13a, 0xd0, 0x13e, 4, 4,
            0x13f, 320, 4, 4, 0x20, 0x141, 4, 0x14b, 0x20, 0x144, 4, 0x20, 4, 0x20, 0x148, 0x14f,
            0x150, 340, 7, 0x155, 0x15a, 370, 4, 0x20, 0x15b, 0x163, 4, 4, 0x20, 4, 0x164, 0x182,
            0x183, 0x59, 0x94, 90, 4, 0x11, 0x13, 4, 4, 4, 0x3d, 0x23, 0x77, 4, 0x110, 0xe7,
            0xe8, 0x178, 0x16f, 0x171, 0x14d, 0, 0, 0xab, 0, 4, 0, 0, 0, 4, 0, 4,
            4, 0, 0, 0, 0x4d, 0, 0, 0x4d, 0x4d, 0x4d, 0, 4, 4, 0x4d, 0x4d, 0,
            0, 0x4d, 0, 0, 0x4d, 0x4d, 0x4d, 0, 0x4d, 0, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d,
            0x4d, 0x4d, 0x4d, 0, 0x4d, 0x4d, 0x4d, 0, 0x4d, 0, 0, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d,
            0, 0, 0, 0x4d, 0, 0, 0, 0x4d, 0x4d, 0, 0, 0x4d, 0, 0, 0x4d, 0x4d,
            0, 0x4d, 0, 0x4d, 0x4d, 0x4d, 0, 0x4d, 0, 0, 0x61, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d,
            0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4f, 0, 0, 0x4f, 0x4f, 0x4f, 0, 0, 0,
            0x4f, 0x4f, 0, 0, 0x4f, 0, 0, 0x4f, 0x4f, 0x4f, 0, 0x4f, 0, 0x4f, 0x4f, 0x4f,
            0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0, 0x4f, 0x4f, 0x4f, 0, 0x4f, 0, 0, 0x4f, 0x4f,
            0x4f, 0x4f, 0x4f, 0, 0, 0, 0x4f, 0, 0, 0, 0x4f, 0x4f, 0, 0, 0x4f, 0,
            0, 0x4f, 0x4f, 0, 0x4f, 0, 0x4f, 0x4f, 0x4f, 0, 0x4f, 0, 0, 0x60, 0x4f, 0x4f,
            0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 170, 0, 0, 170, 170, 170,
            0, 0, 0, 170, 170, 0, 0, 170, 0, 0, 170, 170, 170, 0, 170, 0,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 0, 170, 170, 170, 0, 170, 0,
            0, 170, 170, 170, 170, 170, 0, 0, 0, 170, 0, 0, 0, 170, 170, 0,
            0, 170, 0, 0, 170, 170, 0, 170, 0, 170, 170, 170, 0, 170, 0, 0,
            0x5d, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 0xab, 0, 0,
            0xab, 0xab, 0xab, 0, 0, 0, 0xab, 0xab, 0, 0, 0xab, 0, 0, 0xab, 0xab, 0xab,
            0, 0xab, 0, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0, 0xab, 0xab, 0xab,
            0, 0xab, 0, 0, 0xab, 0xab, 0xab, 0xab, 0xab, 0, 0, 0, 0xab, 0, 0, 0,
            0xab, 0xab, 0, 0, 0xab, 0, 0, 0xab, 0xab, 0, 0xab, 0, 0xab, 0xab, 0xab, 0,
            0xab, 0, 0, 0x5e, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
            0x61, 0, 0, 0x61, 0x61, 0x61, 0, 0, 0, 0x61, 0x61, 0, 0, 0x61, 0, 0,
            0x61, 0x61, 0x61, 0, 0x61, 0, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0,
            0x61, 0x61, 0x61, 0, 0x61, 0, 0, 0x61, 0x61, 0x61, 0x61, 0x61, 0, 0, 0, 0x61,
            0, 0, 0, 0x61, 0x61, 0, 0, 0x61, 0, 0, 0x61, 0x61, 0, 0x61, 0, 0x61,
            0, 0x61, 0, 0x61, 0, 0, 0x5f, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
            0x61, 0x61, 0x61, 0x60, 0, 0, 0x60, 0x60, 0x60, 0, 0, 0, 0x60, 0x60, 0, 0,
            0x60, 0, 0, 0x60, 0x60, 0x60, 0, 0x60, 0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
            0x60, 0x60, 0, 0x60, 0x60, 0x60, 0, 0x60, 0, 0, 0x60, 0x60, 0x60, 0x60, 0x60, 0,
            0, 0, 0x60, 0, 0, 0, 0x60, 0x60, 0, 0, 0x60, 0, 0, 0x60, 0x60, 0,
            0x60, 0, 0x60, 0, 0x60, 0, 0x60, 0, 0, 0x5b, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
            0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x5d, 0, 0, 0x5d, 0x5d, 0x5d, 0, 0, 0, 0x5d,
            0x5d, 0, 0, 0x5d, 0, 0, 0x5d, 0x5d, 0x5d, 0, 0x5d, 0, 0x5d, 0x5d, 0x5d, 0x5d,
            0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0, 0x5d, 0x5d, 0x5d, 0, 0x5d, 0, 0, 0x5d, 0x5d, 0x5d,
            0x5d, 0x5d, 0, 0, 0, 0x5d, 0, 0, 0, 0x5d, 0x5d, 0, 0, 0x5d, 0, 0,
            0x5d, 0x5d, 0, 0x5d, 0, 0x5d, 0, 0x5d, 0, 0x5d, 0, 0, 0x5c, 0x5d, 0x5d, 0x5d,
            0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5e, 0, 0, 0x5e, 0x5e, 0x5e, 0,
            0, 0, 0x5e, 0x5e, 0, 0, 0x5e, 0, 0, 0x5e, 0x5e, 0x5e, 0, 0x5e, 0, 0x5e,
            0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0, 0x5e, 0x5e, 0x5e, 0, 0x5e, 0, 0,
            0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0, 0, 0, 0x5e, 0, 0, 0, 0x5e, 0x5e, 0, 0,
            0x5e, 0, 0, 0x5e, 0x5e, 0, 0x5e, 0, 0x5e, 0, 0x5e, 0, 0x5e, 0, 0, 0x65,
            0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5e, 0x5f, 0, 0, 0x5f,
            0x5f, 0x5f, 0, 0, 0, 0x5f, 0x5f, 0, 0, 0x5f, 0, 0, 0x5f, 0x5f, 0x5f, 0,
            0x5f, 0, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0, 0x5f, 0x5f, 0x5f, 0,
            0x5f, 0, 0, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0, 0, 0, 0x5f, 0, 0, 0, 0x5f,
            0x5f, 0, 0, 0x5f, 0, 0x66, 0x5f, 0x5f, 0, 0x5f, 0, 0x5f, 0, 0x5f, 0, 0x5f,
            0, 0, 0, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5b,
            0, 0, 0x5b, 0x5b, 0x5b, 0, 0, 0, 0x5b, 0x5b, 0, 0, 0x5b, 0, 0, 0x5b,
            0x5b, 0x5b, 0, 0x5b, 0, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0, 0x5b,
            0x5b, 0x5b, 0, 0x5b, 0, 0, 0x5b, 0x5b, 0x5b, 0x5b, 0x5b, 0x63, 0, 0, 0x5b, 0,
            0, 0, 0x5b, 0x5b, 0, 0, 0x5b, 0, 0, 0x5b, 0x5b, 0, 0x5b, 0, 0x5b, 0,
            0x5b, 0, 0x5b, 0, 0, 0, 0x5b, 0x5b, 0x5b, 0, 0, 0, 0x5b, 0x5b, 0x5b, 0x5b,
            0x5b, 0x5b, 0x5c, 0, 0, 0x5c, 0x5c, 0x5c, 0, 0, 0, 0x5c, 0x5c, 0, 0, 0x5c,
            0, 0, 0x5c, 0x5c, 0x5c, 0, 0x5c, 0, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c,
            0x5c, 100, 0x5c, 0x5c, 0x5c, 0, 0x5c, 0, 0, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0, 0,
            0, 0x5c, 0, 0, 0, 0x5c, 0x5c, 0, 0, 0x5c, 0, 0, 0x5c, 0x5c, 0, 0x5c,
            0, 0x5c, 0, 0x5c, 0, 0x5c, 0, 0, 0, 0x5c, 0x5c, 0x5c, 0, 0, 0, 0x5c,
            0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x65, 0, 0, 0x65, 0x65, 0x65, 0, 0, 0, 0x65, 0x65,
            0, 0, 0x65, 0, 0, 0x65, 0x65, 0x65, 0, 0x65, 0, 0x65, 0x65, 0x65, 0x65, 0x65,
            0x65, 0x65, 0x65, 0x65, 0x67, 0x65, 0x65, 0x65, 0, 0x65, 0, 0, 0x65, 0x65, 0x65, 0x65,
            0x65, 0, 0, 0, 0x65, 0, 0, 0, 0x65, 0x65, 0, 0, 0x65, 0, 0, 0x65,
            0x65, 0, 0x65, 0, 0x65, 0, 0x65, 0, 0x65, 0, 0, 0x66, 0x65, 0, 0x66, 0x66,
            0x66, 0, 0x65, 0x65, 0x66, 0x66, 0, 0, 0x66, 0, 0, 0x66, 0x66, 0x66, 0, 0x66,
            0, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x8a, 0x66, 0x66, 0x66, 0, 0x66,
            0, 0, 0x66, 0x66, 0x66, 0x66, 0x66, 0, 0, 0, 0x66, 0, 0, 0, 0x66, 0x66,
            0, 0, 0x66, 0, 0, 0x66, 0x66, 0, 0x66, 0, 0x66, 0, 0x66, 0, 0x66, 0,
            0, 0x63, 0x66, 0, 0x63, 0x63, 0x63, 0, 0x66, 0x66, 0x63, 0x63, 0, 0, 0x63, 0,
            0, 0x63, 0x63, 0x63, 0, 0x63, 0, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
            0x8b, 0x63, 0x63, 0x63, 0, 0x63, 0, 0, 0x63, 0x63, 0x63, 0x63, 0x63, 0, 0, 0,
            0x63, 0, 0, 0, 0x63, 0x63, 0, 0, 0x63, 0, 0, 0x63, 0x63, 0, 0x63, 0,
            0x63, 0, 0x63, 0, 0x63, 0, 0, 100, 0x63, 0, 100, 100, 100, 0, 0x63, 0x63,
            100, 100, 0, 0, 100, 0, 0, 100, 100, 100, 0, 100, 0, 100, 100, 100,
            100, 100, 100, 100, 100, 100, 0x62, 100, 100, 100, 0, 100, 0, 0, 100, 100,
            100, 100, 100, 0, 0, 0, 100, 0, 0, 0, 100, 100, 0, 0, 100, 0,
            0, 100, 100, 0, 100, 0, 100, 0, 100, 0, 100, 0, 0, 0, 100, 0,
            0, 0, 0, 0, 100, 100, 0, 0, 0, 0, 0x67, 0, 0, 0x67, 0x67, 0x67,
            0, 0, 0, 0x67, 0x67, 0, 0, 0x67, 0, 0, 0x67, 0x67, 0x67, 0, 0x67, 0x68,
            0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0x67, 0, 0x67, 0x67, 0x67, 0, 0x67, 0,
            0, 0x67, 0x67, 0x67, 0x67, 0x67, 0, 0, 0, 0x67, 0, 0, 0, 0x67, 0x67, 0,
            0, 0x67, 0, 0, 0x67, 0x67, 0, 0x67, 0, 0x67, 0, 0, 0, 0x67, 0, 0,
            0x8a, 0x67, 0, 0x8a, 0x8a, 0x8a, 0, 0, 0, 0x8a, 0x8a, 0, 0, 0x8a, 0, 0,
            0x8a, 0x8a, 0x8a, 0, 0x8a, 0x69, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0,
            0x8a, 0x8a, 0x8a, 0, 0x8a, 0, 0, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0, 0, 0, 0x8a,
            0, 0, 0, 0x8a, 0x8a, 0, 0, 0x8a, 0, 0, 0x8a, 0x8a, 0, 0x8a, 0, 0x8a,
            0, 0, 0, 0x8a, 0, 0, 0x8b, 0x8a, 0, 0x8b, 0x8b, 0x8b, 0, 0, 0, 0x8b,
            0x8b, 0, 0, 0x8b, 0, 0, 0x8b, 0x8b, 0x8b, 0, 0x8b, 0x6a, 0x8b, 0x8b, 0x8b, 0x8b,
            0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0, 0x8b, 0x8b, 0x8b, 0, 0x8b, 0, 0, 0x8b, 0x8b, 0x8b,
            0x8b, 0x8b, 0, 0, 0, 0x8b, 0, 0, 0, 0x8b, 0x8b, 0, 0, 0x8b, 0, 0,
            0x8b, 0x8b, 0, 0x8b, 0, 0x8b, 0, 0, 0, 0x8b, 0, 0, 0x62, 0x8b, 0, 0x62,
            0x62, 0x62, 0, 0, 0, 0x62, 0x62, 0, 0, 0x62, 0, 0, 0x62, 0x62, 0x62, 0,
            0x62, 0x6b, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0, 0x62, 0x62, 0x62, 0,
            0x62, 0, 0, 0x62, 0x62, 0x62, 0x62, 0x62, 0, 0, 0, 0x62, 0, 0, 0, 0x62,
            0x62, 0, 0, 0x62, 0, 0, 0x62, 0x62, 0, 0x62, 0, 0x62, 0, 0, 0, 0x62,
            0, 0, 0, 0x62, 0, 0x68, 0, 0, 0x68, 0x68, 0x68, 0, 0, 0, 0x68, 0x68,
            0, 0, 0x68, 0, 0, 0x68, 0x68, 0x68, 0, 0x68, 0x80, 0x68, 0x68, 0x68, 0x68, 0x68,
            0x68, 0, 0x68, 0x68, 0, 0x68, 0x68, 0x68, 0, 0x68, 0, 0, 0x68, 0x68, 0x68, 0x68,
            0x68, 0, 0, 0, 0x68, 0, 0, 0, 0x68, 0x68, 0, 0, 0x68, 0, 0, 0x68,
            0x68, 0, 0x68, 0, 0x68, 0, 0, 0, 0x68, 0, 0, 0x69, 0x68, 0, 0x69, 0x69,
            0x69, 0, 0, 0, 0x69, 0x69, 0, 0, 0x69, 0, 0, 0x69, 0x69, 0x69, 0, 0x69,
            0x81, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0, 0x69, 0x69, 0, 0x69, 0x69, 0x69, 0, 0x69,
            0, 0, 0x69, 0x69, 0x69, 0x69, 0x69, 0, 0, 0, 0x69, 0, 0, 0, 0x69, 0x69,
            0, 0, 0x69, 0, 0, 0x69, 0x69, 0, 0x69, 0, 0x69, 0, 0, 0, 0x69, 0,
            0, 0x6a, 0x69, 0, 0x6a, 0x6a, 0x6a, 0, 0, 0, 0x6a, 0x6a, 0, 0, 0x6a, 0,
            0, 0x6a, 0x6a, 0x6a, 0, 0x6a, 0x6c, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0, 0x6a, 0x6a,
            0, 0x6a, 0x6a, 0x6a, 0, 0x6a, 0, 0, 0x6a, 0x6a, 0x6a, 0x6a, 0x6a, 0, 0, 0,
            0x6a, 0, 0, 0, 0x6a, 0x6a, 0, 0, 0, 0, 0, 0x6a, 0x6a, 0, 0x6a, 0,
            0x6a, 0, 0, 0, 0x6a, 0, 0, 0x6b, 0x6a, 0, 0x6b, 0x6b, 0x6b, 0, 0, 0,
            0x6b, 0x6b, 0, 0, 0x6b, 0, 0, 0x6b, 0x6b, 0, 0, 0x6b, 0x6d, 0x6b, 0x6b, 0x6b,
            0x6b, 0x6b, 0x6b, 0, 0x6b, 0x6b, 0, 0x6b, 0x6b, 0x6b, 0, 0x6b, 0, 0, 0x6b, 0x6b,
            0x6b, 0x6b, 0x6b, 0, 0, 0, 0x6b, 0, 0, 0, 0x6b, 0x6b, 0, 0, 0, 0,
            0, 0x6b, 0x6b, 0, 0x6b, 0, 0x6b, 0, 0, 0, 0x6b, 0, 0, 0, 0x6b, 0,
            0x80, 0, 0, 0x80, 0x80, 0x80, 0, 0, 0, 0x80, 0x80, 0, 0, 0x80, 0, 0,
            0x80, 0x80, 0x7e, 0, 0x80, 0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0, 0x80, 0x80, 0,
            0x80, 0x80, 0x80, 0, 0x80, 0, 0, 0x80, 0x80, 0x80, 0x80, 0, 0, 0, 0, 0x80,
            0, 0, 0, 0x80, 0x80, 0, 0, 0, 0, 0, 0x80, 0x80, 0, 0x80, 0, 0x80,
            0, 0, 0, 0x80, 0, 0, 0x81, 0x80, 0, 0x81, 0x81, 0x81, 0, 0, 0, 0x81,
            0x81, 0, 0, 0x81, 0, 0, 0x81, 0x81, 0x7f, 0, 0x81, 0, 0x81, 0x81, 0x81, 0x81,
            0x81, 0x81, 0, 0x81, 0x81, 0, 0x81, 0x81, 0x81, 0, 0x81, 0, 0, 0x81, 0x81, 0x81,
            0x81, 0, 0, 0, 0, 0x81, 0, 0, 0, 0x81, 0x81, 0, 0, 0, 0, 0,
            0x81, 0x81, 0, 0x81, 0, 0x81, 0, 0, 0, 0x81, 0, 0, 0x6c, 0x81, 0, 0x6c,
            0x6c, 0x6c, 0, 0, 0, 0x6c, 0x6c, 0, 0, 0x6c, 0x85, 0, 0x6c, 0x6c, 0, 0,
            0x6c, 0, 0x6c, 0x6c, 0x6c, 0x6c, 0, 0x6c, 0, 0x6c, 0x6c, 0, 0x6c, 0, 0x6c, 0,
            0x6c, 0, 0, 0x6c, 0x6c, 0x6c, 0x6c, 0, 0, 0, 0, 0x6c, 0, 0, 0, 0x6c,
            0x6c, 0, 0, 0, 0, 0, 0x6c, 0x6c, 0, 0x6c, 0, 0x6c, 0, 0, 0, 0x6c,
            0, 0, 0x6d, 0x6c, 0, 0x6d, 0x6d, 0x6d, 0, 0, 0, 0x6d, 0x6d, 0, 0, 0x6d,
            0x86, 0, 0x6d, 0x6d, 0, 0, 0x6d, 0, 0x6d, 0x6d, 0x6d, 0x6d, 0, 0x6d, 0, 0x6d,
            0x6d, 0, 0x6d, 0, 0x6d, 0, 0x6d, 0, 0, 0x6d, 0x6d, 0x6d, 0x6d, 0, 0, 0,
            0, 0x6d, 0, 0, 0, 0x6d, 0x6d, 0, 0, 0, 0, 0, 0x6d, 0x6d, 0, 0x6d,
            0, 0x6d, 0, 0, 0, 0x6d, 0, 0, 0x7e, 0x6d, 0, 0x7e, 0x7e, 0x7e, 0, 0,
            0, 0x7e, 0x7e, 0, 0, 0x7e, 130, 0, 0x7e, 0x7e, 0, 0, 0, 0, 0x7e, 0x7e,
            0x7e, 0x7e, 0, 0x7e, 0, 0x7e, 0x7e, 0, 0x7e, 0, 0x7e, 0, 0x7e, 0, 0, 0x7e,
            0x7e, 0x7e, 0x7e, 0, 0, 0, 0, 0x7e, 0, 0, 0, 0x7e, 0x7e, 0, 0, 0,
            0, 0, 0x7e, 0x7e, 0, 0x7e, 0, 0x7e, 0, 0, 0, 0x7e, 0, 0, 0x7f, 0x7e,
            0, 0x7f, 0x7f, 0x7f, 0, 0, 0, 0x7f, 0x7f, 0, 0, 0x7f, 0x83, 0, 0x7f, 0x7f,
            0, 0, 0, 0, 0x7f, 0x7f, 0x7f, 0x7f, 0, 0x7f, 0, 0x7f, 0x7f, 0, 0x7f, 0,
            0x7f, 0, 0x7f, 0, 0, 0x7f, 0x7f, 0x7f, 0x7f, 0, 0, 0, 0, 0x7f, 0, 0,
            0, 0x7f, 0x7f, 0, 0, 0, 0, 0, 0x7f, 0x7f, 0, 0x7f, 0, 0x7f, 0, 0,
            0x85, 0x7f, 0, 0x85, 0x85, 0x7f, 0, 0, 0, 0x85, 0x85, 0, 0, 0x85, 0x84, 0,
            0x85, 0x85, 0, 0, 0x85, 0, 0x85, 0x85, 0x85, 0x85, 0, 0x85, 0, 0, 0x85, 0,
            0x85, 0, 0x85, 0, 0, 0, 0, 0x85, 0x85, 0x85, 0x85, 0, 0, 0, 0, 0x85,
            0, 0, 0, 0x85, 0x85, 0, 0, 0, 0, 0, 0x85, 0x85, 0, 0x85, 0, 0x85,
            0x8d, 0, 0, 0x85, 0, 0, 0x86, 0x85, 0, 0x86, 0x86, 0, 0, 0, 0, 0x86,
            0x86, 0, 0, 0x86, 0, 0, 0x86, 0x86, 0, 0, 0x86, 0, 0x86, 0x86, 0x86, 0x86,
            0, 0x86, 0, 0, 0x86, 0, 0x86, 0, 0x86, 0x22, 0, 0, 0, 0x86, 0x86, 0x86,
            0x86, 0, 0, 0, 0, 0x86, 0, 0, 0, 0x86, 0x86, 0, 0, 0, 0, 0,
            0x86, 0x86, 0, 0x86, 0, 0x86, 0, 0x21, 0, 0x86, 0, 0, 130, 0x86, 0, 130,
            130, 0, 0, 0, 0, 130, 130, 0, 0, 130, 0, 0, 130, 130, 0, 0,
            130, 0, 130, 130, 130, 130, 0, 130, 0, 0, 130, 0, 130, 0, 130, 0,
            0, 0, 0, 130, 130, 130, 130, 0, 0, 0, 0, 130, 0, 0, 0, 130,
            130, 0, 0, 0, 0, 0, 130, 130, 0, 130, 0, 130, 0, 0, 0, 130,
            0, 0, 0x83, 130, 0, 0x83, 0x83, 0, 0, 0, 0, 0x83, 0x83, 0, 0, 0x83,
            0, 0, 0x83, 0x83, 0, 0, 0x83, 0, 0x83, 0x83, 0x83, 0x83, 0, 0x83, 0, 0,
            0x83, 0, 0x83, 0, 0x83, 0, 0, 0, 0, 0x83, 0x83, 0x83, 0x83, 0, 0, 0,
            0, 0x83, 0, 0, 0, 0x83, 0x83, 0, 0, 0, 0, 0, 0x83, 0x83, 0, 0x83,
            0, 0x83, 0, 0, 0, 0x83, 0, 0x84, 0x84, 0x83, 0, 0, 0, 0x84, 0x84, 0,
            0, 0x84, 0, 0, 0x84, 0x84, 0, 0, 0x84, 0, 0x84, 0x84, 0x84, 0x84, 0, 0x84,
            0, 0, 0x84, 0, 0x84, 0, 0x84, 0, 0, 0, 0, 0x84, 0x84, 0x84, 0x84, 0,
            0, 0, 0, 0x84, 0, 0, 0, 0x84, 0x84, 0, 0, 0, 0, 0, 0x84, 0x84,
            0x8d, 0x84, 0, 0x84, 0, 0, 0, 0x84, 0, 0, 0, 0x84, 0x8d, 0x8d, 0x8d, 0x8d,
            0, 0x8d, 0, 0, 0x8d, 0, 0x8d, 0, 0, 0, 0, 0, 0, 0x8d, 0, 0x8d,
            0x8d, 0, 0, 0, 0, 0x8d, 0, 0, 0, 0x22, 0, 0, 0, 0, 0, 0,
            0, 0x8d, 0, 0x8d, 0, 0x8d, 0x22, 0x22, 0x22, 0x8d, 0x22, 0, 0, 0x22, 0, 0x22,
            0, 0, 0, 0, 0, 0, 0x22, 0x21, 0x22, 0x22, 0, 0, 0, 0, 0x22, 0,
            0, 0, 0, 0, 0x21, 0x21, 0x21, 0, 0x21, 0, 0x22, 0x21, 0x22, 0x21, 0x22, 0,
            0, 0, 0x22, 0, 0, 0, 0x21, 0x21, 0, 0, 0, 0, 0x21, 0, 0, 0,
            0, 0x10, 0x10, 0x10, 0x10, 0x10, 0, 0x10, 0x21, 0, 0x21, 0, 0x21, 0x10, 0x10, 0,
            0x21, 0x10, 0x10, 0, 0x10, 0x10, 0, 0, 0, 0x10, 0, 0x10, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0x10, 0, 0, 0, 0x10, 0x10, 0, 0x10, 0, 0, 0,
            0, 0, 0, 0x10, 0, 0, 0x10, 0, 0x10, 0, 0, 0x10, 0x10, 0, 0, 0x12,
            0, 0, 0, 0, 7, 8, 9, 10, 0x10, 0, 11, 0, 0x10, 0, 0x10, 0x10,
            12, 13, 0, 0, 14, 15, 0, 0, 0x10, 0, 0x10, 0x10, 0x11, 0, 0x12, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0x13, 0, 0, 0, 20, 0x15, 0, 0x16,
            0, 0, 0, 0, 0, 0, 0x17, 0, 0x65, 0x18, 0x35, 0x19, 0, 0, 0, 0x1a,
            0x67, 0x68, 0x69, 0x6a, 0x6b, 0, 0, 110, 0x6f, 0x70, 0x71, 0x1b, 0, 0, 0, 0x1c,
            0, 0x1d, 30, 7, 8, 9, 10, 0xa6, 0, 11, 0, 0, 0, 0x1f, 0x20, 12,
            13, 0, 0, 14, 15, 0, 0, 0x10, 0, 0, 0, 0x11, 0, 0x12, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0x13, 0, 0, 0, 20, 0x15, 0, 0x16, 0,
            0, 0, 0, 0, 0, 0x17, 0, 0, 0x18, 0, 0x19, 0, 0, 0, 0x1a, 0,
            0, 0, 0, 0, 0, 0, 7, 8, 9, 10, 0x1b, 0, 11, 0, 0x1c, 0,
            0x1d, 30, 12, 13, 0, 0, 14, 15, 0, 0, 0x10, 0, 0x1f, 0x20, 0x11, 0,
            0x12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x13, 0, 0, 0, 20, 0x15,
            0, 0x16, 0, 0, 0, 0, 0, 0, 0x17, 0, 0, 0x18, 0x35, 0x19, 0, 0,
            0, 0x1a, 0, 0, 0, 0, 0, 0, 0, 7, 8, 9, 10, 0xb9, 0, 11,
            0, 0x1c, 0, 0x1d, 30, 12, 13, 0, 0, 14, 15, 0, 0, 0x10, 0, 0x1f,
            0x20, 0x11, 0, 0x12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x13, 0, 0,
            0, 20, 0x15, 0, 0x16, 0, 0, 0, 0, 0, 0xfe, 0x17, 0, 0, 0x18, 0,
            0x19, 0, 0, 0, 0x1a, 0, 0, 0, 0, 0, 0, 0, 7, 8, 9, 10,
            0x1b, 0, 11, 0, 0x1c, 0, 0x1d, 30, 12, 13, 0, 0, 14, 15, 0, 0,
            0x10, 0, 0x1f, 0x20, 0x11, 0, 0x12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0x13, 0, 0, 0, 20, 0x15, 0, 0x16, 0, 0, 0, 0, 0, 0x10a, 0x17, 0,
            0, 0x18, 0, 0x19, 0, 0, 0, 0x1a, 0, 0, 0, 0, 0, 0, 0, 7,
            8, 9, 10, 0x1b, 0, 11, 0, 0x1c, 0, 0x1d, 30, 12, 13, 0, 0, 14,
            15, 0, 0, 0x10, 0, 0x1f, 0x20, 0x11, 0, 0x12, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0x13, 0, 0, 0, 20, 0x15, 0, 0x16, 0, 0, 0, 0, 0,
            0x137, 0x17, 0, 0, 0x18, 0, 0x19, 0, 0, 0, 0x1a, 0, 0, 0, 0, 0,
            0, 0, 5, 5, 5, 5, 0x1b, 0, 5, 0, 0x1c, 0, 0x1d, 30, 5, 5,
            0, 0, 5, 5, 0, 0, 5, 0, 0x1f, 0x20, 5, 0, 5, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 5, 0, 5, 0, 0,
            0, 0, 0, 0, 5, 0, 0, 5, 5, 5, 0, 0, 0, 5, 0, 0,
            0, 0, 0, 0, 0, 20, 20, 20, 20, 5, 0, 20, 0, 5, 0, 5,
            5, 20, 20, 0, 0, 20, 20, 0, 0, 20, 0, 5, 5, 20, 0, 20,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 20, 0,
            20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 20, 20, 0, 0, 0,
            20, 0, 0, 0, 0, 0, 0, 0, 20, 20, 20, 20, 20, 0, 20, 0,
            20, 0, 20, 20, 20, 20, 0, 0, 20, 20, 0, 0, 20, 0, 20, 20,
            20, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0,
            20, 20, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 20,
            0, 0, 20, 20, 0, 0, 0, 0, 0, 0, 0, 7, 8, 9, 10, 20,
            0, 11, 0, 20, 0, 20, 20, 12, 13, 0, 0, 14, 15, 0, 0, 0x10,
            0, 20, 20, 0x11, 0, 0x12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x13,
            0, 0, 0, 20, 0x15, 0, 0x16, 0, 0, 0, 0, 0, 0, 0x17, 0, 0,
            0x18, 0, 0x19, 0, 0, 0, 0x1a, 0, 0, 0, 0, 0, 0, 0, 7, 8,
            9, 10, 0x1b, 0, 11, 0, 0x1c, 0, 0x1d, 30, 12, 13, 0, 0, 14, 15,
            0, 0, 0x10, 0, 0x1f, 0x20, 0x11, 0, 0x12, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0x13, 0, 0, 0, 20, 0x15, 0, 0x16, 0, 0, 0, 0, 0, 0,
            0x17, 0, 0, 0x18, 0, 0x19, 0, 0, 0, 0x1a, 0, 0, 0, 0, 0, 0,
            0, 0x17, 0x17, 0x17, 0x17, 0xb9, 0, 0x17, 0, 0x1c, 0, 0x1d, 30, 0x17, 0x17, 0,
            0, 0x17, 0x17, 0, 0, 0x17, 0, 0x1f, 0x20, 0x17, 0, 0x17, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0x17, 0, 0, 0, 0x17, 0x17, 0, 0x17, 0, 0, 0,
            0, 0, 0, 0x17, 0, 0, 0x17, 0, 0x17, 0, 0, 0, 0x17, 0, 0, 0,
            0, 0, 0, 0, 0x2d, 0x2d, 0x2d, 0x2d, 0x17, 0, 0x2d, 0, 0x17, 0, 0x17, 0x17,
            0x2d, 0x2d, 0, 0, 0x2d, 0x2d, 0, 0, 0x2d, 0, 0x17, 0x17, 0x2d, 0, 0x2d, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0x2d, 0, 0, 0, 0x2d, 0x2d, 0, 0x2d,
            0, 0, 0, 0, 0, 0, 0x2d, 0, 0, 0x2d, 0, 0x2d, 0, 0, 0, 0x2d,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d, 0, 0, 0, 0x2d,
            0, 0x2d, 0x2d, 90, 0, 0, 0, 0x166, 0x5b, 0, 0, 0, 0x167, 0x2d, 0x2d, 0,
            360, 0, 0, 0, 0, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0x5d, 0, 0x5e,
            0x5f, 0, 0, 0, 0x60, 0, 0, 0x61, 0, 0, 0, 0x62, 0, 0, 0x63, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
            0, 0, 0, 0x65, 0x66, 90, 0, 0, 0xcf, 0, 0x5b, 0x67, 0x68, 0x69, 0x6a, 0x6b,
            0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0x5d,
            0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0, 0, 0x61, 0, 0, 0, 0x62, 0, 0,
            0x63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
            0, 0, 0, 0, 0x76, 0x65, 0x66, 90, 0, 0, 0, 0, 0x5b, 0x67, 0x68, 0x69,
            0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x5c, 0, 0, 0, 0, 0, 0,
            0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0, 0, 0x61, 0, 0, 0, 0x62,
            0, 0, 0x63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
            0, 0, 0, 0, 0x128, 0, 0, 0x65, 0x66, 90, 0x129, 0, 0, 0, 0x5b, 0x67,
            0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x5c, 0, 0, 0, 0,
            0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0, 0, 0x61, 0, 0,
            0, 0x62, 0, 0, 0x63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            100, 0, 0, 0, 0, 0, 0, 0, 0x76, 0x65, 0x66, 90, 0, 0, 0, 0,
            0x5b, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x5c, 0, 0,
            0, 0, 0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0, 0, 0x61,
            0, 0, 0, 0x62, 0, 0, 0x63, 0, 0, 0, 0, 0, 0, 0, 0, 0xc3,
            0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0x65, 0x66, 90, 0, 0,
            0xc7, 0, 0x5b, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x5c,
            0, 0, 0, 0, 0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0,
            0, 0x61, 0, 0, 0, 0x62, 0, 0, 0x63, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0x65, 0x66, 90,
            0, 0, 0, 0, 0x5b, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71,
            0, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0,
            0x60, 0, 0, 0x61, 0, 0, 0, 0x62, 0, 0, 0x63, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 200, 0, 0, 0x65,
            0x66, 90, 0, 0, 0, 0, 0x5b, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f,
            0x70, 0x71, 0, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0,
            0, 0, 0x60, 0, 0, 0x61, 0, 0, 0, 0x62, 0, 0, 0x63, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0xcd, 0,
            0, 0x65, 0x66, 90, 0, 0, 0, 0, 0x5b, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d,
            110, 0x6f, 0x70, 0x71, 0, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0x5d, 0, 0x5e,
            0x5f, 0, 0, 0, 0x60, 0, 0, 0x61, 0, 0, 0, 0x62, 0, 0, 0x63, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
            0, 0, 0, 0x65, 0x66, 90, 0xce, 0, 0xcf, 0, 0x5b, 0x67, 0x68, 0x69, 0x6a, 0x6b,
            0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0x5d,
            0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0, 0, 0x61, 0, 0, 0, 0x62, 0, 0,
            0x63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
            0, 0, 0, 0, 0, 0x65, 0x66, 90, 0, 0, 0xd3, 0, 0x5b, 0x67, 0x68, 0x69,
            0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x5c, 0, 0, 0, 0, 0, 0,
            0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0, 0, 0x61, 0, 0, 0, 0x62,
            0, 0, 0x63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
            0, 0, 0, 0, 0, 0, 0, 0x65, 0x66, 90, 0, 0, 0, 0, 0x5b, 0x67,
            0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x5c, 0, 0, 0, 0,
            0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0, 0, 0x61, 0, 0,
            0, 0x62, 0, 0, 0x63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            100, 0, 0, 0, 0, 0, 0xd5, 0, 0, 0x65, 0x66, 90, 0, 0, 0, 0,
            0x5b, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x5c, 0, 0,
            0, 0, 0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0, 0, 0x61,
            0, 0, 0, 0x62, 0, 0, 0x63, 0, 0, 0, 0, 0, 0, 0, 0, 0xf8,
            0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0x65, 0x66, 90, 0, 0,
            0, 0, 0x5b, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x5c,
            0, 0, 0, 0, 0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0,
            0, 0x61, 0, 0, 0, 0x62, 0, 0, 0x63, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0x65, 0x66, 90,
            0x151, 0, 0, 0, 0x5b, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71,
            0, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0,
            0x60, 0, 0, 0x61, 0, 0, 0, 0x62, 0, 0, 0x63, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0x165, 0, 0, 0x65,
            0x66, 0x4d, 0, 0, 0, 0, 0x4d, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f,
            0x70, 0x71, 0, 0x4d, 0, 0, 0, 0, 0, 0, 0, 0x4d, 0, 0x4d, 0x4d, 0,
            0, 0, 0x4d, 0, 0, 0x4d, 0, 0, 0, 0x4d, 0, 0, 0x4d, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0x4d, 0, 0, 0, 0, 0, 0, 0,
            0, 0x4d, 0x4d, 0x4f, 180, 0, 0, 0, 0x4f, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d,
            0x4d, 0x4d, 0x4d, 0x4d, 0, 0x4f, 0, 0, 0, 0, 0, 0, 0, 0x4f, 0, 0x4f,
            0x4f, 0, 0, 0, 0x4f, 0, 0, 0x4f, 0, 0, 0, 0x4f, 0, 0, 0x4f, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x4f, 0, 0, 0, 0, 0,
            0, 0, 0, 0x4f, 0x4f, 0x53, 0xb5, 0, 0, 0, 0x53, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f,
            0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0, 0x53, 0, 0, 0, 0, 0, 0, 0, 0x53,
            0, 0x53, 0x53, 0, 0, 0, 0x53, 0, 0, 0x53, 0, 0, 0, 0x53, 0, 0,
            0x53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x53, 0, 0, 0,
            0, 0, 0, 0, 0, 0x53, 0x53, 90, 0xb8, 0, 0, 0, 0x5b, 0x53, 0x53, 0x53,
            0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0, 0x5c, 0, 0, 0, 0, 0, 0,
            0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0, 0x60, 0, 0, 0x61, 0, 0, 0, 0x62,
            0, 0, 0x63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
            0, 0, 0, 0, 0, 0, 0, 0x65, 0x66, 0x4d, 0, 0, 0, 0, 0x4d, 0x67,
            0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0x4d, 0, 0, 0, 0,
            0, 0, 0, 0x4d, 0, 0x4d, 0x4d, 0, 0, 0, 0x4d, 0, 0, 0x4d, 0, 0,
            0, 0x4d, 0, 0, 0x4d, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0x4d, 0, 0, 0, 0, 0, 0, 0, 0, 0x4d, 0x4d, 0x4f, 0, 0, 0, 0,
            0x4f, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0x4d, 0, 0x4f, 0, 0,
            0, 0, 0, 0, 0, 0x4f, 0, 0x4f, 0x4f, 0, 0, 0, 0x4f, 0, 0, 0x4f,
            0, 0, 0, 0x4f, 0, 0, 0x4f, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0x4f, 0, 0, 0, 0, 0, 0, 0, 0, 0x4f, 0x4f, 0x88, 0, 0,
            0, 0, 0x88, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0x4f, 0, 0x88,
            0, 0, 0, 0, 0, 0, 0, 0x88, 0, 0x88, 0x88, 0, 0, 0, 0x88, 0,
            0, 0x88, 0, 0, 0, 0x88, 0, 0, 0x88, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0x88, 0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x88, 90,
            0, 0, 0, 0, 0x5b, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
            0, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0, 0, 0,
            0x60, 0, 0, 0x61, 0, 0, 0, 0, 0, 0, 0x63, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0x65,
            0x66, 0, 0, 0, 0, 0x5b, 0, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f,
            0x70, 0x71, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0, 0,
            0, 0x60, 0, 0, 0x61, 0, 0, 0, 0x62, 0, 0, 0x63, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
            0x65, 0x66, 0, 0, 0, 0, 0x5b, 0, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110,
            0x6f, 0x70, 0x71, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0x5d, 0, 0x5e, 0x5f, 0,
            0, 0, 0x60, 0, 0, 0x61, 0, 0, 0, 0, 0, 0, 0x63, 0, 0, 0x5c,
            0, 0xdd, 0, 0, 0, 0, 0, 0, 100, 0x5e, 0, 0, 0, 0, 0, 0,
            0, 0x65, 0x66, 0, 0, 0, 0, 0, 0x63, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d,
            110, 0x6f, 0x70, 0x71, 100, 0, 0, 0x5c, 0, 0x10d, 0, 0, 0, 0x65, 0x66, 0,
            0, 0x5e, 0, 0, 0, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71,
            0x63, 0, 0, 0x5c, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0x5e, 0, 0,
            0, 0, 0, 0, 0, 0x65, 0x66, 0, 0, 0, 0, 0, 0x63, 0x67, 0x68, 0x69,
            0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 100, 0x5c, 0, 0, 0, 0, 0, 0,
            0, 0x65, 0x66, 0x5e, 0, 0, 0, 0, 0, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d,
            110, 0x6f, 0x70, 0x71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0x5e,
            0, 0, 0, 0, 0, 0, 0, 0x65, 0x66, 0, 0, 0, 0, 0, 0, 0x67,
            0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 100, 0x5e, 0, 0, 0, 0,
            0, 0, 0, 0x65, 0x66, 0, 0, 0, 0, 0, 0, 0x67, 0x68, 0x69, 0x6a, 0x6b,
            0x6c, 0x6d, 110, 0x6f, 0x70, 0x71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x65,
            0x66, 0, 0, 0, 0, 0, 0, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 110, 0x6f,
            0x70, 0x71, 0x65, 0x66, 0, 0, 0, 0, 0, 0, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,
            0x6d, 110, 0x6f, 0x70, 0x71
        };
        private static int YYTABLESIZE = 0x1744;
        private object yyval;

        static CqlParser()
        {
            string[] strArray = new string[350];
            strArray[0] = "end-of-file";
            strArray[0x101] = "IDENTIFIER";
            strArray[0x102] = "ESCAPED_IDENTIFIER";
            strArray[0x103] = "PARAMETER";
            strArray[260] = "LITERAL";
            strArray[0x105] = "ALL";
            strArray[0x106] = "AND";
            strArray[0x107] = "ANYELEMENT";
            strArray[0x108] = "APPLY";
            strArray[0x109] = "AS";
            strArray[0x10a] = "ASC";
            strArray[0x10b] = "BETWEEN";
            strArray[0x10c] = "BY";
            strArray[0x10d] = "CASE";
            strArray[270] = "CAST";
            strArray[0x10f] = "COLLATE";
            strArray[0x110] = "CROSS";
            strArray[0x111] = "CREATEREF";
            strArray[0x112] = "DEREF";
            strArray[0x113] = "DESC";
            strArray[0x114] = "DISTINCT";
            strArray[0x115] = "ELEMENT";
            strArray[0x116] = "ELSE";
            strArray[0x117] = "END";
            strArray[280] = "EXCEPT";
            strArray[0x119] = "EXISTS";
            strArray[0x11a] = "ESCAPE";
            strArray[0x11b] = "FLATTEN";
            strArray[0x11c] = "FROM";
            strArray[0x11d] = "FULL";
            strArray[0x11e] = "GROUP";
            strArray[0x11f] = "HAVING";
            strArray[0x120] = "IN";
            strArray[0x121] = "INNER";
            strArray[290] = "INTERSECT";
            strArray[0x123] = "IS";
            strArray[0x124] = "JOIN";
            strArray[0x125] = "KEY";
            strArray[0x126] = "LEFT";
            strArray[0x127] = "LIKE";
            strArray[0x128] = "LIMIT";
            strArray[0x129] = "MULTISET";
            strArray[0x12a] = "NOT";
            strArray[0x12b] = "OF";
            strArray[300] = "OFTYPE";
            strArray[0x12d] = "ON";
            strArray[0x12e] = "OR";
            strArray[0x12f] = "ORDER";
            strArray[0x130] = "OUTER";
            strArray[0x131] = "OVERLAPS";
            strArray[0x132] = "ONLY";
            strArray[0x133] = "REF";
            strArray[0x134] = "RELATIONSHIP";
            strArray[0x135] = "RIGHT";
            strArray[310] = "ROW";
            strArray[0x137] = "SELECT";
            strArray[0x138] = "SET";
            strArray[0x139] = "SKIP";
            strArray[0x13a] = "THEN";
            strArray[0x13b] = "TOP";
            strArray[0x13c] = "TREAT";
            strArray[0x13d] = "UNION";
            strArray[0x13e] = "USING";
            strArray[0x13f] = "VALUE";
            strArray[320] = "WHEN";
            strArray[0x141] = "WHERE";
            strArray[0x142] = "WITH";
            strArray[0x143] = "COMMA";
            strArray[0x144] = "COLON";
            strArray[0x145] = "SCOLON";
            strArray[0x146] = "DOT";
            strArray[0x147] = "EQUAL";
            strArray[0x148] = "L_PAREN";
            strArray[0x149] = "R_PAREN";
            strArray[330] = "L_BRACE";
            strArray[0x14b] = "R_BRACE";
            strArray[0x14c] = "L_CURLY";
            strArray[0x14d] = "R_CURLY";
            strArray[0x14e] = "PLUS";
            strArray[0x14f] = "MINUS";
            strArray[0x150] = "STAR";
            strArray[0x151] = "FSLASH";
            strArray[0x152] = "PERCENT";
            strArray[0x153] = "OP_EQ";
            strArray[340] = "OP_NEQ";
            strArray[0x155] = "OP_LT";
            strArray[0x156] = "OP_LE";
            strArray[0x157] = "OP_GT";
            strArray[0x158] = "OP_GE";
            strArray[0x159] = "QMARK";
            strArray[0x15a] = "NAVIGATE";
            strArray[0x15b] = "NULL";
            strArray[0x15c] = "UNARYPLUS";
            strArray[0x15d] = "UNARYMINUS";
            yyname = strArray;
            yyrule = new string[] { 
                "$accept : commandStart", "commandStart :", "commandStart : command", "command : optNamespaceDeclList generalExpr", "optNamespaceDeclList :", "optNamespaceDeclList : namespaceDeclList", "namespaceDeclList : namespaceDecl", "namespaceDeclList : namespaceDeclList namespaceDecl", "namespaceDecl : USING identifier SCOLON", "namespaceDecl : USING dotExpr SCOLON", "namespaceDecl : USING assignExpr SCOLON", "generalExpr : queryExpr optSemiColon", "generalExpr : Expr optSemiColon", "optSemiColon :", "optSemiColon : SCOLON", "queryExpr : selectClause fromClause optWhereClause optGroupByClause optHavingClause optOrderByClause",
                "$$1 :", "selectClause : SELECT $$1 optAllOrDistinct optTopClause aliasExprList", "$$2 :", "selectClause : SELECT $$2 VALUE optAllOrDistinct optTopClause aliasExprList", "optAllOrDistinct :", "optAllOrDistinct : ALL", "optAllOrDistinct : DISTINCT", "optTopClause :", "optTopClause : TOP L_PAREN Expr R_PAREN", "fromClause : FROM fromClauseList", "fromClauseList : fromClauseItem", "fromClauseList : fromClauseList COMMA fromClauseItem", "fromClauseItem : aliasExpr", "fromClauseItem : L_PAREN joinClauseItem R_PAREN", "fromClauseItem : joinClauseItem", "fromClauseItem : L_PAREN applyClauseItem R_PAREN",
                "fromClauseItem : applyClauseItem", "joinClauseItem : fromClauseItem joinType fromClauseItem", "joinClauseItem : fromClauseItem joinType fromClauseItem ON Expr", "applyClauseItem : fromClauseItem applyType fromClauseItem", "joinType : CROSS JOIN", "joinType : LEFT OUTER JOIN", "joinType : LEFT JOIN", "joinType : RIGHT OUTER JOIN", "joinType : RIGHT JOIN", "joinType : JOIN", "joinType : INNER JOIN", "joinType : FULL JOIN", "joinType : FULL OUTER JOIN", "joinType : FULL OUTER", "applyType : CROSS APPLY", "applyType : OUTER APPLY",
                "optWhereClause :", "optWhereClause : whereClause", "whereClause : WHERE Expr", "optGroupByClause :", "optGroupByClause : groupByClause", "groupByClause : GROUP BY aliasExprList", "optHavingClause :", "optHavingClause : havingClause", "$$3 :", "havingClause : HAVING $$3 Expr", "optOrderByClause :", "optOrderByClause : orderByClause", "$$4 :", "orderByClause : ORDER BY $$4 orderByItemList optSkipSubClause optLimitSubClause", "optSkipSubClause :", "optSkipSubClause : SKIP Expr",
                "optLimitSubClause :", "optLimitSubClause : LIMIT Expr", "orderByItemList : orderByClauseItem", "orderByItemList : orderByItemList COMMA orderByClauseItem", "orderByClauseItem : Expr optAscDesc", "orderByClauseItem : Expr COLLATE simpleIdentifier optAscDesc", "optAscDesc :", "optAscDesc : ASC", "optAscDesc : DESC", "exprList : Expr", "exprList : exprList COMMA Expr", "Expr : parenExpr", "Expr : PARAMETER", "Expr : identifier", "Expr : builtInExpr", "Expr : dotExpr",
                "Expr : refExpr", "Expr : createRefExpr", "Expr : keyExpr", "Expr : methodExpr", "Expr : ctorExpr", "Expr : derefExpr", "Expr : navigateExpr", "Expr : literalExpr", "parenExpr : L_PAREN generalExpr R_PAREN", "betweenPrefix : Expr BETWEEN Expr", "notBetweenPrefix : Expr NOT BETWEEN Expr", "builtInExpr : Expr PLUS Expr", "builtInExpr : Expr MINUS Expr", "builtInExpr : Expr STAR Expr", "builtInExpr : Expr FSLASH Expr", "builtInExpr : Expr PERCENT Expr",
                "builtInExpr : MINUS Expr", "builtInExpr : PLUS Expr", "builtInExpr : Expr OP_NEQ Expr", "builtInExpr : Expr OP_GT Expr", "builtInExpr : Expr OP_GE Expr", "builtInExpr : Expr OP_LT Expr", "builtInExpr : Expr OP_LE Expr", "builtInExpr : Expr INTERSECT Expr", "builtInExpr : Expr UNION Expr", "builtInExpr : Expr UNION ALL Expr", "builtInExpr : Expr EXCEPT Expr", "builtInExpr : Expr OVERLAPS Expr", "builtInExpr : Expr IN Expr", "builtInExpr : Expr NOT IN Expr", "builtInExpr : EXISTS L_PAREN generalExpr R_PAREN", "builtInExpr : ANYELEMENT L_PAREN generalExpr R_PAREN",
                "builtInExpr : ELEMENT L_PAREN generalExpr R_PAREN", "builtInExpr : FLATTEN L_PAREN generalExpr R_PAREN", "builtInExpr : SET L_PAREN generalExpr R_PAREN", "builtInExpr : Expr IS NULL", "builtInExpr : Expr IS NOT NULL", "builtInExpr : searchedCaseExpr", "builtInExpr : TREAT L_PAREN Expr AS typeIdentifier R_PAREN", "builtInExpr : CAST L_PAREN Expr AS typeIdentifier R_PAREN", "builtInExpr : OFTYPE L_PAREN Expr COMMA typeIdentifier R_PAREN", "builtInExpr : OFTYPE L_PAREN Expr COMMA ONLY typeIdentifier R_PAREN", "builtInExpr : Expr IS OF L_PAREN typeIdentifier R_PAREN", "builtInExpr : Expr IS NOT OF L_PAREN typeIdentifier R_PAREN", "builtInExpr : Expr IS OF L_PAREN ONLY typeIdentifier R_PAREN", "builtInExpr : Expr IS NOT OF L_PAREN ONLY typeIdentifier R_PAREN", "builtInExpr : Expr LIKE Expr", "builtInExpr : Expr NOT LIKE Expr",
                "builtInExpr : Expr LIKE Expr ESCAPE Expr", "builtInExpr : Expr NOT LIKE Expr ESCAPE Expr", "builtInExpr : betweenPrefix AND Expr", "builtInExpr : notBetweenPrefix AND Expr", "builtInExpr : Expr OR Expr", "builtInExpr : NOT Expr", "builtInExpr : Expr AND Expr", "builtInExpr : equalsOrAssignExpr", "equalsOrAssignExpr : assignExpr", "equalsOrAssignExpr : equalsExpr", "assignExpr : Expr EQUAL Expr", "equalsExpr : Expr OP_EQ Expr", "aliasExpr : Expr AS identifier", "aliasExpr : Expr", "aliasExprList : aliasExpr", "aliasExprList : aliasExprList COMMA aliasExpr",
                "searchedCaseExpr : CASE whenThenExprList END", "searchedCaseExpr : CASE whenThenExprList caseElseExpr END", "whenThenExprList : WHEN Expr THEN Expr", "whenThenExprList : whenThenExprList WHEN Expr THEN Expr", "caseElseExpr : ELSE Expr", "ctorExpr : ROW L_PAREN aliasExprList R_PAREN", "ctorExpr : MULTISET L_PAREN exprList R_PAREN", "ctorExpr : L_CURLY exprList R_CURLY", "dotExpr : Expr DOT identifier", "refExpr : REF L_PAREN Expr R_PAREN", "derefExpr : DEREF parenExpr", "createRefExpr : CREATEREF L_PAREN Expr COMMA Expr R_PAREN", "createRefExpr : CREATEREF L_PAREN Expr COMMA Expr COMMA typeIdentifier R_PAREN", "keyExpr : KEY parenExpr", "methodExpr : dotExpr L_PAREN R_PAREN", "methodExpr : dotExpr L_PAREN optAllOrDistinct exprList R_PAREN optWithRelationship",
                "methodExpr : dotExpr L_PAREN optAllOrDistinct queryExpr R_PAREN optWithRelationship", "methodExpr : identifier L_PAREN R_PAREN", "methodExpr : identifier L_PAREN optAllOrDistinct exprList R_PAREN optWithRelationship", "methodExpr : identifier L_PAREN optAllOrDistinct queryExpr R_PAREN optWithRelationship", "navigateExpr : NAVIGATE L_PAREN Expr COMMA dotExpr R_PAREN", "navigateExpr : NAVIGATE L_PAREN Expr COMMA identifier R_PAREN", "navigateExpr : NAVIGATE L_PAREN Expr COMMA dotExpr COMMA identifier R_PAREN", "navigateExpr : NAVIGATE L_PAREN Expr COMMA identifier COMMA identifier R_PAREN", "navigateExpr : NAVIGATE L_PAREN Expr COMMA dotExpr COMMA identifier COMMA identifier R_PAREN", "navigateExpr : NAVIGATE L_PAREN Expr COMMA identifier COMMA identifier COMMA identifier R_PAREN", "optWithRelationship :", "optWithRelationship : relationshipList", "relationshipList : WITH relationshipExpr", "relationshipList : relationshipList relationshipExpr", "relationshipExpr : RELATIONSHIP L_PAREN Expr COMMA dotExpr R_PAREN", "relationshipExpr : RELATIONSHIP L_PAREN Expr COMMA identifier R_PAREN",
                "relationshipExpr : RELATIONSHIP L_PAREN Expr COMMA dotExpr COMMA identifier R_PAREN", "relationshipExpr : RELATIONSHIP L_PAREN Expr COMMA identifier COMMA identifier R_PAREN", "relationshipExpr : RELATIONSHIP L_PAREN Expr COMMA dotExpr COMMA identifier COMMA identifier R_PAREN", "relationshipExpr : RELATIONSHIP L_PAREN Expr COMMA identifier COMMA identifier COMMA identifier R_PAREN", "typeIdentifier : identifier", "typeIdentifier : dotExpr", "typeIdentifier : identifier ESCAPED_IDENTIFIER", "typeIdentifier : dotExpr ESCAPED_IDENTIFIER", "typeIdentifier : methodExpr", "identifier : ESCAPED_IDENTIFIER", "identifier : simpleIdentifier", "simpleIdentifier : IDENTIFIER", "literalExpr : LITERAL", "literalExpr : NULL"
            };
        }

        internal CqlParser(System.Data.Common.EntitySql.ParserOptions parserOptions, bool debug)
        {
            this._parserOptions = parserOptions;
            this.yydebug = debug;
        }

        private static System.Data.Common.EntitySql.AstNode AstNode(object o) => 
            ((System.Data.Common.EntitySql.AstNode) o);

        private static int AstNodePos(object o) => 
            ((System.Data.Common.EntitySql.AstNode) o).ErrCtx.InputPosition;

        private void debug(string msg)
        {
            if (this.yydebug)
            {
                Console.WriteLine(msg);
            }
        }

        private void dump_stacks(int count)
        {
            Console.WriteLine(string.Concat(new object[] { "=index==state====value=     s:", this.stateptr, "  v:", this.valptr }));
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine(string.Concat(new object[] { " ", i, "    ", this.statestk[i], "      ", this.valstk[i] }));
            }
            Console.WriteLine("======================");
        }

        private void IncrementMethodCallCount()
        {
            this._methodCallNodeCount++;
        }

        private bool init_stacks()
        {
            this.statestk = new int[YYSTACKSIZE];
            this.stateptr = -1;
            this.val_init();
            return true;
        }

        private void internalParseEntryPoint()
        {
            this._lexer = new CqlLexer(this.Query, this.ParserOptions);
            this.yyparse();
        }

        internal Expr Parse(string query)
        {
            this._query = query;
            this._parsedTree = null;
            this._methodCallNodeCount = 0;
            this._parserOptions = this._parserOptions.MakeReadOnly();
            this.internalParseEntryPoint();
            return this._parsedTree;
        }

        private void ResetMethodCallCount()
        {
            this._methodCallNodeCount = 0;
        }

        private void SetErrCtx(System.Data.Common.EntitySql.AstNode astExpr, CqlLexer.TerminalToken tokenValue, string info)
        {
            this.SetErrCtx(astExpr, tokenValue.IPos, info);
        }

        private void SetErrCtx(System.Data.Common.EntitySql.AstNode astExpr, int inputPos, string info)
        {
            astExpr.ErrCtx.InputPosition = inputPos;
            astExpr.ErrCtx.ErrorContextInfo = info;
            astExpr.ErrCtx.QueryText = this._query;
        }

        private void state_drop(int cnt)
        {
            int num = this.stateptr - cnt;
            if (num >= 0)
            {
                this.stateptr = num;
            }
        }

        private int state_peek(int relative)
        {
            int index = this.stateptr - relative;
            if (index < 0)
            {
                return -1;
            }
            return this.statestk[index];
        }

        private int state_pop()
        {
            if (this.stateptr < 0)
            {
                return -1;
            }
            return this.statestk[this.stateptr--];
        }

        private void state_push(int state)
        {
            if (this.stateptr >= (YYSTACKSIZE - 1))
            {
                this.yyerror_stackoverflow();
            }
            this.statestk[++this.stateptr] = state;
        }

        private static CqlLexer.TerminalToken Terminal(object o) => 
            ((CqlLexer.TerminalToken) o);

        private static int TerminalPos(object o) => 
            ((CqlLexer.TerminalToken) o).IPos;

        private static ExprList<T> ToExprList<T>(object o) => 
            ((ExprList<T>) o);

        private void val_drop(int cnt)
        {
            int num = this.valptr - cnt;
            if (num >= 0)
            {
                this.valptr = num;
            }
        }

        private void val_init()
        {
            this.valstk = new object[YYSTACKSIZE];
            this.yyval = 0;
            this.yylval = 0;
            this.valptr = -1;
        }

        private object val_peek(int relative)
        {
            int index = this.valptr - relative;
            if (index < 0)
            {
                return -1;
            }
            return this.valstk[index];
        }

        private object val_pop()
        {
            if (this.valptr < 0)
            {
                return -1;
            }
            return this.valstk[this.valptr--];
        }

        private void val_push(object val)
        {
            if (this.valptr < YYSTACKSIZE)
            {
                this.valstk[++this.valptr] = val;
            }
        }

        private void yyerror(string s)
        {
            if (!s.Equals("syntax error", StringComparison.Ordinal))
            {
                throw EntityUtil.EntitySqlError(this._query, s, this._lexer.IPos);
            }
            int iPos = this._lexer.IPos;
            string additionalErrorInformation = null;
            string yYText = this._lexer.YYText;
            if (!string.IsNullOrEmpty(yYText))
            {
                additionalErrorInformation = Strings.LocalizedTerm;
                ErrorContext errCtx = null;
                System.Data.Common.EntitySql.AstNode yylval = this.yylval as System.Data.Common.EntitySql.AstNode;
                if (((yylval != null) && (yylval.ErrCtx != null)) && !string.IsNullOrEmpty(yylval.ErrCtx.ErrorContextInfo))
                {
                    errCtx = yylval.ErrCtx;
                    iPos = Math.Min(iPos, iPos - yYText.Length);
                }
                if (((this.yylval is CqlLexer.TerminalToken) && CqlLexer.IsReservedKeyword(yYText)) && !(yylval is Identifier))
                {
                    additionalErrorInformation = Strings.LocalizedKeyword;
                    yYText = yYText.ToUpperInvariant();
                    iPos = Math.Min(iPos, iPos - yYText.Length);
                }
                else if (errCtx != null)
                {
                    additionalErrorInformation = EntityRes.GetString(errCtx.ErrorContextInfo);
                }
                additionalErrorInformation = string.Format(CultureInfo.CurrentCulture, "{0} '{1}'", new object[] { additionalErrorInformation, yYText });
            }
            throw EntityUtil.EntitySqlError(this._query, Strings.GenericSyntaxError, iPos, additionalErrorInformation, false);
        }

        private void yyerror_stackoverflow()
        {
            this.yyerror(Strings.StackOverflowInParser);
        }

        private short yylex()
        {
            CqlLexer.Token token = null;
            token = this._lexer.yylex();
            if (token == null)
            {
                return 0;
            }
            this._lexer.AdvanceIPos();
            this.yylval = token.Value;
            return token.TokenId;
        }

        private void yylexdebug(int state, int ch)
        {
            string str = null;
            if (ch < 0)
            {
                ch = 0;
            }
            if (ch <= YYMAXTOKEN)
            {
                str = yyname[ch];
            }
            if (str == null)
            {
                str = "illegal-symbol";
            }
            this.debug(string.Concat(new object[] { "state ", state, ", reading ", ch, " (", str, ")" }));
        }

        private int yyparse()
        {
            int num;
            int num2;
            this.init_stacks();
            this.yynerrs = 0;
            this.yyerrflag = 0;
            this.yychar = -1;
            int state = 0;
            this.state_push(state);
        Label_0025:
            num = yydefred[state];
            if (num == 0)
            {
                if (this.yychar < 0)
                {
                    this.yychar = this.yylex();
                    if (this.yychar < 0)
                    {
                        this.yychar = 0;
                    }
                }
                num = yysindex[state];
                if (((num != 0) && ((num += this.yychar) >= 0)) && ((num <= YYTABLESIZE) && (yycheck[num] == this.yychar)))
                {
                    state = yytable[num];
                    this.state_push(state);
                    this.val_push(this.yylval);
                    this.yychar = -1;
                    if (this.yyerrflag > 0)
                    {
                        this.yyerrflag--;
                    }
                }
                else
                {
                    num = yyrindex[state];
                    if (((num != 0) && ((num += this.yychar) >= 0)) && ((num <= YYTABLESIZE) && (yycheck[num] == this.yychar)))
                    {
                        num = yytable[num];
                        goto Label_01D9;
                    }
                    if (this.yyerrflag == 0)
                    {
                        this.yyerror("syntax error");
                        this.yynerrs++;
                    }
                    if (this.yyerrflag < 3)
                    {
                        this.yyerrflag = 3;
                        while (true)
                        {
                            if (this.stateptr < 0)
                            {
                                goto Label_34D8;
                            }
                            num = yysindex[this.state_peek(0)];
                            if (((num != 0) && ((num += YYERRCODE) >= 0)) && ((num <= YYTABLESIZE) && (yycheck[num] == YYERRCODE)))
                            {
                                if (this.stateptr < 0)
                                {
                                    goto Label_34D8;
                                }
                                state = yytable[num];
                                this.state_push(state);
                                this.val_push(this.yylval);
                                goto Label_0025;
                            }
                            if (this.stateptr < 0)
                            {
                                goto Label_34D8;
                            }
                            this.state_pop();
                            this.val_pop();
                        }
                    }
                    if (this.yychar == 0)
                    {
                        goto Label_34E3;
                    }
                    this.yychar = -1;
                }
                goto Label_0025;
            }
        Label_01D9:
            num2 = yylen[num];
            this.yyval = this.val_peek(num2 - 1);
            switch (num)
            {
                case 1:
                    this.yyval = this._parsedTree = null;
                    break;

                case 2:
                    this.yyval = this._parsedTree = (Expr) this.val_peek(0);
                    break;

                case 3:
                    this.yyval = new CommandExpr(ToExprList<NamespaceExpr>(this.val_peek(1)), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), (this.val_peek(1) != null) ? AstNodePos(this.val_peek(1)) : AstNodePos(this.val_peek(0)), "CtxCommandExpression");
                    break;

                case 4:
                    this.yyval = null;
                    break;

                case 5:
                    this.yyval = this.val_peek(0);
                    break;

                case 6:
                    this.yyval = new ExprList<NamespaceExpr>((NamespaceExpr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), AstNode(this.val_peek(0)).ErrCtx.ErrorContextInfo);
                    break;

                case 7:
                    this.yyval = ToExprList<NamespaceExpr>(this.val_peek(1)).Add((NamespaceExpr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.yyval), "CtxNamespaceDeclaration");
                    break;

                case 8:
                    this.yyval = new NamespaceExpr((Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(2)), "CtxNamespaceDeclaration");
                    break;

                case 9:
                    this.yyval = new NamespaceExpr((DotExpr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(2)), "CtxNamespaceDeclaration");
                    break;

                case 10:
                    this.yyval = new NamespaceExpr((BuiltInExpr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(2)), "CtxAliasedNamespaceDeclaration");
                    break;

                case 11:
                    this.yyval = this.val_peek(1);
                    break;

                case 12:
                    this.yyval = this.val_peek(1);
                    break;

                case 13:
                    this.yyval = null;
                    break;

                case 14:
                    this.yyval = null;
                    break;

                case 15:
                    this.yyval = new QueryExpr((SelectClause) this.val_peek(5), (FromClause) this.val_peek(4), (Expr) this.val_peek(3), (GroupByClause) this.val_peek(2), (HavingClause) this.val_peek(1), (OrderByClause) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(5)), "CtxQueryExpression");
                    break;

                case 0x10:
                    this.ResetMethodCallCount();
                    break;

                case 0x11:
                    this.yyval = new SelectClause(ToExprList<AliasExpr>(this.val_peek(0)), (DistinctKind) this.val_peek(2), (Expr) this.val_peek(1), this.MethodCallCount);
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(4)), "CtxSelectRowClause");
                    break;

                case 0x12:
                    this.ResetMethodCallCount();
                    break;

                case 0x13:
                {
                    ExprList<AliasExpr> list = ToExprList<AliasExpr>(this.val_peek(0));
                    if (list.Count != 1)
                    {
                        throw EntityUtil.EntitySqlError(list.ErrCtx, Strings.InvalidSelectValueList);
                    }
                    if (list.Expressions[0].HasAlias)
                    {
                        throw EntityUtil.EntitySqlError(list.ErrCtx, Strings.InvalidSelectValueAliasedExpression);
                    }
                    this.yyval = new SelectClause(list.Expressions[0].Expr, (DistinctKind) this.val_peek(2), (Expr) this.val_peek(1), this.MethodCallCount);
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxSelectValueClause");
                    break;
                }
                case 20:
                    this.yyval = DistinctKind.None;
                    break;

                case 0x15:
                    this.yyval = DistinctKind.All;
                    break;

                case 0x16:
                    this.yyval = DistinctKind.Distinct;
                    break;

                case 0x17:
                    this.yyval = null;
                    break;

                case 0x18:
                    if (!(this.val_peek(1) is Parameter) && !(this.val_peek(1) is Literal))
                    {
                        throw EntityUtil.EntitySqlError(((Expr) this.val_peek(1)).ErrCtx, Strings.TopExpressionMustBeParamOrLiteral);
                    }
                    this.yyval = (Expr) this.val_peek(1);
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(1)), "CtxTopSubClause");
                    break;

                case 0x19:
                    this.yyval = new FromClause(ToExprList<FromClauseItem>(this.val_peek(0)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxFromClause");
                    break;

                case 0x1a:
                    this.yyval = new ExprList<FromClauseItem>((FromClauseItem) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), AstNode(this.val_peek(0)).ErrCtx.ErrorContextInfo);
                    break;

                case 0x1b:
                    this.yyval = ToExprList<FromClauseItem>(this.val_peek(2)).Add((FromClauseItem) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(2)), "CtxFromClauseList");
                    break;

                case 0x1c:
                    this.yyval = new FromClauseItem((AliasExpr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxFromClauseItem");
                    break;

                case 0x1d:
                    this.yyval = new FromClauseItem((JoinClauseItem) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(1)), "CtxFromJoinClause");
                    break;

                case 30:
                    this.yyval = new FromClauseItem((JoinClauseItem) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxFromJoinClause");
                    break;

                case 0x1f:
                    this.yyval = new FromClauseItem((ApplyClauseItem) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(1)), "CtxFromApplyClause");
                    break;

                case 0x20:
                    this.yyval = new FromClauseItem((ApplyClauseItem) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxFromApplyClause");
                    break;

                case 0x21:
                    this.yyval = new JoinClauseItem((FromClauseItem) this.val_peek(2), (FromClauseItem) this.val_peek(0), (JoinKind) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(2)), "CtxJoinClause");
                    break;

                case 0x22:
                    this.yyval = new JoinClauseItem((FromClauseItem) this.val_peek(4), (FromClauseItem) this.val_peek(2), (JoinKind) this.val_peek(3), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(4)), "CtxJoinOnClause");
                    break;

                case 0x23:
                    this.yyval = new ApplyClauseItem((FromClauseItem) this.val_peek(2), (FromClauseItem) this.val_peek(0), (ApplyKind) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(2)), "CtxApplyClause");
                    break;

                case 0x24:
                    this.yyval = JoinKind.Cross;
                    break;

                case 0x25:
                    this.yyval = JoinKind.LeftOuter;
                    break;

                case 0x26:
                    this.yyval = JoinKind.LeftOuter;
                    break;

                case 0x27:
                    this.yyval = JoinKind.RightOuter;
                    break;

                case 40:
                    this.yyval = JoinKind.RightOuter;
                    break;

                case 0x29:
                    this.yyval = JoinKind.Inner;
                    break;

                case 0x2a:
                    this.yyval = JoinKind.Inner;
                    break;

                case 0x2b:
                    this.yyval = JoinKind.FullOuter;
                    break;

                case 0x2c:
                    this.yyval = JoinKind.FullOuter;
                    break;

                case 0x2d:
                    this.yyval = JoinKind.FullOuter;
                    break;

                case 0x2e:
                    this.yyval = ApplyKind.Cross;
                    break;

                case 0x2f:
                    this.yyval = ApplyKind.Outer;
                    break;

                case 0x30:
                    this.yyval = null;
                    break;

                case 0x31:
                    this.yyval = this.val_peek(0);
                    break;

                case 50:
                    this.yyval = (Expr) this.val_peek(0);
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxWhereClause");
                    break;

                case 0x33:
                    this.yyval = null;
                    break;

                case 0x34:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x35:
                    this.yyval = new GroupByClause(ToExprList<AliasExpr>(this.val_peek(0)), new Identifier("group", false, this._query, Terminal(this.val_peek(2)).IPos));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(2)), "CtxGroupByClause");
                    break;

                case 0x36:
                    this.yyval = null;
                    break;

                case 0x37:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x38:
                    this.ResetMethodCallCount();
                    break;

                case 0x39:
                    this.yyval = new HavingClause((Expr) this.val_peek(0), this.MethodCallCount);
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxHavingClause");
                    break;

                case 0x3a:
                    this.yyval = null;
                    break;

                case 0x3b:
                    this.yyval = this.val_peek(0);
                    break;

                case 60:
                    this.ResetMethodCallCount();
                    break;

                case 0x3d:
                    this.yyval = new OrderByClause(ToExprList<OrderByClauseItem>(this.val_peek(2)), (Expr) this.val_peek(1), (Expr) this.val_peek(0), this.MethodCallCount);
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxOrderByClauseItem");
                    break;

                case 0x3e:
                    this.yyval = null;
                    break;

                case 0x3f:
                    if (!(this.val_peek(0) is Parameter) && !(this.val_peek(0) is Literal))
                    {
                        throw EntityUtil.EntitySqlError(((Expr) this.val_peek(0)).ErrCtx, Strings.SkipExpressionMustBeParamOrLiteral);
                    }
                    this.yyval = (Expr) this.val_peek(0);
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxSkipSubClause");
                    break;

                case 0x40:
                    this.yyval = null;
                    break;

                case 0x41:
                    if (!(this.val_peek(0) is Parameter) && !(this.val_peek(0) is Literal))
                    {
                        throw EntityUtil.EntitySqlError(((Expr) this.val_peek(0)).ErrCtx, Strings.LimitExpressionMustBeParamOrLiteral);
                    }
                    this.yyval = (Expr) this.val_peek(0);
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxLimitSubClause");
                    break;

                case 0x42:
                    this.yyval = new ExprList<OrderByClauseItem>((OrderByClauseItem) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), AstNode(this.val_peek(0)).ErrCtx.ErrorContextInfo);
                    break;

                case 0x43:
                    this.yyval = ToExprList<OrderByClauseItem>(this.val_peek(2)).Add((OrderByClauseItem) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(2)), "CtxOrderByClause");
                    break;

                case 0x44:
                    this.yyval = new OrderByClauseItem((Expr) this.val_peek(1), (OrderKind) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(1)), "CtxOrderByClauseItem");
                    break;

                case 0x45:
                    this.yyval = new OrderByClauseItem((Expr) this.val_peek(3), (OrderKind) this.val_peek(0), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(3)), "CtxCollatedOrderByClauseItem");
                    break;

                case 70:
                    this.yyval = OrderKind.None;
                    break;

                case 0x47:
                    this.yyval = OrderKind.Asc;
                    break;

                case 0x48:
                    this.yyval = OrderKind.Desc;
                    break;

                case 0x49:
                    this.yyval = new ExprList<Expr>((Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), AstNode(this.val_peek(0)).ErrCtx.ErrorContextInfo);
                    break;

                case 0x4a:
                    this.yyval = ToExprList<Expr>(this.val_peek(2)).Add((Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(2)), "CtxExpressionList");
                    break;

                case 0x4b:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x4c:
                    this.yyval = (Parameter) this.val_peek(0);
                    break;

                case 0x4d:
                    this.yyval = (Identifier) this.val_peek(0);
                    break;

                case 0x4e:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x4f:
                    this.yyval = this.val_peek(0);
                    if (((DotExpr) this.val_peek(0)).IsDottedIdentifier)
                    {
                        this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.yyval), "CtxMultipartIdentifier");
                    }
                    break;

                case 80:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x51:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x52:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x53:
                    this.yyval = this.val_peek(0);
                    this.IncrementMethodCallCount();
                    break;

                case 0x54:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x55:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x56:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x57:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x58:
                    this.yyval = this.val_peek(1);
                    break;

                case 0x59:
                    this.yyval = new ExprList<Expr>((Expr) this.val_peek(2)).Add((Expr) this.val_peek(0));
                    break;

                case 90:
                    this.yyval = new ExprList<Expr>((Expr) this.val_peek(3)).Add((Expr) this.val_peek(0));
                    break;

                case 0x5b:
                    this.yyval = new BuiltInExpr(BuiltInKind.Plus, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxPlus");
                    break;

                case 0x5c:
                    this.yyval = new BuiltInExpr(BuiltInKind.Minus, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxMinus");
                    break;

                case 0x5d:
                    this.yyval = new BuiltInExpr(BuiltInKind.Multiply, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxMultiply");
                    break;

                case 0x5e:
                    this.yyval = new BuiltInExpr(BuiltInKind.Divide, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxDivide");
                    break;

                case 0x5f:
                    this.yyval = new BuiltInExpr(BuiltInKind.Modulus, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxModulus");
                    break;

                case 0x60:
                {
                    Literal literal = this.val_peek(0) as Literal;
                    if (((literal == null) || !literal.IsNumberKind) || literal.IsSigned)
                    {
                        this.yyval = new BuiltInExpr(BuiltInKind.UnaryMinus, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(0));
                        this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxUnaryMinus");
                        break;
                    }
                    literal.PrefixSign(Terminal(this.val_peek(1)).Token);
                    this.yyval = this.val_peek(0);
                    break;
                }
                case 0x61:
                {
                    Literal literal2 = this.val_peek(0) as Literal;
                    if (((literal2 == null) || !literal2.IsNumberKind) || literal2.IsSigned)
                    {
                        this.yyval = new BuiltInExpr(BuiltInKind.UnaryPlus, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(0));
                        this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxUnaryPlus");
                        break;
                    }
                    literal2.PrefixSign(Terminal(this.val_peek(1)).Token);
                    this.yyval = this.val_peek(0);
                    break;
                }
                case 0x62:
                    this.yyval = new BuiltInExpr(BuiltInKind.NotEqual, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxNotEqual");
                    break;

                case 0x63:
                    this.yyval = new BuiltInExpr(BuiltInKind.GreaterThan, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxGreaterThan");
                    break;

                case 100:
                    this.yyval = new BuiltInExpr(BuiltInKind.GreaterEqual, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxGreaterThanEqual");
                    break;

                case 0x65:
                    this.yyval = new BuiltInExpr(BuiltInKind.LessThan, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxLessThan");
                    break;

                case 0x66:
                    this.yyval = new BuiltInExpr(BuiltInKind.LessEqual, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxLessThanEqual");
                    break;

                case 0x67:
                    this.yyval = new BuiltInExpr(BuiltInKind.Intersect, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxIntersect");
                    break;

                case 0x68:
                    this.yyval = new BuiltInExpr(BuiltInKind.Union, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxUnion");
                    break;

                case 0x69:
                    this.yyval = new BuiltInExpr(BuiltInKind.UnionAll, Terminal(this.val_peek(2)).Token, (Expr) this.val_peek(3), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(2)), "CtxUnionAll");
                    break;

                case 0x6a:
                    this.yyval = new BuiltInExpr(BuiltInKind.Except, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxExcept");
                    break;

                case 0x6b:
                    this.yyval = new BuiltInExpr(BuiltInKind.Overlaps, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxOverlaps");
                    break;

                case 0x6c:
                    this.yyval = new BuiltInExpr(BuiltInKind.In, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxIn");
                    break;

                case 0x6d:
                    this.yyval = new BuiltInExpr(BuiltInKind.NotIn, Terminal(this.val_peek(2)).Token, (Expr) this.val_peek(3), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(2)), "CtxNotIn");
                    break;

                case 110:
                    this.yyval = new BuiltInExpr(BuiltInKind.Exists, Terminal(this.val_peek(3)).Token, (Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxExists");
                    break;

                case 0x6f:
                    this.yyval = new BuiltInExpr(BuiltInKind.AnyElement, Terminal(this.val_peek(3)).Token, (Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxAnyElement");
                    break;

                case 0x70:
                    this.yyval = new BuiltInExpr(BuiltInKind.Element, Terminal(this.val_peek(3)).Token, (Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxElement");
                    break;

                case 0x71:
                    this.yyval = new BuiltInExpr(BuiltInKind.Flatten, Terminal(this.val_peek(3)).Token, (Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxFlatten");
                    break;

                case 0x72:
                    this.yyval = new BuiltInExpr(BuiltInKind.Distinct, Terminal(this.val_peek(3)).Token, (Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxSet");
                    break;

                case 0x73:
                    this.yyval = new BuiltInExpr(BuiltInKind.IsNull, "IsNull", (Expr) this.val_peek(2));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxIsNull");
                    break;

                case 0x74:
                    this.yyval = new BuiltInExpr(BuiltInKind.IsNotNull, "IsNotNull", (Expr) this.val_peek(3));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(2)), "CtxIsNotNull");
                    break;

                case 0x75:
                    this.yyval = (CaseExpr) this.val_peek(0);
                    break;

                case 0x76:
                    this.yyval = new BuiltInExpr(BuiltInKind.Treat, Terminal(this.val_peek(5)).Token, (Expr) this.val_peek(3), (Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxTreat");
                    break;

                case 0x77:
                    this.yyval = new BuiltInExpr(BuiltInKind.Cast, Terminal(this.val_peek(5)).Token, (Expr) this.val_peek(3), (Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxCast");
                    break;

                case 120:
                    this.yyval = new BuiltInExpr(BuiltInKind.OfType, Terminal(this.val_peek(5)).Token, (Expr) this.val_peek(3), (Expr) this.val_peek(1), Literal.NewBooleanLiteral(false));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxOfType");
                    break;

                case 0x79:
                    this.yyval = new BuiltInExpr(BuiltInKind.OfType, "OFTYPE ONLY", (Expr) this.val_peek(4), (Expr) this.val_peek(1), Literal.NewBooleanLiteral(true));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(6)), "CtxOfTypeOnly");
                    break;

                case 0x7a:
                    this.yyval = new BuiltInExpr(BuiltInKind.IsOf, "IS OF", (Expr) this.val_peek(5), (Expr) this.val_peek(1), Literal.NewBooleanLiteral(false), Literal.NewBooleanLiteral(false));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(4)), "CtxIsOf");
                    break;

                case 0x7b:
                    this.yyval = new BuiltInExpr(BuiltInKind.IsOf, "IS NOT OF", (Expr) this.val_peek(6), (Expr) this.val_peek(1), Literal.NewBooleanLiteral(false), Literal.NewBooleanLiteral(true));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxIsNotOf");
                    break;

                case 0x7c:
                    this.yyval = new BuiltInExpr(BuiltInKind.IsOf, "IS OF ONLY", (Expr) this.val_peek(6), (Expr) this.val_peek(1), Literal.NewBooleanLiteral(true), Literal.NewBooleanLiteral(false));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxIsOf");
                    break;

                case 0x7d:
                    this.yyval = new BuiltInExpr(BuiltInKind.IsOf, "IS NOT OF ONLY", (Expr) this.val_peek(7), (Expr) this.val_peek(1), Literal.NewBooleanLiteral(true), Literal.NewBooleanLiteral(true));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(6)), "CtxIsNotOf");
                    break;

                case 0x7e:
                    this.yyval = new BuiltInExpr(BuiltInKind.Like, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxLike");
                    break;

                case 0x7f:
                    this.yyval = new BuiltInExpr(BuiltInKind.Not, Terminal(this.val_peek(2)).Token, new BuiltInExpr(BuiltInKind.Like, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(3), (Expr) this.val_peek(0)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(2)), "CtxNotLike");
                    break;

                case 0x80:
                    this.yyval = new BuiltInExpr(BuiltInKind.Like, Terminal(this.val_peek(3)).Token, (Expr) this.val_peek(4), (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxLike");
                    break;

                case 0x81:
                    this.yyval = new BuiltInExpr(BuiltInKind.Not, Terminal(this.val_peek(4)).Token, new BuiltInExpr(BuiltInKind.Like, Terminal(this.val_peek(3)).Token, (Expr) this.val_peek(5), (Expr) this.val_peek(2), (Expr) this.val_peek(0)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(4)), "CtxNotLike");
                    break;

                case 130:
                {
                    ExprList<Expr> list2 = (ExprList<Expr>) this.val_peek(2);
                    this.yyval = new BuiltInExpr(BuiltInKind.Between, "between", list2[0], list2[1], (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxBetween");
                    break;
                }
                case 0x83:
                {
                    ExprList<Expr> list3 = (ExprList<Expr>) this.val_peek(2);
                    this.yyval = new BuiltInExpr(BuiltInKind.NotBetween, "notbetween", list3[0], list3[1], (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxNotBetween");
                    break;
                }
                case 0x84:
                    this.yyval = new BuiltInExpr(BuiltInKind.Or, "or", (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxOr");
                    break;

                case 0x85:
                    this.yyval = new BuiltInExpr(BuiltInKind.Not, "not", (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxNot");
                    break;

                case 0x86:
                    this.yyval = new BuiltInExpr(BuiltInKind.And, "and", (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxAnd");
                    break;

                case 0x87:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x88:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x89:
                    this.yyval = this.val_peek(0);
                    break;

                case 0x8a:
                    this.yyval = new BuiltInExpr(BuiltInKind.Equal, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxEquals");
                    break;

                case 0x8b:
                    this.yyval = new BuiltInExpr(BuiltInKind.Equal, Terminal(this.val_peek(1)).Token, (Expr) this.val_peek(2), (Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxEquals");
                    break;

                case 140:
                    this.yyval = new AliasExpr((Expr) this.val_peek(2), (Identifier) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxAlias");
                    break;

                case 0x8d:
                    this.yyval = new AliasExpr((Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), AstNode(this.val_peek(0)).ErrCtx.ErrorContextInfo);
                    break;

                case 0x8e:
                    this.yyval = new ExprList<AliasExpr>((AliasExpr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), AstNode(this.val_peek(0)).ErrCtx.ErrorContextInfo);
                    break;

                case 0x8f:
                    this.yyval = ToExprList<AliasExpr>(this.val_peek(2)).Add((AliasExpr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.yyval), "CtxExpressionList");
                    break;

                case 0x90:
                    this.yyval = new CaseExpr(ToExprList<WhenThenExpr>(this.val_peek(1)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(2)), "CtxCase");
                    break;

                case 0x91:
                    this.yyval = new CaseExpr(ToExprList<WhenThenExpr>(this.val_peek(2)), (Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxCase");
                    break;

                case 0x92:
                    this.yyval = new ExprList<WhenThenExpr>(new WhenThenExpr((Expr) this.val_peek(2), (Expr) this.val_peek(0)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxCaseWhenThen");
                    break;

                case 0x93:
                    this.yyval = ToExprList<WhenThenExpr>(this.val_peek(4)).Add(new WhenThenExpr((Expr) this.val_peek(2), (Expr) this.val_peek(0)));
                    break;

                case 0x94:
                    this.yyval = (Expr) this.val_peek(0);
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxCaseElse");
                    break;

                case 0x95:
                    this.yyval = new RowConstructorExpr(ToExprList<AliasExpr>(this.val_peek(1)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxRowCtor");
                    break;

                case 150:
                    this.yyval = new MultisetConstructorExpr(ToExprList<Expr>(this.val_peek(1)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxMultisetCtor");
                    break;

                case 0x97:
                    this.yyval = new MultisetConstructorExpr(ToExprList<Expr>(this.val_peek(1)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(2)), "CtxMultisetCtor");
                    break;

                case 0x98:
                    this.yyval = new DotExpr((Expr) this.val_peek(2), (Identifier) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(2)), "CtxDot");
                    break;

                case 0x99:
                    this.yyval = new RefExpr((Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(3)), "CtxRef");
                    break;

                case 0x9a:
                    this.yyval = new DerefExpr((Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxDeref");
                    break;

                case 0x9b:
                    this.yyval = new CreateRefExpr((Expr) this.val_peek(3), (Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxCreateRef");
                    break;

                case 0x9c:
                    this.yyval = new CreateRefExpr((Expr) this.val_peek(5), (Expr) this.val_peek(3), (Expr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(7)), "CtxCreateRef");
                    break;

                case 0x9d:
                    this.yyval = new KeyExpr((Expr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxKey");
                    break;

                case 0x9e:
                    this.yyval = new MethodExpr(((DotExpr) this.val_peek(2)).Left, ((DotExpr) this.val_peek(2)).Identifier, DistinctKind.None, null);
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxMethod");
                    break;

                case 0x9f:
                    this.yyval = new MethodExpr(((DotExpr) this.val_peek(5)).Left, ((DotExpr) this.val_peek(5)).Identifier, (DistinctKind) this.val_peek(3), ToExprList<Expr>(this.val_peek(2)), ToExprList<RelshipNavigationExpr>(this.val_peek(0)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(4)), "CtxMethod");
                    break;

                case 160:
                    this.yyval = new MethodExpr(((DotExpr) this.val_peek(5)).Left, ((DotExpr) this.val_peek(5)).Identifier, (DistinctKind) this.val_peek(3), new ExprList<Expr>((Expr) this.val_peek(2)), ToExprList<RelshipNavigationExpr>(this.val_peek(0)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(4)), "CtxMethod");
                    break;

                case 0xa1:
                    this.yyval = new MethodExpr(null, (Identifier) this.val_peek(2), DistinctKind.None, null);
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(1)), "CtxMethod");
                    break;

                case 0xa2:
                    this.yyval = new MethodExpr(null, (Identifier) this.val_peek(5), (DistinctKind) this.val_peek(3), ToExprList<Expr>(this.val_peek(2)), ToExprList<RelshipNavigationExpr>(this.val_peek(0)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(4)), "CtxMethod");
                    break;

                case 0xa3:
                    this.yyval = new MethodExpr(null, (Identifier) this.val_peek(5), (DistinctKind) this.val_peek(3), new ExprList<Expr>((Expr) this.val_peek(2)), ToExprList<RelshipNavigationExpr>(this.val_peek(0)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(4)), "CtxMethod");
                    break;

                case 0xa4:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(3), (DotExpr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxNavigate");
                    break;

                case 0xa5:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(3), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxNavigate");
                    break;

                case 0xa6:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(5), (DotExpr) this.val_peek(3), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(7)), "CtxNavigate");
                    break;

                case 0xa7:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(5), (Identifier) this.val_peek(3), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(7)), "CtxNavigate");
                    break;

                case 0xa8:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(7), (DotExpr) this.val_peek(5), (Identifier) this.val_peek(3), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(9)), "CtxNavigate");
                    break;

                case 0xa9:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(7), (Identifier) this.val_peek(5), (Identifier) this.val_peek(3), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(9)), "CtxNavigate");
                    break;

                case 170:
                    this.yyval = null;
                    break;

                case 0xab:
                    this.yyval = this.val_peek(0);
                    break;

                case 0xac:
                    this.yyval = new ExprList<RelshipNavigationExpr>((RelshipNavigationExpr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxRelationshipList");
                    break;

                case 0xad:
                    this.yyval = ToExprList<RelshipNavigationExpr>(this.val_peek(1)).Add((RelshipNavigationExpr) this.val_peek(0));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(1)), "CtxRelationshipList");
                    break;

                case 0xae:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(3), (DotExpr) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxRelationship");
                    break;

                case 0xaf:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(3), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(5)), "CtxRelationship");
                    break;

                case 0xb0:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(5), (DotExpr) this.val_peek(3), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(7)), "CtxRelationship");
                    break;

                case 0xb1:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(5), (Identifier) this.val_peek(3), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(7)), "CtxRelationship");
                    break;

                case 0xb2:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(7), (DotExpr) this.val_peek(5), (Identifier) this.val_peek(3), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(9)), "CtxRelationship");
                    break;

                case 0xb3:
                    this.yyval = new RelshipNavigationExpr((Expr) this.val_peek(7), (Identifier) this.val_peek(5), (Identifier) this.val_peek(3), (Identifier) this.val_peek(1));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(9)), "CtxRelationship");
                    break;

                case 180:
                    this.yyval = this.val_peek(0);
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxTypeIdentifier");
                    break;

                case 0xb5:
                    this.yyval = this.val_peek(0);
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxTypeIdentifier");
                    break;

                case 0xb6:
                {
                    Identifier identifier = (Identifier) this.val_peek(1);
                    if (((Identifier) this.val_peek(0)).Name.Length != 0)
                    {
                        throw EntityUtil.EntitySqlError(identifier.ErrCtx, "InvalidTypeName");
                    }
                    this.yyval = new Identifier(identifier.OriginalName + "[]", identifier.IsEscaped, this._query, AstNodePos(this.val_peek(1)));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(1)), "CtxTypeIdentifier");
                    break;
                }
                case 0xb7:
                {
                    DotExpr expr = (DotExpr) this.val_peek(1);
                    if (((Identifier) this.val_peek(0)).Name.Length != 0)
                    {
                        throw EntityUtil.EntitySqlError(expr.ErrCtx, "InvalidTypeName");
                    }
                    this.yyval = new DotExpr(expr.Left, new Identifier(expr.Identifier.OriginalName + "[]", expr.Identifier.IsEscaped, this._query, AstNodePos(this.val_peek(1))));
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(1)), "CtxTypeIdentifier");
                    break;
                }
                case 0xb8:
                {
                    this.SetErrCtx(AstNode(this.val_peek(0)), AstNodePos(this.val_peek(0)), "CtxTypeIdentifier");
                    MethodExpr expr2 = (MethodExpr) this.val_peek(0);
                    if (((expr2.Args == null) || (expr2.Args.Count < 1)) || (expr2.Args.Count > 2))
                    {
                        throw EntityUtil.EntitySqlError(expr2.ErrCtx, Strings.TypeIndentifierMustHaveOneOrTwoArgs);
                    }
                    if (!(expr2.Args[0] is Literal))
                    {
                        throw EntityUtil.EntitySqlError(expr2.Args[0].ErrCtx, Strings.TypeIndentifierArgMustBeLiteral);
                    }
                    if ((expr2.Args.Count == 2) && !(expr2.Args[1] is Literal))
                    {
                        throw EntityUtil.EntitySqlError(expr2.Args[1].ErrCtx, Strings.TypeIndentifierArgMustBeLiteral);
                    }
                    this.yyval = this.val_peek(0);
                    break;
                }
                case 0xb9:
                    this.yyval = (Identifier) this.val_peek(0);
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxEscapedIdentifier");
                    break;

                case 0xba:
                    this.yyval = (Identifier) this.val_peek(0);
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxSimpleIdentifier");
                    break;

                case 0xbb:
                    this.yyval = (Identifier) this.val_peek(0);
                    break;

                case 0xbc:
                    this.yyval = this.val_peek(0);
                    this.SetErrCtx(AstNode(this.yyval), AstNodePos(this.val_peek(0)), "CtxLiteral");
                    break;

                case 0xbd:
                    this.yyval = new Literal(null, LiteralKind.Null, this._query, TerminalPos(this.val_peek(0)));
                    this.SetErrCtx(AstNode(this.yyval), Terminal(this.val_peek(0)), "CtxNullLiteral");
                    break;
            }
            this.state_drop(num2);
            state = this.state_peek(0);
            this.val_drop(num2);
            num2 = yylhs[num];
            if ((state == 0) && (num2 == 0))
            {
                state = YYFINAL;
                this.state_push(YYFINAL);
                this.val_push(this.yyval);
                if (this.yychar < 0)
                {
                    this.yychar = this.yylex();
                    if (this.yychar < 0)
                    {
                        this.yychar = 0;
                    }
                }
                if (this.yychar == 0)
                {
                    return 0;
                }
                goto Label_0025;
            }
            num = yygindex[num2];
            if (((num != 0) && ((num += state) >= 0)) && ((num <= YYTABLESIZE) && (yycheck[num] == state)))
            {
                state = yytable[num];
            }
            else
            {
                state = yydgoto[num2];
            }
            if (this.stateptr >= 0)
            {
                this.state_push(state);
                this.val_push(this.yyval);
                goto Label_0025;
            }
        Label_34D8:
            this.yyerror("yacc stack overflow");
        Label_34E3:
            return 1;
        }

        private uint MethodCallCount =>
            this._methodCallNodeCount;

        internal System.Data.Common.EntitySql.ParserOptions ParserOptions =>
            this._parserOptions;

        internal string Query =>
            this._query;
    }
}

