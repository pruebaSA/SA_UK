namespace System.Windows.Forms
{
    using System;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Drawing;
    using System.Runtime.InteropServices;
    using System.Windows.Forms.Layout;

    [Designer("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), ComVisible(true), ClassInterface(ClassInterfaceType.AutoDispatch)]
    public class ToolStripDropDownMenu : ToolStripDropDown
    {
        private static Padding ArrowPadding = new Padding(0, 0, 8, 0);
        private Rectangle arrowRectangle;
        private static Padding CheckPadding = new Padding(5, 2, 2, 2);
        private Rectangle checkRectangle;
        private static int DefaultImageAndCheckMarginWidth = 0x2f;
        private static int DefaultImageMarginWidth = 0x19;
        private static readonly Size defaultImageSize = new Size(0x10, 0x10);
        private ToolStripScrollButton downScrollButton;
        private Rectangle imageMarginBounds;
        private static Padding ImagePadding = new Padding(2);
        private Rectangle imageRectangle;
        private int indexOfFirstDisplayedItem;
        private Size maxItemSize;
        private int paddingToTrim;
        private int scrollAmount;
        private BitVector32 state;
        private static readonly int stateMaxItemSizeValid = BitVector32.CreateMask(stateShowCheckMargin);
        private static readonly int stateShowCheckMargin = BitVector32.CreateMask(stateShowImageMargin);
        private static readonly int stateShowImageMargin = BitVector32.CreateMask();
        private int tabWidth;
        private static Padding TextPadding = new Padding(8, 1, 9, 1);
        private Rectangle textRectangle;
        private ToolStripScrollButton upScrollButton;

        public ToolStripDropDownMenu()
        {
            this.maxItemSize = Size.Empty;
            this.checkRectangle = Rectangle.Empty;
            this.imageRectangle = Rectangle.Empty;
            this.arrowRectangle = Rectangle.Empty;
            this.textRectangle = Rectangle.Empty;
            this.imageMarginBounds = Rectangle.Empty;
            this.tabWidth = -1;
            this.indexOfFirstDisplayedItem = -1;
            this.state = new BitVector32();
        }

        internal ToolStripDropDownMenu(ToolStripItem ownerItem, bool isAutoGenerated) : base(ownerItem, isAutoGenerated)
        {
            this.maxItemSize = Size.Empty;
            this.checkRectangle = Rectangle.Empty;
            this.imageRectangle = Rectangle.Empty;
            this.arrowRectangle = Rectangle.Empty;
            this.textRectangle = Rectangle.Empty;
            this.imageMarginBounds = Rectangle.Empty;
            this.tabWidth = -1;
            this.indexOfFirstDisplayedItem = -1;
            this.state = new BitVector32();
        }

        private void CalculateInternalLayoutMetrics()
        {
            Size empty = Size.Empty;
            Size alignThis = Size.Empty;
            Size defaultImageSize = ToolStripDropDownMenu.defaultImageSize;
            Size size = Size.Empty;
            Size size5 = Size.Empty;
            for (int i = 0; i < this.Items.Count; i++)
            {
                ToolStripItem item = this.Items[i];
                ToolStripMenuItem item2 = item as ToolStripMenuItem;
                if (item2 != null)
                {
                    Size textSize = item2.GetTextSize();
                    if (item2.ShowShortcutKeys)
                    {
                        Size shortcutTextSize = item2.GetShortcutTextSize();
                        if (this.tabWidth == -1)
                        {
                            this.tabWidth = TextRenderer.MeasureText("\t", this.Font).Width;
                        }
                        textSize.Width += this.tabWidth + shortcutTextSize.Width;
                        textSize.Height = Math.Max(textSize.Height, shortcutTextSize.Height);
                    }
                    empty.Width = Math.Max(empty.Width, textSize.Width);
                    empty.Height = Math.Max(empty.Height, textSize.Height);
                    Size size8 = Size.Empty;
                    if (item2.Image != null)
                    {
                        size8 = (item2.ImageScaling == ToolStripItemImageScaling.SizeToFit) ? base.ImageScalingSize : item2.Image.Size;
                    }
                    alignThis.Width = Math.Max(alignThis.Width, size8.Width);
                    alignThis.Height = Math.Max(alignThis.Height, size8.Height);
                    if (item2.CheckedImage != null)
                    {
                        Size size9 = item2.CheckedImage.Size;
                        defaultImageSize.Width = Math.Max(size9.Width, defaultImageSize.Width);
                        defaultImageSize.Height = Math.Max(size9.Height, defaultImageSize.Height);
                    }
                }
                else if (!(item is ToolStripSeparator))
                {
                    size5.Height = Math.Max(item.Bounds.Height, size5.Height);
                    size5.Width = Math.Max(item.Bounds.Width, size5.Width);
                }
            }
            this.maxItemSize.Height = Math.Max(empty.Height + TextPadding.Vertical, Math.Max((int) (defaultImageSize.Height + CheckPadding.Vertical), (int) (size.Height + ArrowPadding.Vertical)));
            if (this.ShowImageMargin)
            {
                this.maxItemSize.Height = Math.Max(alignThis.Height + ImagePadding.Vertical, this.maxItemSize.Height);
            }
            if (this.ShowCheckMargin)
            {
                int num1 = defaultImageSize.Width;
            }
            if (this.ShowImageMargin)
            {
                int num6 = alignThis.Width;
            }
            size = new Size(10, this.maxItemSize.Height);
            empty.Height = this.maxItemSize.Height - TextPadding.Vertical;
            alignThis.Height = this.maxItemSize.Height - ImagePadding.Vertical;
            defaultImageSize.Height = this.maxItemSize.Height - CheckPadding.Vertical;
            empty.Width = Math.Max(empty.Width, size5.Width);
            Point location = Point.Empty;
            int width = 0;
            int num3 = Math.Max(0, alignThis.Width - ToolStripDropDownMenu.defaultImageSize.Width);
            if (this.ShowCheckMargin && this.ShowImageMargin)
            {
                width = DefaultImageAndCheckMarginWidth + num3;
                location = new Point(CheckPadding.Left, CheckPadding.Top);
                this.checkRectangle = LayoutUtils.Align(defaultImageSize, new Rectangle(location.X, location.Y, defaultImageSize.Width, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
                location.X = (this.checkRectangle.Right + CheckPadding.Right) + ImagePadding.Left;
                location.Y = ImagePadding.Top;
                this.imageRectangle = LayoutUtils.Align(alignThis, new Rectangle(location.X, location.Y, alignThis.Width, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
            }
            else if (this.ShowCheckMargin)
            {
                width = DefaultImageMarginWidth;
                location = new Point(1, CheckPadding.Top);
                this.checkRectangle = LayoutUtils.Align(defaultImageSize, new Rectangle(location.X, location.Y, width, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
                this.imageRectangle = Rectangle.Empty;
            }
            else if (this.ShowImageMargin)
            {
                width = DefaultImageMarginWidth + num3;
                location = new Point(1, CheckPadding.Top);
                this.checkRectangle = LayoutUtils.Align(LayoutUtils.UnionSizes(defaultImageSize, alignThis), new Rectangle(location.X, location.Y, width - 1, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
                this.imageRectangle = this.checkRectangle;
            }
            else
            {
                width = 0;
            }
            location.X = width + 1;
            this.imageMarginBounds = new Rectangle(0, 0, width, base.Height);
            location.X = this.imageMarginBounds.Right + TextPadding.Left;
            location.Y = TextPadding.Top;
            this.textRectangle = new Rectangle(location, empty);
            location.X = (this.textRectangle.Right + TextPadding.Right) + ArrowPadding.Left;
            location.Y = ArrowPadding.Top;
            this.arrowRectangle = new Rectangle(location, size);
            this.maxItemSize.Width = (this.arrowRectangle.Right + ArrowPadding.Right) - this.imageMarginBounds.Left;
            base.Padding = this.DefaultPadding;
            int num4 = this.imageMarginBounds.Width;
            if (this.RightToLeft == RightToLeft.Yes)
            {
                num4 += TextPadding.Right;
                int num5 = this.maxItemSize.Width;
                this.checkRectangle.X = num5 - this.checkRectangle.Right;
                this.imageRectangle.X = num5 - this.imageRectangle.Right;
                this.textRectangle.X = num5 - this.textRectangle.Right;
                this.arrowRectangle.X = num5 - this.arrowRectangle.Right;
                this.imageMarginBounds.X = num5 - this.imageMarginBounds.Right;
            }
            else
            {
                num4 += TextPadding.Left;
            }
            this.maxItemSize.Height += this.maxItemSize.Height % 2;
            this.textRectangle.Y = LayoutUtils.VAlign(this.textRectangle.Size, new Rectangle(Point.Empty, this.maxItemSize), ContentAlignment.MiddleCenter).Y;
            this.textRectangle.Y += this.textRectangle.Height % 2;
            this.state[stateMaxItemSizeValid] = true;
            this.PaddingToTrim = num4;
        }

        internal override void ChangeSelection(ToolStripItem nextItem)
        {
            if (nextItem != null)
            {
                Rectangle displayRectangle = this.DisplayRectangle;
                if (!displayRectangle.Contains(displayRectangle.X, nextItem.Bounds.Top) || !displayRectangle.Contains(displayRectangle.X, nextItem.Bounds.Bottom))
                {
                    int num;
                    if (displayRectangle.Y > nextItem.Bounds.Top)
                    {
                        num = nextItem.Bounds.Top - displayRectangle.Y;
                    }
                    else
                    {
                        num = nextItem.Bounds.Bottom - (displayRectangle.Y + displayRectangle.Height);
                        int index = this.Items.IndexOf(nextItem);
                        while (index >= 0)
                        {
                            if (!this.Items[index].Visible || !displayRectangle.Contains(displayRectangle.X, this.Items[index].Bounds.Top - num))
                            {
                                break;
                            }
                            index--;
                        }
                        if ((index >= 0) && displayRectangle.Contains(displayRectangle.X, this.Items[index].Bounds.Bottom - num))
                        {
                            num += (this.Items[index].Bounds.Bottom - num) - displayRectangle.Top;
                        }
                    }
                    this.ScrollInternal(num);
                    this.UpdateScrollButtonStatus();
                }
            }
            base.ChangeSelection(nextItem);
        }

        protected internal override ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick)
        {
            if (text == "-")
            {
                return new ToolStripSeparator();
            }
            return new ToolStripMenuItem(text, image, onClick);
        }

        internal static ToolStripDropDownMenu FromHMenu(IntPtr hmenu, IWin32Window targetWindow)
        {
            ToolStripDropDownMenu menu = new ToolStripDropDownMenu();
            menu.SuspendLayout();
            HandleRef hMenu = new HandleRef(null, hmenu);
            int menuItemCount = System.Windows.Forms.UnsafeNativeMethods.GetMenuItemCount(hMenu);
            for (int i = 0; i < menuItemCount; i++)
            {
                ToolStripItem item;
                System.Windows.Forms.NativeMethods.MENUITEMINFO_T_RW lpmii = new System.Windows.Forms.NativeMethods.MENUITEMINFO_T_RW {
                    cbSize = Marshal.SizeOf(typeof(System.Windows.Forms.NativeMethods.MENUITEMINFO_T_RW)),
                    fMask = 0x100,
                    fType = 0x100
                };
                System.Windows.Forms.UnsafeNativeMethods.GetMenuItemInfo(hMenu, i, true, lpmii);
                if (lpmii.fType == 0x800)
                {
                    item = new ToolStripSeparator();
                }
                else
                {
                    lpmii = new System.Windows.Forms.NativeMethods.MENUITEMINFO_T_RW {
                        cbSize = Marshal.SizeOf(typeof(System.Windows.Forms.NativeMethods.MENUITEMINFO_T_RW)),
                        fMask = 2,
                        fType = 2
                    };
                    System.Windows.Forms.UnsafeNativeMethods.GetMenuItemInfo(hMenu, i, true, lpmii);
                    item = new ToolStripMenuItem(hmenu, lpmii.wID, targetWindow);
                    lpmii = new System.Windows.Forms.NativeMethods.MENUITEMINFO_T_RW {
                        cbSize = Marshal.SizeOf(typeof(System.Windows.Forms.NativeMethods.MENUITEMINFO_T_RW)),
                        fMask = 4,
                        fType = 4
                    };
                    System.Windows.Forms.UnsafeNativeMethods.GetMenuItemInfo(hMenu, i, true, lpmii);
                    if (lpmii.hSubMenu != IntPtr.Zero)
                    {
                        ((ToolStripMenuItem) item).DropDown = FromHMenu(lpmii.hSubMenu, targetWindow);
                    }
                }
                menu.Items.Add(item);
            }
            menu.ResumeLayout();
            return menu;
        }

        internal override ToolStripItem GetNextItem(ToolStripItem start, ArrowDirection direction, bool rtlAware) => 
            this.GetNextItem(start, direction);

        internal override void Initialize()
        {
            base.Initialize();
            base.Padding = this.DefaultPadding;
            FlowLayout.CreateSettings(this).FlowDirection = FlowDirection.TopDown;
            this.state[stateShowImageMargin] = true;
        }

        protected override void OnFontChanged(EventArgs e)
        {
            this.tabWidth = -1;
            base.OnFontChanged(e);
        }

        protected override void OnLayout(LayoutEventArgs e)
        {
            if (!base.IsDisposed)
            {
                this.RequiresScrollButtons = false;
                this.CalculateInternalLayoutMetrics();
                base.OnLayout(e);
                if (!this.RequiresScrollButtons)
                {
                    this.ResetScrollPosition();
                }
            }
        }

        protected override void OnPaintBackground(PaintEventArgs e)
        {
            base.OnPaintBackground(e);
            if (this.ShowCheckMargin || this.ShowImageMargin)
            {
                base.Renderer.DrawImageMargin(new ToolStripRenderEventArgs(e.Graphics, this, this.ImageMargin, SystemColors.Control));
            }
        }

        internal void ResetScrollPosition()
        {
            this.scrollAmount = 0;
        }

        internal void RestoreScrollPosition()
        {
            if (this.RequiresScrollButtons && (this.Items.Count != 0))
            {
                Rectangle displayRectangle = this.DisplayRectangle;
                int num = displayRectangle.Top - this.Items[0].Bounds.Top;
                int num2 = this.scrollAmount - num;
                int delta = 0;
                if (num2 > 0)
                {
                    for (int i = 0; (i < this.Items.Count) && (delta < num2); i++)
                    {
                        if (this.Items[i].Available)
                        {
                            Rectangle bounds = this.Items[this.Items.Count - 1].Bounds;
                            bounds.Y -= delta;
                            if (displayRectangle.Contains(displayRectangle.X, bounds.Top) && displayRectangle.Contains(displayRectangle.X, bounds.Bottom))
                            {
                                break;
                            }
                            if (i < (this.Items.Count - 1))
                            {
                                delta += this.Items[i + 1].Bounds.Top - this.Items[i].Bounds.Top;
                            }
                            else
                            {
                                delta += this.Items[i].Bounds.Height;
                            }
                        }
                    }
                }
                else
                {
                    for (int j = this.Items.Count - 1; (j >= 0) && (delta > num2); j--)
                    {
                        if (this.Items[j].Available)
                        {
                            Rectangle rectangle3 = this.Items[0].Bounds;
                            rectangle3.Y -= delta;
                            if (displayRectangle.Contains(displayRectangle.X, rectangle3.Top) && displayRectangle.Contains(displayRectangle.X, rectangle3.Bottom))
                            {
                                break;
                            }
                            if (j > 0)
                            {
                                delta -= this.Items[j].Bounds.Top - this.Items[j - 1].Bounds.Top;
                            }
                            else
                            {
                                delta -= this.Items[j].Bounds.Height;
                            }
                        }
                    }
                }
                this.ScrollInternal(delta);
                this.scrollAmount = this.DisplayRectangle.Top - this.Items[0].Bounds.Top;
                this.UpdateScrollButtonLocations();
            }
        }

        internal void ScrollInternal(bool up)
        {
            int num;
            this.UpdateScrollButtonStatus();
            if ((this.indexOfFirstDisplayedItem == -1) || (this.indexOfFirstDisplayedItem >= this.Items.Count))
            {
                int menuHeight = SystemInformation.MenuHeight;
                num = up ? -menuHeight : menuHeight;
            }
            else if (up)
            {
                if (this.indexOfFirstDisplayedItem == 0)
                {
                    num = 0;
                }
                else
                {
                    ToolStripItem item = this.Items[this.indexOfFirstDisplayedItem - 1];
                    ToolStripItem item2 = this.Items[this.indexOfFirstDisplayedItem];
                    num = item.Bounds.Top - item2.Bounds.Top;
                }
            }
            else
            {
                if (this.indexOfFirstDisplayedItem == (this.Items.Count - 1))
                {
                    num = 0;
                }
                ToolStripItem item3 = this.Items[this.indexOfFirstDisplayedItem];
                ToolStripItem item4 = this.Items[this.indexOfFirstDisplayedItem + 1];
                num = item4.Bounds.Top - item3.Bounds.Top;
            }
            this.ScrollInternal(num);
            this.UpdateScrollButtonLocations();
        }

        internal override void ScrollInternal(int delta)
        {
            base.ScrollInternal(delta);
            this.scrollAmount += delta;
        }

        protected override void SetDisplayedItems()
        {
            base.SetDisplayedItems();
            if (this.RequiresScrollButtons)
            {
                this.DisplayedItems.Add(this.UpScrollButton);
                this.DisplayedItems.Add(this.DownScrollButton);
                this.UpdateScrollButtonLocations();
                this.UpScrollButton.Visible = true;
                this.DownScrollButton.Visible = true;
            }
            else
            {
                this.UpScrollButton.Visible = false;
                this.DownScrollButton.Visible = false;
            }
        }

        private void UpdateScrollButtonLocations()
        {
            if (base.GetToolStripState(0x20))
            {
                Size preferredSize = this.UpScrollButton.GetPreferredSize(Size.Empty);
                Point location = new Point(1, 0);
                this.UpScrollButton.SetBounds(new Rectangle(location, preferredSize));
                Size size = this.DownScrollButton.GetPreferredSize(Size.Empty);
                int height = base.GetDropDownBounds(base.Bounds).Height;
                Point point2 = new Point(1, height - size.Height);
                this.DownScrollButton.SetBounds(new Rectangle(point2, size));
                this.UpdateScrollButtonStatus();
            }
        }

        private void UpdateScrollButtonStatus()
        {
            Rectangle displayRectangle = this.DisplayRectangle;
            this.indexOfFirstDisplayedItem = -1;
            int num = 0x7fffffff;
            int num2 = 0;
            for (int i = 0; i < this.Items.Count; i++)
            {
                ToolStripItem item = this.Items[i];
                if (((this.UpScrollButton != item) && (this.DownScrollButton != item)) && item.Available)
                {
                    if ((this.indexOfFirstDisplayedItem == -1) && displayRectangle.Contains(displayRectangle.X, item.Bounds.Top))
                    {
                        this.indexOfFirstDisplayedItem = i;
                    }
                    num = Math.Min(num, item.Bounds.Top);
                    num2 = Math.Max(num2, item.Bounds.Bottom);
                }
            }
            this.UpScrollButton.Enabled = !displayRectangle.Contains(displayRectangle.X, num);
            this.DownScrollButton.Enabled = !displayRectangle.Contains(displayRectangle.X, num2);
        }

        internal override bool AllItemsVisible
        {
            get => 
                !this.RequiresScrollButtons;
            set
            {
                this.RequiresScrollButtons = !value;
            }
        }

        internal Rectangle ArrowRectangle =>
            this.arrowRectangle;

        internal Rectangle CheckRectangle =>
            this.checkRectangle;

        protected override Padding DefaultPadding
        {
            get
            {
                RightToLeft rightToLeft = this.RightToLeft;
                int num = (rightToLeft == RightToLeft.Yes) ? TextPadding.Right : TextPadding.Left;
                int right = (this.ShowCheckMargin || this.ShowImageMargin) ? (num + this.ImageMargin.Width) : num;
                if (rightToLeft == RightToLeft.Yes)
                {
                    return new Padding(1, 2, right, 2);
                }
                return new Padding(right, 2, 1, 2);
            }
        }

        public override Rectangle DisplayRectangle
        {
            get
            {
                Rectangle displayRectangle = base.DisplayRectangle;
                if (base.GetToolStripState(0x20))
                {
                    displayRectangle.Y += this.UpScrollButton.Height + this.UpScrollButton.Margin.Vertical;
                    displayRectangle.Height -= ((this.UpScrollButton.Height + this.UpScrollButton.Margin.Vertical) + this.DownScrollButton.Height) + this.DownScrollButton.Margin.Vertical;
                    displayRectangle = LayoutUtils.InflateRect(displayRectangle, new Padding(0, base.Padding.Top, 0, base.Padding.Bottom));
                }
                return displayRectangle;
            }
        }

        private ToolStripScrollButton DownScrollButton
        {
            get
            {
                if (this.downScrollButton == null)
                {
                    this.downScrollButton = new ToolStripScrollButton(false);
                    this.downScrollButton.ParentInternal = this;
                }
                return this.downScrollButton;
            }
        }

        internal Rectangle ImageMargin
        {
            get
            {
                this.imageMarginBounds.Height = base.Height;
                return this.imageMarginBounds;
            }
        }

        internal Rectangle ImageRectangle =>
            this.imageRectangle;

        public override System.Windows.Forms.Layout.LayoutEngine LayoutEngine =>
            ToolStripDropDownLayoutEngine.LayoutInstance;

        [DefaultValue(3)]
        public ToolStripLayoutStyle LayoutStyle
        {
            get => 
                base.LayoutStyle;
            set
            {
                base.LayoutStyle = value;
            }
        }

        protected internal override Size MaxItemSize
        {
            get
            {
                if (!this.state[stateMaxItemSizeValid])
                {
                    this.CalculateInternalLayoutMetrics();
                }
                return this.maxItemSize;
            }
        }

        internal int PaddingToTrim
        {
            get => 
                this.paddingToTrim;
            set
            {
                if (this.paddingToTrim != value)
                {
                    this.paddingToTrim = value;
                    base.AdjustSize();
                }
            }
        }

        internal override bool RequiresScrollButtons
        {
            get => 
                base.GetToolStripState(0x20);
            set
            {
                bool flag = this.RequiresScrollButtons != value;
                base.SetToolStripState(0x20, value);
                if (flag)
                {
                    this.UpdateScrollButtonLocations();
                    if (this.Items.Count > 0)
                    {
                        int delta = this.Items[0].Bounds.Top - this.DisplayRectangle.Top;
                        this.ScrollInternal(delta);
                        this.scrollAmount -= delta;
                        if (value)
                        {
                            this.RestoreScrollPosition();
                        }
                    }
                    else
                    {
                        this.scrollAmount = 0;
                    }
                }
            }
        }

        [System.Windows.Forms.SRDescription("ToolStripDropDownMenuShowCheckMarginDescr"), DefaultValue(false), System.Windows.Forms.SRCategory("CatAppearance")]
        public bool ShowCheckMargin
        {
            get => 
                this.state[stateShowCheckMargin];
            set
            {
                if (value != this.state[stateShowCheckMargin])
                {
                    this.state[stateShowCheckMargin] = value;
                    LayoutTransaction.DoLayout(this, this, PropertyNames.ShowCheckMargin);
                }
            }
        }

        [System.Windows.Forms.SRCategory("CatAppearance"), System.Windows.Forms.SRDescription("ToolStripDropDownMenuShowImageMarginDescr"), DefaultValue(true)]
        public bool ShowImageMargin
        {
            get => 
                this.state[stateShowImageMargin];
            set
            {
                if (value != this.state[stateShowImageMargin])
                {
                    this.state[stateShowImageMargin] = value;
                    LayoutTransaction.DoLayout(this, this, PropertyNames.ShowImageMargin);
                }
            }
        }

        internal Rectangle TextRectangle =>
            this.textRectangle;

        private ToolStripScrollButton UpScrollButton
        {
            get
            {
                if (this.upScrollButton == null)
                {
                    this.upScrollButton = new ToolStripScrollButton(true);
                    this.upScrollButton.ParentInternal = this;
                }
                return this.upScrollButton;
            }
        }

        internal sealed class ToolStripDropDownLayoutEngine : FlowLayout
        {
            public static ToolStripDropDownMenu.ToolStripDropDownLayoutEngine LayoutInstance = new ToolStripDropDownMenu.ToolStripDropDownLayoutEngine();

            internal override Size GetPreferredSize(IArrangedElement container, Size proposedConstraints)
            {
                Size preferredSize = base.GetPreferredSize(container, proposedConstraints);
                ToolStripDropDownMenu menu = container as ToolStripDropDownMenu;
                if (menu != null)
                {
                    preferredSize.Width = menu.MaxItemSize.Width - menu.PaddingToTrim;
                }
                return preferredSize;
            }
        }
    }
}

