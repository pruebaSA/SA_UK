namespace System.Windows.Forms
{
    using Microsoft.Win32;
    using System;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Drawing;
    using System.Drawing.Design;
    using System.Globalization;
    using System.Reflection;
    using System.Runtime.InteropServices;
    using System.Security;
    using System.Security.Permissions;
    using System.Text;
    using System.Windows.Forms.Layout;
    using System.Windows.Forms.VisualStyles;

    [Designer("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), ComVisible(true), ClassInterface(ClassInterfaceType.AutoDispatch), Docking(DockingBehavior.Ask), DefaultEvent("CellContentClick"), ComplexBindingProperties("DataSource", "DataMember"), Editor("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(ComponentEditor)), System.Windows.Forms.SRDescription("DescriptionDataGridView")]
    public class DataGridView : Control, ISupportInitialize
    {
        private DataGridViewAdvancedBorderStyle advancedCellBorderStyle;
        private DataGridViewAdvancedBorderStyle advancedColumnHeadersBorderStyle;
        private DataGridViewAdvancedBorderStyle advancedRowHeadersBorderStyle;
        private DataGridViewCellStyle alternatingRowsDefaultCellStyle;
        private DataGridViewAutoSizeColumnsMode autoSizeColumnsMode;
        private DataGridViewAutoSizeRowsMode autoSizeRowsMode;
        private int availableWidthForFillColumns;
        private SolidBrush backgroundBrush = DefaultBackgroundBrush;
        private System.Windows.Forms.BorderStyle borderStyle;
        private Hashtable brushes;
        private int cachedColumnHeadersHeight;
        private Control cachedEditingControl;
        private Graphics cachedGraphics;
        private int cachedRowHeadersWidth;
        private System.Windows.Forms.NativeMethods.RECT[] cachedScrollableRegion;
        private DataGridViewClipboardCopyMode clipboardCopyMode;
        private DataGridViewCellStyle columnHeadersDefaultCellStyle;
        private int columnHeadersHeight = 0x17;
        private DataGridViewColumnHeadersHeightSizeMode columnHeadersHeightSizeMode;
        private Hashtable converters;
        private int cumulativeHorizontalWheelDelta;
        private int cumulativeVerticalWheelDelta;
        private int currentColSplitBar = -1;
        private int currentRowSplitBar = -1;
        private DataGridViewDataConnection dataConnection;
        private const byte DATAGRIDVIEW_bulkPaintThreshold = 8;
        private const byte DATAGRIDVIEW_columnSizingHotZone = 6;
        private const string DATAGRIDVIEW_htmlEndFragment = "\r\n<!--EndFragment-->\r\n</BODY>\r\n</HTML>";
        private const string DATAGRIDVIEW_htmlPrefix = "Version:1.0\r\nStartHTML:00000097\r\nEndHTML:{0}\r\nStartFragment:00000133\r\nEndFragment:{1}\r\n";
        private const string DATAGRIDVIEW_htmlStartFragment = "<HTML>\r\n<BODY>\r\n<!--StartFragment-->";
        private const byte DATAGRIDVIEW_insertionBarWidth = 3;
        private const byte DATAGRIDVIEW_rowSizingHotZone = 5;
        private DataGridViewColumnCollection dataGridViewColumns;
        private BitVector32 dataGridViewOper;
        private const int DATAGRIDVIEWOPER_inAdjustFillingColumn = 0x80000;
        private const int DATAGRIDVIEWOPER_inAdjustFillingColumns = 0x40000;
        private const int DATAGRIDVIEWOPER_inBeginEdit = 0x200000;
        private const int DATAGRIDVIEWOPER_inBorderStyleChange = 0x10000;
        private const int DATAGRIDVIEWOPER_inCellValidating = 0x8000;
        private const int DATAGRIDVIEWOPER_inCurrentCellChange = 0x20000;
        private const int DATAGRIDVIEWOPER_inDisplayIndexAdjustments = 0x800;
        private const int DATAGRIDVIEWOPER_inDispose = 0x100000;
        private const int DATAGRIDVIEWOPER_inEndEdit = 0x400000;
        private const int DATAGRIDVIEWOPER_inMouseDown = 0x2000;
        private const int DATAGRIDVIEWOPER_inReadOnlyChange = 0x4000;
        private const int DATAGRIDVIEWOPER_inRefreshColumns = 0x400;
        private const int DATAGRIDVIEWOPER_inSort = 0x40;
        private const int DATAGRIDVIEWOPER_lastEditCtrlClickDoubled = 0x1000;
        private const int DATAGRIDVIEWOPER_resizingOperationAboutToStart = 0x800000;
        private const int DATAGRIDVIEWOPER_trackCellSelect = 0x10;
        private const int DATAGRIDVIEWOPER_trackColHeadersResize = 0x80;
        private const int DATAGRIDVIEWOPER_trackColRelocation = 0x20;
        private const int DATAGRIDVIEWOPER_trackColResize = 1;
        private const int DATAGRIDVIEWOPER_trackColSelect = 4;
        private const int DATAGRIDVIEWOPER_trackMouseMoves = 0x200;
        private const int DATAGRIDVIEWOPER_trackRowHeadersResize = 0x100;
        private const int DATAGRIDVIEWOPER_trackRowResize = 2;
        private const int DATAGRIDVIEWOPER_trackRowSelect = 8;
        private DataGridViewRowCollection dataGridViewRows;
        private BitVector32 dataGridViewState1;
        private const int DATAGRIDVIEWSTATE1_allowUserToAddRows = 1;
        private const int DATAGRIDVIEWSTATE1_allowUserToDeleteRows = 2;
        private const int DATAGRIDVIEWSTATE1_allowUserToOrderColumns = 4;
        private const int DATAGRIDVIEWSTATE1_ambientColumnHeadersFont = 0x4000000;
        private const int DATAGRIDVIEWSTATE1_ambientFont = 0x2000000;
        private const int DATAGRIDVIEWSTATE1_ambientForeColor = 0x400;
        private const int DATAGRIDVIEWSTATE1_ambientRowHeadersFont = 0x8000000;
        private const int DATAGRIDVIEWSTATE1_autoGenerateColumns = 0x800000;
        private const int DATAGRIDVIEWSTATE1_columnHeadersVisible = 8;
        private const int DATAGRIDVIEWSTATE1_currentCellInEditMode = 0x8000;
        private const int DATAGRIDVIEWSTATE1_customCursorSet = 0x1000000;
        private const int DATAGRIDVIEWSTATE1_editedCellChanged = 0x20000;
        private const int DATAGRIDVIEWSTATE1_editedRowChanged = 0x40000;
        private const int DATAGRIDVIEWSTATE1_editingControlChanging = 0x4000;
        private const int DATAGRIDVIEWSTATE1_editingControlHidden = 0x1000;
        private const int DATAGRIDVIEWSTATE1_forwardCharMessage = 0x20;
        private const int DATAGRIDVIEWSTATE1_ignoringEditingChanges = 0x200;
        private const int DATAGRIDVIEWSTATE1_isAutoSized = 0x40000000;
        private const int DATAGRIDVIEWSTATE1_isRestricted = 0x20000000;
        private const int DATAGRIDVIEWSTATE1_isRestrictedChecked = 0x10000000;
        private const int DATAGRIDVIEWSTATE1_leavingWithTabKey = 0x40;
        private const int DATAGRIDVIEWSTATE1_multiSelect = 0x80;
        private const int DATAGRIDVIEWSTATE1_newRowCreatedByEditing = 0x200000;
        private const int DATAGRIDVIEWSTATE1_newRowEdited = 0x80000;
        private const int DATAGRIDVIEWSTATE1_readOnly = 0x100000;
        private const int DATAGRIDVIEWSTATE1_rowHeadersVisible = 0x10;
        private const int DATAGRIDVIEWSTATE1_scrolledSinceMouseDown = 0x800;
        private const int DATAGRIDVIEWSTATE1_standardTab = 0x2000;
        private const int DATAGRIDVIEWSTATE1_temporarilyResetCurrentCell = 0x400000;
        private const int DATAGRIDVIEWSTATE1_virtualMode = 0x10000;
        private BitVector32 dataGridViewState2;
        private const int DATAGRIDVIEWSTATE2_allowHorizontalScrollbar = 0x2000000;
        private const int DATAGRIDVIEWSTATE2_allowUserToResizeColumns = 2;
        private const int DATAGRIDVIEWSTATE2_allowUserToResizeRows = 4;
        private const int DATAGRIDVIEWSTATE2_autoSizedWithoutHandle = 0x100000;
        private const int DATAGRIDVIEWSTATE2_cellMouseDownInContentBounds = 0x10000000;
        private const int DATAGRIDVIEWSTATE2_currentCellWantsInputKey = 0x2000;
        private const int DATAGRIDVIEWSTATE2_discardEditingControl = 0x20000000;
        private const int DATAGRIDVIEWSTATE2_enableHeadersVisualStyles = 0x40;
        private const int DATAGRIDVIEWSTATE2_ignoreCursorChange = 0x200000;
        private const int DATAGRIDVIEWSTATE2_inBindingContextChanged = 0x1000000;
        private const int DATAGRIDVIEWSTATE2_initializing = 0x80000;
        private const int DATAGRIDVIEWSTATE2_messageFromEditingCtrls = 0x8000000;
        private const int DATAGRIDVIEWSTATE2_mouseEnterExpected = 0x20;
        private const int DATAGRIDVIEWSTATE2_mouseOverRemovedEditingCtrl = 8;
        private const int DATAGRIDVIEWSTATE2_mouseOverRemovedEditingPanel = 0x10;
        private const int DATAGRIDVIEWSTATE2_nextMouseUpIsDouble = 0x800000;
        private const int DATAGRIDVIEWSTATE2_raiseSelectionChanged = 0x40000;
        private const int DATAGRIDVIEWSTATE2_replacedCellReadOnly = 0x20000;
        private const int DATAGRIDVIEWSTATE2_replacedCellSelected = 0x10000;
        private const int DATAGRIDVIEWSTATE2_rightToLeftMode = 0x800;
        private const int DATAGRIDVIEWSTATE2_rightToLeftValid = 0x1000;
        private const int DATAGRIDVIEWSTATE2_rowsCollectionClearedInSetCell = 0x400000;
        private const int DATAGRIDVIEWSTATE2_showCellErrors = 0x80;
        private const int DATAGRIDVIEWSTATE2_showCellToolTips = 0x100;
        private const int DATAGRIDVIEWSTATE2_showColumnRelocationInsertion = 0x400;
        private const int DATAGRIDVIEWSTATE2_showEditingIcon = 1;
        private const int DATAGRIDVIEWSTATE2_showRowErrors = 0x200;
        private const int DATAGRIDVIEWSTATE2_stopRaisingHorizontalScroll = 0x8000;
        private const int DATAGRIDVIEWSTATE2_stopRaisingVerticalScroll = 0x4000;
        private const int DATAGRIDVIEWSTATE2_usedFillWeightsDirty = 0x4000000;
        private const DataGridViewAdvancedCellBorderStyle defaultAdvancedCellBorderStyle = DataGridViewAdvancedCellBorderStyle.Single;
        private const DataGridViewAdvancedCellBorderStyle defaultAdvancedColumnHeadersBorderStyle = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
        private const DataGridViewAdvancedCellBorderStyle defaultAdvancedRowHeadersBorderStyle = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
        private const System.Windows.Forms.BorderStyle defaultBorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
        private DataGridViewCellStyle defaultCellStyle;
        private const int defaultColumnHeadersHeight = 0x17;
        private const DataGridViewEditMode defaultEditMode = DataGridViewEditMode.EditOnKeystrokeOrF2;
        private const int defaultRowHeadersWidth = 0x29;
        private const DataGridViewSelectionMode defaultSelectionMode = DataGridViewSelectionMode.RowHeaderSelect;
        private DataGridViewCellPaintingEventArgs dgvcpe;
        private DataGridViewCellStyleChangedEventArgs dgvcsce;
        private DataGridViewCellValueEventArgs dgvcve;
        private DataGridViewRowHeightInfoNeededEventArgs dgvrhine;
        private DataGridViewRowPostPaintEventArgs dgvrpope;
        private DataGridViewRowPrePaintEventArgs dgvrprpe;
        private DisplayedBandsData displayedBandsInfo;
        private static Size DragSize = SystemInformation.DragSize;
        private Control editingControl;
        private Panel editingPanel;
        private DataGridViewEditMode editMode;
        private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWBORDERSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCANCELROWEDIT = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLBEGINEDIT = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLCLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLCONTENTCLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLDOUBLECLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLENDEDIT = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLENTER = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLFORMATTING = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLLEAVE = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLMOUSECLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEDOWN = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEENTER = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLMOUSELEAVE = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEMOVE = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEUP = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLPAINTING = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLPARSING = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLSTATECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLVALIDATED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLVALIDATING = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLVALUECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLVALUENEEDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCELLVALUEPUSHED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNADDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNREMOVED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCURRENTCELLCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE = new object();
        private static readonly object EVENT_DATAGRIDVIEWDATAERROR = new object();
        private static readonly object EVENT_DATAGRIDVIEWDATAMEMBERCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWDATASOURCECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING = new object();
        private static readonly object EVENT_DATAGRIDVIEWEDITMODECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWGRIDCOLORCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWMULTISELECTCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWNEWROWNEEDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWREADONLYCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWENTER = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWLEAVE = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWPOSTPAINT = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWPREPAINT = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWSADDED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWSREMOVED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWSTATECHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWUNSHARED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWVALIDATED = new object();
        private static readonly object EVENT_DATAGRIDVIEWROWVALIDATING = new object();
        private static readonly object EVENT_DATAGRIDVIEWSCROLL = new object();
        private static readonly object EVENT_DATAGRIDVIEWSELECTIONCHANGED = new object();
        private static readonly object EVENT_DATAGRIDVIEWSORTCOMPARE = new object();
        private static readonly object EVENT_DATAGRIDVIEWSORTED = new object();
        private static readonly object EVENT_DATAGRIDVIEWUSERADDEDROW = new object();
        private static readonly object EVENT_DATAGRIDVIEWUSERDELETEDROW = new object();
        private static readonly object EVENT_DATAGRIDVIEWUSERDELETINGROW = new object();
        private Pen gridPen;
        private int horizontalOffset;
        private HScrollBar horizScrollBar = new HScrollBar();
        private Timer horizScrollTimer;
        private int inBulkLayoutCount;
        private int inBulkPaintCount;
        private DataGridViewCellLinkedList individualReadOnlyCells;
        private DataGridViewCellLinkedList individualSelectedCells;
        private int inPerformLayoutCount;
        private const DataGridViewAutoSizeRowCriteriaInternal invalidDataGridViewAutoSizeRowCriteriaInternalMask = ~(DataGridViewAutoSizeRowCriteriaInternal.AllColumns | DataGridViewAutoSizeRowCriteriaInternal.Header);
        private int lastColSplitBar = -1;
        private int lastHeaderShadow = -1;
        private MouseClickInfo lastMouseClickInfo;
        private int lastRowSplitBar = -1;
        private Control latestEditingControl;
        private LayoutData layout;
        private ArrayList lstRows;
        private const int maxHeadersThickness = 0x8000;
        private const int maxTTDISPINFOBufferLength = 80;
        private const int minimumColumnHeadersHeight = 4;
        private const int minimumRowHeadersWidth = 4;
        private int mouseBarOffset;
        private int negOffset;
        private int newRowIndex = -1;
        private int noAutoSizeCount;
        private int noDimensionChangeCount;
        private Rectangle normalClientRectangle;
        private int noSelectionChangeCount;
        private Cursor oldCursor;
        private Hashtable pens;
        private DataGridViewCellStyle placeholderCellStyle;
        private StringFormat placeholderStringFormat;
        private Point ptAnchorCell;
        private Point ptCurrentCell;
        private Point ptCurrentCellCache = Point.Empty;
        private Point ptMouseDownCell;
        private Point ptMouseDownGridCoord;
        private Point ptMouseEnteredCell;
        private Point ptToolTipCell;
        private DataGridViewCellStyle rowHeadersDefaultCellStyle;
        private int rowHeadersWidth = 0x29;
        private DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode;
        private DataGridViewCellStyle rowsDefaultCellStyle;
        private DataGridViewRow rowTemplate;
        private System.Windows.Forms.ScrollBars scrollBars;
        private DataGridViewIntLinkedList selectedBandIndexes;
        private DataGridViewIntLinkedList selectedBandSnapshotIndexes;
        private DataGridViewSelectionMode selectionMode;
        private DataGridViewColumn sortedColumn;
        private System.Windows.Forms.SortOrder sortOrder;
        private string toolTipCaption = string.Empty;
        private DataGridViewToolTip toolTipControl;
        private DataGridViewHeaderCell topLeftHeaderCell;
        private int trackColAnchor;
        private int trackColumn = -1;
        private int trackColumnEdge = -1;
        private int trackRow = -1;
        private int trackRowAnchor;
        private int trackRowEdge = -1;
        private object uneditedFormattedValue;
        private const int upperSize = 0x7fffff;
        private int verticalOffset;
        private VScrollBar vertScrollBar = new VScrollBar();
        private Timer vertScrollTimer;

        [System.Windows.Forms.SRCategory("CatPropertyChanged"), System.Windows.Forms.SRDescription("DataGridViewOnAllowUserToAddRowsChangedDescr")]
        public event EventHandler AllowUserToAddRowsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatPropertyChanged"), System.Windows.Forms.SRDescription("DataGridViewOnAllowUserToDeleteRowsChangedDescr")]
        public event EventHandler AllowUserToDeleteRowsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewOnAllowUserToOrderColumnsChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler AllowUserToOrderColumnsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewOnAllowUserToResizeColumnsChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler AllowUserToResizeColumnsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewOnAllowUserToResizeRowsChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler AllowUserToResizeRowsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewAlternatingRowsDefaultCellStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler AlternatingRowsDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED, value);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public event EventHandler AutoGenerateColumnsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewAutoSizeColumnModeChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatPropertyChanged"), System.Windows.Forms.SRDescription("DataGridViewAutoSizeColumnsModeChangedDescr")]
        public event DataGridViewAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatPropertyChanged"), System.Windows.Forms.SRDescription("DataGridViewAutoSizeRowsModeChangedDescr")]
        public event DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED, value);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event EventHandler BackColorChanged
        {
            add
            {
                base.BackColorChanged += value;
            }
            remove
            {
                base.BackColorChanged -= value;
            }
        }

        [System.Windows.Forms.SRCategory("CatPropertyChanged"), System.Windows.Forms.SRDescription("DataGridViewBackgroundColorChangedDescr")]
        public event EventHandler BackgroundColorChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED, value);
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public event EventHandler BackgroundImageChanged
        {
            add
            {
                base.BackgroundImageChanged += value;
            }
            remove
            {
                base.BackgroundImageChanged -= value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event EventHandler BackgroundImageLayoutChanged
        {
            add
            {
                base.BackgroundImageLayoutChanged += value;
            }
            remove
            {
                base.BackgroundImageLayoutChanged -= value;
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewBorderStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler BorderStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWBORDERSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWBORDERSTYLECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CancelRowEditDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event QuestionEventHandler CancelRowEdit
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCANCELROWEDIT, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCANCELROWEDIT, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellBeginEditDescr"), System.Windows.Forms.SRCategory("CatData")]
        public event DataGridViewCellCancelEventHandler CellBeginEdit
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLBEGINEDIT, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLBEGINEDIT, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellBorderStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler CellBorderStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellClickDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellEventHandler CellClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLCLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLCLICK, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatMouse"), System.Windows.Forms.SRDescription("DataGridView_CellContentClick")]
        public event DataGridViewCellEventHandler CellContentClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLCONTENTCLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLCONTENTCLICK, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellContentDoubleClick"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellEventHandler CellContentDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK, value);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), System.Windows.Forms.SRCategory("CatAction"), System.Windows.Forms.SRDescription("DataGridView_CellContextMenuStripChanged")]
        public event DataGridViewCellEventHandler CellContextMenuStripChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED, value);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), System.Windows.Forms.SRCategory("CatBehavior"), System.Windows.Forms.SRDescription("DataGridView_CellContextMenuStripNeeded")]
        public event DataGridViewCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellDoubleClickDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellEventHandler CellDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLDOUBLECLICK, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellEndEditDescr"), System.Windows.Forms.SRCategory("CatData")]
        public event DataGridViewCellEventHandler CellEndEdit
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLENDEDIT, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLENDEDIT, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellEnterDescr"), System.Windows.Forms.SRCategory("CatFocus")]
        public event DataGridViewCellEventHandler CellEnter
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLENTER, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLENTER, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellErrorTextChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewCellEventHandler CellErrorTextChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellErrorTextNeededDescr"), System.Windows.Forms.SRCategory("CatData"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event DataGridViewCellErrorTextNeededEventHandler CellErrorTextNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellFormattingDescr"), System.Windows.Forms.SRCategory("CatDisplay")]
        public event DataGridViewCellFormattingEventHandler CellFormatting
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLFORMATTING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLFORMATTING, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellLeaveDescr"), System.Windows.Forms.SRCategory("CatFocus")]
        public event DataGridViewCellEventHandler CellLeave
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLLEAVE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLLEAVE, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellMouseClickDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellMouseEventHandler CellMouseClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLMOUSECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLMOUSECLICK, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellMouseDoubleClickDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellMouseEventHandler CellMouseDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellMouseDownDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellMouseEventHandler CellMouseDown
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLMOUSEDOWN, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLMOUSEDOWN, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellMouseEnterDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellEventHandler CellMouseEnter
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLMOUSEENTER, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLMOUSEENTER, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellMouseLeaveDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellEventHandler CellMouseLeave
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLMOUSELEAVE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLMOUSELEAVE, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellMouseMoveDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellMouseEventHandler CellMouseMove
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLMOUSEMOVE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLMOUSEMOVE, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellMouseUpDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellMouseEventHandler CellMouseUp
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLMOUSEUP, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLMOUSEUP, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellPaintingDescr"), System.Windows.Forms.SRCategory("CatDisplay")]
        public event DataGridViewCellPaintingEventHandler CellPainting
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLPAINTING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLPAINTING, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellParsingDescr"), System.Windows.Forms.SRCategory("CatDisplay")]
        public event DataGridViewCellParsingEventHandler CellParsing
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLPARSING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLPARSING, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellStateChangedDescr"), System.Windows.Forms.SRCategory("CatBehavior")]
        public event DataGridViewCellStateChangedEventHandler CellStateChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLSTATECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLSTATECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewCellEventHandler CellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLSTYLECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellStyleContentChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewCellStyleContentChangedEventHandler CellStyleContentChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellToolTipTextChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewCellEventHandler CellToolTipTextChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellToolTipTextNeededDescr"), EditorBrowsable(EditorBrowsableState.Advanced), System.Windows.Forms.SRCategory("CatBehavior")]
        public event DataGridViewCellToolTipTextNeededEventHandler CellToolTipTextNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatFocus"), System.Windows.Forms.SRDescription("DataGridView_CellValidatedDescr")]
        public event DataGridViewCellEventHandler CellValidated
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLVALIDATED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLVALIDATED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellValidatingDescr"), System.Windows.Forms.SRCategory("CatFocus")]
        public event DataGridViewCellValidatingEventHandler CellValidating
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLVALIDATING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLVALIDATING, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellValueChangedDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event DataGridViewCellEventHandler CellValueChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLVALUECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLVALUECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellValueNeededDescr"), System.Windows.Forms.SRCategory("CatData"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event DataGridViewCellValueEventHandler CellValueNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLVALUENEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLVALUENEEDED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CellValuePushedDescr"), System.Windows.Forms.SRCategory("CatData"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event DataGridViewCellValueEventHandler CellValuePushed
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCELLVALUEPUSHED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCELLVALUEPUSHED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnAddedDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event DataGridViewColumnEventHandler ColumnAdded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNADDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNADDED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnContextMenuStripChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewColumnEventHandler ColumnContextMenuStripChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatPropertyChanged"), System.Windows.Forms.SRDescription("DataGridView_ColumnDataPropertyNameChangedDescr")]
        public event DataGridViewColumnEventHandler ColumnDataPropertyNameChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnDefaultCellStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewColumnEventHandler ColumnDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnDisplayIndexChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewColumnEventHandler ColumnDisplayIndexChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnDividerDoubleClickDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnDividerWidthChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewColumnEventHandler ColumnDividerWidthChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnHeaderCellChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewColumnEventHandler ColumnHeaderCellChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnHeaderMouseClickDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellMouseEventHandler ColumnHeaderMouseClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnHeaderMouseDoubleClickDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellMouseEventHandler ColumnHeaderMouseDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnHeadersBorderStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler ColumnHeadersBorderStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewColumnHeadersDefaultCellStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler ColumnHeadersDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewColumnHeadersHeightChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler ColumnHeadersHeightChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnHeadersHeightSizeModeChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnMinimumWidthChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewColumnEventHandler ColumnMinimumWidthChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnNameChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewColumnEventHandler ColumnNameChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnRemovedDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event DataGridViewColumnEventHandler ColumnRemoved
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNREMOVED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNREMOVED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewColumnSortModeChangedDescr"), System.Windows.Forms.SRCategory("CatBehavior")]
        public event DataGridViewColumnEventHandler ColumnSortModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnStateChangedDescr"), System.Windows.Forms.SRCategory("CatBehavior")]
        public event DataGridViewColumnStateChangedEventHandler ColumnStateChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnToolTipTextChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewColumnEventHandler ColumnToolTipTextChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnWidthChangedDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event DataGridViewColumnEventHandler ColumnWidthChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CurrentCellChangedDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event EventHandler CurrentCellChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCURRENTCELLCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCURRENTCELLCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_CurrentCellDirtyStateChangedDescr"), System.Windows.Forms.SRCategory("CatBehavior"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event EventHandler CurrentCellDirtyStateChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatData"), System.Windows.Forms.SRDescription("DataGridView_DataBindingCompleteDescr")]
        public event DataGridViewBindingCompleteEventHandler DataBindingComplete
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_DataErrorDescr"), System.Windows.Forms.SRCategory("CatBehavior")]
        public event DataGridViewDataErrorEventHandler DataError
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWDATAERROR, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWDATAERROR, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewDataMemberChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler DataMemberChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWDATAMEMBERCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWDATAMEMBERCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewDataSourceChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler DataSourceChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWDATASOURCECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWDATASOURCECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewDefaultCellStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler DefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED, value);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), System.Windows.Forms.SRCategory("CatData"), System.Windows.Forms.SRDescription("DataGridView_DefaultValuesNeededDescr")]
        public event DataGridViewRowEventHandler DefaultValuesNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatAction"), System.Windows.Forms.SRDescription("DataGridView_EditingControlShowingDescr")]
        public event DataGridViewEditingControlShowingEventHandler EditingControlShowing
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatPropertyChanged"), System.Windows.Forms.SRDescription("DataGridView_EditModeChangedDescr")]
        public event EventHandler EditModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWEDITMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWEDITMODECHANGED, value);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public event EventHandler FontChanged
        {
            add
            {
                base.FontChanged += value;
            }
            remove
            {
                base.FontChanged -= value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public event EventHandler ForeColorChanged
        {
            add
            {
                base.ForeColorChanged += value;
            }
            remove
            {
                base.ForeColorChanged -= value;
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewOnGridColorChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler GridColorChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWGRIDCOLORCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWGRIDCOLORCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewOnMultiSelectChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler MultiSelectChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWMULTISELECTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWMULTISELECTCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_NewRowNeededDescr"), System.Windows.Forms.SRCategory("CatData")]
        public event DataGridViewRowEventHandler NewRowNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWNEWROWNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWNEWROWNEEDED, value);
            }
        }

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public event EventHandler PaddingChanged
        {
            add
            {
                base.PaddingChanged += value;
            }
            remove
            {
                base.PaddingChanged -= value;
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewOnReadOnlyChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler ReadOnlyChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWREADONLYCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWREADONLYCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowContextMenuStripChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewRowEventHandler RowContextMenuStripChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowContextMenuStripNeededDescr"), System.Windows.Forms.SRCategory("CatData"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event DataGridViewRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatPropertyChanged"), System.Windows.Forms.SRDescription("DataGridView_RowDefaultCellStyleChangedDescr")]
        public event DataGridViewRowEventHandler RowDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowDirtyStateNeededDescr"), System.Windows.Forms.SRCategory("CatData"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event QuestionEventHandler RowDirtyStateNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatMouse"), System.Windows.Forms.SRDescription("DataGridView_RowDividerDoubleClickDescr")]
        public event DataGridViewRowDividerDoubleClickEventHandler RowDividerDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowDividerHeightChangedDescr"), System.Windows.Forms.SRCategory("CatAppearance")]
        public event DataGridViewRowEventHandler RowDividerHeightChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowEnterDescr"), System.Windows.Forms.SRCategory("CatFocus")]
        public event DataGridViewCellEventHandler RowEnter
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWENTER, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWENTER, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowErrorTextChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewRowEventHandler RowErrorTextChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowErrorTextNeededDescr"), System.Windows.Forms.SRCategory("CatData"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event DataGridViewRowErrorTextNeededEventHandler RowErrorTextNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowHeaderCellChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewRowEventHandler RowHeaderCellChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowHeaderMouseClickDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellMouseEventHandler RowHeaderMouseClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowHeaderMouseDoubleClickDescr"), System.Windows.Forms.SRCategory("CatMouse")]
        public event DataGridViewCellMouseEventHandler RowHeaderMouseDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowHeadersBorderStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler RowHeadersBorderStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewRowHeadersDefaultCellStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler RowHeadersDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewRowHeadersWidthChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler RowHeadersWidthChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowHeadersWidthSizeModeChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowHeightChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewRowEventHandler RowHeightChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWHEIGHTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEIGHTCHANGED, value);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), System.Windows.Forms.SRCategory("CatData"), System.Windows.Forms.SRDescription("DataGridView_RowHeightInfoNeededDescr")]
        public event DataGridViewRowHeightInfoNeededEventHandler RowHeightInfoNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatData"), System.Windows.Forms.SRDescription("DataGridView_RowHeightInfoPushedDescr"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event DataGridViewRowHeightInfoPushedEventHandler RowHeightInfoPushed
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatFocus"), System.Windows.Forms.SRDescription("DataGridView_RowLeaveDescr")]
        public event DataGridViewCellEventHandler RowLeave
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWLEAVE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWLEAVE, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowMinimumHeightChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event DataGridViewRowEventHandler RowMinimumHeightChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowPostPaintDescr"), System.Windows.Forms.SRCategory("CatDisplay")]
        public event DataGridViewRowPostPaintEventHandler RowPostPaint
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWPOSTPAINT, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWPOSTPAINT, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowPrePaintDescr"), System.Windows.Forms.SRCategory("CatDisplay")]
        public event DataGridViewRowPrePaintEventHandler RowPrePaint
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWPREPAINT, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWPREPAINT, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowsAddedDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event DataGridViewRowsAddedEventHandler RowsAdded
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWSADDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWSADDED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridViewRowsDefaultCellStyleChangedDescr"), System.Windows.Forms.SRCategory("CatPropertyChanged")]
        public event EventHandler RowsDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowsRemovedDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event DataGridViewRowsRemovedEventHandler RowsRemoved
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWSREMOVED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWSREMOVED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatBehavior"), System.Windows.Forms.SRDescription("DataGridView_RowStateChangedDescr")]
        public event DataGridViewRowStateChangedEventHandler RowStateChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWSTATECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWSTATECHANGED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatBehavior"), EditorBrowsable(EditorBrowsableState.Advanced), System.Windows.Forms.SRDescription("DataGridView_RowUnsharedDescr")]
        public event DataGridViewRowEventHandler RowUnshared
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWUNSHARED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWUNSHARED, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatFocus"), System.Windows.Forms.SRDescription("DataGridView_RowValidatedDescr")]
        public event DataGridViewCellEventHandler RowValidated
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWVALIDATED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWVALIDATED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowValidatingDescr"), System.Windows.Forms.SRCategory("CatFocus")]
        public event DataGridViewCellCancelEventHandler RowValidating
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWROWVALIDATING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWROWVALIDATING, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatAction"), System.Windows.Forms.SRDescription("DataGridView_ScrollDescr")]
        public event ScrollEventHandler Scroll
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWSCROLL, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWSCROLL, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_SelectionChangedDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event EventHandler SelectionChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWSELECTIONCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWSELECTIONCHANGED, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_SortCompareDescr"), EditorBrowsable(EditorBrowsableState.Advanced), System.Windows.Forms.SRCategory("CatData")]
        public event DataGridViewSortCompareEventHandler SortCompare
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWSORTCOMPARE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWSORTCOMPARE, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatData"), System.Windows.Forms.SRDescription("DataGridView_SortedDescr")]
        public event EventHandler Sorted
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWSORTED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWSORTED, value);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event EventHandler StyleChanged
        {
            add
            {
                base.StyleChanged += value;
            }
            remove
            {
                base.StyleChanged -= value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event EventHandler TextChanged
        {
            add
            {
                base.TextChanged += value;
            }
            remove
            {
                base.TextChanged -= value;
            }
        }

        [System.Windows.Forms.SRCategory("CatAction"), System.Windows.Forms.SRDescription("DataGridView_UserAddedRowDescr")]
        public event DataGridViewRowEventHandler UserAddedRow
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWUSERADDEDROW, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWUSERADDEDROW, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatAction"), System.Windows.Forms.SRDescription("DataGridView_UserDeletedRowDescr")]
        public event DataGridViewRowEventHandler UserDeletedRow
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWUSERDELETEDROW, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWUSERDELETEDROW, value);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_UserDeletingRowDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event DataGridViewRowCancelEventHandler UserDeletingRow
        {
            add
            {
                base.Events.AddHandler(EVENT_DATAGRIDVIEWUSERDELETINGROW, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_DATAGRIDVIEWUSERDELETINGROW, value);
            }
        }

        public DataGridView()
        {
            base.SetStyle(ControlStyles.UserMouse | ControlStyles.Opaque | ControlStyles.UserPaint, true);
            base.SetStyle(ControlStyles.SupportsTransparentBackColor, false);
            base.SetState2(0x800, true);
            this.dataGridViewState1 = new BitVector32(0);
            this.dataGridViewState2 = new BitVector32(0);
            this.dataGridViewOper = new BitVector32(0);
            this.dataGridViewState1[0x80001b] = true;
            this.dataGridViewState2[0x60003e7] = true;
            this.displayedBandsInfo = new DisplayedBandsData();
            this.lstRows = new ArrayList();
            this.converters = new Hashtable(8);
            this.pens = new Hashtable(8);
            this.brushes = new Hashtable(10);
            this.gridPen = new Pen(DefaultGridColor);
            this.selectedBandIndexes = new DataGridViewIntLinkedList();
            this.individualSelectedCells = new DataGridViewCellLinkedList();
            this.individualReadOnlyCells = new DataGridViewCellLinkedList();
            this.advancedCellBorderStyle = new DataGridViewAdvancedBorderStyle(this, DataGridViewAdvancedCellBorderStyle.OutsetDouble, DataGridViewAdvancedCellBorderStyle.OutsetPartial, DataGridViewAdvancedCellBorderStyle.InsetDouble);
            this.advancedRowHeadersBorderStyle = new DataGridViewAdvancedBorderStyle(this);
            this.advancedColumnHeadersBorderStyle = new DataGridViewAdvancedBorderStyle(this);
            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
            this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
            this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
            this.borderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.dataGridViewState1[0x80] = true;
            this.selectionMode = DataGridViewSelectionMode.RowHeaderSelect;
            this.editMode = DataGridViewEditMode.EditOnKeystrokeOrF2;
            this.autoSizeRowsMode = DataGridViewAutoSizeRowsMode.None;
            this.autoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;
            this.columnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.EnableResizing;
            this.rowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.EnableResizing;
            this.clipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText;
            this.layout = new LayoutData();
            this.layout.TopLeftHeader = Rectangle.Empty;
            this.layout.ColumnHeaders = Rectangle.Empty;
            this.layout.RowHeaders = Rectangle.Empty;
            this.layout.ColumnHeadersVisible = true;
            this.layout.RowHeadersVisible = true;
            this.layout.ClientRectangle = base.ClientRectangle;
            this.scrollBars = System.Windows.Forms.ScrollBars.Both;
            this.horizScrollBar.RightToLeft = RightToLeft.Inherit;
            this.horizScrollBar.AccessibleName = System.Windows.Forms.SR.GetString("DataGridView_AccHorizontalScrollBarAccName");
            this.horizScrollBar.Top = base.ClientRectangle.Height - this.horizScrollBar.Height;
            this.horizScrollBar.Left = 0;
            this.horizScrollBar.Visible = false;
            this.horizScrollBar.Scroll += new ScrollEventHandler(this.DataGridViewHScrolled);
            base.Controls.Add(this.horizScrollBar);
            this.vertScrollBar.Top = 0;
            this.vertScrollBar.AccessibleName = System.Windows.Forms.SR.GetString("DataGridView_AccVerticalScrollBarAccName");
            this.vertScrollBar.Left = base.ClientRectangle.Width - this.vertScrollBar.Width;
            this.vertScrollBar.Visible = false;
            this.vertScrollBar.Scroll += new ScrollEventHandler(this.DataGridViewVScrolled);
            base.Controls.Add(this.vertScrollBar);
            this.ptCurrentCell = new Point(-1, -1);
            this.ptAnchorCell = new Point(-1, -1);
            this.ptMouseDownCell = new Point(-2, -2);
            this.ptMouseEnteredCell = new Point(-2, -2);
            this.ptToolTipCell = new Point(-1, -1);
            this.ptMouseDownGridCoord = new Point(-1, -1);
            this.sortOrder = System.Windows.Forms.SortOrder.None;
            this.lastMouseClickInfo.timeStamp = 0L;
            this.WireScrollBarsEvents();
            base.PerformLayout();
            this.toolTipControl = new DataGridViewToolTip(this);
            base.Invalidate();
        }

        protected virtual void AccessibilityNotifyCurrentCellChanged(Point cellAddress)
        {
            if ((cellAddress.X < 0) || (cellAddress.X >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("cellAddress");
            }
            if ((cellAddress.Y < 0) || (cellAddress.Y >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("cellAddress");
            }
            int num = this.Rows.GetRowCount(DataGridViewElementStates.Visible, 0, cellAddress.Y);
            int num2 = this.Columns.ColumnIndexToActualDisplayIndex(cellAddress.X, DataGridViewElementStates.Visible);
            int num3 = this.ColumnHeadersVisible ? 1 : 0;
            int num4 = this.RowHeadersVisible ? 1 : 0;
            int objectID = (num + num3) + 1;
            int childID = num2 + num4;
            if (base.ContainsFocus)
            {
                base.AccessibilityNotifyClients(AccessibleEvents.Focus, objectID, childID);
            }
            base.AccessibilityNotifyClients(AccessibleEvents.Selection, objectID, childID);
        }

        internal void ActivateToolTip(bool activate, string toolTipText, int columnIndex, int rowIndex)
        {
            this.toolTipCaption = toolTipText;
            this.ptToolTipCell = new Point(columnIndex, rowIndex);
            this.toolTipControl.Activate(activate);
        }

        internal void AddNewRow(bool createdByEditing)
        {
            this.Rows.AddInternal(true, null);
            this.newRowIndex = this.Rows.Count - 1;
            this.dataGridViewState1[0x200000] = createdByEditing;
            if (createdByEditing)
            {
                DataGridViewRowEventArgs e = new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]);
                this.OnUserAddedRow(e);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public virtual DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn)
        {
            if (!this.ApplyVisualStylesToHeaderCells)
            {
                switch (dataGridViewAdvancedBorderStyleInput.All)
                {
                    case DataGridViewAdvancedCellBorderStyle.Single:
                        if (isFirstDisplayedColumn && !this.RowHeadersVisible)
                        {
                            return dataGridViewAdvancedBorderStyleInput;
                        }
                        if (this.RightToLeftInternal)
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Single;
                            dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
                        }
                        else
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
                            dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Single;
                        }
                        dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.Single;
                        dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Single;
                        return dataGridViewAdvancedBorderStylePlaceholder;

                    case DataGridViewAdvancedCellBorderStyle.Inset:
                    case DataGridViewAdvancedCellBorderStyle.Outset:
                        return dataGridViewAdvancedBorderStyleInput;

                    case DataGridViewAdvancedCellBorderStyle.InsetDouble:
                        if (!this.RightToLeftInternal)
                        {
                            if (isFirstDisplayedColumn)
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble;
                            }
                            else
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                            }
                            dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                        }
                        else
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                            if (!isFirstDisplayedColumn)
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                            }
                            else
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.RightInternal = this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble;
                            }
                        }
                        dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
                        dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                        return dataGridViewAdvancedBorderStylePlaceholder;

                    case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
                        if (!this.RightToLeftInternal)
                        {
                            if (isFirstDisplayedColumn)
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                            }
                            else
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                            }
                            dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                        }
                        else
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                            if (!isFirstDisplayedColumn)
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                            }
                            else
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.RightInternal = this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                            }
                        }
                        dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                        dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                        return dataGridViewAdvancedBorderStylePlaceholder;

                    case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
                        if (!this.RightToLeftInternal)
                        {
                            if (isFirstDisplayedColumn)
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                            }
                            else
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
                            }
                            dataGridViewAdvancedBorderStylePlaceholder.RightInternal = isLastVisibleColumn ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetPartial;
                        }
                        else
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = isLastVisibleColumn ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetPartial;
                            if (!isFirstDisplayedColumn)
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
                            }
                            else
                            {
                                dataGridViewAdvancedBorderStylePlaceholder.RightInternal = this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                            }
                        }
                        dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                        dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                        return dataGridViewAdvancedBorderStylePlaceholder;
                }
                return dataGridViewAdvancedBorderStyleInput;
            }
            switch (dataGridViewAdvancedBorderStyleInput.All)
            {
                case DataGridViewAdvancedCellBorderStyle.Single:
                case DataGridViewAdvancedCellBorderStyle.Inset:
                case DataGridViewAdvancedCellBorderStyle.Outset:
                    if (isFirstDisplayedColumn && !this.RowHeadersVisible)
                    {
                        if (this.RightToLeftInternal)
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
                            dataGridViewAdvancedBorderStylePlaceholder.RightInternal = dataGridViewAdvancedBorderStyleInput.All;
                        }
                        else
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = dataGridViewAdvancedBorderStyleInput.All;
                            dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
                        }
                        dataGridViewAdvancedBorderStylePlaceholder.TopInternal = dataGridViewAdvancedBorderStyleInput.All;
                        dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = dataGridViewAdvancedBorderStyleInput.All;
                        return dataGridViewAdvancedBorderStylePlaceholder;
                    }
                    dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
                    dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
                    dataGridViewAdvancedBorderStylePlaceholder.TopInternal = dataGridViewAdvancedBorderStyleInput.All;
                    dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = dataGridViewAdvancedBorderStyleInput.All;
                    return dataGridViewAdvancedBorderStylePlaceholder;

                case DataGridViewAdvancedCellBorderStyle.InsetDouble:
                    if (!this.RightToLeftInternal)
                    {
                        if (isFirstDisplayedColumn)
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.InsetDouble;
                        }
                        else
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
                        }
                        dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
                    }
                    else
                    {
                        dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
                        if (!isFirstDisplayedColumn)
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
                        }
                        else
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.RightInternal = this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.Inset;
                        }
                    }
                    dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
                    dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                    return dataGridViewAdvancedBorderStylePlaceholder;

                case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
                case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
                    if (!this.RightToLeftInternal)
                    {
                        if (isFirstDisplayedColumn)
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                        }
                        else
                        {
                            dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
                        }
                        dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
                        break;
                    }
                    dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
                    if (!isFirstDisplayedColumn)
                    {
                        dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
                        break;
                    }
                    dataGridViewAdvancedBorderStylePlaceholder.RightInternal = this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.Outset;
                    break;

                default:
                    return dataGridViewAdvancedBorderStyleInput;
            }
            dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
            dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
            return dataGridViewAdvancedBorderStylePlaceholder;
        }

        private bool AdjustExpandingColumn(DataGridViewColumn dataGridViewColumn, DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaInternal, int rowIndex)
        {
            if (!base.IsHandleCreated)
            {
                this.dataGridViewState2[0x100000] = true;
                return false;
            }
            bool flag = false;
            try
            {
                this.noAutoSizeCount++;
                DataGridViewRow row = this.Rows.SharedRow(rowIndex);
                int preferredWidth = row.Cells[dataGridViewColumn.Index].GetPreferredWidth(rowIndex, row.GetHeight(rowIndex));
                if (preferredWidth > 0x10000)
                {
                    preferredWidth = 0x10000;
                }
                if (dataGridViewColumn.Width < preferredWidth)
                {
                    dataGridViewColumn.ThicknessInternal = preferredWidth;
                    flag = true;
                }
            }
            finally
            {
                this.noAutoSizeCount--;
            }
            return flag;
        }

        private bool AdjustExpandingColumns(DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, int rowIndex)
        {
            bool flag = false;
            for (DataGridViewColumn column = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); column != null; column = this.Columns.GetNextColumn(column, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
            {
                DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal) column.InheritedAutoSizeMode;
                if ((inheritedAutoSizeMode & autoSizeColumnCriteriaFilter) != DataGridViewAutoSizeColumnCriteriaInternal.NotSet)
                {
                    flag |= this.AdjustExpandingColumn(column, inheritedAutoSizeMode, rowIndex);
                }
            }
            return flag;
        }

        private int AdjustExpandingRow(int rowIndex, int columnIndex, bool fixedWidth)
        {
            DataGridViewCell headerCell;
            int preferredHeight;
            int num3;
            int num4;
            int width = 0;
            if ((columnIndex > -1) && ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None))
            {
                headerCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                if (fixedWidth)
                {
                    width = this.Columns[columnIndex].Thickness;
                }
            }
            else
            {
                headerCell = this.Rows.SharedRow(rowIndex).HeaderCell;
                if (fixedWidth)
                {
                    width = this.RowHeadersWidth;
                }
            }
            if (fixedWidth)
            {
                preferredHeight = headerCell.GetPreferredHeight(rowIndex, width);
            }
            else
            {
                preferredHeight = headerCell.GetPreferredSize(rowIndex).Height;
            }
            this.Rows.SharedRow(rowIndex).GetHeightInfo(rowIndex, out num3, out num4);
            if (preferredHeight < num3)
            {
                preferredHeight = num3;
            }
            if (preferredHeight > 0x10000)
            {
                preferredHeight = 0x10000;
            }
            if (num3 != preferredHeight)
            {
                this.Rows[rowIndex].Thickness = preferredHeight;
            }
            return preferredHeight;
        }

        private void AdjustExpandingRows(int columnIndex, bool fixedWidth)
        {
            if (((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None) || (((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 1)) != DataGridViewAutoSizeRowsMode.None) && this.RowHeadersVisible))
            {
                if (!base.IsHandleCreated)
                {
                    this.dataGridViewState2[0x100000] = true;
                }
                else
                {
                    this.inBulkPaintCount++;
                    try
                    {
                        int num6;
                        if ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 4)) != DataGridViewAutoSizeRowsMode.None)
                        {
                            this.inBulkLayoutCount++;
                            try
                            {
                                for (int i = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); i != -1; i = this.Rows.GetNextRow(i, DataGridViewElementStates.Visible))
                                {
                                    DataGridViewCell headerCell;
                                    int preferredHeight;
                                    int width = 0;
                                    if ((columnIndex > -1) && ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None))
                                    {
                                        headerCell = this.Rows.SharedRow(i).Cells[columnIndex];
                                        if (fixedWidth)
                                        {
                                            width = this.Columns[columnIndex].Thickness;
                                        }
                                    }
                                    else
                                    {
                                        headerCell = this.Rows.SharedRow(i).HeaderCell;
                                        if (fixedWidth)
                                        {
                                            width = this.RowHeadersWidth;
                                        }
                                    }
                                    if (fixedWidth)
                                    {
                                        preferredHeight = headerCell.GetPreferredHeight(i, width);
                                    }
                                    else
                                    {
                                        preferredHeight = headerCell.GetPreferredSize(i).Height;
                                    }
                                    if (this.Rows.SharedRow(i).Height < preferredHeight)
                                    {
                                        this.Rows[i].Height = preferredHeight;
                                    }
                                }
                                return;
                            }
                            finally
                            {
                                this.ExitBulkLayout(false);
                            }
                        }
                        int height = this.layout.Data.Height;
                        int num5 = 0;
                        for (num6 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen); (num6 != -1) && (num5 < height); num6 = this.Rows.GetNextRow(num6, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen))
                        {
                            num5 += this.AdjustExpandingRow(num6, columnIndex, fixedWidth);
                        }
                        if (num5 < height)
                        {
                            for (num6 = this.displayedBandsInfo.FirstDisplayedScrollingRow; (num6 != -1) && (num5 < height); num6 = this.Rows.GetNextRow(num6, DataGridViewElementStates.Visible))
                            {
                                num5 += this.AdjustExpandingRow(num6, columnIndex, fixedWidth);
                            }
                        }
                    }
                    finally
                    {
                        this.ExitBulkPaint(-1, -1);
                    }
                }
            }
        }

        internal void AdjustFillingColumn(DataGridViewColumn dataGridViewColumn, int width)
        {
            if (this.InAdjustFillingColumns)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
            }
            this.dataGridViewOper[0x80000] = true;
            try
            {
                if (this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) <= this.layout.Data.Width)
                {
                    int num = this.layout.Data.Width;
                    if ((base.DesignMode || (dataGridViewColumn == this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))) || (dataGridViewColumn == this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen)))
                    {
                        float num2 = 0f;
                        int num3 = 0;
                        int num4 = 0;
                        bool flag = false;
                        foreach (DataGridViewColumn column in this.Columns)
                        {
                            if (column.Visible)
                            {
                                if (column.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
                                {
                                    num3 += column.Width;
                                    if (column.Index != dataGridViewColumn.Index)
                                    {
                                        num4 += column.MinimumWidth;
                                        flag = true;
                                    }
                                    num2 += column.FillWeight;
                                }
                                else
                                {
                                    num4 += column.Width;
                                    num -= column.Width;
                                }
                            }
                        }
                        if (!flag)
                        {
                            return;
                        }
                        int num5 = this.layout.Data.Width - num4;
                        if (width > num5)
                        {
                            width = num5;
                        }
                        float fillWeight = dataGridViewColumn.FillWeight;
                        float num7 = (width * num2) / ((float) num3);
                        bool flag2 = false;
                        foreach (DataGridViewColumn column2 in this.Columns)
                        {
                            if (((column2.Index != dataGridViewColumn.Index) && column2.Visible) && (column2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
                            {
                                column2.FillWeightInternal = ((num2 - num7) * column2.FillWeight) / (num2 - fillWeight);
                                if (column2.FillWeight < ((column2.MinimumWidth * num2) / ((float) num3)))
                                {
                                    flag2 = true;
                                    column2.DesiredFillWidth = -1;
                                }
                                else
                                {
                                    column2.DesiredFillWidth = 0;
                                }
                            }
                        }
                        dataGridViewColumn.FillWeightInternal = num7;
                        if (flag2)
                        {
                            float num8 = num2;
                            float num9 = num2;
                            float num10 = 0f;
                            foreach (DataGridViewColumn column3 in this.Columns)
                            {
                                if (column3.Visible && (column3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
                                {
                                    if (column3.Index == dataGridViewColumn.Index)
                                    {
                                        column3.UsedFillWeight = column3.FillWeight;
                                        num8 -= column3.UsedFillWeight;
                                        num9 -= column3.FillWeight;
                                        num10 += column3.UsedFillWeight;
                                    }
                                    else if (column3.DesiredFillWidth == -1)
                                    {
                                        column3.UsedFillWeight = (num2 * column3.MinimumWidth) / ((float) num3);
                                        num8 -= column3.UsedFillWeight;
                                        num9 -= column3.FillWeight;
                                        num10 += column3.UsedFillWeight;
                                    }
                                }
                            }
                            foreach (DataGridViewColumn column4 in this.Columns)
                            {
                                if (((column4.Index != dataGridViewColumn.Index) && column4.Visible) && ((column4.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill) && (column4.DesiredFillWidth != -1)))
                                {
                                    column4.UsedFillWeight = Math.Max((float) ((column4.FillWeight * num8) / num9), (float) ((num2 * column4.MinimumWidth) / ((float) num3)));
                                    num10 += column4.UsedFillWeight;
                                }
                            }
                            dataGridViewColumn.UsedFillWeight += num2 - num10;
                        }
                        else
                        {
                            foreach (DataGridViewColumn column5 in this.Columns)
                            {
                                if (column5.Visible && (column5.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
                                {
                                    column5.UsedFillWeight = column5.FillWeight;
                                }
                            }
                        }
                    }
                    else
                    {
                        int num11 = 0;
                        float num12 = 0f;
                        float num13 = 0f;
                        bool flag3 = false;
                        foreach (DataGridViewColumn column6 in this.Columns)
                        {
                            if (column6.Visible)
                            {
                                if (column6.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
                                {
                                    if (column6.Index != dataGridViewColumn.Index)
                                    {
                                        if (this.Columns.DisplayInOrder(dataGridViewColumn.Index, column6.Index))
                                        {
                                            num11 += column6.MinimumWidth;
                                            num13 += column6.FillWeight;
                                        }
                                        else
                                        {
                                            num11 += column6.Width;
                                        }
                                        flag3 = true;
                                    }
                                    num12 += column6.FillWeight;
                                }
                                else
                                {
                                    num11 += column6.Width;
                                    num -= column6.Width;
                                }
                            }
                        }
                        if (!flag3)
                        {
                            return;
                        }
                        int num14 = this.layout.Data.Width - num11;
                        if (width > num14)
                        {
                            width = num14;
                        }
                        float num15 = dataGridViewColumn.FillWeight;
                        float num16 = (num12 * width) / ((float) num);
                        float num17 = (num13 + num15) - num16;
                        foreach (DataGridViewColumn column7 in this.Columns)
                        {
                            if (((column7.Index != dataGridViewColumn.Index) && column7.Visible) && ((column7.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill) && this.Columns.DisplayInOrder(dataGridViewColumn.Index, column7.Index)))
                            {
                                column7.FillWeightInternal = (column7.FillWeight * num17) / num13;
                            }
                        }
                        dataGridViewColumn.FillWeightInternal = num16;
                        bool flag4 = false;
                        foreach (DataGridViewColumn column8 in this.Columns)
                        {
                            if (column8.Visible && (column8.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
                            {
                                if (column8.FillWeight < ((column8.MinimumWidth * num12) / ((float) num)))
                                {
                                    flag4 = true;
                                    column8.DesiredFillWidth = -1;
                                }
                                else
                                {
                                    column8.DesiredFillWidth = 0;
                                }
                            }
                        }
                        if (flag4)
                        {
                            float num18 = num12;
                            float num19 = num12;
                            float num20 = 0f;
                            foreach (DataGridViewColumn column9 in this.Columns)
                            {
                                if (column9.Visible && (column9.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
                                {
                                    if ((column9.Index == dataGridViewColumn.Index) || this.Columns.DisplayInOrder(column9.Index, dataGridViewColumn.Index))
                                    {
                                        if (column9.Index == dataGridViewColumn.Index)
                                        {
                                            column9.UsedFillWeight = column9.FillWeight;
                                        }
                                        else
                                        {
                                            column9.UsedFillWeight = (num12 * column9.Width) / ((float) num);
                                        }
                                        num18 -= column9.UsedFillWeight;
                                        num19 -= column9.FillWeight;
                                        num20 += column9.UsedFillWeight;
                                    }
                                    else if (column9.DesiredFillWidth == -1)
                                    {
                                        column9.UsedFillWeight = (num12 * column9.MinimumWidth) / ((float) num);
                                        num18 -= column9.UsedFillWeight;
                                        num19 -= column9.FillWeight;
                                        num20 += column9.UsedFillWeight;
                                    }
                                }
                            }
                            foreach (DataGridViewColumn column10 in this.Columns)
                            {
                                if ((this.Columns.DisplayInOrder(dataGridViewColumn.Index, column10.Index) && column10.Visible) && ((column10.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill) && (column10.DesiredFillWidth != -1)))
                                {
                                    column10.UsedFillWeight = Math.Max((float) ((column10.FillWeight * num18) / num19), (float) ((num12 * column10.MinimumWidth) / ((float) num)));
                                    num20 += column10.UsedFillWeight;
                                }
                            }
                            dataGridViewColumn.UsedFillWeight += num12 - num20;
                        }
                        else
                        {
                            foreach (DataGridViewColumn column11 in this.Columns)
                            {
                                if (column11.Visible && (column11.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
                                {
                                    column11.UsedFillWeight = column11.FillWeight;
                                }
                            }
                        }
                    }
                    this.dataGridViewState2[0x4000000] = false;
                    this.availableWidthForFillColumns = num;
                    this.PerformLayoutPrivate(false, true, false, false);
                }
            }
            finally
            {
                this.dataGridViewOper[0x80000] = false;
            }
        }

        private bool AdjustFillingColumns()
        {
            if (this.dataGridViewOper[0x40000])
            {
                return false;
            }
            this.dataGridViewOper[0x40000] = true;
            bool flag = false;
            try
            {
                int num9;
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                float num4 = 0f;
                ArrayList list = null;
                foreach (DataGridViewColumn column in this.Columns)
                {
                    if (column.Visible)
                    {
                        if (column.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
                        {
                            num++;
                            num3 += (column.DesiredMinimumWidth > 0) ? column.DesiredMinimumWidth : column.MinimumWidth;
                            num4 += column.FillWeight;
                            if (list == null)
                            {
                                list = new ArrayList(this.Columns.Count);
                            }
                            list.Add(column);
                        }
                        else
                        {
                            num2 += column.Width;
                        }
                    }
                }
                if (num <= 0)
                {
                    return flag;
                }
                int num5 = this.layout.Data.Width - num2;
                if ((this.scrollBars == System.Windows.Forms.ScrollBars.Both) || (this.scrollBars == System.Windows.Forms.ScrollBars.Vertical))
                {
                    int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible);
                    int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
                    int totalVisibleFrozenHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    this.ComputeVisibleRows();
                    if ((((this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen)) && (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != (rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen)))) && (((rowsHeight - totalVisibleFrozenHeight) != this.ComputeHeightOfFittingTrailingScrollingRows(totalVisibleFrozenHeight)) && (this.layout.Data.Height > totalVisibleFrozenHeight))) && (SystemInformation.VerticalScrollBarWidth <= this.layout.Data.Width))
                    {
                        num5 -= SystemInformation.VerticalScrollBarWidth;
                    }
                }
                if (num5 <= num3)
                {
                    num5 = 0;
                    for (num9 = 0; num9 < list.Count; num9++)
                    {
                        DataGridViewColumn column2 = (DataGridViewColumn) list[num9];
                        int num10 = (column2.DesiredMinimumWidth > 0) ? column2.DesiredMinimumWidth : column2.MinimumWidth;
                        if (column2.Thickness != num10)
                        {
                            flag = true;
                            column2.ThicknessInternal = num10;
                        }
                        num5 += column2.Thickness;
                    }
                    for (num9 = 0; num9 < list.Count; num9++)
                    {
                        DataGridViewColumn column3 = (DataGridViewColumn) list[num9];
                        column3.UsedFillWeight = (column3.Width * num4) / ((float) num5);
                    }
                    this.dataGridViewState2[0x4000000] = false;
                    this.availableWidthForFillColumns = num5;
                    return flag;
                }
                int num11 = 0;
                if (this.dataGridViewState2[0x4000000])
                {
                    bool flag2 = false;
                    for (num9 = 0; num9 < list.Count; num9++)
                    {
                        DataGridViewColumn column4 = (DataGridViewColumn) list[num9];
                        if (num9 == (list.Count - 1))
                        {
                            column4.DesiredFillWidth = num5 - num11;
                        }
                        else
                        {
                            float num12 = (column4.FillWeight / num4) * num5;
                            column4.DesiredFillWidth = (int) Math.Round((double) num12, MidpointRounding.AwayFromZero);
                            num11 += column4.DesiredFillWidth;
                        }
                        int num13 = (column4.DesiredMinimumWidth > 0) ? column4.DesiredMinimumWidth : column4.MinimumWidth;
                        if (column4.DesiredFillWidth < num13)
                        {
                            flag2 = true;
                            column4.DesiredFillWidth = -1;
                        }
                    }
                    if (flag2)
                    {
                        float num14 = num4;
                        float num15 = num4;
                        for (num9 = 0; num9 < list.Count; num9++)
                        {
                            DataGridViewColumn column5 = (DataGridViewColumn) list[num9];
                            if (column5.DesiredFillWidth == -1)
                            {
                                int num16 = (column5.DesiredMinimumWidth > 0) ? column5.DesiredMinimumWidth : column5.MinimumWidth;
                                column5.UsedFillWeight = (num4 * num16) / ((float) num5);
                                num14 -= column5.UsedFillWeight;
                                num15 -= column5.FillWeight;
                            }
                        }
                        for (num9 = 0; num9 < list.Count; num9++)
                        {
                            DataGridViewColumn column6 = (DataGridViewColumn) list[num9];
                            if (column6.DesiredFillWidth != -1)
                            {
                                column6.UsedFillWeight = (column6.FillWeight * num14) / num15;
                            }
                        }
                    }
                    else
                    {
                        num9 = 0;
                        while (num9 < list.Count)
                        {
                            DataGridViewColumn column7 = (DataGridViewColumn) list[num9];
                            column7.UsedFillWeight = column7.FillWeight;
                            num9++;
                        }
                    }
                    this.dataGridViewState2[0x4000000] = false;
                    this.availableWidthForFillColumns = num5;
                }
                else if (num5 != this.availableWidthForFillColumns)
                {
                    if (num5 > this.availableWidthForFillColumns)
                    {
                        int num17 = num5 - this.availableWidthForFillColumns;
                        num9 = 0;
                        while (num9 < list.Count)
                        {
                            DataGridViewColumn column8 = (DataGridViewColumn) list[num9];
                            column8.DesiredFillWidth = column8.Width;
                            num9++;
                        }
                        float[] numArray = new float[list.Count];
                        for (int i = 0; i < num17; i++)
                        {
                            float num19 = 0f;
                            bool flag3 = false;
                            num9 = 0;
                            while (num9 < list.Count)
                            {
                                DataGridViewColumn column9 = (DataGridViewColumn) list[num9];
                                num19 += column9.FillWeight / column9.UsedFillWeight;
                                if (column9.DesiredFillWidth <= column9.MinimumWidth)
                                {
                                    flag3 = true;
                                }
                                num9++;
                            }
                            num9 = 0;
                            while (num9 < list.Count)
                            {
                                DataGridViewColumn column10 = (DataGridViewColumn) list[num9];
                                if (i == 0)
                                {
                                    numArray[num9] = (this.availableWidthForFillColumns * column10.UsedFillWeight) / num4;
                                }
                                if (flag3)
                                {
                                    numArray[num9] += (column10.FillWeight / column10.UsedFillWeight) / num19;
                                }
                                else
                                {
                                    numArray[num9] += column10.FillWeight / num4;
                                }
                                num9++;
                            }
                        }
                        for (num9 = 0; num9 < list.Count; num9++)
                        {
                            DataGridViewColumn column11 = (DataGridViewColumn) list[num9];
                            column11.UsedFillWeight = (num4 / ((float) num5)) * numArray[num9];
                        }
                    }
                    else
                    {
                        int num20 = this.availableWidthForFillColumns - num5;
                        int num21 = 0;
                        for (num9 = 0; num9 < list.Count; num9++)
                        {
                            DataGridViewColumn column12 = (DataGridViewColumn) list[num9];
                            column12.DesiredFillWidth = column12.Width;
                        }
                        do
                        {
                            bool flag4;
                            int num22 = this.availableWidthForFillColumns - num21;
                            int num23 = Math.Min(num22 - num5, Math.Max(1, (int) (num22 * 0.1f)));
                            num21 += num23;
                            do
                            {
                                flag4 = false;
                                float num24 = 0f;
                                float num25 = 0f;
                                DataGridViewColumn column13 = null;
                                for (num9 = 0; num9 < list.Count; num9++)
                                {
                                    DataGridViewColumn column14 = (DataGridViewColumn) list[num9];
                                    if (column14.DesiredFillWidth > column14.MinimumWidth)
                                    {
                                        float num26 = column14.UsedFillWeight / column14.FillWeight;
                                        num25 += num26;
                                        if (num26 > num24)
                                        {
                                            column13 = column14;
                                            num24 = num26;
                                        }
                                    }
                                }
                                if (column13 != null)
                                {
                                    float minimumWidth = ((num22 * column13.UsedFillWeight) / num4) - (((num23 * column13.UsedFillWeight) / column13.FillWeight) / num25);
                                    if (minimumWidth < column13.MinimumWidth)
                                    {
                                        minimumWidth = column13.MinimumWidth;
                                    }
                                    int desiredFillWidth = column13.DesiredFillWidth;
                                    column13.DesiredFillWidth = Math.Min(desiredFillWidth, (int) Math.Round((double) minimumWidth, MidpointRounding.AwayFromZero));
                                    flag4 = desiredFillWidth != column13.DesiredFillWidth;
                                    if ((!flag4 && (num23 == 1)) && (desiredFillWidth > column13.MinimumWidth))
                                    {
                                        column13.DesiredFillWidth--;
                                        flag4 = true;
                                    }
                                    num23 -= desiredFillWidth - column13.DesiredFillWidth;
                                    if (flag4)
                                    {
                                        num22 -= desiredFillWidth - column13.DesiredFillWidth;
                                        num9 = 0;
                                        while (num9 < list.Count)
                                        {
                                            DataGridViewColumn column15 = (DataGridViewColumn) list[num9];
                                            column15.UsedFillWeight = (num4 / ((float) num22)) * column15.DesiredFillWidth;
                                            num9++;
                                        }
                                    }
                                }
                            }
                            while (flag4 && (num23 > 0));
                        }
                        while (num21 < num20);
                    }
                    this.availableWidthForFillColumns = num5;
                }
                try
                {
                    this.dataGridViewState2[0x2000000] = false;
                    num11 = 0;
                    float num29 = 0f;
                    while (list.Count > 0)
                    {
                        DataGridViewColumn column16 = null;
                        if (list.Count == 1)
                        {
                            column16 = (DataGridViewColumn) list[0];
                            column16.DesiredFillWidth = Math.Max(num5 - num11, column16.MinimumWidth);
                            list.Clear();
                        }
                        else
                        {
                            float num30 = 0f;
                            for (num9 = 0; num9 < list.Count; num9++)
                            {
                                DataGridViewColumn column17 = (DataGridViewColumn) list[num9];
                                float num31 = Math.Abs((float) (column17.UsedFillWeight - column17.FillWeight)) / column17.FillWeight;
                                if ((num31 > num30) || (column16 == null))
                                {
                                    column16 = column17;
                                    num30 = num31;
                                }
                            }
                            float num32 = ((column16.UsedFillWeight * num5) / num4) + num29;
                            column16.DesiredFillWidth = Math.Max(column16.MinimumWidth, (int) Math.Round((double) num32, MidpointRounding.AwayFromZero));
                            num29 = num32 - column16.DesiredFillWidth;
                            num11 += column16.DesiredFillWidth;
                            list.Remove(column16);
                        }
                        if (column16.DesiredFillWidth != column16.Thickness)
                        {
                            flag = true;
                            column16.ThicknessInternal = column16.DesiredFillWidth;
                        }
                    }
                }
                finally
                {
                    this.dataGridViewState2[0x2000000] = true;
                }
            }
            finally
            {
                this.dataGridViewOper[0x40000] = false;
            }
            return flag;
        }

        private void AdjustShrinkingRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth, bool internalAutosizing)
        {
            if (((autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None) || (((autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 1)) != DataGridViewAutoSizeRowsMode.None) && this.RowHeadersVisible))
            {
                this.inBulkPaintCount++;
                try
                {
                    int nextRow;
                    if ((autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 4)) != DataGridViewAutoSizeRowsMode.None)
                    {
                        this.inBulkLayoutCount++;
                        try
                        {
                            for (int i = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); i != -1; i = this.Rows.GetNextRow(i, DataGridViewElementStates.Visible))
                            {
                                this.AutoResizeRowInternal(i, MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
                            }
                            return;
                        }
                        finally
                        {
                            this.ExitBulkLayout(false);
                        }
                    }
                    int height = this.layout.Data.Height;
                    int num3 = 0;
                    for (nextRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen); (nextRow != -1) && (num3 < height); nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen))
                    {
                        this.AutoResizeRowInternal(nextRow, MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
                        num3 += this.Rows.SharedRow(nextRow).GetHeight(nextRow);
                    }
                    if (num3 < height)
                    {
                        int num5 = num3;
                        int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                        nextRow = firstDisplayedScrollingRow;
                        while (((nextRow != -1) && (num3 < height)) && (firstDisplayedScrollingRow == this.displayedBandsInfo.FirstDisplayedScrollingRow))
                        {
                            this.AutoResizeRowInternal(nextRow, MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
                            num3 += this.Rows.SharedRow(nextRow).GetHeight(nextRow);
                            nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible);
                        }
                        do
                        {
                            firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                            if (num3 < height)
                            {
                                int rowIndex = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                                if (rowIndex != -1)
                                {
                                    this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
                                }
                            }
                            num3 = num5;
                            for (nextRow = this.displayedBandsInfo.FirstDisplayedScrollingRow; (nextRow != -1) && (num3 < height); nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible))
                            {
                                this.AutoResizeRowInternal(nextRow, MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
                                num3 += this.Rows.SharedRow(nextRow).GetHeight(nextRow);
                            }
                        }
                        while (firstDisplayedScrollingRow != this.displayedBandsInfo.FirstDisplayedScrollingRow);
                    }
                }
                finally
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        public bool AreAllCellsSelected(bool includeInvisibleCells)
        {
            bool flag;
            if ((this.Columns.Count == 0) && (this.Rows.Count == 0))
            {
                return true;
            }
            if (!includeInvisibleCells && ((this.Rows.GetFirstRow(DataGridViewElementStates.Visible) == -1) || (this.Columns.GetFirstColumn(DataGridViewElementStates.Visible) == null)))
            {
                return true;
            }
            DataGridViewRow row = null;
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.CellSelect:
                    flag = this.individualSelectedCells.Count == (this.Columns.Count * this.Rows.Count);
                    if (!flag && !includeInvisibleCells)
                    {
                        for (int i = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); i != -1; i = this.Rows.GetNextRow(i, DataGridViewElementStates.Visible))
                        {
                            row = this.Rows[i];
                            for (DataGridViewColumn column = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); column != null; column = this.Columns.GetNextColumn(column, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
                            {
                                if (!row.Cells[column.Index].Selected)
                                {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }
                    return flag;

                case DataGridViewSelectionMode.FullRowSelect:
                case DataGridViewSelectionMode.RowHeaderSelect:
                    flag = ((this.selectedBandIndexes.Count * this.Columns.Count) + this.individualSelectedCells.Count) == (this.Columns.Count * this.Rows.Count);
                    if (!flag && !includeInvisibleCells)
                    {
                        for (int j = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); j != -1; j = this.Rows.GetNextRow(j, DataGridViewElementStates.Visible))
                        {
                            if ((this.Rows.GetRowState(j) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
                            {
                                row = this.Rows[j];
                                for (DataGridViewColumn column3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); column3 != null; column3 = this.Columns.GetNextColumn(column3, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
                                {
                                    if (!row.Cells[column3.Index].Selected)
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                        return true;
                    }
                    return flag;

                case DataGridViewSelectionMode.FullColumnSelect:
                case DataGridViewSelectionMode.ColumnHeaderSelect:
                    flag = ((this.selectedBandIndexes.Count * this.Rows.Count) + this.individualSelectedCells.Count) == (this.Columns.Count * this.Rows.Count);
                    if (!flag && !includeInvisibleCells)
                    {
                        for (DataGridViewColumn column2 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); column2 != null; column2 = this.Columns.GetNextColumn(column2, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
                        {
                            if (!this.selectedBandIndexes.Contains(column2.Index))
                            {
                                for (int k = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); k != -1; k = this.Rows.GetNextRow(k, DataGridViewElementStates.Visible))
                                {
                                    row = this.Rows[k];
                                    if (!row.Cells[column2.Index].Selected)
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                        return true;
                    }
                    return flag;
            }
            return false;
        }

        internal override void AssignParent(Control value)
        {
            if (this.toolTipControl.Activated)
            {
                this.toolTipControl.Activate(false);
            }
            base.AssignParent(value);
        }

        private void AutoGenerateDataBoundColumns(DataGridViewColumn[] boundColumns)
        {
            int num2;
            DataGridViewColumn[] columnArray2;
            DataGridViewColumnCollection columns = this.Columns;
            DataGridViewColumn[] sourceArray = new DataGridViewColumn[columns.Count];
            int index = 0;
            for (num2 = 0; num2 < columns.Count; num2++)
            {
                if (((this.DataSource != null) && !string.IsNullOrEmpty(columns[num2].DataPropertyName)) && !columns[num2].IsDataBound)
                {
                    this.MapDataGridViewColumnToDataBoundField(columns[num2]);
                }
                if ((columns[num2].IsDataBound && (this.dataConnection != null)) && (this.dataConnection.BoundColumnIndex(columns[num2].DataPropertyName) != -1))
                {
                    sourceArray[index] = (DataGridViewColumn) columns[num2].Clone();
                    sourceArray[index].DisplayIndex = columns[num2].DisplayIndex;
                    index++;
                }
            }
            num2 = 0;
            while (num2 < columns.Count)
            {
                if (columns[num2].IsDataBound)
                {
                    columns.RemoveAtInternal(num2, true);
                }
                else
                {
                    num2++;
                }
            }
            if (sourceArray.Length == index)
            {
                columnArray2 = sourceArray;
            }
            else
            {
                columnArray2 = new DataGridViewColumn[index];
                Array.Copy(sourceArray, columnArray2, index);
            }
            Array.Sort(columnArray2, DataGridViewColumnCollection.ColumnCollectionOrderComparer);
            if (boundColumns != null)
            {
                for (int i = 0; i < boundColumns.Length; i++)
                {
                    if ((boundColumns[i] == null) || !boundColumns[i].IsBrowsableInternal)
                    {
                        continue;
                    }
                    bool flag = true;
                    int num4 = 0;
                    while (num4 < index)
                    {
                        if ((columnArray2[num4] != null) && (string.Compare(columnArray2[num4].DataPropertyName, boundColumns[i].DataPropertyName, true, CultureInfo.InvariantCulture) == 0))
                        {
                            flag = false;
                            break;
                        }
                        num4++;
                    }
                    if (flag)
                    {
                        columns.Add(boundColumns[i]);
                    }
                    else
                    {
                        columns.Add(columnArray2[num4]);
                        this.MapDataGridViewColumnToDataBoundField(columnArray2[num4]);
                        columnArray2[num4] = null;
                    }
                }
            }
            if (index > 0)
            {
                for (int j = 0; j < columnArray2.Length; j++)
                {
                    if (columnArray2[j] != null)
                    {
                        columns.Add(columnArray2[j]);
                        this.MapDataGridViewColumnToDataBoundField(columnArray2[j]);
                    }
                }
            }
        }

        private bool AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, bool fixedHeight)
        {
            bool flag = false;
            for (DataGridViewColumn column = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); column != null; column = this.Columns.GetNextColumn(column, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
            {
                DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal) column.InheritedAutoSizeMode;
                if ((inheritedAutoSizeMode & autoSizeColumnCriteriaFilter) != DataGridViewAutoSizeColumnCriteriaInternal.NotSet)
                {
                    flag |= this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, fixedHeight);
                }
            }
            return flag;
        }

        public void AutoResizeColumn(int columnIndex)
        {
            this.AutoResizeColumn(columnIndex, DataGridViewAutoSizeColumnMode.AllCells);
        }

        public void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode)
        {
            this.AutoResizeColumn(columnIndex, autoSizeColumnMode, true);
        }

        protected void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight)
        {
            if (((autoSizeColumnMode == DataGridViewAutoSizeColumnMode.NotSet) || (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.None)) || (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.Fill))
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_NeedColumnAutoSizingCriteria", new object[] { "autoSizeColumnMode" }));
            }
            switch (autoSizeColumnMode)
            {
                case DataGridViewAutoSizeColumnMode.NotSet:
                case DataGridViewAutoSizeColumnMode.None:
                case DataGridViewAutoSizeColumnMode.ColumnHeader:
                case DataGridViewAutoSizeColumnMode.AllCellsExceptHeader:
                case DataGridViewAutoSizeColumnMode.AllCells:
                case DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader:
                case DataGridViewAutoSizeColumnMode.DisplayedCells:
                case DataGridViewAutoSizeColumnMode.Fill:
                    if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
                    {
                        throw new ArgumentOutOfRangeException("columnIndex");
                    }
                    if ((autoSizeColumnMode == DataGridViewAutoSizeColumnMode.ColumnHeader) && !this.ColumnHeadersVisible)
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAutoSizeInvisibleColumnHeader"));
                    }
                    this.AutoResizeColumnInternal(columnIndex, (DataGridViewAutoSizeColumnCriteriaInternal) autoSizeColumnMode, fixedHeight);
                    return;
            }
            throw new InvalidEnumArgumentException("autoSizeColumnMode", (int) autoSizeColumnMode, typeof(DataGridViewAutoSizeColumnMode));
        }

        public void AutoResizeColumnHeadersHeight()
        {
            this.AutoResizeColumnHeadersHeight(true, true);
        }

        public void AutoResizeColumnHeadersHeight(int columnIndex)
        {
            this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
        }

        protected void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth)
        {
            if (this.ColumnHeadersVisible)
            {
                if (!base.IsHandleCreated)
                {
                    this.dataGridViewState2[0x100000] = true;
                }
                else
                {
                    try
                    {
                        this.noAutoSizeCount++;
                        int preferredHeight = 0;
                        if (this.layout.TopLeftHeader.Width > 0)
                        {
                            if (fixedRowHeadersWidth)
                            {
                                preferredHeight = this.TopLeftHeaderCell.GetPreferredHeight(-1, this.layout.TopLeftHeader.Width);
                            }
                            else
                            {
                                preferredHeight = this.TopLeftHeaderCell.GetPreferredSize(-1).Height;
                            }
                        }
                        int count = this.Columns.Count;
                        for (int i = 0; i < count; i++)
                        {
                            if (this.Columns[i].Visible)
                            {
                                if (fixedColumnsWidth)
                                {
                                    preferredHeight = Math.Max(preferredHeight, this.Columns[i].HeaderCell.GetPreferredHeight(-1, this.Columns[i].Thickness));
                                }
                                else
                                {
                                    preferredHeight = Math.Max(preferredHeight, this.Columns[i].HeaderCell.GetPreferredSize(-1).Height);
                                }
                            }
                        }
                        if (preferredHeight < 4)
                        {
                            preferredHeight = 4;
                        }
                        if (preferredHeight > 0x8000)
                        {
                            preferredHeight = 0x8000;
                        }
                        if (preferredHeight != this.ColumnHeadersHeight)
                        {
                            this.SetColumnHeadersHeightInternal(preferredHeight, !fixedColumnsWidth);
                        }
                    }
                    finally
                    {
                        this.noAutoSizeCount--;
                    }
                }
            }
        }

        protected void AutoResizeColumnHeadersHeight(int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth)
        {
            if ((columnIndex < -1) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if (this.ColumnHeadersVisible)
            {
                if (!base.IsHandleCreated)
                {
                    this.dataGridViewState2[0x100000] = true;
                }
                else
                {
                    try
                    {
                        this.noAutoSizeCount++;
                        int preferredHeight = 0;
                        if (this.layout.TopLeftHeader.Width > 0)
                        {
                            if ((columnIndex != -1) || fixedRowHeadersWidth)
                            {
                                preferredHeight = this.TopLeftHeaderCell.GetPreferredHeight(-1, this.layout.TopLeftHeader.Width);
                            }
                            else
                            {
                                preferredHeight = this.TopLeftHeaderCell.GetPreferredSize(-1).Height;
                            }
                        }
                        int count = this.Columns.Count;
                        for (int i = 0; i < count; i++)
                        {
                            if (this.Columns[i].Visible)
                            {
                                if ((columnIndex != i) || fixedColumnWidth)
                                {
                                    preferredHeight = Math.Max(preferredHeight, this.Columns[i].HeaderCell.GetPreferredHeight(-1, this.Columns[i].Thickness));
                                }
                                else
                                {
                                    preferredHeight = Math.Max(preferredHeight, this.Columns[i].HeaderCell.GetPreferredSize(-1).Height);
                                }
                            }
                        }
                        if (preferredHeight < 4)
                        {
                            preferredHeight = 4;
                        }
                        if (preferredHeight > 0x8000)
                        {
                            preferredHeight = 0x8000;
                        }
                        if (preferredHeight != this.ColumnHeadersHeight)
                        {
                            this.SetColumnHeadersHeightInternal(preferredHeight, !fixedColumnWidth);
                        }
                    }
                    finally
                    {
                        this.noAutoSizeCount--;
                    }
                }
            }
        }

        private bool AutoResizeColumnInternal(int columnIndex, DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaInternal, bool fixedHeight)
        {
            if (!base.IsHandleCreated)
            {
                this.dataGridViewState2[0x100000] = true;
                return false;
            }
            bool flag = false;
            try
            {
                this.noAutoSizeCount++;
                DataGridViewColumn dataGridViewColumn = this.Columns[columnIndex];
                int preferredWidth = dataGridViewColumn.GetPreferredWidth((DataGridViewAutoSizeColumnMode) autoSizeColumnCriteriaInternal, fixedHeight);
                if (preferredWidth < dataGridViewColumn.MinimumThickness)
                {
                    preferredWidth = dataGridViewColumn.MinimumThickness;
                }
                if (preferredWidth > 0x10000)
                {
                    preferredWidth = 0x10000;
                }
                if (preferredWidth == dataGridViewColumn.Thickness)
                {
                    return flag;
                }
                if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
                {
                    this.AdjustFillingColumn(dataGridViewColumn, preferredWidth);
                }
                else
                {
                    this.Columns[columnIndex].ThicknessInternal = preferredWidth;
                }
                flag = true;
            }
            finally
            {
                this.noAutoSizeCount--;
            }
            return flag;
        }

        public void AutoResizeColumns()
        {
            this.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
        }

        public void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode)
        {
            this.AutoResizeColumns(autoSizeColumnsMode, true);
        }

        protected void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight)
        {
            for (int i = 0; i < this.Columns.Count; i++)
            {
                this.AutoResizeColumn(i, (DataGridViewAutoSizeColumnMode) autoSizeColumnsMode, fixedHeight);
            }
        }

        public void AutoResizeRow(int rowIndex)
        {
            this.AutoResizeRow(rowIndex, DataGridViewAutoSizeRowMode.AllCells);
        }

        public void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode)
        {
            this.AutoResizeRow(rowIndex, autoSizeRowMode, true);
        }

        protected void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
        {
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if ((autoSizeRowMode & ~DataGridViewAutoSizeRowMode.AllCells) != ((DataGridViewAutoSizeRowMode) 0))
            {
                throw new InvalidEnumArgumentException("autoSizeRowMode", (int) autoSizeRowMode, typeof(DataGridViewAutoSizeRowMode));
            }
            if ((autoSizeRowMode == DataGridViewAutoSizeRowMode.RowHeader) && !this.RowHeadersVisible)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAutoSizeRowInvisibleRowHeader"));
            }
            this.AutoResizeRowInternal(rowIndex, autoSizeRowMode, fixedWidth, false);
        }

        public void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
        {
            this.AutoResizeRowHeadersWidth(rowHeadersWidthSizeMode, true, true);
        }

        public void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
        {
            this.AutoResizeRowHeadersWidth(rowIndex, rowHeadersWidthSizeMode, true, true);
        }

        protected void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight)
        {
            if ((rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing) || (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing))
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[] { "rowHeadersWidthSizeMode" }));
            }
            if ((rowHeadersWidthSizeMode < DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders) || (rowHeadersWidthSizeMode > DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader))
            {
                throw new InvalidEnumArgumentException("rowHeadersWidthSizeMode", (int) rowHeadersWidthSizeMode, typeof(DataGridViewRowHeadersWidthSizeMode));
            }
            if (this.RowHeadersVisible)
            {
                if (!base.IsHandleCreated)
                {
                    this.dataGridViewState2[0x100000] = true;
                }
                else
                {
                    try
                    {
                        int nextRow;
                        int num3;
                        int num4;
                        DataGridViewRow row;
                        this.noAutoSizeCount++;
                        int preferredWidth = 0;
                        if (this.layout.TopLeftHeader.Width > 0)
                        {
                            if (fixedColumnHeadersHeight)
                            {
                                preferredWidth = this.TopLeftHeaderCell.GetPreferredWidth(-1, this.layout.TopLeftHeader.Height);
                            }
                            else
                            {
                                preferredWidth = this.TopLeftHeaderCell.GetPreferredSize(-1).Width;
                            }
                        }
                        switch (rowHeadersWidthSizeMode)
                        {
                            case DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders:
                                nextRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                                goto Label_02EC;

                            case DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders:
                                num3 = this.layout.Data.Height;
                                num4 = 0;
                                nextRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                                goto Label_01E3;

                            case DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader:
                                nextRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                                if (nextRow != -1)
                                {
                                    if (!fixedRowsHeight)
                                    {
                                        break;
                                    }
                                    preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredWidth(nextRow, this.Rows.SharedRow(nextRow).GetHeight(nextRow)));
                                }
                                goto Label_02F0;

                            default:
                                goto Label_02F0;
                        }
                        preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredSize(nextRow).Width);
                        goto Label_02F0;
                    Label_017F:
                        row = this.Rows.SharedRow(nextRow);
                        int height = row.GetHeight(nextRow);
                        num4 += height;
                        if (fixedRowsHeight)
                        {
                            preferredWidth = Math.Max(preferredWidth, row.HeaderCell.GetPreferredWidth(nextRow, height));
                        }
                        else
                        {
                            preferredWidth = Math.Max(preferredWidth, row.HeaderCell.GetPreferredSize(nextRow).Width);
                        }
                        nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    Label_01E3:
                        if ((nextRow != -1) && (num4 < num3))
                        {
                            goto Label_017F;
                        }
                        if (num4 < num3)
                        {
                            nextRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                            while ((nextRow != -1) && (num4 < num3))
                            {
                                DataGridViewRow row2 = this.Rows.SharedRow(nextRow);
                                int num6 = row2.GetHeight(nextRow);
                                num4 += num6;
                                if (fixedRowsHeight)
                                {
                                    preferredWidth = Math.Max(preferredWidth, row2.HeaderCell.GetPreferredWidth(nextRow, num6));
                                }
                                else
                                {
                                    preferredWidth = Math.Max(preferredWidth, row2.HeaderCell.GetPreferredSize(nextRow).Width);
                                }
                                nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible);
                            }
                        }
                        goto Label_02F0;
                    Label_0281:
                        if (fixedRowsHeight)
                        {
                            preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredWidth(nextRow, this.Rows.SharedRow(nextRow).GetHeight(nextRow)));
                        }
                        else
                        {
                            preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredSize(nextRow).Width);
                        }
                        nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible);
                    Label_02EC:
                        if (nextRow != -1)
                        {
                            goto Label_0281;
                        }
                    Label_02F0:
                        if (preferredWidth < 4)
                        {
                            preferredWidth = 4;
                        }
                        if (preferredWidth != this.RowHeadersWidth)
                        {
                            this.RowHeadersWidthInternal = preferredWidth;
                        }
                    }
                    finally
                    {
                        this.noAutoSizeCount--;
                    }
                }
            }
        }

        protected void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight)
        {
            if ((rowIndex < -1) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if ((rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing) || (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing))
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[] { "rowHeadersWidthSizeMode" }));
            }
            if ((rowHeadersWidthSizeMode < DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders) || (rowHeadersWidthSizeMode > DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader))
            {
                throw new InvalidEnumArgumentException("rowHeadersWidthSizeMode", (int) rowHeadersWidthSizeMode, typeof(DataGridViewRowHeadersWidthSizeMode));
            }
            if (this.RowHeadersVisible && ((((rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader) || (rowIndex == -1)) || (rowIndex == this.Rows.GetFirstRow(DataGridViewElementStates.Visible))) && (((rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders) || (rowIndex == -1)) || ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None))))
            {
                if (!base.IsHandleCreated)
                {
                    this.dataGridViewState2[0x100000] = true;
                }
                else
                {
                    try
                    {
                        int nextRow;
                        int num3;
                        int num4;
                        DataGridViewRow row;
                        this.noAutoSizeCount++;
                        int preferredWidth = 0;
                        if (this.layout.TopLeftHeader.Width > 0)
                        {
                            if ((rowIndex != -1) || fixedColumnHeadersHeight)
                            {
                                preferredWidth = this.TopLeftHeaderCell.GetPreferredWidth(-1, this.layout.TopLeftHeader.Height);
                            }
                            else
                            {
                                preferredWidth = this.TopLeftHeaderCell.GetPreferredSize(-1).Width;
                            }
                        }
                        switch (rowHeadersWidthSizeMode)
                        {
                            case DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders:
                                nextRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                                goto Label_036C;

                            case DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders:
                                num3 = this.layout.Data.Height;
                                num4 = 0;
                                nextRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                                goto Label_024E;

                            case DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader:
                                nextRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                                if (nextRow != -1)
                                {
                                    if ((rowIndex == nextRow) && !fixedRowHeight)
                                    {
                                        break;
                                    }
                                    preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredWidth(nextRow, this.Rows.SharedRow(nextRow).GetHeight(nextRow)));
                                }
                                goto Label_0370;

                            default:
                                goto Label_0370;
                        }
                        preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredSize(nextRow).Width);
                        goto Label_0370;
                    Label_01E3:
                        row = this.Rows.SharedRow(nextRow);
                        int height = row.GetHeight(nextRow);
                        num4 += height;
                        if ((rowIndex != nextRow) || fixedRowHeight)
                        {
                            preferredWidth = Math.Max(preferredWidth, row.HeaderCell.GetPreferredWidth(nextRow, height));
                        }
                        else
                        {
                            preferredWidth = Math.Max(preferredWidth, row.HeaderCell.GetPreferredSize(nextRow).Width);
                        }
                        nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    Label_024E:
                        if ((nextRow != -1) && (num4 < num3))
                        {
                            goto Label_01E3;
                        }
                        if (num4 < num3)
                        {
                            nextRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                            while ((nextRow != -1) && (num4 < num3))
                            {
                                DataGridViewRow row2 = this.Rows.SharedRow(nextRow);
                                int num6 = row2.GetHeight(nextRow);
                                num4 += num6;
                                if ((rowIndex != nextRow) || fixedRowHeight)
                                {
                                    preferredWidth = Math.Max(preferredWidth, row2.HeaderCell.GetPreferredWidth(nextRow, num6));
                                }
                                else
                                {
                                    preferredWidth = Math.Max(preferredWidth, row2.HeaderCell.GetPreferredSize(nextRow).Width);
                                }
                                nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible);
                            }
                        }
                        goto Label_0370;
                    Label_02FC:
                        if ((rowIndex != nextRow) || fixedRowHeight)
                        {
                            preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredWidth(nextRow, this.Rows.SharedRow(nextRow).GetHeight(nextRow)));
                        }
                        else
                        {
                            preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredSize(nextRow).Width);
                        }
                        nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible);
                    Label_036C:
                        if (nextRow != -1)
                        {
                            goto Label_02FC;
                        }
                    Label_0370:
                        if (preferredWidth < 4)
                        {
                            preferredWidth = 4;
                        }
                        if (preferredWidth != this.RowHeadersWidth)
                        {
                            this.RowHeadersWidthInternal = preferredWidth;
                        }
                    }
                    finally
                    {
                        this.noAutoSizeCount--;
                    }
                }
            }
        }

        private void AutoResizeRowInternal(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth, bool internalAutosizing)
        {
            if (!base.IsHandleCreated)
            {
                this.dataGridViewState2[0x100000] = true;
            }
            else
            {
                try
                {
                    int num;
                    int num2;
                    this.noAutoSizeCount++;
                    DataGridViewRow row = this.Rows.SharedRow(rowIndex);
                    row.GetHeightInfo(rowIndex, out num, out num2);
                    int height = row.GetPreferredHeight(rowIndex, autoSizeRowMode, fixedWidth);
                    if (height < num2)
                    {
                        height = num2;
                    }
                    if (height > 0x10000)
                    {
                        height = 0x10000;
                    }
                    if (num != height)
                    {
                        if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
                        {
                            if (!this.OnRowHeightInfoPushed(rowIndex, height, num2))
                            {
                                this.Rows[rowIndex].ThicknessInternal = height;
                            }
                        }
                        else if (internalAutosizing)
                        {
                            this.Rows[rowIndex].ThicknessInternal = height;
                        }
                        else
                        {
                            this.Rows[rowIndex].Thickness = height;
                        }
                    }
                }
                finally
                {
                    this.noAutoSizeCount--;
                }
            }
        }

        public void AutoResizeRows()
        {
            this.AutoResizeRows(DataGridViewAutoSizeRowsMode.AllCells);
        }

        public void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode)
        {
            this.AutoResizeRows(autoSizeRowsMode, true);
        }

        protected void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth)
        {
            switch (autoSizeRowsMode)
            {
                case DataGridViewAutoSizeRowsMode.None:
                case DataGridViewAutoSizeRowsMode.AllHeaders:
                case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
                case DataGridViewAutoSizeRowsMode.AllCells:
                case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
                case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
                case DataGridViewAutoSizeRowsMode.DisplayedCells:
                    if (autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
                    {
                        throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[] { "autoSizeRowsMode" }));
                    }
                    if (((autoSizeRowsMode == DataGridViewAutoSizeRowsMode.AllHeaders) || (autoSizeRowsMode == DataGridViewAutoSizeRowsMode.DisplayedHeaders)) && !this.RowHeadersVisible)
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
                    }
                    this.AdjustShrinkingRows(autoSizeRowsMode, fixedWidth, false);
                    return;
            }
            throw new InvalidEnumArgumentException("value", (int) autoSizeRowsMode, typeof(DataGridViewAutoSizeRowsMode));
        }

        protected void AutoResizeRows(int rowIndexStart, int rowsCount, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
        {
            if ((autoSizeRowMode & ~DataGridViewAutoSizeRowMode.AllCells) != ((DataGridViewAutoSizeRowMode) 0))
            {
                throw new InvalidEnumArgumentException("autoSizeRowMode", (int) autoSizeRowMode, typeof(DataGridViewAutoSizeRowMode));
            }
            if ((autoSizeRowMode == DataGridViewAutoSizeRowMode.RowHeader) && !this.RowHeadersVisible)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
            }
            if (rowsCount < 0)
            {
                throw new ArgumentOutOfRangeException("rowsCount");
            }
            if (rowIndexStart < 0)
            {
                throw new ArgumentOutOfRangeException("rowIndexStart");
            }
            if (!base.IsHandleCreated)
            {
                this.dataGridViewState2[0x100000] = true;
            }
            else
            {
                this.inBulkPaintCount++;
                this.inBulkLayoutCount++;
                try
                {
                    int nextRow = this.Rows.GetNextRow(rowIndexStart - 1, DataGridViewElementStates.Visible);
                    int num2 = 0;
                    while ((nextRow != -1) && (num2 < rowsCount))
                    {
                        this.AutoResizeRowInternal(nextRow, autoSizeRowMode, fixedWidth, false);
                        num2++;
                        if (num2 < rowsCount)
                        {
                            nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible);
                        }
                    }
                }
                finally
                {
                    this.ExitBulkLayout(true);
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private void BeginColumnHeadersResize(int mouseY, int mouseBarOffset)
        {
            Rectangle b = Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data);
            if (this.layout.TopLeftHeader.Width > 0)
            {
                b = Rectangle.Union(this.layout.TopLeftHeader, b);
            }
            b.Y += (4 - mouseBarOffset) - 1;
            this.CaptureMouse(b);
            this.dataGridViewOper[0x80] = true;
            this.trackRowAnchor = mouseY;
            this.mouseBarOffset = mouseBarOffset;
            this.currentRowSplitBar = mouseY;
            base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
        }

        private void BeginColumnRelocation(int mouseX, int index)
        {
            Rectangle columnHeaders = this.layout.ColumnHeaders;
            int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            int num2 = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - columnsWidth;
            if (this.Columns[index].Frozen)
            {
                if (this.RightToLeftInternal)
                {
                    columnHeaders.X += columnHeaders.Width - columnsWidth;
                }
                columnHeaders.Width = Math.Min(columnsWidth, this.layout.Data.Width);
            }
            else
            {
                if (!this.RightToLeftInternal)
                {
                    columnHeaders.X += columnsWidth;
                }
                else if (this.layout.Data.Width > (columnsWidth + num2))
                {
                    columnHeaders.X += (this.layout.Data.Width - columnsWidth) - num2;
                }
                columnHeaders.Width = Math.Min(num2, this.layout.Data.Width);
            }
            this.CaptureMouse(columnHeaders);
            this.dataGridViewOper[0x20] = true;
            this.dataGridViewState2[0x400] = false;
            this.trackColumn = index;
            this.trackColumnEdge = -1;
            this.mouseBarOffset = this.GetColumnXFromIndex(index) - mouseX;
            this.lastHeaderShadow = mouseX;
            base.Invalidate(this.layout.ColumnHeaders);
        }

        private void BeginColumnResize(int mouseX, int mouseBarOffset, int index)
        {
            Rectangle cursorClip = Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data);
            int columnXFromIndex = this.GetColumnXFromIndex(index);
            if (this.RightToLeftInternal)
            {
                cursorClip.X = (this.layout.Data.X - mouseBarOffset) - 1;
                cursorClip.Width = ((columnXFromIndex - this.Columns[index].MinimumThickness) - this.layout.Data.X) + 3;
                int num2 = (((columnXFromIndex - mouseBarOffset) - cursorClip.Left) - 0x10000) + 1;
                if (num2 > 0)
                {
                    cursorClip.X += num2;
                    cursorClip.Width -= num2;
                }
            }
            else
            {
                cursorClip.X = ((columnXFromIndex + this.Columns[index].MinimumThickness) - mouseBarOffset) - 1;
                cursorClip.Width = (this.layout.Data.Right - columnXFromIndex) - 1;
                int num3 = ((cursorClip.Right + mouseBarOffset) - columnXFromIndex) - 0x10000;
                if (num3 > 0)
                {
                    cursorClip.Width -= num3;
                }
            }
            this.CaptureMouse(cursorClip);
            this.dataGridViewOper[1] = true;
            this.trackColAnchor = mouseX;
            this.trackColumn = index;
            this.mouseBarOffset = mouseBarOffset;
            this.currentColSplitBar = mouseX;
            base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
        }

        public virtual bool BeginEdit(bool selectAll)
        {
            if (this.ptCurrentCell.X == -1)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_NoCurrentCell"));
            }
            return (this.IsCurrentCellInEditMode || this.BeginEditInternal(selectAll));
        }

        private bool BeginEditInternal(bool selectAll)
        {
            bool flag;
            if (this.dataGridViewOper[0x200000])
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_BeginEditNotReentrant"));
            }
            try
            {
                System.Type editType;
                DataGridViewCellStyle style;
                this.dataGridViewOper[0x200000] = true;
                DataGridViewCell currentCellInternal = this.CurrentCellInternal;
                if (!this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y) && this.ColumnEditable(this.ptCurrentCell.X))
                {
                    editType = currentCellInternal.EditType;
                    if ((editType != null) || (currentCellInternal.GetType().GetInterface("System.Windows.Forms.IDataGridViewEditingCell") != null))
                    {
                        DataGridViewCellCancelEventArgs args = new DataGridViewCellCancelEventArgs(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                        this.OnCellBeginEdit(args);
                        if (args.Cancel)
                        {
                            return false;
                        }
                        if (this.ptCurrentCell.X > -1)
                        {
                            currentCellInternal = this.CurrentCellInternal;
                            goto Label_00E1;
                        }
                    }
                }
                return false;
            Label_00E1:
                style = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
                if (editType == null)
                {
                    this.dataGridViewState1[0x8000] = true;
                    this.InitializeEditingCellValue(ref style, ref currentCellInternal);
                    ((IDataGridViewEditingCell) currentCellInternal).PrepareEditingCellForEdit(selectAll);
                    return true;
                }
                System.Type type3 = editType.GetInterface("System.Windows.Forms.IDataGridViewEditingControl");
                if (!editType.IsSubclassOf(System.Type.GetType("System.Windows.Forms.Control")) || (type3 == null))
                {
                    throw new InvalidCastException(System.Windows.Forms.SR.GetString("DataGridView_InvalidEditingControl"));
                }
                if (((this.latestEditingControl != null) && editType.IsInstanceOfType(this.latestEditingControl)) && !this.latestEditingControl.GetType().IsSubclassOf(editType))
                {
                    this.editingControl = this.latestEditingControl;
                }
                else
                {
                    this.editingControl = (Control) System.Windows.Forms.SecurityUtils.SecureCreateInstance(editType);
                    ((IDataGridViewEditingControl) this.editingControl).EditingControlDataGridView = this;
                    if (this.latestEditingControl != null)
                    {
                        this.latestEditingControl.Dispose();
                        this.latestEditingControl = null;
                    }
                }
                if (string.IsNullOrEmpty(this.editingControl.AccessibleName))
                {
                    this.editingControl.AccessibleName = System.Windows.Forms.SR.GetString("DataGridView_AccEditingControlAccName");
                }
                this.editingControl.ImeMode = base.ImeMode;
                ((IDataGridViewEditingControl) this.editingControl).EditingControlRowIndex = this.ptCurrentCell.Y;
                this.InitializeEditingControlValue(ref style, currentCellInternal);
                this.WireEditingControlEvents();
                DataGridViewEditingControlShowingEventArgs e = new DataGridViewEditingControlShowingEventArgs(this.editingControl, style);
                this.OnEditingControlShowing(e);
                if ((this.editingPanel == null) || (this.editingControl == null))
                {
                    return false;
                }
                this.editingPanel.BackColor = e.CellStyle.BackColor;
                ((IDataGridViewEditingControl) this.editingControl).ApplyCellStyleToEditingControl(e.CellStyle);
                if (this.toolTipControl.Activated && (this.ptToolTipCell == this.ptCurrentCell))
                {
                    this.toolTipControl.Activate(false);
                }
                this.PositionEditingControl(true, true, true);
                if ((this.editingPanel == null) || (this.editingControl == null))
                {
                    return false;
                }
                ((IDataGridViewEditingControl) this.editingControl).PrepareEditingControlForEdit(selectAll);
                this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                flag = true;
            }
            finally
            {
                this.dataGridViewOper[0x200000] = false;
            }
            return flag;
        }

        private void BeginRowHeadersResize(int mouseX, int mouseBarOffset)
        {
            Rectangle b = Rectangle.Union(this.layout.RowHeaders, this.layout.Data);
            if (this.layout.TopLeftHeader.Width > 0)
            {
                b = Rectangle.Union(this.layout.TopLeftHeader, b);
            }
            if (this.RightToLeftInternal)
            {
                b.X -= mouseBarOffset + 1;
                b.Width -= 3;
            }
            else
            {
                b.X += (4 - mouseBarOffset) - 1;
            }
            this.CaptureMouse(b);
            this.dataGridViewOper[0x100] = true;
            this.trackColAnchor = mouseX;
            this.mouseBarOffset = mouseBarOffset;
            this.currentColSplitBar = mouseX;
            base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
        }

        private void BeginRowResize(int mouseY, int mouseBarOffset, int index)
        {
            Rectangle cursorClip = Rectangle.Union(this.layout.RowHeaders, this.layout.Data);
            int rowYFromIndex = this.GetRowYFromIndex(index);
            cursorClip.Y = ((rowYFromIndex + this.Rows.SharedRow(index).GetMinimumHeight(index)) - mouseBarOffset) - 1;
            cursorClip.Height = ((this.layout.Data.Y + this.layout.Data.Height) - rowYFromIndex) - 1;
            this.CaptureMouse(cursorClip);
            this.dataGridViewOper[2] = true;
            this.trackRowAnchor = mouseY;
            this.trackRow = index;
            this.mouseBarOffset = mouseBarOffset;
            this.currentRowSplitBar = mouseY;
            base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
        }

        private void BuildInheritedColumnHeaderCellStyle(DataGridViewCellStyle inheritedCellStyle, DataGridViewCell cell)
        {
            DataGridViewCellStyle style = null;
            if (cell.HasStyle)
            {
                style = cell.Style;
            }
            DataGridViewCellStyle columnHeadersDefaultCellStyle = this.ColumnHeadersDefaultCellStyle;
            DataGridViewCellStyle defaultCellStyle = this.DefaultCellStyle;
            if ((style != null) && !style.BackColor.IsEmpty)
            {
                inheritedCellStyle.BackColor = style.BackColor;
            }
            else if (!columnHeadersDefaultCellStyle.BackColor.IsEmpty)
            {
                inheritedCellStyle.BackColor = columnHeadersDefaultCellStyle.BackColor;
            }
            else
            {
                inheritedCellStyle.BackColor = defaultCellStyle.BackColor;
            }
            if ((style != null) && !style.ForeColor.IsEmpty)
            {
                inheritedCellStyle.ForeColor = style.ForeColor;
            }
            else if (!columnHeadersDefaultCellStyle.ForeColor.IsEmpty)
            {
                inheritedCellStyle.ForeColor = columnHeadersDefaultCellStyle.ForeColor;
            }
            else
            {
                inheritedCellStyle.ForeColor = defaultCellStyle.ForeColor;
            }
            if ((style != null) && !style.SelectionBackColor.IsEmpty)
            {
                inheritedCellStyle.SelectionBackColor = style.SelectionBackColor;
            }
            else if (!columnHeadersDefaultCellStyle.SelectionBackColor.IsEmpty)
            {
                inheritedCellStyle.SelectionBackColor = columnHeadersDefaultCellStyle.SelectionBackColor;
            }
            else
            {
                inheritedCellStyle.SelectionBackColor = defaultCellStyle.SelectionBackColor;
            }
            if ((style != null) && !style.SelectionForeColor.IsEmpty)
            {
                inheritedCellStyle.SelectionForeColor = style.SelectionForeColor;
            }
            else if (!columnHeadersDefaultCellStyle.SelectionForeColor.IsEmpty)
            {
                inheritedCellStyle.SelectionForeColor = columnHeadersDefaultCellStyle.SelectionForeColor;
            }
            else
            {
                inheritedCellStyle.SelectionForeColor = defaultCellStyle.SelectionForeColor;
            }
            if ((style != null) && (style.Font != null))
            {
                inheritedCellStyle.Font = style.Font;
            }
            else if (columnHeadersDefaultCellStyle.Font != null)
            {
                inheritedCellStyle.Font = columnHeadersDefaultCellStyle.Font;
            }
            else
            {
                inheritedCellStyle.Font = defaultCellStyle.Font;
            }
            if ((style != null) && !style.IsNullValueDefault)
            {
                inheritedCellStyle.NullValue = style.NullValue;
            }
            else if (!columnHeadersDefaultCellStyle.IsNullValueDefault)
            {
                inheritedCellStyle.NullValue = columnHeadersDefaultCellStyle.NullValue;
            }
            else
            {
                inheritedCellStyle.NullValue = defaultCellStyle.NullValue;
            }
            if ((style != null) && !style.IsDataSourceNullValueDefault)
            {
                inheritedCellStyle.DataSourceNullValue = style.DataSourceNullValue;
            }
            else if (!columnHeadersDefaultCellStyle.IsDataSourceNullValueDefault)
            {
                inheritedCellStyle.DataSourceNullValue = columnHeadersDefaultCellStyle.DataSourceNullValue;
            }
            else
            {
                inheritedCellStyle.DataSourceNullValue = defaultCellStyle.DataSourceNullValue;
            }
            if ((style != null) && (style.Format.Length != 0))
            {
                inheritedCellStyle.Format = style.Format;
            }
            else if (columnHeadersDefaultCellStyle.Format.Length != 0)
            {
                inheritedCellStyle.Format = columnHeadersDefaultCellStyle.Format;
            }
            else
            {
                inheritedCellStyle.Format = defaultCellStyle.Format;
            }
            if ((style != null) && !style.IsFormatProviderDefault)
            {
                inheritedCellStyle.FormatProvider = style.FormatProvider;
            }
            else if (!columnHeadersDefaultCellStyle.IsFormatProviderDefault)
            {
                inheritedCellStyle.FormatProvider = columnHeadersDefaultCellStyle.FormatProvider;
            }
            else
            {
                inheritedCellStyle.FormatProvider = defaultCellStyle.FormatProvider;
            }
            if ((style != null) && (style.Alignment != DataGridViewContentAlignment.NotSet))
            {
                inheritedCellStyle.AlignmentInternal = style.Alignment;
            }
            else if ((columnHeadersDefaultCellStyle != null) && (columnHeadersDefaultCellStyle.Alignment != DataGridViewContentAlignment.NotSet))
            {
                inheritedCellStyle.AlignmentInternal = columnHeadersDefaultCellStyle.Alignment;
            }
            else
            {
                inheritedCellStyle.AlignmentInternal = defaultCellStyle.Alignment;
            }
            if ((style != null) && (style.WrapMode != DataGridViewTriState.NotSet))
            {
                inheritedCellStyle.WrapModeInternal = style.WrapMode;
            }
            else if ((columnHeadersDefaultCellStyle != null) && (columnHeadersDefaultCellStyle.WrapMode != DataGridViewTriState.NotSet))
            {
                inheritedCellStyle.WrapModeInternal = columnHeadersDefaultCellStyle.WrapMode;
            }
            else
            {
                inheritedCellStyle.WrapModeInternal = defaultCellStyle.WrapMode;
            }
            if ((style != null) && (style.Tag != null))
            {
                inheritedCellStyle.Tag = style.Tag;
            }
            else if (columnHeadersDefaultCellStyle.Tag != null)
            {
                inheritedCellStyle.Tag = columnHeadersDefaultCellStyle.Tag;
            }
            else
            {
                inheritedCellStyle.Tag = defaultCellStyle.Tag;
            }
            if ((style != null) && (style.Padding != System.Windows.Forms.Padding.Empty))
            {
                inheritedCellStyle.PaddingInternal = style.Padding;
            }
            else if (columnHeadersDefaultCellStyle.Padding != System.Windows.Forms.Padding.Empty)
            {
                inheritedCellStyle.PaddingInternal = columnHeadersDefaultCellStyle.Padding;
            }
            else
            {
                inheritedCellStyle.PaddingInternal = defaultCellStyle.Padding;
            }
        }

        private Rectangle CalcColRelocationFeedbackRect(int mouseX)
        {
            Rectangle rectangle;
            Rectangle columnHeaders = this.layout.ColumnHeaders;
            if (this.layout.TopLeftHeader.Width > 0)
            {
                columnHeaders = Rectangle.Union(this.layout.TopLeftHeader, columnHeaders);
            }
            if (this.RightToLeftInternal)
            {
                rectangle = new Rectangle(((mouseX + this.mouseBarOffset) - this.Columns[this.trackColumn].Thickness) + 1, columnHeaders.Y, this.Columns[this.trackColumn].Thickness, columnHeaders.Height);
                rectangle.X = Math.Max(columnHeaders.Left, rectangle.X);
                rectangle.X = Math.Min(rectangle.X, columnHeaders.Right - rectangle.Width);
                return rectangle;
            }
            rectangle = new Rectangle((mouseX + this.mouseBarOffset) - 1, columnHeaders.Y, this.Columns[this.trackColumn].Thickness, columnHeaders.Height);
            rectangle.X = Math.Min(columnHeaders.Right - rectangle.Width, rectangle.X);
            rectangle.X = Math.Max(rectangle.X, columnHeaders.Left);
            return rectangle;
        }

        private Rectangle CalcColResizeFeedbackRect(int mouseX)
        {
            Rectangle data = this.layout.Data;
            Rectangle rectangle2 = new Rectangle((mouseX + this.mouseBarOffset) - 1, data.Y, 3, data.Height);
            if (this.RightToLeftInternal)
            {
                rectangle2.X = Math.Max(data.Left, rectangle2.X);
                return rectangle2;
            }
            rectangle2.X = Math.Min(data.Right - 3, rectangle2.X);
            rectangle2.X = Math.Max(rectangle2.X, 0);
            return rectangle2;
        }

        private Rectangle CalcRowResizeFeedbackRect(int mouseY)
        {
            Rectangle data = this.layout.Data;
            Rectangle rectangle2 = new Rectangle(data.X, (mouseY + this.mouseBarOffset) - 1, data.Width, 3);
            rectangle2.Y = Math.Min(data.Bottom - 3, rectangle2.Y);
            rectangle2.Y = Math.Max(rectangle2.Y, 0);
            return rectangle2;
        }

        public bool CancelEdit() => 
            this.CancelEdit(false);

        private bool CancelEdit(bool endEdit)
        {
            if (this.ptCurrentCell.X != -1)
            {
                int x = this.ptCurrentCell.X;
                DataGridViewDataErrorEventArgs args = this.CancelEditPrivate();
                if (args != null)
                {
                    if (args.ThrowException)
                    {
                        throw args.Exception;
                    }
                    if (args.Cancel)
                    {
                        return false;
                    }
                }
                if (this.IsCurrentCellInEditMode)
                {
                    if ((endEdit && (this.EditMode != DataGridViewEditMode.EditOnEnter)) && (this.editingControl != null))
                    {
                        this.EndEdit(DataGridViewDataErrorContexts.InitialValueRestoration | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.Never, false, false, false, false, false, true, true, true);
                    }
                    else
                    {
                        DataGridViewDataErrorEventArgs e = null;
                        IDataGridViewEditingCell currentCellInternal = null;
                        try
                        {
                            this.dataGridViewState1[0x200] = true;
                            if (this.editingControl != null)
                            {
                                ((IDataGridViewEditingControl) this.editingControl).EditingControlFormattedValue = this.uneditedFormattedValue;
                                ((IDataGridViewEditingControl) this.editingControl).EditingControlValueChanged = false;
                            }
                            else
                            {
                                currentCellInternal = this.CurrentCellInternal as IDataGridViewEditingCell;
                                currentCellInternal.EditingCellFormattedValue = this.uneditedFormattedValue;
                                currentCellInternal.EditingCellValueChanged = false;
                            }
                        }
                        catch (Exception exception)
                        {
                            if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                            {
                                throw;
                            }
                            e = new DataGridViewDataErrorEventArgs(exception, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
                        }
                        finally
                        {
                            this.dataGridViewState1[0x200] = false;
                        }
                        if (e != null)
                        {
                            this.OnDataErrorInternal(e);
                            if (e.ThrowException)
                            {
                                throw e.Exception;
                            }
                        }
                        if (this.editingControl != null)
                        {
                            ((IDataGridViewEditingControl) this.editingControl).PrepareEditingControlForEdit(true);
                        }
                        else
                        {
                            currentCellInternal.PrepareEditingCellForEdit(true);
                            this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                        }
                    }
                }
                else if (((this.ptCurrentCell.X == -1) && this.Focused) && (this.Rows.Count > 0))
                {
                    if ((this.Columns.Count > x) && this.Columns[x].Visible)
                    {
                        int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                        if (firstRow != -1)
                        {
                            this.SetAndSelectCurrentCellAddress(x, firstRow, true, false, false, false, false);
                        }
                    }
                    else
                    {
                        this.MakeFirstDisplayedCellCurrentCell(true);
                    }
                }
            }
            return true;
        }

        private DataGridViewDataErrorEventArgs CancelEditPrivate()
        {
            bool isCurrentCellDirty = this.IsCurrentCellDirty;
            bool isCurrentRowDirty = this.IsCurrentRowDirty;
            if (this.IsCurrentCellInEditMode)
            {
                if (this.editingControl != null)
                {
                    ((IDataGridViewEditingControl) this.editingControl).EditingControlValueChanged = false;
                }
                else
                {
                    ((IDataGridViewEditingCell) this.CurrentCellInternal).EditingCellValueChanged = false;
                }
                this.IsCurrentCellDirtyInternal = false;
            }
            if ((this.DataSource != null) || this.VirtualMode)
            {
                if ((isCurrentRowDirty && !isCurrentCellDirty) || (this.dataGridViewState1[0x80000] && !this.dataGridViewState1[0x40000]))
                {
                    bool response = this.dataGridViewState1[0x80000];
                    this.IsCurrentRowDirtyInternal = false;
                    if (this.VirtualMode)
                    {
                        QuestionEventArgs e = new QuestionEventArgs(response);
                        this.OnCancelRowEdit(e);
                        response &= e.Response;
                    }
                    if (this.DataSource != null)
                    {
                        int x = this.ptCurrentCell.X;
                        this.dataConnection.CancelRowEdit(true, this.dataGridViewState1[0x80000]);
                        if (this.dataConnection.List.Count == 0)
                        {
                            if ((isCurrentCellDirty || (this.ptCurrentCell.Y == -1)) || (this.ptCurrentCell.X == -1))
                            {
                                if (!this.IsColumnOutOfBounds(x) && this.Columns[x].Visible)
                                {
                                    this.SetAndSelectCurrentCellAddress(x, 0, true, false, false, true, false);
                                }
                            }
                            else
                            {
                                this.dataConnection.OnNewRowNeeded();
                            }
                        }
                        response = false;
                    }
                    if (this.ptCurrentCell.Y > -1)
                    {
                        this.InvalidateRowPrivate(this.ptCurrentCell.Y);
                        DataGridViewCell currentCellInternal = this.CurrentCellInternal;
                        if (this.IsCurrentCellInEditMode)
                        {
                            DataGridViewCellStyle dataGridViewCellStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
                            if (this.editingControl != null)
                            {
                                this.InitializeEditingControlValue(ref dataGridViewCellStyle, currentCellInternal);
                                if (((IDataGridViewEditingControl) this.editingControl).RepositionEditingControlOnValueChange)
                                {
                                    this.PositionEditingControl(true, true, false);
                                }
                            }
                            else
                            {
                                this.InitializeEditingCellValue(ref dataGridViewCellStyle, ref currentCellInternal);
                            }
                        }
                    }
                    if (response && (this.ptCurrentCell.Y == (this.newRowIndex - 1)))
                    {
                        this.DiscardNewRow();
                    }
                }
            }
            else if ((!this.IsCurrentRowDirty && (this.ptCurrentCell.Y == (this.newRowIndex - 1))) && this.dataGridViewState1[0x200000])
            {
                this.DiscardNewRow();
            }
            return null;
        }

        internal bool CancelToolTipPopup(System.Windows.Forms.ToolTip toolTip)
        {
            if (this.toolTipControl.ToolTip == toolTip)
            {
                return false;
            }
            return (string.IsNullOrEmpty(this.toolTipCaption) && this.ShowCellToolTips);
        }

        private bool CanValidateDataBoundDataGridViewCell(DataGridViewCell dataGridViewCurrentCell)
        {
            if ((dataGridViewCurrentCell == null) && (this.ptCurrentCell.X > -1))
            {
                dataGridViewCurrentCell = this.CurrentCellInternal;
            }
            if (dataGridViewCurrentCell != null)
            {
                if (!dataGridViewCurrentCell.OwningColumn.IsDataBoundInternal)
                {
                    return true;
                }
                if (this.dataGridViewOper[0x100000])
                {
                    return false;
                }
                if (this.dataConnection == null)
                {
                    return true;
                }
                if (this.dataConnection.ProcessingMetaDataChanges)
                {
                    return false;
                }
                if (this.dataConnection.CancellingRowEdit && !this.dataConnection.RestoreRow)
                {
                    return false;
                }
                if (this.dataConnection.CurrencyManager.Count <= this.ptCurrentCell.Y)
                {
                    return false;
                }
                if (this.dataConnection.PositionChangingOutsideDataGridView)
                {
                    return false;
                }
                if (this.dataConnection.ListWasReset)
                {
                    return false;
                }
            }
            return true;
        }

        private void CaptureMouse(Rectangle cursorClip)
        {
            base.CaptureInternal = true;
            Cursor.ClipInternal = base.RectangleToScreen(cursorClip);
        }

        private void ClearRegionCache()
        {
            this.cachedScrollableRegion = null;
        }

        public void ClearSelection()
        {
            this.noDimensionChangeCount++;
            this.noSelectionChangeCount++;
            bool flag = false;
            if ((this.selectedBandIndexes.Count > 8) || (this.individualSelectedCells.Count > 8))
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                this.RemoveIndividuallySelectedCells();
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                        return;

                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        goto Label_0085;

                    case DataGridViewSelectionMode.FullColumnSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        goto Label_00A7;

                    default:
                        return;
                }
            Label_0073:
                this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
            Label_0085:
                if (this.selectedBandIndexes.Count > 0)
                {
                    goto Label_0073;
                }
                return;
            Label_0095:
                this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
            Label_00A7:
                if (this.selectedBandIndexes.Count > 0)
                {
                    goto Label_0095;
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
                this.NoSelectionChangeCount--;
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        protected void ClearSelection(int columnIndexException, int rowIndexException, bool selectExceptionElement)
        {
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.CellSelect:
                case DataGridViewSelectionMode.FullColumnSelect:
                case DataGridViewSelectionMode.ColumnHeaderSelect:
                    if ((columnIndexException < 0) || (columnIndexException >= this.Columns.Count))
                    {
                        throw new ArgumentOutOfRangeException("columnIndexException");
                    }
                    break;

                case DataGridViewSelectionMode.FullRowSelect:
                case DataGridViewSelectionMode.RowHeaderSelect:
                    if ((columnIndexException < -1) || (columnIndexException >= this.Columns.Count))
                    {
                        throw new ArgumentOutOfRangeException("columnIndexException");
                    }
                    break;
            }
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.CellSelect:
                case DataGridViewSelectionMode.FullRowSelect:
                case DataGridViewSelectionMode.RowHeaderSelect:
                    if ((rowIndexException < 0) || (rowIndexException >= this.Rows.Count))
                    {
                        throw new ArgumentOutOfRangeException("rowIndexException");
                    }
                    break;

                case DataGridViewSelectionMode.FullColumnSelect:
                case DataGridViewSelectionMode.ColumnHeaderSelect:
                    if ((rowIndexException < -1) || (rowIndexException >= this.Rows.Count))
                    {
                        throw new ArgumentOutOfRangeException("rowIndexException");
                    }
                    break;
            }
            this.noDimensionChangeCount++;
            this.noSelectionChangeCount++;
            bool flag = false;
            if ((this.selectedBandIndexes.Count > 8) || (this.individualSelectedCells.Count > 8))
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                int num;
                int num2;
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                        this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
                        goto Label_01D3;

                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        num = 0;
                        goto Label_0167;

                    case DataGridViewSelectionMode.FullColumnSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        num2 = 0;
                        goto Label_01B4;

                    default:
                        goto Label_01D3;
                }
            Label_013F:
                if (this.selectedBandIndexes[num] != rowIndexException)
                {
                    this.SetSelectedRowCore(this.selectedBandIndexes[num], false);
                }
                else
                {
                    num++;
                }
            Label_0167:
                if (num < this.selectedBandIndexes.Count)
                {
                    goto Label_013F;
                }
                if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
                {
                    this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
                }
                goto Label_01D3;
            Label_018C:
                if (this.selectedBandIndexes[num2] != columnIndexException)
                {
                    this.SetSelectedColumnCore(this.selectedBandIndexes[num2], false);
                }
                else
                {
                    num2++;
                }
            Label_01B4:
                if (num2 < this.selectedBandIndexes.Count)
                {
                    goto Label_018C;
                }
                if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
                {
                    this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
                }
            Label_01D3:
                if (selectExceptionElement)
                {
                    this.SetSelectedElementCore(columnIndexException, rowIndexException, true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
                this.NoSelectionChangeCount--;
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private bool ColumnEditable(int columnIndex)
        {
            if ((this.Columns[columnIndex].IsDataBound && (this.dataConnection != null)) && !this.dataConnection.AllowEdit)
            {
                return false;
            }
            return true;
        }

        private bool ColumnNeedsDisplayedState(DataGridViewColumn dataGridViewColumn)
        {
            if (dataGridViewColumn.Visible)
            {
                if (dataGridViewColumn.Frozen)
                {
                    DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    if (firstColumn.Index == dataGridViewColumn.Index)
                    {
                        return (this.displayedBandsInfo.NumDisplayedFrozenCols > 0);
                    }
                    return (this.Columns.GetColumnCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, firstColumn.Index, dataGridViewColumn.Index) < this.displayedBandsInfo.NumDisplayedFrozenCols);
                }
                int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
                if (firstDisplayedScrollingCol != -1)
                {
                    if (firstDisplayedScrollingCol == dataGridViewColumn.Index)
                    {
                        return (this.displayedBandsInfo.NumDisplayedScrollingCols > 0);
                    }
                    if (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, dataGridViewColumn.Index))
                    {
                        return (this.Columns.GetColumnCount(DataGridViewElementStates.Visible, firstDisplayedScrollingCol, dataGridViewColumn.Index) < this.displayedBandsInfo.NumDisplayedScrollingCols);
                    }
                }
            }
            return false;
        }

        private bool ColumnRelocationTarget(MouseEventArgs e, HitTestInfo hti, out int previousColumnIndex)
        {
            previousColumnIndex = -1;
            if ((((hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom) || (hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnHeader)) || ((hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnResizeLeft) || (hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnResizeRight))) || ((hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnHeaderLeft) || (hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnHeaderRight)))
            {
                if ((hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom) || (hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnHeader))
                {
                    int columnXFromIndex = this.GetColumnXFromIndex(hti.col);
                    int width = this.Columns[hti.col].Width;
                    if ((this.RightToLeftInternal && (e.X < (columnXFromIndex - (width / 2)))) || (!this.RightToLeftInternal && (e.X > (columnXFromIndex + (width / 2)))))
                    {
                        previousColumnIndex = hti.col;
                    }
                    else
                    {
                        DataGridViewColumn column = this.Columns.GetPreviousColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        if (column != null)
                        {
                            previousColumnIndex = column.Index;
                        }
                    }
                }
                else
                {
                    previousColumnIndex = ((hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnResizeRight) || (hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnHeaderRight)) ? hti.col : hti.adjacentCol;
                }
                DataGridViewColumn column2 = null;
                if (previousColumnIndex != -1)
                {
                    column2 = this.Columns.GetNextColumn(this.Columns[previousColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                }
                if (((this.trackColumn != previousColumnIndex) && ((previousColumnIndex != -1) || (hti.col != this.trackColumn))) && ((column2 == null) || (this.trackColumn != column2.Index)))
                {
                    return true;
                }
            }
            else if (((hti.typeInternal == DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft) || (hti.typeInternal == DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight)) && (hti.col != this.trackColumn))
            {
                return true;
            }
            return false;
        }

        private static bool ColumnsDisplayInOrder(int columnIndex1, int columnDisplayIndex1, int columnIndex2, int columnDisplayIndex2) => 
            ((columnDisplayIndex1 < columnDisplayIndex2) || ((columnDisplayIndex1 == columnDisplayIndex2) && (columnIndex1 < columnIndex2)));

        public bool CommitEdit(DataGridViewDataErrorContexts context)
        {
            if (this.IsCurrentCellInEditMode)
            {
                DataGridViewCell currentCellInternal = this.CurrentCellInternal;
                DataGridViewDataErrorEventArgs args = this.CommitEdit(ref currentCellInternal, context, DataGridViewValidateCellInternal.Never, false, false, false, false, false);
                if (args != null)
                {
                    if (args.ThrowException)
                    {
                        throw args.Exception;
                    }
                    if (args.Cancel)
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        private bool CommitEdit(DataGridViewDataErrorContexts context, bool forCurrentCellChange, bool forCurrentRowChange)
        {
            if (this.dataGridViewOper[0x8000])
            {
                return false;
            }
            DataGridViewCell currentCellInternal = this.CurrentCellInternal;
            DataGridViewDataErrorEventArgs args = this.CommitEdit(ref currentCellInternal, context, forCurrentCellChange ? DataGridViewValidateCellInternal.Always : DataGridViewValidateCellInternal.WhenChanged, forCurrentCellChange, forCurrentCellChange, forCurrentRowChange, forCurrentRowChange, false);
            if (args != null)
            {
                if (args.ThrowException)
                {
                    throw args.Exception;
                }
                if (args.Cancel)
                {
                    return false;
                }
                args = this.CancelEditPrivate();
                if (args != null)
                {
                    if (args.ThrowException)
                    {
                        throw args.Exception;
                    }
                    if (args.Cancel)
                    {
                        return false;
                    }
                }
            }
            if (forCurrentRowChange && forCurrentCellChange)
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return false;
                }
                int x = this.ptCurrentCell.X;
                int y = this.ptCurrentCell.Y;
                if (this.OnRowValidating(ref currentCellInternal, x, y))
                {
                    if (!this.IsInnerCellOutOfBounds(x, y))
                    {
                        this.OnRowEnter(ref currentCellInternal, x, y, true, true);
                        if (this.IsInnerCellOutOfBounds(x, y))
                        {
                            return false;
                        }
                        this.OnCellEnter(ref currentCellInternal, x, y);
                    }
                    return false;
                }
                if (this.IsInnerCellOutOfBounds(x, y))
                {
                    return false;
                }
                this.OnRowValidated(ref currentCellInternal, x, y);
            }
            return true;
        }

        private DataGridViewDataErrorEventArgs CommitEdit(ref DataGridViewCell dataGridViewCurrentCell, DataGridViewDataErrorContexts context, DataGridViewValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave)
        {
            if (validateCell == DataGridViewValidateCellInternal.Always)
            {
                if (fireCellLeave)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        return null;
                    }
                    this.OnCellLeave(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                }
                if (fireRowLeave)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        return null;
                    }
                    this.OnRowLeave(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                }
                if (fireLeave)
                {
                    base.OnLeave(EventArgs.Empty);
                    if ((this.ptCurrentCell.X > -1) && (this.ptCurrentCell.Y > -1))
                    {
                        this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                    }
                }
                if (this.CanValidateDataBoundDataGridViewCell(dataGridViewCurrentCell))
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        return null;
                    }
                    if (this.OnCellValidating(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, context))
                    {
                        if (fireRowEnter)
                        {
                            if (this.ptCurrentCell.X == -1)
                            {
                                return null;
                            }
                            this.OnRowEnter(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, true, true);
                        }
                        if (fireCellEnter)
                        {
                            if (this.ptCurrentCell.X == -1)
                            {
                                return null;
                            }
                            this.OnCellEnter(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                        }
                        if (this.ptCurrentCell.X == -1)
                        {
                            return null;
                        }
                        return new DataGridViewDataErrorEventArgs(null, this.ptCurrentCell.X, this.ptCurrentCell.Y, context) { Cancel = true };
                    }
                    if (!this.IsCurrentCellInEditMode || !this.IsCurrentCellDirty)
                    {
                        if (this.ptCurrentCell.X == -1)
                        {
                            return null;
                        }
                        this.OnCellValidated(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                    }
                }
            }
            if (((this.ptCurrentCell.X != -1) && this.IsCurrentCellInEditMode) && this.IsCurrentCellDirty)
            {
                bool flag2 = this.CanValidateDataBoundDataGridViewCell(dataGridViewCurrentCell);
                if (flag2)
                {
                    Exception exception;
                    object editingControlFormattedValue;
                    if (validateCell == DataGridViewValidateCellInternal.WhenChanged)
                    {
                        if (this.ptCurrentCell.X == -1)
                        {
                            return null;
                        }
                        if (this.OnCellValidating(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, context))
                        {
                            if (this.ptCurrentCell.X == -1)
                            {
                                return null;
                            }
                            return new DataGridViewDataErrorEventArgs(null, this.ptCurrentCell.X, this.ptCurrentCell.Y, context) { Cancel = true };
                        }
                    }
                    if (this.editingControl != null)
                    {
                        editingControlFormattedValue = ((IDataGridViewEditingControl) this.editingControl).GetEditingControlFormattedValue(context);
                    }
                    else
                    {
                        editingControlFormattedValue = ((IDataGridViewEditingCell) this.CurrentCellInternal).GetEditingCellFormattedValue(context);
                    }
                    if (!this.PushFormattedValue(ref dataGridViewCurrentCell, editingControlFormattedValue, out exception))
                    {
                        if (this.ptCurrentCell.X == -1)
                        {
                            return null;
                        }
                        DataGridViewDataErrorEventArgs e = new DataGridViewDataErrorEventArgs(exception, this.ptCurrentCell.X, this.ptCurrentCell.Y, context) {
                            Cancel = true
                        };
                        this.OnDataErrorInternal(e);
                        return e;
                    }
                    if (!this.IsCurrentCellInEditMode)
                    {
                        return null;
                    }
                    this.uneditedFormattedValue = editingControlFormattedValue;
                }
                if (this.editingControl != null)
                {
                    ((IDataGridViewEditingControl) this.editingControl).EditingControlValueChanged = false;
                }
                else
                {
                    ((IDataGridViewEditingCell) this.CurrentCellInternal).EditingCellValueChanged = false;
                }
                this.IsCurrentCellDirtyInternal = false;
                this.IsCurrentRowDirtyInternal = true;
                if (flag2 && ((validateCell == DataGridViewValidateCellInternal.Always) || (validateCell == DataGridViewValidateCellInternal.WhenChanged)))
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        return null;
                    }
                    this.OnCellValidated(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                }
            }
            return null;
        }

        private bool CommitEditForOperation(int columnIndex, int rowIndex, bool forCurrentCellChange)
        {
            if (forCurrentCellChange)
            {
                if (!this.EndEdit(DataGridViewDataErrorContexts.CurrentCellChange | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.Always, true, true, this.ptCurrentCell.Y != rowIndex, this.ptCurrentCell.Y != rowIndex, false, this.EditMode != DataGridViewEditMode.EditOnEnter, false, false))
                {
                    return false;
                }
                if ((this.ptCurrentCell.Y != rowIndex) && (this.ptCurrentCell.Y != -1))
                {
                    DataGridViewCell dataGridViewCell = null;
                    int x = this.ptCurrentCell.X;
                    int y = this.ptCurrentCell.Y;
                    if (this.OnRowValidating(ref dataGridViewCell, x, y))
                    {
                        if (!this.IsInnerCellOutOfBounds(x, y))
                        {
                            this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
                            if (this.IsInnerCellOutOfBounds(x, y))
                            {
                                return false;
                            }
                            this.OnCellEnter(ref dataGridViewCell, x, y);
                            if (this.IsInnerCellOutOfBounds(x, y))
                            {
                                return false;
                            }
                            if ((this.Focused && !this.IsCurrentCellInEditMode) && ((this.EditMode == DataGridViewEditMode.EditOnEnter) || ((this.EditMode != DataGridViewEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null))))
                            {
                                this.BeginEditInternal(true);
                            }
                        }
                        return false;
                    }
                    if (this.IsInnerCellOutOfBounds(x, y))
                    {
                        return false;
                    }
                    this.OnRowValidated(ref dataGridViewCell, x, y);
                }
            }
            else if (!this.CommitEdit(DataGridViewDataErrorContexts.Scroll | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, false, this.ptCurrentCell.Y != rowIndex))
            {
                return false;
            }
            if (this.IsColumnOutOfBounds(columnIndex))
            {
                return false;
            }
            if (rowIndex >= this.Rows.Count)
            {
                int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
                if ((forCurrentCellChange && (this.ptCurrentCell.X == -1)) && (lastRow != -1))
                {
                    this.SetAndSelectCurrentCellAddress(columnIndex, lastRow, true, false, false, false, false);
                }
                return false;
            }
            if ((rowIndex > -1) && ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None))
            {
                return false;
            }
            return true;
        }

        internal void CompleteCellsCollection(DataGridViewRow dataGridViewRow)
        {
            int count = dataGridViewRow.Cells.Count;
            if (this.Columns.Count > count)
            {
                int index = 0;
                DataGridViewCell[] dataGridViewCells = new DataGridViewCell[this.Columns.Count - count];
                for (int i = count; i < this.Columns.Count; i++)
                {
                    if (this.Columns[i].CellTemplate == null)
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_AColumnHasNoCellTemplate"));
                    }
                    dataGridViewCells[index] = (DataGridViewCell) this.Columns[i].CellTemplate.Clone();
                    index++;
                }
                dataGridViewRow.Cells.AddRange(dataGridViewCells);
            }
        }

        private int ComputeFirstVisibleScrollingColumn()
        {
            if (this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen) >= this.layout.Data.Width)
            {
                this.negOffset = 0;
                return -1;
            }
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
            if (this.horizontalOffset == 0)
            {
                this.negOffset = 0;
                if (firstColumn != null)
                {
                    return firstColumn.Index;
                }
                return -1;
            }
            int num = 0;
            while (firstColumn != null)
            {
                num += firstColumn.Thickness;
                if (num > this.horizontalOffset)
                {
                    break;
                }
                firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
            }
            if (firstColumn == null)
            {
                firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                if (firstColumn == null)
                {
                    this.negOffset = 0;
                    return -1;
                }
                if (this.negOffset != this.horizontalOffset)
                {
                    this.negOffset = 0;
                }
                return firstColumn.Index;
            }
            this.negOffset = firstColumn.Thickness - (num - this.horizontalOffset);
            return firstColumn.Index;
        }

        private int ComputeHeightOfFittingTrailingScrollingRows(int totalVisibleFrozenHeight)
        {
            int num = this.layout.Data.Height - totalVisibleFrozenHeight;
            int height = 0;
            int num3 = 0;
            int count = this.Rows.Count;
            if ((count == 0) || (num <= 0))
            {
                return 0;
            }
            count--;
            DataGridViewElementStates rowState = this.Rows.GetRowState(count);
            if ((rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
            {
                return 0;
            }
            if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
            {
                count = this.Rows.GetPreviousRow(count, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
            }
            if (count != -1)
            {
                height = this.Rows.SharedRow(count).GetHeight(count);
                if (height > num)
                {
                    return height;
                }
            }
            while ((count != -1) && ((num3 + height) <= num))
            {
                num3 += height;
                count = this.Rows.GetPreviousRow(count, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                if (count != -1)
                {
                    height = this.Rows.SharedRow(count).GetHeight(count);
                }
            }
            return num3;
        }

        private int ComputeHeightOfScrolledOffRows()
        {
            int num = 0;
            if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
            {
                int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                if (firstRow == -1)
                {
                    return num;
                }
                while (firstRow != this.displayedBandsInfo.FirstDisplayedScrollingRow)
                {
                    num += this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                    firstRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible);
                }
            }
            return num;
        }

        private int ComputeHeightOfTrailingScrollingRows()
        {
            if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
            {
                int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
                return (this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, lastRow) + this.Rows.SharedRow(lastRow).GetHeight(lastRow));
            }
            return 0;
        }

        private bool ComputeLayout()
        {
            this.ClearRegionCache();
            LayoutData data = new LayoutData(this.layout);
            Rectangle resizeBoxRect = this.layout.ResizeBoxRect;
            if ((this.normalClientRectangle.Width > 0) || (this.normalClientRectangle.Height > 0))
            {
                data.Inside = this.normalClientRectangle;
            }
            else
            {
                data.Inside = base.ClientRectangle;
            }
            Rectangle inside = data.Inside;
            int borderWidth = this.BorderWidth;
            inside.Inflate(-borderWidth, -borderWidth);
            if (inside.Height < 0)
            {
                inside.Height = 0;
            }
            if (inside.Width < 0)
            {
                inside.Width = 0;
            }
            Rectangle rectangle3 = inside;
            if (this.layout.ColumnHeadersVisible)
            {
                Rectangle rectangle4 = rectangle3;
                rectangle4.Height = Math.Min(this.columnHeadersHeight, rectangle4.Height);
                rectangle3.Y += rectangle4.Height;
                rectangle3.Height -= rectangle4.Height;
                data.ColumnHeaders = rectangle4;
            }
            else
            {
                data.ColumnHeaders = Rectangle.Empty;
            }
            if (this.layout.RowHeadersVisible)
            {
                Rectangle rectangle5 = rectangle3;
                rectangle5.Width = Math.Min(this.rowHeadersWidth, rectangle5.Width);
                if (this.RightToLeftInternal)
                {
                    rectangle5.X += rectangle3.Width - rectangle5.Width;
                }
                else
                {
                    rectangle3.X += rectangle5.Width;
                }
                rectangle3.Width -= rectangle5.Width;
                data.RowHeaders = rectangle5;
                if (this.layout.ColumnHeadersVisible)
                {
                    Rectangle columnHeaders = data.ColumnHeaders;
                    Rectangle rectangle6 = columnHeaders;
                    rectangle6.Width = Math.Min(this.rowHeadersWidth, rectangle6.Width);
                    columnHeaders.Width -= rectangle6.Width;
                    if (this.RightToLeftInternal)
                    {
                        rectangle6.X += rectangle3.Width;
                    }
                    else
                    {
                        columnHeaders.X += rectangle6.Width;
                    }
                    data.TopLeftHeader = rectangle6;
                    data.ColumnHeaders = columnHeaders;
                }
                else
                {
                    data.TopLeftHeader = Rectangle.Empty;
                }
            }
            else
            {
                data.RowHeaders = Rectangle.Empty;
                data.TopLeftHeader = Rectangle.Empty;
            }
            if (this.SingleVerticalBorderAdded)
            {
                if (!this.RightToLeftInternal)
                {
                    rectangle3.X++;
                }
                if (rectangle3.Width > 0)
                {
                    rectangle3.Width--;
                }
            }
            if (this.SingleHorizontalBorderAdded)
            {
                rectangle3.Y++;
                if (rectangle3.Height > 0)
                {
                    rectangle3.Height--;
                }
            }
            data.Data = rectangle3;
            data.Inside = inside;
            this.layout = data;
            this.layout.dirty = false;
            bool flag = this.AdjustFillingColumns();
            this.layout = data;
            this.LayoutScrollBars();
            if (!resizeBoxRect.Equals(this.layout.ResizeBoxRect) && !this.layout.ResizeBoxRect.IsEmpty)
            {
                base.Invalidate(this.layout.ResizeBoxRect);
            }
            return flag;
        }

        private void ComputeLayoutShortcut(bool computeVisibleRows)
        {
            if (computeVisibleRows)
            {
                this.ComputeVisibleRows();
            }
            if (this.vertScrollBar.Enabled)
            {
                int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
                int num2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                int num3 = this.vertScrollBar.Value;
                int num4 = Math.Max(((this.vertScrollBar.Height - (2 * SystemInformation.VerticalScrollBarArrowHeight)) * this.vertScrollBar.LargeChange) / this.vertScrollBar.Maximum, 8);
                this.vertScrollBar.Maximum = rowsHeight - num2;
                this.vertScrollBar.Value = this.ComputeHeightOfScrolledOffRows();
                this.vertScrollBar.LargeChange = this.layout.Data.Height - num2;
                this.verticalOffset = this.vertScrollBar.Value;
                if (this.vertScrollBar.Visible && ((num3 != this.verticalOffset) || (num4 != Math.Max(((this.vertScrollBar.Height - (2 * SystemInformation.VerticalScrollBarArrowHeight)) * this.vertScrollBar.LargeChange) / this.vertScrollBar.Maximum, 8))))
                {
                    this.vertScrollBar.Invalidate();
                }
            }
        }

        private void ComputeVisibleColumns()
        {
            DataGridViewColumn dataGridViewColumnStart = null;
            int num = 0;
            int num2 = 0;
            int width = this.layout.Data.Width;
            int num4 = 0;
            int num5 = 0;
            int num6 = -1;
            int index = -1;
            int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
            if ((width <= 0) || (this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0))
            {
                this.displayedBandsInfo.FirstDisplayedFrozenCol = -1;
                this.displayedBandsInfo.NumDisplayedFrozenCols = 0;
                this.displayedBandsInfo.FirstDisplayedScrollingCol = -1;
                this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
                this.displayedBandsInfo.LastDisplayedFrozenCol = -1;
                this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
            }
            else
            {
                for (dataGridViewColumnStart = this.Columns.GetFirstColumn(DataGridViewElementStates.None); dataGridViewColumnStart != null; dataGridViewColumnStart = this.Columns.GetNextColumn(dataGridViewColumnStart, DataGridViewElementStates.None, DataGridViewElementStates.None))
                {
                    if (!dataGridViewColumnStart.Frozen && dataGridViewColumnStart.Visible)
                    {
                        break;
                    }
                    if (dataGridViewColumnStart.Visible)
                    {
                        if (num6 == -1)
                        {
                            num6 = dataGridViewColumnStart.Index;
                        }
                        num4 += dataGridViewColumnStart.Width;
                        num5++;
                        index = dataGridViewColumnStart.Index;
                        if (num4 >= width)
                        {
                            break;
                        }
                    }
                }
                if ((num4 < width) && (firstDisplayedScrollingCol >= 0))
                {
                    dataGridViewColumnStart = this.Columns[firstDisplayedScrollingCol];
                    if (dataGridViewColumnStart.Frozen)
                    {
                        dataGridViewColumnStart = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                        this.negOffset = 0;
                        if (dataGridViewColumnStart == null)
                        {
                            this.displayedBandsInfo.FirstDisplayedFrozenCol = num6;
                            this.displayedBandsInfo.LastDisplayedFrozenCol = index;
                            this.displayedBandsInfo.NumDisplayedFrozenCols = num5;
                            this.displayedBandsInfo.FirstDisplayedScrollingCol = this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
                            this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
                            return;
                        }
                        firstDisplayedScrollingCol = dataGridViewColumnStart.Index;
                    }
                    num4 -= this.negOffset;
                    while ((num4 < width) && (dataGridViewColumnStart != null))
                    {
                        num4 += dataGridViewColumnStart.Thickness;
                        num2++;
                        dataGridViewColumnStart = this.Columns.GetNextColumn(dataGridViewColumnStart, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    }
                    num = num2;
                    if (num4 < width)
                    {
                        bool flag = false;
                        if (this.negOffset > 0)
                        {
                            flag = true;
                            if ((width - num4) > this.negOffset)
                            {
                                num4 += this.negOffset;
                                this.horizontalOffset -= this.negOffset;
                                this.negOffset = 0;
                            }
                            else
                            {
                                this.horizontalOffset -= width - num4;
                                this.negOffset -= width - num4;
                                num4 = width;
                            }
                        }
                        if ((num4 < width) && (this.horizontalOffset > 0))
                        {
                            dataGridViewColumnStart = this.Columns.GetPreviousColumn(this.Columns[firstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                            while ((dataGridViewColumnStart != null) && ((num4 + dataGridViewColumnStart.Thickness) <= width))
                            {
                                num4 += dataGridViewColumnStart.Thickness;
                                num2++;
                                flag = true;
                                firstDisplayedScrollingCol = dataGridViewColumnStart.Index;
                                this.horizontalOffset -= dataGridViewColumnStart.Thickness;
                                dataGridViewColumnStart = this.Columns.GetPreviousColumn(dataGridViewColumnStart, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                            }
                        }
                        if ((num4 < width) && (this.horizontalOffset > 0))
                        {
                            dataGridViewColumnStart = this.Columns.GetPreviousColumn(this.Columns[firstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                            firstDisplayedScrollingCol = dataGridViewColumnStart.Index;
                            this.negOffset = (dataGridViewColumnStart.Thickness - width) + num4;
                            this.horizontalOffset -= width - num4;
                            num2++;
                            flag = true;
                            num4 = width;
                        }
                        num = num2;
                        if (flag)
                        {
                            this.InvalidateData();
                            base.Invalidate(this.layout.ColumnHeaders);
                        }
                    }
                    int num9 = num - 1;
                    if (num4 > width)
                    {
                        num9--;
                    }
                    if (num9 < 0)
                    {
                        this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
                    }
                    else
                    {
                        dataGridViewColumnStart = this.Columns[firstDisplayedScrollingCol];
                        for (int i = 0; i < num9; i++)
                        {
                            dataGridViewColumnStart = this.Columns.GetNextColumn(dataGridViewColumnStart, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        }
                        this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = dataGridViewColumnStart.Index;
                    }
                }
                else
                {
                    this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
                }
                this.displayedBandsInfo.FirstDisplayedFrozenCol = num6;
                this.displayedBandsInfo.LastDisplayedFrozenCol = index;
                this.displayedBandsInfo.NumDisplayedFrozenCols = num5;
                this.displayedBandsInfo.FirstDisplayedScrollingCol = firstDisplayedScrollingCol;
                this.displayedBandsInfo.NumDisplayedScrollingCols = num;
            }
        }

        private void ComputeVisibleRows()
        {
            int num = -1;
            int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            int num3 = -1;
            int num4 = -1;
            int num5 = 0;
            int height = this.layout.Data.Height;
            int num7 = 0;
            int num8 = 0;
            int count = this.Rows.Count;
            if ((height <= 0) || (count == 0))
            {
                this.displayedBandsInfo.NumDisplayedFrozenRows = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = this.displayedBandsInfo.NumDisplayedScrollingRows = this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0;
                this.displayedBandsInfo.FirstDisplayedFrozenRow = this.displayedBandsInfo.FirstDisplayedScrollingRow = this.displayedBandsInfo.LastDisplayedFrozenRow = this.displayedBandsInfo.LastDisplayedScrollingRow = -1;
            }
            else
            {
                int rowIndex = 0;
                while (rowIndex < count)
                {
                    DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
                    if (((rowState & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None) && ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None))
                    {
                        break;
                    }
                    if ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
                    {
                        num7 += this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
                        if (num == -1)
                        {
                            num = rowIndex;
                        }
                        num3 = rowIndex;
                        if (num7 <= height)
                        {
                            num5++;
                        }
                        if (num7 >= height)
                        {
                            break;
                        }
                    }
                    rowIndex++;
                }
                if (num7 > height)
                {
                    this.displayedBandsInfo.NumDisplayedFrozenRows = num5 + 1;
                }
                else
                {
                    this.displayedBandsInfo.NumDisplayedFrozenRows = num5;
                }
                if ((num7 >= height) || (rowIndex >= count))
                {
                    this.displayedBandsInfo.NumDisplayedScrollingRows = this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0;
                    firstDisplayedScrollingRow = -1;
                }
                else
                {
                    if (firstDisplayedScrollingRow == -1)
                    {
                        firstDisplayedScrollingRow = rowIndex;
                    }
                    while ((firstDisplayedScrollingRow < count) && (((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None) || ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)))
                    {
                        firstDisplayedScrollingRow++;
                    }
                    for (int i = firstDisplayedScrollingRow; i < count; i++)
                    {
                        if ((this.Rows.GetRowState(i) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
                        {
                            num7 += this.Rows.SharedRow(i).GetHeight(i);
                            num8++;
                            num4 = i;
                        }
                        if (num7 >= height)
                        {
                            break;
                        }
                    }
                    if (num7 < height)
                    {
                        for (int j = firstDisplayedScrollingRow - 1; j >= num5; j--)
                        {
                            if ((this.Rows.GetRowState(j) & (DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen)) == DataGridViewElementStates.Visible)
                            {
                                int num13 = this.Rows.SharedRow(j).GetHeight(j);
                                if ((num7 + num13) > height)
                                {
                                    break;
                                }
                                num7 += num13;
                                firstDisplayedScrollingRow = j;
                                num8++;
                                num4 = j;
                            }
                        }
                    }
                    this.displayedBandsInfo.NumDisplayedScrollingRows = num8;
                    if (num7 > height)
                    {
                        this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = num8 - 1;
                    }
                    else
                    {
                        this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = num8;
                    }
                    if (num8 == 0)
                    {
                        firstDisplayedScrollingRow = -1;
                    }
                }
                this.displayedBandsInfo.FirstDisplayedFrozenRow = num;
                this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
                this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = num5;
                this.displayedBandsInfo.LastDisplayedFrozenRow = num3;
                this.displayedBandsInfo.LastDisplayedScrollingRow = num4;
            }
        }

        private Point ConvertCellToGridCoord(int columnIndex, int rowIndex, int x, int y)
        {
            int columnXFromIndex;
            int rowYFromIndex;
            if (columnIndex > -1)
            {
                columnXFromIndex = this.GetColumnXFromIndex(columnIndex);
                if (this.RightToLeftInternal)
                {
                    columnXFromIndex -= this.Columns[columnIndex].Width;
                }
            }
            else if (this.RightToLeftInternal)
            {
                columnXFromIndex = this.layout.RowHeaders.Left - 1;
            }
            else
            {
                columnXFromIndex = this.layout.RowHeaders.Left;
            }
            if (rowIndex > -1)
            {
                rowYFromIndex = this.GetRowYFromIndex(rowIndex);
            }
            else
            {
                rowYFromIndex = this.layout.ColumnHeaders.Top;
            }
            return new Point(columnXFromIndex + x, rowYFromIndex + y);
        }

        private void CorrectColumnDisplayIndexesAfterDeletion(DataGridViewColumn dataGridViewColumn)
        {
            try
            {
                this.dataGridViewOper[0x800] = true;
                foreach (DataGridViewColumn column in this.Columns)
                {
                    if (column.DisplayIndex > dataGridViewColumn.DisplayIndex)
                    {
                        column.DisplayIndexInternal = column.DisplayIndex - 1;
                        column.DisplayIndexHasChanged = true;
                    }
                }
                this.FlushDisplayIndexChanged(true);
            }
            finally
            {
                this.dataGridViewOper[0x800] = false;
                this.FlushDisplayIndexChanged(false);
            }
        }

        private void CorrectColumnDisplayIndexesAfterInsertion(DataGridViewColumn dataGridViewColumn)
        {
            try
            {
                this.dataGridViewOper[0x800] = true;
                foreach (DataGridViewColumn column in this.Columns)
                {
                    if ((column != dataGridViewColumn) && (column.DisplayIndex >= dataGridViewColumn.DisplayIndex))
                    {
                        column.DisplayIndexInternal = column.DisplayIndex + 1;
                        column.DisplayIndexHasChanged = true;
                    }
                }
                this.FlushDisplayIndexChanged(true);
            }
            finally
            {
                this.dataGridViewOper[0x800] = false;
                this.FlushDisplayIndexChanged(false);
            }
        }

        private void CorrectColumnFrozenState(DataGridViewColumn dataGridViewColumn, int anticipatedColumnIndex)
        {
            int num;
            DataGridViewColumn columnAtDisplayIndex;
            DataGridViewColumn column2;
            if ((dataGridViewColumn.DisplayIndex == -1) || (dataGridViewColumn.DisplayIndex > this.Columns.Count))
            {
                num = anticipatedColumnIndex;
            }
            else
            {
                num = dataGridViewColumn.DisplayIndex;
            }
            int displayIndex = num - 1;
            do
            {
                columnAtDisplayIndex = this.Columns.GetColumnAtDisplayIndex(displayIndex);
                displayIndex--;
            }
            while ((displayIndex >= 0) && ((columnAtDisplayIndex == null) || !columnAtDisplayIndex.Visible));
            if (((columnAtDisplayIndex != null) && !columnAtDisplayIndex.Frozen) && dataGridViewColumn.Frozen)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddFrozenColumn"));
            }
            displayIndex = num;
            do
            {
                column2 = this.Columns.GetColumnAtDisplayIndex(displayIndex);
                displayIndex++;
            }
            while ((displayIndex < this.Columns.Count) && ((column2 == null) || !column2.Visible));
            if (((column2 != null) && column2.Frozen) && !dataGridViewColumn.Frozen)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddNonFrozenColumn"));
            }
        }

        private void CorrectColumnFrozenStates(DataGridViewColumn[] dataGridViewColumns)
        {
            DataGridViewColumn column;
            DataGridView view = new DataGridView();
            foreach (DataGridViewColumn column2 in this.Columns)
            {
                column = (DataGridViewColumn) column2.Clone();
                column.DisplayIndex = column2.DisplayIndex;
                view.Columns.Add(column);
            }
            foreach (DataGridViewColumn column3 in dataGridViewColumns)
            {
                column = (DataGridViewColumn) column3.Clone();
                column.DisplayIndex = column3.DisplayIndex;
                view.Columns.Add(column);
            }
        }

        private void CorrectColumnFrozenStates(DataGridViewColumn dataGridViewColumn, bool frozenStateChanging)
        {
            DataGridViewColumn column;
            if ((!dataGridViewColumn.Frozen || frozenStateChanging) && (dataGridViewColumn.Frozen || !frozenStateChanging))
            {
                column = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                if (column == null)
                {
                    DataGridViewColumn dataGridViewColumnStart = dataGridViewColumn;
                    do
                    {
                        column = this.Columns.GetNextColumn(dataGridViewColumnStart, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        if (column != null)
                        {
                            dataGridViewColumnStart = column;
                        }
                    }
                    while (column != null);
                    if (dataGridViewColumnStart != dataGridViewColumn)
                    {
                        column = dataGridViewColumnStart;
                    }
                }
                while ((column != null) && this.Columns.DisplayInOrder(dataGridViewColumn.Index, column.Index))
                {
                    column.Frozen = false;
                    column = this.Columns.GetPreviousColumn(column, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, DataGridViewElementStates.None);
                }
            }
            else
            {
                column = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, DataGridViewElementStates.None);
                if (column == null)
                {
                    DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
                    if (firstColumn != dataGridViewColumn)
                    {
                        column = firstColumn;
                    }
                }
                while ((column != null) && this.Columns.DisplayInOrder(column.Index, dataGridViewColumn.Index))
                {
                    column.Frozen = true;
                    column = this.Columns.GetNextColumn(column, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                }
            }
        }

        private void CorrectColumnFrozenStatesForMove(DataGridViewColumn dataGridViewColumn, int newDisplayIndex)
        {
            if ((dataGridViewColumn.Visible && ((newDisplayIndex >= dataGridViewColumn.DisplayIndex) || !dataGridViewColumn.Frozen)) && ((newDisplayIndex <= dataGridViewColumn.DisplayIndex) || dataGridViewColumn.Frozen))
            {
                int num2;
                int count = this.Columns.Count;
                if (newDisplayIndex < dataGridViewColumn.DisplayIndex)
                {
                    DataGridViewColumn columnAtDisplayIndex;
                    num2 = newDisplayIndex;
                    do
                    {
                        columnAtDisplayIndex = this.Columns.GetColumnAtDisplayIndex(num2);
                        num2++;
                    }
                    while ((num2 < count) && (((columnAtDisplayIndex == null) || (columnAtDisplayIndex == dataGridViewColumn)) || !columnAtDisplayIndex.Visible));
                    if ((columnAtDisplayIndex != null) && columnAtDisplayIndex.Frozen)
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotMoveNonFrozenColumn"));
                    }
                }
                else
                {
                    DataGridViewColumn column2;
                    num2 = newDisplayIndex;
                    do
                    {
                        column2 = this.Columns.GetColumnAtDisplayIndex(num2);
                        num2--;
                    }
                    while ((num2 >= 0) && ((column2 == null) || !column2.Visible));
                    if ((column2 != null) && !column2.Frozen)
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotMoveFrozenColumn"));
                    }
                }
            }
        }

        private void CorrectColumnIndexesAfterDeletion(DataGridViewColumn dataGridViewColumn)
        {
            for (int i = dataGridViewColumn.Index; i < this.Columns.Count; i++)
            {
                this.Columns[i].IndexInternal = this.Columns[i].Index - 1;
            }
        }

        private void CorrectColumnIndexesAfterInsertion(DataGridViewColumn dataGridViewColumn, int insertionCount)
        {
            for (int i = dataGridViewColumn.Index + insertionCount; i < this.Columns.Count; i++)
            {
                this.Columns[i].IndexInternal = i;
            }
        }

        private void CorrectFocus(bool onlyIfGridHasFocus)
        {
            if ((!onlyIfGridHasFocus || this.Focused) && (this.editingControl != null))
            {
                this.editingControl.FocusInternal();
            }
        }

        private void CorrectRowFrozenState(DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, int anticipatedRowIndex)
        {
            int rowIndex = this.Rows.GetPreviousRow(anticipatedRowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
            if (((rowIndex != -1) && ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)) && ((rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None))
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddFrozenRow"));
            }
            int num2 = this.Rows.GetNextRow((rowIndex == -1) ? (anticipatedRowIndex - 1) : rowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
            if (((num2 != -1) && ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)) && ((rowState & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None))
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddNonFrozenRow"));
            }
        }

        private void CorrectRowFrozenStates(DataGridViewRow[] dataGridViewRows, int rowIndexInserted)
        {
            bool flag = false;
            bool flag2 = true;
            bool flag3 = false;
            int previousRow = this.Rows.GetPreviousRow(rowIndexInserted, DataGridViewElementStates.Visible);
            if (previousRow != -1)
            {
                flag2 = (this.Rows.GetRowState(previousRow) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
            }
            previousRow = this.Rows.GetNextRow(rowIndexInserted - 1, DataGridViewElementStates.Visible);
            if (previousRow != -1)
            {
                flag = true;
                flag3 = (this.Rows.GetRowState(previousRow) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
            }
            for (int i = 0; i < dataGridViewRows.Length; i++)
            {
                bool frozen = dataGridViewRows[i].Frozen;
                if (!flag2 && frozen)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddFrozenRow"));
                }
                flag2 = frozen;
                if (((i == (dataGridViewRows.Length - 1)) && !frozen) && (flag && flag3))
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddNonFrozenRow"));
                }
            }
        }

        private void CorrectRowFrozenStates(DataGridViewRow dataGridViewRow, int rowIndex, bool frozenStateChanging)
        {
            int nextRow;
            if ((((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None) || frozenStateChanging) && (((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None) || !frozenStateChanging))
            {
                nextRow = this.Rows.GetNextRow(rowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                if (nextRow == -1)
                {
                    int indexStart = rowIndex;
                    do
                    {
                        nextRow = this.Rows.GetNextRow(indexStart, DataGridViewElementStates.Visible);
                        if (nextRow != -1)
                        {
                            indexStart = nextRow;
                        }
                    }
                    while (nextRow != -1);
                    if (indexStart != rowIndex)
                    {
                        nextRow = indexStart;
                    }
                }
                while ((nextRow != -1) && (nextRow > rowIndex))
                {
                    this.Rows.SetRowState(nextRow, DataGridViewElementStates.Frozen, false);
                    nextRow = this.Rows.GetPreviousRow(nextRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                }
            }
            else
            {
                nextRow = this.Rows.GetPreviousRow(rowIndex, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                if (nextRow == -1)
                {
                    int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                    if (firstRow != rowIndex)
                    {
                        nextRow = firstRow;
                    }
                }
                while ((nextRow != -1) && (nextRow < rowIndex))
                {
                    this.Rows.SetRowState(nextRow, DataGridViewElementStates.Frozen, true);
                    nextRow = this.Rows.GetNextRow(nextRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                }
            }
        }

        private void CorrectRowIndexesAfterDeletion(int rowIndexDeleted)
        {
            int count = this.Rows.Count;
            for (int i = rowIndexDeleted; i < count; i++)
            {
                DataGridViewRow row = this.Rows.SharedRow(i);
                if (row.Index >= 0)
                {
                    row.IndexInternal = row.Index - 1;
                }
            }
            if (this.newRowIndex == rowIndexDeleted)
            {
                this.newRowIndex = -1;
            }
            else if (this.newRowIndex != -1)
            {
                this.newRowIndex--;
            }
        }

        private void CorrectRowIndexesAfterInsertion(int rowIndexInserted, int insertionCount)
        {
            int count = this.Rows.Count;
            for (int i = rowIndexInserted + insertionCount; i < count; i++)
            {
                DataGridViewRow row = this.Rows.SharedRow(i);
                if (row.Index >= 0)
                {
                    row.IndexInternal = row.Index + insertionCount;
                }
            }
            if (this.newRowIndex != -1)
            {
                this.newRowIndex += insertionCount;
            }
        }

        protected override AccessibleObject CreateAccessibilityInstance() => 
            new DataGridViewAccessibleObject(this);

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected virtual DataGridViewColumnCollection CreateColumnsInstance() => 
            new DataGridViewColumnCollection(this);

        protected override Control.ControlCollection CreateControlsInstance() => 
            new DataGridViewControlCollection(this);

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected virtual DataGridViewRowCollection CreateRowsInstance() => 
            new DataGridViewRowCollection(this);

        private System.Windows.Forms.NativeMethods.RECT[] CreateScrollableRegion(Rectangle scroll)
        {
            if (this.cachedScrollableRegion == null)
            {
                using (Region region = new Region(scroll))
                {
                    IntPtr zero = IntPtr.Zero;
                    using (Graphics graphics = base.CreateGraphicsInternal())
                    {
                        zero = region.GetHrgn(graphics);
                    }
                    if (zero != IntPtr.Zero)
                    {
                        this.cachedScrollableRegion = System.Windows.Forms.UnsafeNativeMethods.GetRectsFromRegion(zero);
                        System.Windows.Forms.IntSecurity.ObjectFromWin32Handle.Assert();
                        try
                        {
                            region.ReleaseHrgn(zero);
                        }
                        finally
                        {
                            CodeAccessPermission.RevertAssert();
                        }
                    }
                }
            }
            return this.cachedScrollableRegion;
        }

        private void DataGridViewHScrolled(object sender, ScrollEventArgs se)
        {
            if (base.Enabled)
            {
                if ((se.Type == ScrollEventType.SmallIncrement) || (se.Type == ScrollEventType.SmallDecrement))
                {
                    int columns = (se.Type == ScrollEventType.SmallIncrement) ? 1 : -1;
                    this.ScrollColumns(columns);
                    se.NewValue = this.HorizontalOffset;
                }
                else if (se.Type != ScrollEventType.EndScroll)
                {
                    this.HorizontalOffset = se.NewValue;
                }
            }
        }

        private void DataGridViewVScrolled(object sender, ScrollEventArgs se)
        {
            if (base.Enabled)
            {
                int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                switch (se.Type)
                {
                    case ScrollEventType.SmallDecrement:
                        if (this.vertScrollBar.Value != this.vertScrollBar.Minimum)
                        {
                            this.ScrollRowsByCount(-1, ScrollEventType.SmallDecrement);
                        }
                        se.NewValue = this.VerticalOffset;
                        return;

                    case ScrollEventType.SmallIncrement:
                        if ((this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow)) <= (this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight)))
                        {
                            this.ScrollRowsByCount(1, ScrollEventType.SmallIncrement);
                        }
                        se.NewValue = this.VerticalOffset;
                        return;

                    case ScrollEventType.LargeDecrement:
                        this.VerticalOffset -= this.vertScrollBar.LargeChange;
                        se.NewValue = this.VerticalOffset;
                        return;

                    case ScrollEventType.LargeIncrement:
                    {
                        int height = this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow);
                        this.VerticalOffset += Math.Max(height, this.vertScrollBar.LargeChange);
                        se.NewValue = this.VerticalOffset;
                        return;
                    }
                    case ScrollEventType.ThumbPosition:
                        return;

                    case ScrollEventType.ThumbTrack:
                    case ScrollEventType.First:
                    case ScrollEventType.Last:
                        if (se.NewValue < (this.vertScrollBar.Maximum - this.vertScrollBar.LargeChange))
                        {
                            this.VerticalOffset = se.NewValue;
                            return;
                        }
                        this.VerticalOffset = this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight);
                        return;
                }
            }
        }

        private void DiscardNewRow()
        {
            DataGridViewRowCancelEventArgs e = new DataGridViewRowCancelEventArgs(this.Rows[this.newRowIndex]);
            this.OnUserDeletingRow(e);
            if (!e.Cancel)
            {
                DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
                this.Rows.RemoveAtInternal(this.newRowIndex, false);
                DataGridViewRowEventArgs args2 = new DataGridViewRowEventArgs(dataGridViewRow);
                this.OnUserDeletedRow(args2);
                if (this.AllowUserToAddRowsInternal)
                {
                    this.newRowIndex = this.Rows.Count - 1;
                    this.OnDefaultValuesNeeded(new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]));
                    this.InvalidateRowPrivate(this.newRowIndex);
                }
            }
        }

        private void DiscardZonesInScrollingArea(ref Rectangle rectScrollingArea, int emptyBackgroundWidth, int emptyBackgroundHeight, int frozenVisibleRowsHeight, bool discardFrozenColumns, bool discardFrozenRows)
        {
            rectScrollingArea.Width -= emptyBackgroundWidth;
            rectScrollingArea.Height -= emptyBackgroundHeight;
            if (this.RightToLeftInternal)
            {
                rectScrollingArea.X += emptyBackgroundWidth;
            }
            if (discardFrozenColumns)
            {
                int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                if (!this.RightToLeftInternal)
                {
                    rectScrollingArea.X += columnsWidth;
                }
                rectScrollingArea.Width -= columnsWidth;
            }
            if (discardFrozenRows)
            {
                rectScrollingArea.Y += frozenVisibleRowsHeight;
                rectScrollingArea.Height -= frozenVisibleRowsHeight;
            }
        }

        public int DisplayedColumnCount(bool includePartialColumns)
        {
            int width = this.layout.Data.Width;
            int num2 = 0;
            int num3 = 0;
            int num4 = 0;
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            while ((firstColumn != null) && (num2 < width))
            {
                num4++;
                num2 += firstColumn.Thickness;
                if (num2 <= width)
                {
                    num3++;
                    firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, DataGridViewElementStates.None);
                }
            }
            if ((num2 < width) && (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0))
            {
                if (this.negOffset > 0)
                {
                    num2 -= this.negOffset;
                    num3--;
                }
                firstColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                while ((firstColumn != null) && (num2 < width))
                {
                    num4++;
                    num2 += firstColumn.Thickness;
                    if (num2 <= width)
                    {
                        num3++;
                        firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    }
                }
            }
            if (!includePartialColumns)
            {
                return num3;
            }
            return num4;
        }

        public int DisplayedRowCount(bool includePartialRow)
        {
            if (!includePartialRow)
            {
                return (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows + this.displayedBandsInfo.NumTotallyDisplayedScrollingRows);
            }
            return (this.displayedBandsInfo.NumDisplayedFrozenRows + this.displayedBandsInfo.NumDisplayedScrollingRows);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                this.dataGridViewOper[0x100000] = true;
                try
                {
                    for (int i = 0; i < this.Columns.Count; i++)
                    {
                        this.Columns[i].Dispose();
                    }
                    this.Columns.Clear();
                    this.UnwireScrollBarsEvents();
                    if (this.vertScrollBar != null)
                    {
                        this.vertScrollBar.Dispose();
                        this.vertScrollBar = null;
                    }
                    if (this.horizScrollBar != null)
                    {
                        this.horizScrollBar.Dispose();
                        this.horizScrollBar = null;
                    }
                    if (this.pens != null)
                    {
                        if (this.pens.Count > 0)
                        {
                            foreach (Pen pen in this.pens.Values)
                            {
                                pen.Dispose();
                            }
                            this.pens.Clear();
                        }
                        this.pens = null;
                    }
                    if (this.brushes != null)
                    {
                        if (this.brushes.Count > 0)
                        {
                            foreach (SolidBrush brush in this.brushes.Values)
                            {
                                brush.Dispose();
                            }
                            this.brushes.Clear();
                        }
                        this.brushes = null;
                    }
                    this.DisposeCachedGraphics();
                    if (this.placeholderStringFormat != null)
                    {
                        this.placeholderStringFormat.Dispose();
                        this.placeholderStringFormat = null;
                    }
                    if (this.latestEditingControl != null)
                    {
                        this.latestEditingControl.Dispose();
                        this.latestEditingControl = null;
                    }
                    if (this.editingControl != null)
                    {
                        this.editingControl.Dispose();
                        this.editingControl = null;
                    }
                    if (this.editingPanel != null)
                    {
                        this.editingPanel.Dispose();
                        this.editingPanel = null;
                    }
                    if (this.dataConnection != null)
                    {
                        this.dataConnection.Dispose();
                    }
                    this.toolTipControl.Dispose();
                }
                finally
                {
                    this.dataGridViewOper[0x100000] = false;
                }
            }
            base.Dispose(disposing);
        }

        private void DisposeCachedGraphics()
        {
            if (this.cachedGraphics != null)
            {
                this.cachedGraphics.Dispose();
                this.cachedGraphics = null;
            }
        }

        private void DrawColHeaderShadow(Graphics g, int mouseX)
        {
            Rectangle r = this.CalcColRelocationFeedbackRect(mouseX);
            this.DrawShadowRect(r);
            if (this.dataGridViewState2[0x400])
            {
                Rectangle rect = new Rectangle(0, this.layout.ColumnHeaders.Top, 3, this.layout.ColumnHeaders.Height);
                if (this.trackColumnEdge == -1)
                {
                    rect.X = this.GetColumnXFromIndex(this.Columns.GetFirstColumn(DataGridViewElementStates.Visible).Index);
                    if (this.RightToLeftInternal)
                    {
                        rect.X -= 3;
                    }
                }
                else
                {
                    int num = 0;
                    if (this.Columns.GetNextColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None) == null)
                    {
                        if (!this.RightToLeftInternal)
                        {
                            num = 3;
                        }
                    }
                    else if (this.RightToLeftInternal)
                    {
                        num = 0;
                    }
                    else
                    {
                        num = 2;
                    }
                    if (this.RightToLeftInternal)
                    {
                        rect.X = Math.Max(this.layout.ColumnHeaders.X, (this.GetColumnXFromIndex(this.trackColumnEdge) - this.Columns[this.trackColumnEdge].Width) - num);
                    }
                    else
                    {
                        rect.X = Math.Min((int) ((this.GetColumnXFromIndex(this.trackColumnEdge) + this.Columns[this.trackColumnEdge].Width) - num), (int) (this.layout.ColumnHeaders.Right - 3));
                    }
                }
                if (this.ApplyVisualStylesToHeaderCells)
                {
                    g.FillRectangle(this.GetCachedBrush(SystemColors.HotTrack), rect);
                }
                else
                {
                    ControlPaint.FillReversibleRectangle(base.RectangleToScreen(rect), System.Drawing.Color.White);
                }
            }
        }

        private void DrawColSplitBar(int mouseX)
        {
            Rectangle r = this.CalcColResizeFeedbackRect(mouseX);
            this.DrawSplitBar(r);
        }

        private void DrawRowSplitBar(int mouseY)
        {
            Rectangle r = this.CalcRowResizeFeedbackRect(mouseY);
            this.DrawSplitBar(r);
        }

        private void DrawShadowRect(Rectangle r)
        {
            IntPtr handle = base.Handle;
            IntPtr ptr2 = System.Windows.Forms.UnsafeNativeMethods.GetDCEx(new HandleRef(this, handle), System.Windows.Forms.NativeMethods.NullHandleRef, 0x402);
            IntPtr ptr3 = ControlPaint.CreateHalftoneHBRUSH();
            IntPtr ptr4 = System.Windows.Forms.SafeNativeMethods.SelectObject(new HandleRef(this, ptr2), new HandleRef(null, ptr3));
            System.Windows.Forms.SafeNativeMethods.PatBlt(new HandleRef(this, ptr2), r.X, r.Y, r.Width, 3, 0x5a0049);
            System.Windows.Forms.SafeNativeMethods.PatBlt(new HandleRef(this, ptr2), r.X, (r.Y + r.Height) - 3, r.Width, 3, 0x5a0049);
            System.Windows.Forms.SafeNativeMethods.PatBlt(new HandleRef(this, ptr2), r.X, r.Y + 3, 3, r.Height - 6, 0x5a0049);
            System.Windows.Forms.SafeNativeMethods.PatBlt(new HandleRef(this, ptr2), (r.X + r.Width) - 3, r.Y + 3, 3, r.Height - 6, 0x5a0049);
            System.Windows.Forms.SafeNativeMethods.SelectObject(new HandleRef(this, ptr2), new HandleRef(null, ptr4));
            System.Windows.Forms.SafeNativeMethods.DeleteObject(new HandleRef(null, ptr3));
            System.Windows.Forms.UnsafeNativeMethods.ReleaseDC(new HandleRef(this, handle), new HandleRef(this, ptr2));
        }

        private void DrawSplitBar(Rectangle r)
        {
            IntPtr handle = base.Handle;
            IntPtr ptr2 = System.Windows.Forms.UnsafeNativeMethods.GetDCEx(new HandleRef(this, handle), System.Windows.Forms.NativeMethods.NullHandleRef, 0x402);
            IntPtr ptr3 = ControlPaint.CreateHalftoneHBRUSH();
            IntPtr ptr4 = System.Windows.Forms.SafeNativeMethods.SelectObject(new HandleRef(this, ptr2), new HandleRef(null, ptr3));
            System.Windows.Forms.SafeNativeMethods.PatBlt(new HandleRef(this, ptr2), r.X, r.Y, r.Width, r.Height, 0x5a0049);
            System.Windows.Forms.SafeNativeMethods.SelectObject(new HandleRef(this, ptr2), new HandleRef(null, ptr4));
            System.Windows.Forms.SafeNativeMethods.DeleteObject(new HandleRef(null, ptr3));
            System.Windows.Forms.UnsafeNativeMethods.ReleaseDC(new HandleRef(this, handle), new HandleRef(this, ptr2));
        }

        private void EditingControls_Click(object sender, EventArgs e)
        {
            MouseEventArgs args = e as MouseEventArgs;
            if (args != null)
            {
                this.EditingControls_CommonMouseEventHandler(sender, args, DataGridViewMouseEvent.Click);
            }
        }

        private void EditingControls_CommonMouseEventHandler(object sender, MouseEventArgs e, DataGridViewMouseEvent dgvme)
        {
            int x = this.editingPanel.Location.X + e.X;
            int y = this.editingPanel.Location.Y + e.Y;
            if (sender == this.editingControl)
            {
                x += this.editingControl.Location.X;
                y += this.editingControl.Location.Y;
            }
            if ((dgvme == DataGridViewMouseEvent.MouseDown) && (e.Clicks == 1))
            {
                this.dataGridViewOper[0x1000] = false;
            }
            MouseEventArgs args = new MouseEventArgs(e.Button, e.Clicks, x, y, e.Delta);
            HitTestInfo info = this.HitTest(args.X, args.Y);
            int localX = args.X - info.ColumnX;
            if (this.RightToLeftInternal)
            {
                localX += (info.col == -1) ? this.RowHeadersWidth : this.Columns[info.col].Thickness;
            }
            DataGridViewCellMouseEventArgs args2 = new DataGridViewCellMouseEventArgs(info.col, info.row, localX, args.Y - info.RowY, args);
            try
            {
                this.dataGridViewState2[0x8000000] = true;
                if ((((dgvme == DataGridViewMouseEvent.MouseDown) || (dgvme == DataGridViewMouseEvent.Click)) || (dgvme == DataGridViewMouseEvent.MouseClick)) && ((((((DateTime.Now.Ticks - this.lastMouseClickInfo.timeStamp) / 0x2710L) <= SystemInformation.DoubleClickTime) && (e.Button == this.lastMouseClickInfo.button)) && ((e.Clicks == 1) && (args2.ColumnIndex == this.lastMouseClickInfo.col))) && (args2.RowIndex == this.lastMouseClickInfo.row)))
                {
                    Size doubleClickSize = SystemInformation.DoubleClickSize;
                    if ((Math.Abs((int) (args2.X - this.lastMouseClickInfo.x)) <= (doubleClickSize.Width / 2)) && (Math.Abs((int) (args2.Y - this.lastMouseClickInfo.y)) <= (doubleClickSize.Height / 2)))
                    {
                        args = new MouseEventArgs(e.Button, 2, x, y, e.Delta);
                        args2 = new DataGridViewCellMouseEventArgs(args2.ColumnIndex, args2.RowIndex, args2.X, args2.Y, args);
                        switch (dgvme)
                        {
                            case DataGridViewMouseEvent.Click:
                                this.OnDoubleClick(args);
                                if (((e.Button == MouseButtons.Left) && (args2.ColumnIndex < this.Columns.Count)) && (args2.RowIndex < this.Rows.Count))
                                {
                                    this.OnCellDoubleClick(new DataGridViewCellEventArgs(args2.ColumnIndex, args2.RowIndex));
                                }
                                break;

                            case DataGridViewMouseEvent.MouseClick:
                                this.dataGridViewOper[0x1000] = true;
                                this.OnMouseDoubleClick(args);
                                if ((args2.ColumnIndex < this.Columns.Count) && (args2.RowIndex < this.Rows.Count))
                                {
                                    this.OnCellMouseDoubleClick(args2);
                                }
                                break;

                            case DataGridViewMouseEvent.MouseDown:
                                this.OnMouseDown(args);
                                if ((args2.ColumnIndex < this.Columns.Count) && (args2.RowIndex < this.Rows.Count))
                                {
                                    this.OnCellMouseDown(args2);
                                }
                                break;
                        }
                        return;
                    }
                }
                if (this.dataGridViewOper[0x1000])
                {
                    if (e.Clicks == 2)
                    {
                        args = new MouseEventArgs(e.Button, 1, x, y, e.Delta);
                        args2 = new DataGridViewCellMouseEventArgs(info.col, info.row, localX, args.Y - info.RowY, args);
                    }
                    switch (dgvme)
                    {
                        case DataGridViewMouseEvent.DoubleClick:
                            dgvme = DataGridViewMouseEvent.Click;
                            break;

                        case DataGridViewMouseEvent.MouseDoubleClick:
                            dgvme = DataGridViewMouseEvent.MouseClick;
                            break;
                    }
                }
                switch (dgvme)
                {
                    case DataGridViewMouseEvent.Click:
                        this.OnClick(args);
                        if (((e.Button == MouseButtons.Left) && (args2.ColumnIndex < this.Columns.Count)) && (args2.RowIndex < this.Rows.Count))
                        {
                            this.OnCellClick(new DataGridViewCellEventArgs(args2.ColumnIndex, args2.RowIndex));
                        }
                        return;

                    case DataGridViewMouseEvent.DoubleClick:
                        this.OnDoubleClick(args);
                        if (((e.Button == MouseButtons.Left) && (args2.ColumnIndex < this.Columns.Count)) && (args2.RowIndex < this.Rows.Count))
                        {
                            this.OnCellDoubleClick(new DataGridViewCellEventArgs(args2.ColumnIndex, args2.RowIndex));
                        }
                        return;

                    case DataGridViewMouseEvent.MouseClick:
                        this.OnMouseClick(args);
                        if ((args2.ColumnIndex < this.Columns.Count) && (args2.RowIndex < this.Rows.Count))
                        {
                            this.OnCellMouseClick(args2);
                        }
                        return;

                    case DataGridViewMouseEvent.MouseDoubleClick:
                        this.OnMouseDoubleClick(args);
                        if ((args2.ColumnIndex < this.Columns.Count) && (args2.RowIndex < this.Rows.Count))
                        {
                            this.OnCellMouseDoubleClick(args2);
                        }
                        return;

                    case DataGridViewMouseEvent.MouseDown:
                        this.OnMouseDown(args);
                        if ((args2.ColumnIndex < this.Columns.Count) && (args2.RowIndex < this.Rows.Count))
                        {
                            this.OnCellMouseDown(args2);
                        }
                        return;

                    case DataGridViewMouseEvent.MouseUp:
                        if (this.dataGridViewState2[0x800000])
                        {
                            MouseEventArgs args3 = new MouseEventArgs(e.Button, 2, x, y, e.Delta);
                            args2 = new DataGridViewCellMouseEventArgs(args2.ColumnIndex, args2.RowIndex, args2.X, args2.Y, args3);
                        }
                        this.OnCellMouseUp(args2);
                        this.OnMouseUp(args);
                        return;

                    case DataGridViewMouseEvent.MouseMove:
                        this.OnCellMouseMove(args2);
                        return;
                }
            }
            finally
            {
                this.dataGridViewState2[0x8000000] = false;
            }
        }

        private void EditingControls_DoubleClick(object sender, EventArgs e)
        {
            MouseEventArgs args = e as MouseEventArgs;
            if (args != null)
            {
                this.EditingControls_CommonMouseEventHandler(sender, args, DataGridViewMouseEvent.DoubleClick);
            }
        }

        private void EditingControls_MouseClick(object sender, MouseEventArgs e)
        {
            this.EditingControls_CommonMouseEventHandler(sender, e, DataGridViewMouseEvent.MouseClick);
        }

        private void EditingControls_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            this.EditingControls_CommonMouseEventHandler(sender, e, DataGridViewMouseEvent.MouseDoubleClick);
        }

        private void EditingControls_MouseDown(object sender, MouseEventArgs e)
        {
            this.EditingControls_CommonMouseEventHandler(sender, e, DataGridViewMouseEvent.MouseDown);
        }

        private void EditingControls_MouseEnter(object sender, EventArgs e)
        {
            if (sender == this.editingPanel)
            {
                this.dataGridViewState1[0x1000000] = true;
                this.oldCursor = this.Cursor;
                this.CursorInternal = ((IDataGridViewEditingControl) this.editingControl).EditingPanelCursor;
            }
            if (this.dataGridViewState2[0x20])
            {
                this.OnMouseEnter(EventArgs.Empty);
            }
            this.UpdateMouseEnteredCell(null, null);
        }

        private void EditingControls_MouseLeave(object sender, EventArgs e)
        {
            if ((sender == this.editingPanel) && this.dataGridViewState1[0x1000000])
            {
                this.dataGridViewState1[0x1000000] = false;
                this.CursorInternal = this.oldCursor;
            }
            this.UpdateMouseEnteredCell(null, null);
            Point pt = base.PointToClient(Control.MousePosition);
            if (!base.ClientRectangle.Contains(pt))
            {
                this.OnMouseLeave(EventArgs.Empty);
            }
        }

        private void EditingControls_MouseMove(object sender, MouseEventArgs e)
        {
            this.EditingControls_CommonMouseEventHandler(sender, e, DataGridViewMouseEvent.MouseMove);
        }

        private void EditingControls_MouseUp(object sender, MouseEventArgs e)
        {
            this.EditingControls_CommonMouseEventHandler(sender, e, DataGridViewMouseEvent.MouseUp);
        }

        private void EndColumnHeadersResize(MouseEventArgs e)
        {
            try
            {
                if (this.currentRowSplitBar != -1)
                {
                    base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
                    this.lastRowSplitBar = this.currentRowSplitBar = -1;
                }
                int num = Math.Min((int) (e.Y + this.mouseBarOffset), (int) (this.layout.Data.Bottom - 1));
                int num2 = ((num - this.layout.ColumnHeaders.Y) - this.ColumnHeadersHeight) + 1;
                if ((this.trackRowAnchor != num) && (num2 != 0))
                {
                    this.ColumnHeadersHeight += num2;
                }
            }
            finally
            {
                this.RealeaseMouse();
            }
        }

        private void EndColumnRelocation(MouseEventArgs e, HitTestInfo hti)
        {
            try
            {
                int num;
                if (this.lastHeaderShadow != -1)
                {
                    this.dataGridViewState2[0x400] = false;
                    this.trackColumnEdge = -1;
                    this.lastHeaderShadow = -1;
                    base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
                }
                if (this.ColumnRelocationTarget(e, hti, out num))
                {
                    if (num == -1)
                    {
                        this.Columns[this.trackColumn].DisplayIndex = 0;
                    }
                    else if (this.Columns[this.trackColumn].DisplayIndex > this.Columns[num].DisplayIndex)
                    {
                        this.Columns[this.trackColumn].DisplayIndex = this.Columns[num].DisplayIndex + 1;
                    }
                    else
                    {
                        this.Columns[this.trackColumn].DisplayIndex = this.Columns[num].DisplayIndex;
                    }
                }
            }
            finally
            {
                this.RealeaseMouse();
            }
        }

        private void EndColumnResize(MouseEventArgs e)
        {
            try
            {
                int num;
                int num2;
                if (this.currentColSplitBar != -1)
                {
                    base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
                    this.lastColSplitBar = this.currentColSplitBar = -1;
                }
                if (this.RightToLeftInternal)
                {
                    num = Math.Max(e.X + this.mouseBarOffset, this.layout.Data.X);
                    num2 = ((this.GetColumnXFromIndex(this.trackColumn) - this.Columns[this.trackColumn].Thickness) - num) + 1;
                }
                else
                {
                    num = Math.Min((int) (e.X + this.mouseBarOffset), (int) (this.layout.Data.Right - 1));
                    num2 = (num - (this.GetColumnXFromIndex(this.trackColumn) + this.Columns[this.trackColumn].Thickness)) + 1;
                }
                if ((this.trackColAnchor != num) && (num2 != 0))
                {
                    int num3 = this.Columns[this.trackColumn].Thickness + num2;
                    this.Columns[this.trackColumn].Thickness = num3;
                }
            }
            finally
            {
                this.RealeaseMouse();
            }
        }

        public bool EndEdit() => 
            this.EndEdit(DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing);

        public bool EndEdit(DataGridViewDataErrorContexts context)
        {
            if (this.EditMode == DataGridViewEditMode.EditOnEnter)
            {
                return this.CommitEdit(context);
            }
            return this.EndEdit(context, DataGridViewValidateCellInternal.Never, false, false, false, false, false, true, true, true);
        }

        private bool EndEdit(DataGridViewDataErrorContexts context, DataGridViewValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave, bool keepFocus, bool resetCurrentCell, bool resetAnchorCell)
        {
            bool flag;
            if (this.ptCurrentCell.X == -1)
            {
                return true;
            }
            this.dataGridViewOper[0x400000] = true;
            try
            {
                int y = this.ptCurrentCell.Y;
                int x = this.ptCurrentCell.X;
                DataGridViewCell currentCellInternal = this.CurrentCellInternal;
                DataGridViewDataErrorEventArgs args = this.CommitEdit(ref currentCellInternal, context, validateCell, fireCellLeave, fireCellEnter, fireRowLeave, fireRowEnter, fireLeave);
                if (args != null)
                {
                    if (args.ThrowException)
                    {
                        throw args.Exception;
                    }
                    if (args.Cancel)
                    {
                        return false;
                    }
                    args = this.CancelEditPrivate();
                    if (args != null)
                    {
                        if (args.ThrowException)
                        {
                            throw args.Exception;
                        }
                        if (args.Cancel)
                        {
                            return false;
                        }
                    }
                }
                if (!this.IsCurrentCellInEditMode)
                {
                    return true;
                }
                if ((y != this.ptCurrentCell.Y) || (x != this.ptCurrentCell.X))
                {
                    return true;
                }
                if (this.editingControl != null)
                {
                    this.UnwireEditingControlEvents();
                    this.dataGridViewState2[8] = this.MouseOverEditingControl;
                    this.dataGridViewState2[0x10] = this.MouseOverEditingPanel;
                    this.dataGridViewState1[0x4000] = true;
                    try
                    {
                        currentCellInternal.DetachEditingControl();
                    }
                    finally
                    {
                        this.dataGridViewState1[0x4000] = false;
                    }
                    ImeMode cachedImeMode = this.editingControl.CachedImeMode;
                    this.latestEditingControl = this.editingControl;
                    this.editingControl = null;
                    this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                    if ((this.EditMode == DataGridViewEditMode.EditOnEnter) && resetCurrentCell)
                    {
                        this.SetCurrentCellAddressCore(-1, -1, resetAnchorCell, false, false);
                    }
                    if (keepFocus)
                    {
                        this.FocusInternal();
                    }
                    base.ImeMode = cachedImeMode;
                }
                else
                {
                    this.dataGridViewState1[0x8000] = false;
                    this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                }
                if (!this.IsInnerCellOutOfBounds(x, y))
                {
                    DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(x, y);
                    this.OnCellEndEdit(e);
                }
                flag = true;
            }
            finally
            {
                this.dataGridViewOper[0x400000] = false;
            }
            return flag;
        }

        private void EndRowHeadersResize(MouseEventArgs e)
        {
            try
            {
                int num;
                int num2;
                if (this.currentColSplitBar != -1)
                {
                    base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
                    this.lastColSplitBar = this.currentColSplitBar = -1;
                }
                if (this.RightToLeftInternal)
                {
                    num = Math.Max((int) (e.X + this.mouseBarOffset), (int) (this.layout.Data.Left - 1));
                    num2 = ((this.layout.RowHeaders.Right - this.RowHeadersWidth) - num) - 1;
                }
                else
                {
                    num = Math.Min((int) (e.X + this.mouseBarOffset), (int) (this.layout.Data.Right - 1));
                    num2 = ((num - this.layout.RowHeaders.X) - this.RowHeadersWidth) + 1;
                }
                if ((this.trackColAnchor != num) && (num2 != 0))
                {
                    this.RowHeadersWidth += num2;
                }
            }
            finally
            {
                this.RealeaseMouse();
            }
        }

        private void EndRowResize(MouseEventArgs e)
        {
            try
            {
                int num;
                int num2;
                if (this.currentRowSplitBar != -1)
                {
                    base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
                    this.lastRowSplitBar = this.currentRowSplitBar = -1;
                }
                DataGridViewRow row = this.Rows.SharedRow(this.trackRow);
                row.GetHeightInfo(this.trackRow, out num, out num2);
                int num3 = Math.Min((int) (e.Y + this.mouseBarOffset), (int) (this.layout.Data.Bottom - 1));
                int num4 = (num3 - (this.GetRowYFromIndex(this.trackRow) + num)) + 1;
                if ((this.trackRowAnchor != num3) && (num4 != 0))
                {
                    int num5 = num + num4;
                    num5 = Math.Max(num5, num2);
                    if (!this.OnRowHeightInfoPushed(this.trackRow, num5, num2))
                    {
                        if (row.Index == -1)
                        {
                            row = this.Rows[this.trackRow];
                        }
                        row.ThicknessInternal = num5;
                    }
                }
            }
            finally
            {
                this.RealeaseMouse();
            }
        }

        private void ExitBulkLayout(bool invalidInAdjustFillingColumns)
        {
            if (this.inBulkLayoutCount > 0)
            {
                this.inBulkLayoutCount--;
                if (this.inBulkLayoutCount == 0)
                {
                    this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
                }
            }
        }

        private void ExitBulkPaint(int columnIndex, int rowIndex)
        {
            if (this.inBulkPaintCount > 0)
            {
                this.inBulkPaintCount--;
                if (this.inBulkPaintCount == 0)
                {
                    if (columnIndex >= 0)
                    {
                        this.InvalidateColumnInternal(columnIndex);
                    }
                    else if (rowIndex >= 0)
                    {
                        this.InvalidateRowPrivate(rowIndex);
                    }
                    else
                    {
                        base.Invalidate();
                    }
                }
            }
        }

        private void FirstVisibleScrollingRowTempted(int rowIndex)
        {
            int height = this.layout.Data.Height;
            if ((height > 0) && (this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen) < height))
            {
                this.displayedBandsInfo.FirstDisplayedScrollingRow = rowIndex;
            }
        }

        private void FlushDisplayedChanged()
        {
            if (this.displayedBandsInfo.Dirty && base.Visible)
            {
                if (!this.RowHeadersVisible && (this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0))
                {
                    this.UpdateRowsDisplayedState(false);
                }
                else
                {
                    int num = Screen.FromControl(this).WorkingArea.Height / 2;
                    int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                    if (firstDisplayedScrollingRow != -1)
                    {
                        for (int i = this.displayedBandsInfo.NumDisplayedScrollingRows; i > 0; i--)
                        {
                            if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
                            {
                                this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, true);
                            }
                            firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible);
                        }
                        int num4 = firstDisplayedScrollingRow;
                        for (firstDisplayedScrollingRow = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); (firstDisplayedScrollingRow != -1) && ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None); firstDisplayedScrollingRow = this.Rows.GetPreviousRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
                        {
                            this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, false);
                        }
                        firstDisplayedScrollingRow = num4;
                    }
                    else
                    {
                        firstDisplayedScrollingRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                    }
                    while ((firstDisplayedScrollingRow != -1) && ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None))
                    {
                        this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, false);
                        firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible);
                    }
                    int numDisplayedFrozenRows = this.displayedBandsInfo.NumDisplayedFrozenRows;
                    firstDisplayedScrollingRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    while (numDisplayedFrozenRows > 0)
                    {
                        if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
                        {
                            this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, true);
                        }
                        firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                        numDisplayedFrozenRows--;
                    }
                    while ((firstDisplayedScrollingRow != -1) && ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None))
                    {
                        this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, false);
                        firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    }
                    int lastDisplayedFrozenRowIndex = -1;
                    int lastDisplayedScrollingRowIndex = -1;
                    if (this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
                    {
                        int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                        if (this.displayedBandsInfo.NumDisplayedFrozenRows > 1)
                        {
                            lastDisplayedFrozenRowIndex = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible, (int) (this.displayedBandsInfo.NumDisplayedFrozenRows - 2));
                        }
                        else
                        {
                            lastDisplayedFrozenRowIndex = firstRow;
                        }
                    }
                    if (this.displayedBandsInfo.FirstDisplayedScrollingRow != -1)
                    {
                        if (this.displayedBandsInfo.NumDisplayedScrollingRows > 1)
                        {
                            lastDisplayedScrollingRowIndex = this.Rows.GetNextRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, (int) (this.displayedBandsInfo.NumDisplayedScrollingRows - 2));
                        }
                        else
                        {
                            lastDisplayedScrollingRowIndex = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                        }
                    }
                    for (firstDisplayedScrollingRow = this.displayedBandsInfo.OldFirstDisplayedScrollingRow; ((firstDisplayedScrollingRow != -1) && (firstDisplayedScrollingRow < this.displayedBandsInfo.FirstDisplayedScrollingRow)) && !this.RowNeedsDisplayedState(firstDisplayedScrollingRow, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex); firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible))
                    {
                        if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
                        {
                            break;
                        }
                        this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, false);
                    }
                    firstDisplayedScrollingRow = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
                    if ((((firstDisplayedScrollingRow != -1) && (firstDisplayedScrollingRow < this.Rows.Count)) && ((this.displayedBandsInfo.FirstDisplayedScrollingRow == -1) || (this.displayedBandsInfo.FirstDisplayedScrollingRow < firstDisplayedScrollingRow))) && !this.RowNeedsDisplayedState(firstDisplayedScrollingRow, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex))
                    {
                        while (firstDisplayedScrollingRow != -1)
                        {
                            if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
                            {
                                break;
                            }
                            this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, false);
                            firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible);
                        }
                    }
                    if (this.displayedBandsInfo.RowInsertionOccurred)
                    {
                        firstDisplayedScrollingRow = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
                        if (firstDisplayedScrollingRow != -1)
                        {
                            firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible, (int) (this.displayedBandsInfo.OldNumDisplayedScrollingRows - 1));
                            if (firstDisplayedScrollingRow == -1)
                            {
                                firstDisplayedScrollingRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
                            }
                            for (int j = 0; ((firstDisplayedScrollingRow != -1) && (j <= num)) && !this.RowNeedsDisplayedState(firstDisplayedScrollingRow, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex); j++)
                            {
                                if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
                                {
                                    this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, false);
                                }
                                firstDisplayedScrollingRow = this.Rows.GetPreviousRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible);
                            }
                        }
                        firstDisplayedScrollingRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                        if (firstDisplayedScrollingRow != -1)
                        {
                            firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, (int) (this.displayedBandsInfo.OldNumDisplayedFrozenRows - 1));
                            if (firstDisplayedScrollingRow == -1)
                            {
                                firstDisplayedScrollingRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                            }
                            for (int k = 0; ((firstDisplayedScrollingRow != -1) && (k <= num)) && !this.RowNeedsDisplayedState(firstDisplayedScrollingRow, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex); k++)
                            {
                                if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
                                {
                                    this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, false);
                                }
                                firstDisplayedScrollingRow = this.Rows.GetPreviousRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible);
                            }
                        }
                    }
                }
                if (!this.ColumnHeadersVisible && (this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 0))
                {
                    this.UpdateColumnsDisplayedState(false);
                }
                else
                {
                    DataGridViewColumn firstColumn;
                    int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
                    if (firstDisplayedScrollingCol != -1)
                    {
                        int numDisplayedScrollingCols = this.displayedBandsInfo.NumDisplayedScrollingCols;
                        firstColumn = this.Columns[firstDisplayedScrollingCol];
                        while (numDisplayedScrollingCols > 0)
                        {
                            if (!firstColumn.Displayed)
                            {
                                firstColumn.DisplayedInternal = true;
                            }
                            firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                            numDisplayedScrollingCols--;
                        }
                        DataGridViewColumn column2 = firstColumn;
                        for (firstColumn = this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); (firstColumn != null) && firstColumn.Displayed; firstColumn = this.Columns.GetPreviousColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
                        {
                            firstColumn.DisplayedInternal = false;
                        }
                        firstColumn = column2;
                    }
                    else
                    {
                        firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                    }
                    while ((firstColumn != null) && firstColumn.Displayed)
                    {
                        firstColumn.DisplayedInternal = false;
                        firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    }
                    int numDisplayedFrozenCols = this.displayedBandsInfo.NumDisplayedFrozenCols;
                    firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    while (numDisplayedFrozenCols > 0)
                    {
                        if (!firstColumn.Displayed)
                        {
                            firstColumn.DisplayedInternal = true;
                        }
                        firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, DataGridViewElementStates.None);
                        numDisplayedFrozenCols--;
                    }
                    while ((firstColumn != null) && firstColumn.Displayed)
                    {
                        firstColumn.DisplayedInternal = false;
                        firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, DataGridViewElementStates.None);
                    }
                    for (firstDisplayedScrollingCol = this.displayedBandsInfo.OldFirstDisplayedScrollingCol; (((firstDisplayedScrollingCol != -1) && (firstDisplayedScrollingCol < this.Columns.Count)) && ((this.displayedBandsInfo.FirstDisplayedScrollingCol != -1) && (firstDisplayedScrollingCol != this.displayedBandsInfo.FirstDisplayedScrollingCol))) && (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol) && !this.ColumnNeedsDisplayedState(this.Columns[firstDisplayedScrollingCol])); firstDisplayedScrollingCol = (firstColumn == null) ? -1 : firstColumn.Index)
                    {
                        firstColumn = this.Columns[firstDisplayedScrollingCol];
                        if (!firstColumn.Displayed)
                        {
                            break;
                        }
                        firstColumn.DisplayedInternal = false;
                        firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    }
                    firstDisplayedScrollingCol = this.displayedBandsInfo.OldFirstDisplayedScrollingCol;
                    if ((((firstDisplayedScrollingCol != -1) && (firstDisplayedScrollingCol < this.Columns.Count)) && ((this.displayedBandsInfo.FirstDisplayedScrollingCol == -1) || ((this.displayedBandsInfo.FirstDisplayedScrollingCol != firstDisplayedScrollingCol) && this.Columns.DisplayInOrder(this.displayedBandsInfo.FirstDisplayedScrollingCol, firstDisplayedScrollingCol)))) && !this.ColumnNeedsDisplayedState(this.Columns[firstDisplayedScrollingCol]))
                    {
                        for (firstColumn = this.Columns[firstDisplayedScrollingCol]; firstColumn != null; firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
                        {
                            if (!firstColumn.Displayed)
                            {
                                break;
                            }
                            firstColumn.DisplayedInternal = false;
                        }
                    }
                    if (this.displayedBandsInfo.ColumnInsertionOccurred)
                    {
                        for (firstColumn = this.Columns[this.Columns.Count - 1]; (firstColumn != null) && !this.ColumnNeedsDisplayedState(firstColumn); firstColumn = this.Columns.GetPreviousColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
                        {
                            if (firstColumn.Displayed)
                            {
                                firstColumn.DisplayedInternal = false;
                            }
                        }
                    }
                }
                this.displayedBandsInfo.Dirty = false;
            }
        }

        private void FlushDisplayIndexChanged(bool raiseEvent)
        {
            foreach (DataGridViewColumn column in this.Columns)
            {
                if (column.DisplayIndexHasChanged)
                {
                    column.DisplayIndexHasChanged = false;
                    if (raiseEvent)
                    {
                        this.OnColumnDisplayIndexChanged(column);
                    }
                }
            }
        }

        private void FlushSelectionChanged()
        {
            if (this.dataGridViewState2[0x40000])
            {
                this.OnSelectionChanged(EventArgs.Empty);
            }
        }

        protected override AccessibleObject GetAccessibilityObjectById(int objectId) => 
            base.AccessibilityObject.GetChild(objectId - 1);

        internal SolidBrush GetCachedBrush(System.Drawing.Color color)
        {
            SolidBrush brush = (SolidBrush) this.brushes[color];
            if (brush == null)
            {
                brush = new SolidBrush(color);
                this.brushes.Add(color, brush);
            }
            return brush;
        }

        internal Pen GetCachedPen(System.Drawing.Color color)
        {
            Pen pen = (Pen) this.pens[color];
            if (pen == null)
            {
                pen = new Pen(color);
                this.pens.Add(color, pen);
            }
            return pen;
        }

        internal TypeConverter GetCachedTypeConverter(System.Type type)
        {
            if (this.converters.ContainsKey(type))
            {
                return (TypeConverter) this.converters[type];
            }
            TypeConverter converter = TypeDescriptor.GetConverter(type);
            this.converters.Add(type, converter);
            return converter;
        }

        internal Rectangle GetCellAdjustedDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
        {
            Rectangle rectangle = this.GetCellDisplayRectangle(columnIndex, rowIndex, cutOverflow);
            if (this.SingleVerticalBorderAdded && (columnIndex == this.FirstDisplayedColumnIndex))
            {
                if (!this.RightToLeftInternal)
                {
                    rectangle.X--;
                }
                rectangle.Width++;
            }
            if (this.SingleHorizontalBorderAdded && (rowIndex == this.FirstDisplayedRowIndex))
            {
                rectangle.Y--;
                rectangle.Width++;
            }
            return rectangle;
        }

        public int GetCellCount(DataGridViewElementStates includeFilter)
        {
            bool flag;
            bool flag2;
            bool flag3;
            bool flag4;
            bool flag5;
            if ((includeFilter & ~(DataGridViewElementStates.Visible | DataGridViewElementStates.Selected | DataGridViewElementStates.Resizable | DataGridViewElementStates.ReadOnly | DataGridViewElementStates.Frozen | DataGridViewElementStates.Displayed)) != DataGridViewElementStates.None)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_InvalidDataGridViewElementStateCombination", new object[] { "includeFilter" }));
            }
            int count = 0;
            if ((includeFilter & DataGridViewElementStates.Selected) == DataGridViewElementStates.Selected)
            {
                if (includeFilter == DataGridViewElementStates.Selected)
                {
                    count = this.individualSelectedCells.Count;
                    switch (this.SelectionMode)
                    {
                        case DataGridViewSelectionMode.CellSelect:
                            return count;

                        case DataGridViewSelectionMode.FullRowSelect:
                        case DataGridViewSelectionMode.RowHeaderSelect:
                            return (count + (this.selectedBandIndexes.Count * this.Columns.Count));

                        case DataGridViewSelectionMode.FullColumnSelect:
                        case DataGridViewSelectionMode.ColumnHeaderSelect:
                            return (count + (this.selectedBandIndexes.Count * this.Rows.Count));
                    }
                }
                flag = (includeFilter & DataGridViewElementStates.Displayed) == DataGridViewElementStates.Displayed;
                flag2 = (includeFilter & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
                flag3 = (includeFilter & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable;
                flag4 = (includeFilter & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.ReadOnly;
                flag5 = (includeFilter & DataGridViewElementStates.Visible) == DataGridViewElementStates.Visible;
                foreach (DataGridViewCell cell in (IEnumerable) this.individualSelectedCells)
                {
                    if (this.GetCellCount_CellIncluded(cell, cell.RowIndex, flag, flag2, flag3, flag4, flag5))
                    {
                        count++;
                    }
                }
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                        return count;

                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        foreach (int num4 in (IEnumerable) this.selectedBandIndexes)
                        {
                            foreach (DataGridViewCell cell3 in this.Rows.SharedRow(num4).Cells)
                            {
                                if (this.GetCellCount_CellIncluded(cell3, num4, flag, flag2, flag3, flag4, flag5))
                                {
                                    count++;
                                }
                            }
                        }
                        return count;

                    case DataGridViewSelectionMode.FullColumnSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        for (int j = 0; j < this.Rows.Count; j++)
                        {
                            DataGridViewRow row = this.Rows.SharedRow(j);
                            foreach (int num3 in (IEnumerable) this.selectedBandIndexes)
                            {
                                DataGridViewCell dataGridViewCell = row.Cells[num3];
                                if (this.GetCellCount_CellIncluded(dataGridViewCell, j, flag, flag2, flag3, flag4, flag5))
                                {
                                    count++;
                                }
                            }
                        }
                        return count;
                }
            }
            if (((includeFilter == DataGridViewElementStates.ReadOnly) && this.ReadOnly) || (includeFilter == DataGridViewElementStates.None))
            {
                return (this.Rows.Count * this.Columns.Count);
            }
            flag = (includeFilter & DataGridViewElementStates.Displayed) == DataGridViewElementStates.Displayed;
            flag2 = (includeFilter & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
            flag3 = (includeFilter & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable;
            flag4 = (includeFilter & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.ReadOnly;
            flag5 = (includeFilter & DataGridViewElementStates.Visible) == DataGridViewElementStates.Visible;
            for (int i = 0; i < this.Rows.Count; i++)
            {
                DataGridViewRow row3 = this.Rows.SharedRow(i);
                if (!flag5 || ((this.Rows.GetRowState(i) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None))
                {
                    foreach (DataGridViewCell cell4 in row3.Cells)
                    {
                        if (this.GetCellCount_CellIncluded(cell4, i, flag, flag2, flag3, flag4, flag5))
                        {
                            count++;
                        }
                    }
                }
            }
            return count;
        }

        private bool GetCellCount_CellIncluded(DataGridViewCell dataGridViewCell, int rowIndex, bool displayedRequired, bool frozenRequired, bool resizableRequired, bool readOnlyRequired, bool visibleRequired)
        {
            DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
            if (displayedRequired && !(((rowState & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None) && dataGridViewCell.OwningColumn.Displayed))
            {
                return false;
            }
            if (frozenRequired && !((((rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None) || dataGridViewCell.OwningColumn.Frozen) || dataGridViewCell.StateIncludes(DataGridViewElementStates.Frozen)))
            {
                return false;
            }
            if ((resizableRequired && !this.RowIsResizable(rowIndex)) && (dataGridViewCell.OwningColumn.Resizable != DataGridViewTriState.True))
            {
                return false;
            }
            if (readOnlyRequired && !(((this.ReadOnly || ((rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None)) || dataGridViewCell.OwningColumn.ReadOnly) || dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly)))
            {
                return false;
            }
            if (visibleRequired && !(((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None) && dataGridViewCell.OwningColumn.Visible))
            {
                return false;
            }
            return true;
        }

        public Rectangle GetCellDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
        {
            Rectangle rowDisplayRectanglePrivate;
            Rectangle columnDisplayRectanglePrivate;
            if (columnIndex >= 0)
            {
                if (columnIndex >= this.Columns.Count)
                {
                    throw new ArgumentOutOfRangeException("columnIndex");
                }
                columnDisplayRectanglePrivate = this.GetColumnDisplayRectanglePrivate(columnIndex, cutOverflow);
            }
            else
            {
                if (columnIndex != -1)
                {
                    throw new ArgumentOutOfRangeException("columnIndex");
                }
                if (rowIndex >= 0)
                {
                    columnDisplayRectanglePrivate = this.layout.RowHeaders;
                }
                else
                {
                    columnDisplayRectanglePrivate = this.layout.TopLeftHeader;
                }
            }
            if (rowIndex >= 0)
            {
                if (rowIndex >= this.Rows.Count)
                {
                    throw new ArgumentOutOfRangeException("rowIndex");
                }
                rowDisplayRectanglePrivate = this.GetRowDisplayRectanglePrivate(rowIndex, cutOverflow);
            }
            else
            {
                if (rowIndex != -1)
                {
                    throw new ArgumentOutOfRangeException("rowIndex");
                }
                if (columnIndex >= 0)
                {
                    rowDisplayRectanglePrivate = this.layout.ColumnHeaders;
                }
                else
                {
                    rowDisplayRectanglePrivate = this.layout.TopLeftHeader;
                }
            }
            if (!cutOverflow)
            {
                int num2;
                int num = rowDisplayRectanglePrivate.Bottom - columnDisplayRectanglePrivate.Bottom;
                if (num > 0)
                {
                    columnDisplayRectanglePrivate.Height += num;
                }
                if (this.RightToLeftInternal)
                {
                    num2 = rowDisplayRectanglePrivate.X - columnDisplayRectanglePrivate.X;
                    if (num2 > 0)
                    {
                        rowDisplayRectanglePrivate.Width += num2;
                        rowDisplayRectanglePrivate.X -= num2;
                    }
                }
                else
                {
                    num2 = columnDisplayRectanglePrivate.Right - rowDisplayRectanglePrivate.Right;
                    if (num2 > 0)
                    {
                        rowDisplayRectanglePrivate.Width += num2;
                    }
                }
            }
            rowDisplayRectanglePrivate.Intersect(columnDisplayRectanglePrivate);
            return rowDisplayRectanglePrivate;
        }

        internal DataGridViewCell GetCellInternal(int columnIndex, int rowIndex)
        {
            if (rowIndex >= 0)
            {
                DataGridViewRow row = this.Rows.SharedRow(rowIndex);
                if (columnIndex >= 0)
                {
                    return row.Cells[columnIndex];
                }
                return row.HeaderCell;
            }
            if (columnIndex >= 0)
            {
                return this.Columns[columnIndex].HeaderCell;
            }
            return this.TopLeftHeaderCell;
        }

        public virtual DataObject GetClipboardContent()
        {
            DataGridViewColumn lastColumn;
            DataGridViewColumn column2;
            DataGridViewColumn column3;
            int num3;
            bool flag5;
            bool flag6;
            bool flag7;
            if (this.ClipboardCopyMode == DataGridViewClipboardCopyMode.Disable)
            {
                throw new NotSupportedException(System.Windows.Forms.SR.GetString("DataGridView_DisabledClipboardCopy"));
            }
            if (this.CurrentCellIsEditedAndOnlySelectedCell)
            {
                return null;
            }
            string[] strArray = new string[] { DataFormats.Html, DataFormats.Text, DataFormats.UnicodeText, DataFormats.CommaSeparatedValue };
            DataObject obj2 = new DataObject();
            bool flag = false;
            bool flag2 = false;
            string str = null;
            StringBuilder sbContent = null;
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.CellSelect:
                case DataGridViewSelectionMode.RowHeaderSelect:
                case DataGridViewSelectionMode.ColumnHeaderSelect:
                    flag5 = false;
                    flag6 = false;
                    flag7 = false;
                    if (this.SelectionMode != DataGridViewSelectionMode.RowHeaderSelect)
                    {
                        if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
                        {
                            flag6 = this.Columns.GetColumnCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Selected) != 0;
                            flag5 = flag6 && (this.Rows.GetRowCount(DataGridViewElementStates.Visible) != 0);
                        }
                        break;
                    }
                    flag7 = this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Selected) != 0;
                    flag5 = flag7 && (this.Columns.GetColumnCount(DataGridViewElementStates.Visible) != 0);
                    break;

                case DataGridViewSelectionMode.FullRowSelect:
                    if (this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Selected) != 0)
                    {
                        if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
                        {
                            flag = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Selected) == -1;
                            flag2 = true;
                        }
                        else
                        {
                            flag = flag2 = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
                        }
                        flag &= this.ColumnHeadersVisible;
                        flag2 &= this.RowHeadersVisible;
                        foreach (string str2 in strArray)
                        {
                            if (sbContent == null)
                            {
                                sbContent = new StringBuilder(0x400);
                            }
                            else
                            {
                                sbContent.Length = 0;
                            }
                            if (flag)
                            {
                                if (this.RightToLeftInternal)
                                {
                                    lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                    if (lastColumn != null)
                                    {
                                        column2 = this.Columns.GetPreviousColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                        str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, true, !flag2 && (column2 == null), true, false, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column2 != null)
                                        {
                                            lastColumn = column2;
                                            column2 = this.Columns.GetPreviousColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, false, !flag2 && (column2 == null), true, false, str2) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                    if (flag2)
                                    {
                                        str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, true, false, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                }
                                else
                                {
                                    if (flag2)
                                    {
                                        str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, false, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                    lastColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
                                    if (lastColumn != null)
                                    {
                                        column3 = this.Columns.GetNextColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                        str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, !flag2, column3 == null, true, false, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column3 != null)
                                        {
                                            lastColumn = column3;
                                            column3 = this.Columns.GetNextColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, false, column3 == null, true, false, str2) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                }
                            }
                            bool flag3 = true;
                            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Selected);
                            int nextRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Selected);
                            while (firstRow != -1)
                            {
                                if (this.RightToLeftInternal)
                                {
                                    lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                    if (lastColumn != null)
                                    {
                                        column2 = this.Columns.GetPreviousColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                        str = this.Rows.SharedRow(firstRow).Cells[lastColumn.Index].GetClipboardContentInternal(firstRow, true, !flag2 && (column2 == null), !flag && flag3, nextRow == -1, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column2 != null)
                                        {
                                            lastColumn = column2;
                                            column2 = this.Columns.GetPreviousColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                            str = this.Rows.SharedRow(firstRow).Cells[lastColumn.Index].GetClipboardContentInternal(firstRow, false, !flag2 && (column2 == null), !flag && flag3, nextRow == -1, str2) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                    if (flag2)
                                    {
                                        str = this.Rows.SharedRow(firstRow).HeaderCell.GetClipboardContentInternal(firstRow, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, !flag && flag3, nextRow == -1, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                }
                                else
                                {
                                    lastColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
                                    if (flag2)
                                    {
                                        str = this.Rows.SharedRow(firstRow).HeaderCell.GetClipboardContentInternal(firstRow, true, lastColumn == null, !flag && flag3, nextRow == -1, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                    if (lastColumn != null)
                                    {
                                        column3 = this.Columns.GetNextColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                        str = this.Rows.SharedRow(firstRow).Cells[lastColumn.Index].GetClipboardContentInternal(firstRow, !flag2, column3 == null, !flag && flag3, nextRow == -1, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column3 != null)
                                        {
                                            lastColumn = column3;
                                            column3 = this.Columns.GetNextColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                            str = this.Rows.SharedRow(firstRow).Cells[lastColumn.Index].GetClipboardContentInternal(firstRow, false, column3 == null, !flag && flag3, nextRow == -1, str2) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                }
                                firstRow = nextRow;
                                if (firstRow != -1)
                                {
                                    nextRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Selected);
                                }
                                flag3 = false;
                            }
                            if (string.Equals(str2, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
                            {
                                GetClipboardContentForHtml(sbContent);
                            }
                            obj2.SetData(str2, false, sbContent.ToString());
                        }
                        return obj2;
                    }
                    return null;

                case DataGridViewSelectionMode.FullColumnSelect:
                    if (this.Columns.GetColumnCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Selected) != 0)
                    {
                        if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
                        {
                            flag = true;
                            flag2 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Selected) == null;
                        }
                        else
                        {
                            flag = flag2 = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
                        }
                        flag &= this.ColumnHeadersVisible;
                        flag2 &= this.RowHeadersVisible;
                        num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                        foreach (string str3 in strArray)
                        {
                            if (sbContent == null)
                            {
                                sbContent = new StringBuilder(0x400);
                            }
                            else
                            {
                                sbContent.Length = 0;
                            }
                            if (flag)
                            {
                                if (this.RightToLeftInternal)
                                {
                                    DataGridViewColumn column4 = this.Columns.GetLastColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Selected, DataGridViewElementStates.None);
                                    lastColumn = column4;
                                    if (lastColumn != null)
                                    {
                                        column2 = this.Columns.GetPreviousColumn(lastColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Selected, DataGridViewElementStates.None);
                                        str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, true, !flag2 && (column2 == null), true, num3 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column2 != null)
                                        {
                                            lastColumn = column2;
                                            column2 = this.Columns.GetPreviousColumn(lastColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Selected, DataGridViewElementStates.None);
                                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, false, !flag2 && (column2 == null), true, num3 == -1, str3) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                    if (flag2)
                                    {
                                        str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, column4 == null, true, true, num3 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                }
                                else
                                {
                                    lastColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Selected);
                                    if (flag2)
                                    {
                                        str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, lastColumn == null, true, num3 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                    if (lastColumn != null)
                                    {
                                        column3 = this.Columns.GetNextColumn(lastColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Selected, DataGridViewElementStates.None);
                                        str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, !flag2, column3 == null, true, num3 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column3 != null)
                                        {
                                            lastColumn = column3;
                                            column3 = this.Columns.GetNextColumn(lastColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Selected, DataGridViewElementStates.None);
                                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, false, column3 == null, true, num3 == -1, str3) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                }
                            }
                            bool flag4 = true;
                            int indexStart = num3;
                            int num5 = -1;
                            if (indexStart != -1)
                            {
                                num5 = this.Rows.GetNextRow(indexStart, DataGridViewElementStates.Visible);
                            }
                            while (indexStart != -1)
                            {
                                if (this.RightToLeftInternal)
                                {
                                    DataGridViewColumn column5 = this.Columns.GetLastColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Selected, DataGridViewElementStates.None);
                                    lastColumn = column5;
                                    if (lastColumn != null)
                                    {
                                        column2 = this.Columns.GetPreviousColumn(lastColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Selected, DataGridViewElementStates.None);
                                        str = this.Rows.SharedRow(indexStart).Cells[lastColumn.Index].GetClipboardContentInternal(indexStart, true, !flag2 && (column2 == null), !flag && flag4, num5 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column2 != null)
                                        {
                                            lastColumn = column2;
                                            column2 = this.Columns.GetPreviousColumn(lastColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Selected, DataGridViewElementStates.None);
                                            str = this.Rows.SharedRow(indexStart).Cells[lastColumn.Index].GetClipboardContentInternal(indexStart, false, !flag2 && (column2 == null), !flag && flag4, num5 == -1, str3) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                    if (flag2)
                                    {
                                        str = this.Rows.SharedRow(indexStart).HeaderCell.GetClipboardContentInternal(indexStart, column5 == null, true, !flag && flag4, num5 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                }
                                else
                                {
                                    lastColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Selected);
                                    if (flag2)
                                    {
                                        str = this.Rows.SharedRow(indexStart).HeaderCell.GetClipboardContentInternal(indexStart, true, lastColumn == null, !flag && flag4, num5 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                    if (lastColumn != null)
                                    {
                                        column3 = this.Columns.GetNextColumn(lastColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Selected, DataGridViewElementStates.None);
                                        str = this.Rows.SharedRow(indexStart).Cells[lastColumn.Index].GetClipboardContentInternal(indexStart, !flag2, column3 == null, !flag && flag4, num5 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column3 != null)
                                        {
                                            lastColumn = column3;
                                            column3 = this.Columns.GetNextColumn(lastColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Selected, DataGridViewElementStates.None);
                                            str = this.Rows.SharedRow(indexStart).Cells[lastColumn.Index].GetClipboardContentInternal(indexStart, false, column3 == null, !flag && flag4, num5 == -1, str3) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                }
                                indexStart = num5;
                                if (indexStart != -1)
                                {
                                    num5 = this.Rows.GetNextRow(indexStart, DataGridViewElementStates.Visible);
                                }
                                flag4 = false;
                            }
                            if (string.Equals(str3, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
                            {
                                GetClipboardContentForHtml(sbContent);
                            }
                            obj2.SetData(str3, false, sbContent.ToString());
                        }
                        return obj2;
                    }
                    return null;

                default:
                    return obj2;
            }
            if (!flag5 && (this.individualSelectedCells.Count > 0))
            {
                foreach (DataGridViewCell cell in (IEnumerable) this.individualSelectedCells)
                {
                    if (cell.Visible)
                    {
                        flag5 = true;
                        break;
                    }
                }
            }
            if (!flag5)
            {
                return null;
            }
            if (this.SelectionMode == DataGridViewSelectionMode.CellSelect)
            {
                flag = flag2 = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
                flag &= this.ColumnHeadersVisible;
                flag2 &= this.RowHeadersVisible;
            }
            else
            {
                flag = flag2 = false;
                if (this.ColumnHeadersVisible)
                {
                    if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
                    {
                        if (flag6)
                        {
                            flag = true;
                        }
                    }
                    else
                    {
                        flag = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
                    }
                }
                if (this.RowHeadersVisible)
                {
                    if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
                    {
                        if (flag7)
                        {
                            flag2 = true;
                        }
                    }
                    else
                    {
                        flag2 = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
                    }
                }
            }
            int rowIndex = 0x7fffffff;
            int num7 = -1;
            DataGridViewColumn owningColumn = null;
            DataGridViewColumn column7 = null;
            if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
            {
                DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
                DataGridViewColumn column9 = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                foreach (int num8 in (IEnumerable) this.selectedBandIndexes)
                {
                    if ((this.Rows.GetRowState(num8) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
                    {
                        if (num8 < rowIndex)
                        {
                            rowIndex = num8;
                        }
                        if (num8 > num7)
                        {
                            num7 = num8;
                        }
                        owningColumn = firstColumn;
                        column7 = column9;
                    }
                }
            }
            else if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
            {
                num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
                foreach (int num10 in (IEnumerable) this.selectedBandIndexes)
                {
                    if (this.Columns[num10].Visible)
                    {
                        if ((owningColumn == null) || this.Columns.DisplayInOrder(num10, owningColumn.Index))
                        {
                            owningColumn = this.Columns[num10];
                        }
                        if ((column7 == null) || this.Columns.DisplayInOrder(column7.Index, num10))
                        {
                            column7 = this.Columns[num10];
                        }
                        rowIndex = num3;
                        num7 = lastRow;
                    }
                }
            }
            foreach (DataGridViewCell cell2 in (IEnumerable) this.individualSelectedCells)
            {
                if (cell2.Visible)
                {
                    if (cell2.RowIndex < rowIndex)
                    {
                        rowIndex = cell2.RowIndex;
                    }
                    if (cell2.RowIndex > num7)
                    {
                        num7 = cell2.RowIndex;
                    }
                    if ((owningColumn == null) || this.Columns.DisplayInOrder(cell2.ColumnIndex, owningColumn.Index))
                    {
                        owningColumn = cell2.OwningColumn;
                    }
                    if ((column7 == null) || this.Columns.DisplayInOrder(column7.Index, cell2.ColumnIndex))
                    {
                        column7 = cell2.OwningColumn;
                    }
                }
            }
            foreach (string str4 in strArray)
            {
                if (sbContent == null)
                {
                    sbContent = new StringBuilder(0x400);
                }
                else
                {
                    sbContent.Length = 0;
                }
                if (flag)
                {
                    if (this.RightToLeftInternal)
                    {
                        lastColumn = column7;
                        while (lastColumn != null)
                        {
                            if (lastColumn != owningColumn)
                            {
                                column2 = this.Columns.GetPreviousColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                            }
                            else
                            {
                                column2 = null;
                            }
                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, lastColumn == column7, !flag2 && (column2 == null), true, false, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                            lastColumn = column2;
                        }
                        if (flag2)
                        {
                            str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, false, true, true, false, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                        }
                    }
                    else
                    {
                        if (flag2)
                        {
                            str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, false, true, false, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                        }
                        lastColumn = owningColumn;
                        while (lastColumn != null)
                        {
                            if (lastColumn != column7)
                            {
                                column3 = this.Columns.GetNextColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                            }
                            else
                            {
                                column3 = null;
                            }
                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, !flag2 && (lastColumn == owningColumn), column3 == null, true, false, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                            lastColumn = column3;
                        }
                    }
                }
                bool flag8 = true;
                int num11 = rowIndex;
                int num12 = -1;
                while (num11 != -1)
                {
                    if (num11 != num7)
                    {
                        num12 = this.Rows.GetNextRow(num11, DataGridViewElementStates.Visible);
                    }
                    else
                    {
                        num12 = -1;
                    }
                    if (this.RightToLeftInternal)
                    {
                        lastColumn = column7;
                        while (lastColumn != null)
                        {
                            if (lastColumn != owningColumn)
                            {
                                column2 = this.Columns.GetPreviousColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                            }
                            else
                            {
                                column2 = null;
                            }
                            str = this.Rows.SharedRow(num11).Cells[lastColumn.Index].GetClipboardContentInternal(num11, lastColumn == column7, !flag2 && (column2 == null), !flag && flag8, num12 == -1, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                            lastColumn = column2;
                        }
                        if (flag2)
                        {
                            str = this.Rows.SharedRow(num11).HeaderCell.GetClipboardContentInternal(num11, false, true, !flag && flag8, num12 == -1, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                        }
                    }
                    else
                    {
                        if (flag2)
                        {
                            str = this.Rows.SharedRow(num11).HeaderCell.GetClipboardContentInternal(num11, true, false, !flag && flag8, num12 == -1, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                        }
                        for (lastColumn = owningColumn; lastColumn != null; lastColumn = column3)
                        {
                            if (lastColumn != column7)
                            {
                                column3 = this.Columns.GetNextColumn(lastColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                            }
                            else
                            {
                                column3 = null;
                            }
                            str = this.Rows.SharedRow(num11).Cells[lastColumn.Index].GetClipboardContentInternal(num11, !flag2 && (lastColumn == owningColumn), column3 == null, !flag && flag8, num12 == -1, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                        }
                    }
                    num11 = num12;
                    flag8 = false;
                }
                if (string.Equals(str4, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
                {
                    GetClipboardContentForHtml(sbContent);
                }
                obj2.SetData(str4, false, sbContent.ToString());
            }
            return obj2;
        }

        private static void GetClipboardContentForHtml(StringBuilder sbContent)
        {
            int num = 0x87 + sbContent.Length;
            int num2 = num + 0x24;
            string str = string.Format(CultureInfo.InvariantCulture, "Version:1.0\r\nStartHTML:00000097\r\nEndHTML:{0}\r\nStartFragment:00000133\r\nEndFragment:{1}\r\n", new object[] { num2.ToString("00000000", CultureInfo.InvariantCulture), num.ToString("00000000", CultureInfo.InvariantCulture) }) + "<HTML>\r\n<BODY>\r\n<!--StartFragment-->";
            sbContent.Insert(0, str);
            sbContent.Append("\r\n<!--EndFragment-->\r\n</BODY>\r\n</HTML>");
        }

        public Rectangle GetColumnDisplayRectangle(int columnIndex, bool cutOverflow)
        {
            if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            return this.GetColumnDisplayRectanglePrivate(columnIndex, cutOverflow);
        }

        private Rectangle GetColumnDisplayRectanglePrivate(int columnIndex, bool cutOverflow)
        {
            int right;
            int num2;
            Rectangle rectangle2;
            if (!this.Columns[columnIndex].Displayed)
            {
                return Rectangle.Empty;
            }
            Rectangle data = this.layout.Data;
            bool flag = false;
            if (this.RightToLeftInternal)
            {
                right = data.Right;
            }
            else
            {
                right = data.X;
            }
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            while ((firstColumn != null) && !flag)
            {
                if ((this.RightToLeftInternal && (right < data.X)) || (!this.RightToLeftInternal && (right > data.Right)))
                {
                    break;
                }
                if (firstColumn.Index == columnIndex)
                {
                    flag = true;
                }
                else
                {
                    if (this.RightToLeftInternal)
                    {
                        right -= firstColumn.Thickness;
                    }
                    else
                    {
                        right += firstColumn.Thickness;
                    }
                    firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, DataGridViewElementStates.None);
                }
            }
            if (!flag && (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0))
            {
                firstColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                while ((firstColumn != null) && !flag)
                {
                    if ((this.RightToLeftInternal && (right < data.X)) || (!this.RightToLeftInternal && (right > data.Right)))
                    {
                        break;
                    }
                    if (firstColumn.Index == columnIndex)
                    {
                        flag = true;
                    }
                    else
                    {
                        if (this.RightToLeftInternal)
                        {
                            right -= firstColumn.Thickness;
                        }
                        else
                        {
                            right += firstColumn.Thickness;
                        }
                        if (firstColumn.Index == this.displayedBandsInfo.FirstDisplayedScrollingCol)
                        {
                            if (this.RightToLeftInternal)
                            {
                                right += this.negOffset;
                            }
                            else
                            {
                                right -= this.negOffset;
                            }
                        }
                        firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    }
                }
            }
            if (!flag)
            {
                return Rectangle.Empty;
            }
            int thickness = firstColumn.Thickness;
            if (firstColumn.Index == this.displayedBandsInfo.FirstDisplayedScrollingCol)
            {
                thickness -= this.negOffset;
            }
            if (cutOverflow && ((!this.RightToLeftInternal && ((right + thickness) > data.Right)) || (this.RightToLeftInternal && ((right - thickness) < data.X))))
            {
                if (this.RightToLeftInternal)
                {
                    num2 = right - data.X;
                }
                else
                {
                    num2 = data.Right - right;
                }
            }
            else
            {
                num2 = thickness;
            }
            if (this.RightToLeftInternal)
            {
                rectangle2 = new Rectangle(right - num2, data.Y, num2, data.Height);
            }
            else
            {
                rectangle2 = new Rectangle(right, data.Y, num2, data.Height);
            }
            if (this.layout.ColumnHeadersVisible)
            {
                rectangle2.Height += this.layout.ColumnHeaders.Height;
                rectangle2.Y -= this.layout.ColumnHeaders.Height;
            }
            return rectangle2;
        }

        private int GetColumnIndexFromX(int x, out int xColumnLeftEdge)
        {
            int num;
            DataGridViewColumn column;
            Rectangle data = this.layout.Data;
            if (!this.RightToLeftInternal && (x == (data.X - 1)))
            {
                x++;
            }
            else if (this.RightToLeftInternal && (x == data.Right))
            {
                x--;
            }
            if (this.RightToLeftInternal)
            {
                num = data.Right - 1;
            }
            else
            {
                num = data.X;
            }
            for (column = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen); (column != null) && ((!this.RightToLeftInternal && (num < data.Right)) || (this.RightToLeftInternal && (num >= data.X))); column = this.Columns.GetNextColumn(column, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, DataGridViewElementStates.None))
            {
                if (this.RightToLeftInternal)
                {
                    num -= column.Thickness;
                }
                else
                {
                    num += column.Thickness;
                }
                if (!this.RightToLeftInternal && (num > x))
                {
                    xColumnLeftEdge = num - column.Thickness;
                    return column.Index;
                }
                if (this.RightToLeftInternal && (num < x))
                {
                    xColumnLeftEdge = num + column.Thickness;
                    return column.Index;
                }
            }
            if (this.RightToLeftInternal)
            {
                num += this.negOffset;
            }
            else
            {
                num -= this.negOffset;
            }
            if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
            {
                for (column = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol]; (column != null) && ((!this.RightToLeftInternal && (num < data.Right)) || (this.RightToLeftInternal && (num >= data.X))); column = this.Columns.GetNextColumn(column, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
                {
                    if (this.RightToLeftInternal)
                    {
                        num -= column.Thickness;
                    }
                    else
                    {
                        num += column.Thickness;
                    }
                    if (!this.RightToLeftInternal && (num > x))
                    {
                        xColumnLeftEdge = num - column.Thickness;
                        return column.Index;
                    }
                    if (this.RightToLeftInternal && (num < x))
                    {
                        xColumnLeftEdge = num + column.Thickness;
                        return column.Index;
                    }
                }
            }
            xColumnLeftEdge = -1;
            return -1;
        }

        private static int GetColumnScrollRate(int xOffset)
        {
            if (xOffset <= 10)
            {
                return 480;
            }
            if (xOffset <= 15)
            {
                return 0x139;
            }
            if (xOffset <= 0x19)
            {
                return 180;
            }
            if (xOffset <= 0x23)
            {
                return 0x7b;
            }
            return Math.Max(1, 0xfa0 / xOffset);
        }

        internal int GetColumnXFromIndex(int index)
        {
            int x;
            if (this.RightToLeftInternal)
            {
                x = this.layout.Data.Right - 1;
            }
            else
            {
                x = this.layout.Data.X;
            }
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            while (firstColumn != null)
            {
                if (index == firstColumn.Index)
                {
                    return x;
                }
                if (this.RightToLeftInternal)
                {
                    x -= firstColumn.Thickness;
                }
                else
                {
                    x += firstColumn.Thickness;
                }
                firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, DataGridViewElementStates.None);
            }
            if (this.RightToLeftInternal)
            {
                x += this.negOffset;
            }
            else
            {
                x -= this.negOffset;
            }
            int num2 = x;
            if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
            {
                firstColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
            }
            else
            {
                firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
            }
            while (firstColumn != null)
            {
                if (index == firstColumn.Index)
                {
                    return x;
                }
                if (this.RightToLeftInternal)
                {
                    x -= firstColumn.Thickness;
                }
                else
                {
                    x += firstColumn.Thickness;
                }
                firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
            }
            x = num2;
            firstColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
            for (firstColumn = this.Columns.GetPreviousColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); firstColumn != null; firstColumn = this.Columns.GetPreviousColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
            {
                if (this.RightToLeftInternal)
                {
                    x += firstColumn.Thickness;
                }
                else
                {
                    x -= firstColumn.Thickness;
                }
                if (index == firstColumn.Index)
                {
                    return x;
                }
            }
            return 0;
        }

        private int GetNegOffsetFromHorizontalOffset(int horizontalOffset)
        {
            for (DataGridViewColumn column = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); (column != null) && (column.Thickness <= horizontalOffset); column = this.Columns.GetNextColumn(column, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
            {
                horizontalOffset -= column.Thickness;
            }
            return horizontalOffset;
        }

        private bool GetOutOfBoundCorrectedHitTestInfo(ref HitTestInfo hti, ref int mouseX, ref int mouseY, out int xOffset, out int yOffset)
        {
            xOffset = yOffset = 0;
            Rectangle data = this.layout.Data;
            int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
            int totalVisibleFrozenHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            int num3 = this.ComputeHeightOfFittingTrailingScrollingRows(totalVisibleFrozenHeight);
            int num4 = this.ComputeHeightOfTrailingScrollingRows();
            int emptyBackgroundWidth = Math.Max(0, this.layout.Data.Width - this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible));
            int emptyBackgroundHeight = Math.Max(0, (this.layout.Data.Height - totalVisibleFrozenHeight) - num4);
            if (this.dataGridViewOper[8])
            {
                if (this.layout.RowHeadersVisible)
                {
                    data = Rectangle.Union(data, this.layout.RowHeaders);
                }
                this.DiscardZonesInScrollingArea(ref data, emptyBackgroundWidth, emptyBackgroundHeight, totalVisibleFrozenHeight, false, true);
                if ((mouseY >= data.Top) && (mouseY <= data.Bottom))
                {
                    hti = this.HitTest(this.RightToLeftInternal ? (data.Right - 1) : data.Left, mouseY);
                    if ((((this.ptAnchorCell.Y != -1) && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)) && ((this.trackRowEdge != -1) && ((this.Rows.GetRowState(this.trackRowEdge) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None))) && ((hti.row >= 0) && ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)))
                    {
                        int col;
                        int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                        if (hti.col >= 0)
                        {
                            col = hti.col;
                        }
                        else
                        {
                            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
                            col = (firstColumn == null) ? -1 : firstColumn.Index;
                        }
                        if ((col >= 0) && (firstRow >= 0))
                        {
                            if (!this.ScrollIntoView(col, firstRow, false))
                            {
                                return false;
                            }
                            hti = this.HitTest(this.RightToLeftInternal ? data.Right : data.Left, mouseY);
                        }
                    }
                    return true;
                }
                if (mouseY < data.Top)
                {
                    if (((this.ptAnchorCell.Y != -1) && (((this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None) || ((this.trackRowEdge != -1) && ((this.Rows.GetRowState(this.trackRowEdge) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)))) && (this.verticalOffset != 0))
                    {
                        yOffset = mouseY - data.Top;
                        if (this.RightToLeftInternal)
                        {
                            mouseX = data.Right - 1;
                        }
                        else
                        {
                            mouseX = data.Left + 1;
                        }
                    }
                    else
                    {
                        hti = this.HitTest(this.RightToLeftInternal ? data.Right : data.Left, mouseY);
                    }
                }
                else if ((this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0) && ((this.verticalOffset + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow)) <= ((rowsHeight - totalVisibleFrozenHeight) - num3)))
                {
                    yOffset = mouseY - data.Bottom;
                    if (this.RightToLeftInternal)
                    {
                        mouseX = data.Right - 1;
                    }
                    else
                    {
                        mouseX = data.Left + 1;
                    }
                }
                return true;
            }
            if (this.dataGridViewOper[4])
            {
                if (this.layout.ColumnHeadersVisible)
                {
                    data = Rectangle.Union(data, this.layout.ColumnHeaders);
                }
                this.DiscardZonesInScrollingArea(ref data, emptyBackgroundWidth, emptyBackgroundHeight, totalVisibleFrozenHeight, true, false);
                if ((mouseX >= data.Left) && (mouseX <= data.Right))
                {
                    hti = this.HitTest(mouseX, data.Top);
                    if ((((this.ptAnchorCell.X != -1) && this.Columns[this.ptAnchorCell.X].Frozen) && ((this.trackColumnEdge != -1) && this.Columns[this.trackColumnEdge].Frozen)) && ((hti.col >= 0) && !this.Columns[hti.col].Frozen))
                    {
                        int row;
                        int index = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen).Index;
                        if (hti.row >= 0)
                        {
                            row = hti.row;
                        }
                        else
                        {
                            row = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                        }
                        if ((row >= 0) && (index >= 0))
                        {
                            if (!this.ScrollIntoView(index, row, false))
                            {
                                return false;
                            }
                            hti = this.HitTest(mouseX, data.Top);
                        }
                    }
                    return true;
                }
                if ((!this.RightToLeftInternal && (mouseX < data.Left)) || (this.RightToLeftInternal && (mouseX > data.Right)))
                {
                    if (((this.ptAnchorCell.X != -1) && (!this.Columns[this.ptAnchorCell.X].Frozen || ((this.trackColumnEdge != -1) && !this.Columns[this.trackColumnEdge].Frozen))) && ((this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0) && ((this.negOffset > 0) || (this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) != null))))
                    {
                        if (this.RightToLeftInternal)
                        {
                            xOffset = data.Right - mouseX;
                        }
                        else
                        {
                            xOffset = mouseX - data.Left;
                        }
                        mouseY = data.Top + 1;
                    }
                    else
                    {
                        hti = this.HitTest(mouseX, data.Top);
                    }
                }
                else if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
                {
                    if ((this.displayedBandsInfo.LastTotallyDisplayedScrollingCol != -1) && (this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None) == null))
                    {
                        return true;
                    }
                    DataGridViewColumn column2 = this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    int num11 = 0;
                    for (DataGridViewColumn column3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); column3 != column2; column3 = this.Columns.GetNextColumn(column3, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
                    {
                        num11 += column3.Thickness;
                    }
                    if (this.HorizontalOffset != num11)
                    {
                        if (this.RightToLeftInternal)
                        {
                            xOffset = data.Left - mouseX;
                        }
                        else
                        {
                            xOffset = mouseX - data.Right;
                        }
                        mouseY = data.Top + 1;
                    }
                }
                return true;
            }
            if (this.dataGridViewOper[0x10])
            {
                bool flag = false;
                this.DiscardZonesInScrollingArea(ref data, emptyBackgroundWidth, emptyBackgroundHeight, totalVisibleFrozenHeight, true, true);
                if (mouseY < data.Top)
                {
                    if ((((this.ptAnchorCell.Y != -1) && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)) || ((this.ptCurrentCell.Y != -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None))) && (this.verticalOffset != 0))
                    {
                        yOffset = mouseY - data.Top;
                    }
                    else if (mouseY < this.layout.Data.Top)
                    {
                        mouseY = this.layout.Data.Top + 1;
                        flag = true;
                    }
                }
                else if (mouseY > data.Bottom)
                {
                    if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
                    {
                        if ((this.verticalOffset + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow)) <= ((rowsHeight - totalVisibleFrozenHeight) - num3))
                        {
                            yOffset = mouseY - data.Bottom;
                        }
                        else
                        {
                            mouseY = data.Bottom - 1;
                            flag = true;
                        }
                    }
                    else
                    {
                        mouseY = data.Bottom - 1;
                        flag = true;
                    }
                }
                if ((!this.RightToLeftInternal && (mouseX < data.Left)) || (this.RightToLeftInternal && (mouseX > data.Right)))
                {
                    if ((((this.ptAnchorCell.X != -1) && !this.Columns[this.ptAnchorCell.X].Frozen) || ((this.ptCurrentCell.X != -1) && !this.Columns[this.ptCurrentCell.X].Frozen)) && ((this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0) && ((this.negOffset > 0) || (this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) != null))))
                    {
                        if (this.RightToLeftInternal)
                        {
                            xOffset = data.Right - mouseX;
                        }
                        else
                        {
                            xOffset = mouseX - data.Left;
                        }
                    }
                    else if (!this.RightToLeftInternal && (mouseX < this.layout.Data.Left))
                    {
                        mouseX = this.layout.Data.Left + 1;
                        flag = true;
                    }
                    else if (this.RightToLeftInternal && (mouseX > this.layout.Data.Right))
                    {
                        mouseX = this.layout.Data.Right - 1;
                        flag = true;
                    }
                }
                else if ((!this.RightToLeftInternal && (mouseX > data.Right)) || (this.RightToLeftInternal && (mouseX < data.Left)))
                {
                    if ((this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0) && ((this.displayedBandsInfo.LastTotallyDisplayedScrollingCol == -1) || (this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None) != null)))
                    {
                        DataGridViewColumn column4 = this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        int num12 = 0;
                        for (DataGridViewColumn column5 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); column5 != column4; column5 = this.Columns.GetNextColumn(column5, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
                        {
                            num12 += column5.Thickness;
                        }
                        if (this.HorizontalOffset != num12)
                        {
                            if (this.RightToLeftInternal)
                            {
                                xOffset = data.Left - mouseX;
                            }
                            else
                            {
                                xOffset = mouseX - data.Right;
                            }
                        }
                        else
                        {
                            if (this.RightToLeftInternal)
                            {
                                mouseX = data.Left + 1;
                            }
                            else
                            {
                                mouseX = data.Right - 1;
                            }
                            flag = true;
                        }
                    }
                    else
                    {
                        if (this.RightToLeftInternal)
                        {
                            mouseX = data.Left + 1;
                        }
                        else
                        {
                            mouseX = data.Right - 1;
                        }
                        flag = true;
                    }
                }
                if (flag)
                {
                    hti = this.HitTest(mouseX, mouseY);
                }
            }
            return true;
        }

        internal override Size GetPreferredSizeCore(Size proposedConstraints)
        {
            int num = 2 * (this.BorderWidth + this.Padding.Size.Width);
            int num2 = 2 * (this.BorderWidth + this.Padding.Size.Height);
            bool flag = (this.scrollBars == System.Windows.Forms.ScrollBars.Both) || (this.scrollBars == System.Windows.Forms.ScrollBars.Horizontal);
            bool flag2 = (this.scrollBars == System.Windows.Forms.ScrollBars.Both) || (this.scrollBars == System.Windows.Forms.ScrollBars.Vertical);
            int num3 = 0x10 + num;
            if (flag2)
            {
                num3 += this.vertScrollBar.Width;
            }
            if (this.RowHeadersVisible)
            {
                num3 += this.RowHeadersWidth;
            }
            int width = Math.Min(num3 + this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible), proposedConstraints.Width);
            if (width < num3)
            {
                width = num3;
            }
            int num5 = 0x10 + num2;
            if (flag)
            {
                num5 += this.horizScrollBar.Height;
            }
            if (this.ColumnHeadersVisible)
            {
                num5 += this.ColumnHeadersHeight;
            }
            int height = Math.Min(num5 + this.Rows.GetRowsHeight(DataGridViewElementStates.Visible), proposedConstraints.Height);
            if (height < num5)
            {
                height = num5;
            }
            return new Size(width, height);
        }

        public Rectangle GetRowDisplayRectangle(int rowIndex, bool cutOverflow)
        {
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            return this.GetRowDisplayRectanglePrivate(rowIndex, cutOverflow);
        }

        private Rectangle GetRowDisplayRectanglePrivate(int rowIndex, bool cutOverflow)
        {
            int height;
            if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
            {
                return Rectangle.Empty;
            }
            Rectangle data = this.layout.Data;
            int y = data.Y;
            bool flag = false;
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            while ((firstRow != -1) && !flag)
            {
                if (y > data.Bottom)
                {
                    break;
                }
                if (firstRow == rowIndex)
                {
                    flag = true;
                }
                else
                {
                    y += this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                    firstRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                }
            }
            if (!flag && (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0))
            {
                firstRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                while ((firstRow != -1) && !flag)
                {
                    if (y > data.Bottom)
                    {
                        break;
                    }
                    if (firstRow == rowIndex)
                    {
                        flag = true;
                    }
                    else
                    {
                        y += this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                        firstRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible);
                    }
                }
            }
            if (!flag)
            {
                return Rectangle.Empty;
            }
            if (cutOverflow && ((y + this.Rows.SharedRow(firstRow).GetHeight(firstRow)) > data.Bottom))
            {
                height = data.Bottom - y;
            }
            else
            {
                height = this.Rows.SharedRow(firstRow).GetHeight(firstRow);
            }
            Rectangle rectangle2 = new Rectangle(data.X, y, data.Width, height);
            if (this.layout.RowHeadersVisible)
            {
                rectangle2.Width += this.layout.RowHeaders.Width;
                if (!this.RightToLeftInternal)
                {
                    rectangle2.X -= this.layout.RowHeaders.Width;
                }
            }
            return rectangle2;
        }

        private int GetRowIndexFromY(int y, out int yRowTopEdge)
        {
            int height;
            int num3;
            Rectangle data = this.layout.Data;
            if (y == (data.Y - 1))
            {
                y++;
            }
            int num2 = data.Y;
            for (num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen); (num3 != -1) && (num2 < data.Bottom); num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen))
            {
                height = this.Rows.SharedRow(num3).GetHeight(num3);
                num2 += height;
                if (num2 > y)
                {
                    yRowTopEdge = num2 - height;
                    return num3;
                }
            }
            if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
            {
                for (num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow; (num3 != -1) && (num2 < data.Bottom); num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible))
                {
                    height = this.Rows.SharedRow(num3).GetHeight(num3);
                    num2 += height;
                    if (num2 > y)
                    {
                        yRowTopEdge = num2 - height;
                        return num3;
                    }
                }
            }
            yRowTopEdge = -1;
            return -1;
        }

        private static int GetRowScrollRate(int yOffset)
        {
            if (yOffset <= 10)
            {
                return 90;
            }
            if (yOffset <= 15)
            {
                return 0x39;
            }
            if (yOffset <= 0x19)
            {
                return 30;
            }
            if (yOffset <= 0x23)
            {
                return 0x12;
            }
            return Math.Max(1, 600 / yOffset);
        }

        internal int GetRowYFromIndex(int index)
        {
            int y = this.layout.Data.Y;
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            while (firstRow != -1)
            {
                if (index == firstRow)
                {
                    return y;
                }
                y += this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                firstRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            }
            int num3 = y;
            if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
            {
                if (index >= this.displayedBandsInfo.FirstDisplayedScrollingRow)
                {
                    firstRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                }
                else
                {
                    firstRow = -1;
                }
            }
            else
            {
                firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
            }
            if (firstRow != -1)
            {
                while (firstRow != -1)
                {
                    if (index == firstRow)
                    {
                        return y;
                    }
                    y += this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                    firstRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible);
                }
            }
            y = num3;
            for (firstRow = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); firstRow != -1; firstRow = this.Rows.GetPreviousRow(firstRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
            {
                y -= this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                if (index == firstRow)
                {
                    return y;
                }
            }
            return 0;
        }

        private bool GetTabKeyEffective(bool shift, bool ctrl)
        {
            if (this.StandardTab)
            {
                if (ctrl)
                {
                    if (!shift && (!this.VisibleCellExists || this.CurrentCellIsLastVisibleCell))
                    {
                        return false;
                    }
                    if (!shift)
                    {
                        return true;
                    }
                    if (this.VisibleCellExists)
                    {
                        return !this.CurrentCellIsFirstVisibleCell;
                    }
                }
                return false;
            }
            if (ctrl)
            {
                return false;
            }
            if (!shift && (!this.VisibleCellExists || this.CurrentCellIsLastVisibleCell))
            {
                return false;
            }
            return (!shift || (this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell));
        }

        public HitTestInfo HitTest(int x, int y)
        {
            HitTestInfo info = new HitTestInfo();
            if (this.layout.Inside.Contains(x, y))
            {
                if (((this.horizScrollBar != null) && this.horizScrollBar.Visible) && this.horizScrollBar.Bounds.Contains(x, y))
                {
                    info.type = DataGridViewHitTestType.HorizontalScrollBar;
                    return info;
                }
                if (((this.vertScrollBar != null) && this.vertScrollBar.Visible) && this.vertScrollBar.Bounds.Contains(x, y))
                {
                    info.type = DataGridViewHitTestType.VerticalScrollBar;
                    return info;
                }
                if (this.layout.TopLeftHeader.Contains(x, y))
                {
                    info.type = DataGridViewHitTestType.TopLeftHeader;
                    info.typeInternal = DataGridViewHitTestTypeInternal.TopLeftHeader;
                    if (this.RightToLeftInternal)
                    {
                        info.colStart = this.layout.TopLeftHeader.Right - 1;
                    }
                    else
                    {
                        info.colStart = this.layout.TopLeftHeader.Left;
                    }
                    info.rowStart = this.layout.TopLeftHeader.Top;
                    if ((!this.RightToLeftInternal && ((this.layout.TopLeftHeader.Right - x) < 6)) || (this.RightToLeftInternal && ((x - this.layout.TopLeftHeader.Left) < 6)))
                    {
                        if (this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
                        {
                            info.typeInternal = DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft;
                            if (this.RightToLeftInternal)
                            {
                                info.mouseBarOffset = (this.layout.TopLeftHeader.Left - x) - 1;
                                return info;
                            }
                            info.mouseBarOffset = (this.layout.TopLeftHeader.Right - x) - 1;
                        }
                        return info;
                    }
                    if ((((this.layout.TopLeftHeader.Top + this.layout.TopLeftHeader.Height) - y) < 5) && (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing))
                    {
                        info.typeInternal = DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop;
                        info.mouseBarOffset = ((this.layout.TopLeftHeader.Top + this.layout.TopLeftHeader.Height) - y) - 1;
                    }
                    return info;
                }
                if (this.layout.ColumnHeaders.Contains(x, y))
                {
                    int num;
                    info.col = this.GetColumnIndexFromX(x, out num);
                    if (info.col < 0)
                    {
                        return HitTestInfo.Nowhere;
                    }
                    info.type = DataGridViewHitTestType.ColumnHeader;
                    info.typeInternal = DataGridViewHitTestTypeInternal.ColumnHeader;
                    info.rowStart = this.layout.ColumnHeaders.Top;
                    info.colStart = num;
                    int thickness = this.Columns[info.col].Thickness;
                    if ((!this.RightToLeftInternal && (((num + thickness) - x) < 6)) || (this.RightToLeftInternal && (((x - num) + thickness) < 6)))
                    {
                        if (this.RightToLeftInternal)
                        {
                            info.mouseBarOffset = ((num - thickness) - x) + 1;
                        }
                        else
                        {
                            info.mouseBarOffset = ((num + thickness) - x) - 1;
                        }
                        DataGridViewColumn column = this.Columns[info.col];
                        if ((column.Resizable == DataGridViewTriState.True) && ((column.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None) || (column.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)))
                        {
                            info.typeInternal = DataGridViewHitTestTypeInternal.ColumnResizeRight;
                        }
                        else
                        {
                            info.typeInternal = DataGridViewHitTestTypeInternal.ColumnHeaderRight;
                        }
                    }
                    else if ((!this.RightToLeftInternal && ((x - num) < 6)) || (this.RightToLeftInternal && ((num - x) < 6)))
                    {
                        DataGridViewColumn column2 = null;
                        column2 = this.Columns.GetPreviousColumn(this.Columns[info.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        if (column2 != null)
                        {
                            info.adjacentCol = column2.Index;
                            if (this.RightToLeftInternal)
                            {
                                info.mouseBarOffset = (num - x) + 1;
                            }
                            else
                            {
                                info.mouseBarOffset = (num - x) - 1;
                            }
                            if ((column2.Resizable == DataGridViewTriState.True) && ((column2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None) || (column2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)))
                            {
                                info.typeInternal = DataGridViewHitTestTypeInternal.ColumnResizeLeft;
                            }
                            else
                            {
                                info.typeInternal = DataGridViewHitTestTypeInternal.ColumnHeaderLeft;
                            }
                        }
                        else if (this.RowHeadersVisible && (this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing))
                        {
                            info.typeInternal = DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight;
                            if (this.RightToLeftInternal)
                            {
                                info.mouseBarOffset = num - x;
                            }
                            else
                            {
                                info.mouseBarOffset = (num - x) - 1;
                            }
                        }
                        else
                        {
                            info.typeInternal = DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft;
                        }
                    }
                    else if (((this.layout.ColumnHeaders.Bottom - y) < 5) && (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing))
                    {
                        info.typeInternal = DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom;
                        info.mouseBarOffset = (this.layout.ColumnHeaders.Bottom - y) - 1;
                    }
                }
                if (this.layout.RowHeaders.Contains(x, y))
                {
                    int num3;
                    info.row = this.GetRowIndexFromY(y, out num3);
                    if (info.row < 0)
                    {
                        return HitTestInfo.Nowhere;
                    }
                    info.type = DataGridViewHitTestType.RowHeader;
                    info.typeInternal = DataGridViewHitTestTypeInternal.RowHeader;
                    info.rowStart = num3;
                    if (this.RightToLeftInternal)
                    {
                        info.colStart = this.layout.RowHeaders.Right - 1;
                    }
                    else
                    {
                        info.colStart = this.layout.RowHeaders.Left;
                    }
                    int height = this.Rows.SharedRow(info.row).GetHeight(info.row);
                    if (((num3 + height) - y) < 5)
                    {
                        if (this.RowIsResizable(info.row) && (this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None))
                        {
                            info.typeInternal = DataGridViewHitTestTypeInternal.RowResizeBottom;
                            info.mouseBarOffset = ((num3 + height) - y) - 1;
                        }
                    }
                    else if ((y - num3) < 5)
                    {
                        int rowIndex = -1;
                        if ((info.row != this.displayedBandsInfo.FirstDisplayedScrollingRow) || (this.displayedBandsInfo.NumDisplayedFrozenRows > 0))
                        {
                            rowIndex = this.Rows.GetPreviousRow(info.row, DataGridViewElementStates.Visible);
                        }
                        if (rowIndex != -1)
                        {
                            if (this.RowIsResizable(rowIndex) && (this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None))
                            {
                                info.typeInternal = DataGridViewHitTestTypeInternal.RowResizeTop;
                                info.adjacentRow = rowIndex;
                                info.mouseBarOffset = (num3 - y) - 1;
                            }
                        }
                        else if (this.ColumnHeadersVisible && (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing))
                        {
                            info.typeInternal = DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom;
                            info.mouseBarOffset = (num3 - y) - 1;
                        }
                    }
                    else if (((!this.RightToLeftInternal && ((this.layout.RowHeaders.Right - x) < 6)) || (this.RightToLeftInternal && ((x - this.layout.RowHeaders.Left) < 6))) && (this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing))
                    {
                        info.typeInternal = DataGridViewHitTestTypeInternal.RowHeadersResizeRight;
                        if (this.RightToLeftInternal)
                        {
                            info.mouseBarOffset = (this.layout.RowHeaders.Left - x) - 1;
                        }
                        else
                        {
                            info.mouseBarOffset = (this.layout.RowHeaders.Right - x) - 1;
                        }
                    }
                }
                if (this.layout.Data.Contains(x, y))
                {
                    int num6;
                    int num7;
                    info.col = this.GetColumnIndexFromX(x, out num6);
                    info.row = this.GetRowIndexFromY(y, out num7);
                    if ((info.col < 0) || (info.row < 0))
                    {
                        return HitTestInfo.Nowhere;
                    }
                    info.type = DataGridViewHitTestType.Cell;
                    info.typeInternal = DataGridViewHitTestTypeInternal.Cell;
                    info.rowStart = num7;
                    info.colStart = num6;
                    if (!this.ColumnHeadersVisible)
                    {
                        int num8 = this.Columns[info.col].Thickness;
                        if ((!this.RightToLeftInternal && (((num6 + num8) - x) < 6)) || (this.RightToLeftInternal && (((x - num6) + num8) < 6)))
                        {
                            if (this.RightToLeftInternal)
                            {
                                info.mouseBarOffset = ((num6 - num8) - x) + 1;
                            }
                            else
                            {
                                info.mouseBarOffset = ((num6 + num8) - x) - 1;
                            }
                            DataGridViewColumn column3 = this.Columns[info.col];
                            if ((column3.Resizable == DataGridViewTriState.True) && ((column3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None) || (column3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)))
                            {
                                info.typeInternal = DataGridViewHitTestTypeInternal.ColumnResizeRight;
                            }
                            return info;
                        }
                        if ((!this.RightToLeftInternal && ((x - num6) < 6)) || (this.RightToLeftInternal && ((num6 - x) < 6)))
                        {
                            DataGridViewColumn column4 = null;
                            if ((info.col != this.displayedBandsInfo.FirstDisplayedScrollingCol) || (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol >= 0))
                            {
                                column4 = this.Columns.GetPreviousColumn(this.Columns[info.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                            }
                            if (column4 != null)
                            {
                                info.adjacentCol = column4.Index;
                                if (this.RightToLeftInternal)
                                {
                                    info.mouseBarOffset = (num6 - x) + 1;
                                }
                                else
                                {
                                    info.mouseBarOffset = (num6 - x) - 1;
                                }
                                if ((column4.Resizable == DataGridViewTriState.True) && ((column4.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None) || (column4.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)))
                                {
                                    info.typeInternal = DataGridViewHitTestTypeInternal.ColumnResizeLeft;
                                }
                                return info;
                            }
                            if (this.RowHeadersVisible && (this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing))
                            {
                                info.typeInternal = DataGridViewHitTestTypeInternal.RowHeadersResizeLeft;
                                if (this.RightToLeftInternal)
                                {
                                    info.mouseBarOffset = num6 - x;
                                    return info;
                                }
                                info.mouseBarOffset = (num6 - x) - 1;
                                return info;
                            }
                        }
                    }
                    else if ((!this.RightToLeftInternal && ((x - num6) < 6)) || (this.RightToLeftInternal && ((num6 - x) < 6)))
                    {
                        DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
                        if (((info.col == firstColumn.Index) && this.RowHeadersVisible) && (this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing))
                        {
                            info.typeInternal = DataGridViewHitTestTypeInternal.RowHeadersResizeLeft;
                            if (this.RightToLeftInternal)
                            {
                                info.mouseBarOffset = num6 - x;
                                return info;
                            }
                            info.mouseBarOffset = (num6 - x) - 1;
                            return info;
                        }
                    }
                    if (!this.RowHeadersVisible)
                    {
                        int num9 = this.Rows.SharedRow(info.row).GetHeight(info.row);
                        if (((num7 + num9) - y) < 5)
                        {
                            if (this.RowIsResizable(info.row) && (this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None))
                            {
                                info.typeInternal = DataGridViewHitTestTypeInternal.RowResizeBottom;
                                info.mouseBarOffset = ((num7 + num9) - y) - 1;
                            }
                            return info;
                        }
                        if ((y - num7) < 5)
                        {
                            int previousRow = -1;
                            if ((info.row != this.displayedBandsInfo.FirstDisplayedScrollingRow) || (this.displayedBandsInfo.NumDisplayedFrozenRows > 0))
                            {
                                previousRow = this.Rows.GetPreviousRow(info.row, DataGridViewElementStates.Visible);
                            }
                            if (previousRow == -1)
                            {
                                if (this.ColumnHeadersVisible && (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing))
                                {
                                    info.typeInternal = DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop;
                                    info.mouseBarOffset = (num7 - y) - 1;
                                }
                                return info;
                            }
                            if (this.RowIsResizable(previousRow) && (this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None))
                            {
                                info.typeInternal = DataGridViewHitTestTypeInternal.RowResizeTop;
                                info.adjacentRow = previousRow;
                                info.mouseBarOffset = (num7 - y) - 1;
                            }
                        }
                        return info;
                    }
                    if ((y - num7) < 5)
                    {
                        int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                        if (((info.row == firstRow) && this.ColumnHeadersVisible) && (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing))
                        {
                            info.typeInternal = DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop;
                            info.mouseBarOffset = (num7 - y) - 1;
                        }
                    }
                }
            }
            return info;
        }

        private void HorizScrollTimer_Tick(object sender, EventArgs e)
        {
            base.BeginInvoke(new MethodInvoker(this.HorizScrollTimerHandler));
        }

        private void HorizScrollTimerHandler()
        {
            int num;
            int num2;
            Point point = base.PointToClient(Control.MousePosition);
            HitTestInfo hti = this.HitTest(point.X, point.Y);
            int x = point.X;
            int y = point.Y;
            if (this.GetOutOfBoundCorrectedHitTestInfo(ref hti, ref x, ref y, out num, out num2))
            {
                if (num != 0)
                {
                    int xOffset = Math.Abs(num);
                    int columns = num / xOffset;
                    this.ScrollColumns(columns);
                    this.horizScrollTimer.Interval = GetColumnScrollRate(xOffset);
                    if (!this.dataGridViewOper[4])
                    {
                        if (this.dataGridViewOper[0x10])
                        {
                            if (num2 != 0)
                            {
                                hti = this.HitTest(point.X + ((this.RightToLeftInternal ? 1 : -1) * (num + columns)), (point.Y - num2) - (num2 / Math.Abs(num2)));
                            }
                            else
                            {
                                hti = this.HitTest(point.X + ((this.RightToLeftInternal ? 1 : -1) * (num + columns)), y);
                            }
                            if ((hti.col >= 0) && (hti.row >= 0))
                            {
                                this.OnCellSelectMouseMove(hti);
                            }
                        }
                    }
                    else
                    {
                        hti = this.HitTest(point.X + ((this.RightToLeftInternal ? 1 : -1) * (num + columns)), y);
                        if (hti.col >= 0)
                        {
                            this.OnColumnSelectMouseMove(hti);
                        }
                    }
                }
                else
                {
                    if (this.dataGridViewOper[4] && (hti.col >= 0))
                    {
                        this.OnColumnSelectMouseMove(hti);
                    }
                    else if ((this.dataGridViewOper[0x10] && (hti.col >= 0)) && (hti.row >= 0))
                    {
                        this.OnCellSelectMouseMove(hti);
                    }
                    this.HorizScrollTimer.Enabled = false;
                }
            }
        }

        private bool InitializeEditingCellValue(ref DataGridViewCellStyle dataGridViewCellStyle, ref DataGridViewCell dataGridViewCell)
        {
            DataGridViewDataErrorEventArgs e = null;
            this.uneditedFormattedValue = dataGridViewCell.GetFormattedValue(this.ptCurrentCell.Y, ref dataGridViewCellStyle, DataGridViewDataErrorContexts.Formatting);
            this.dataGridViewState1[0x200] = true;
            try
            {
                IDataGridViewEditingCell cell = dataGridViewCell as IDataGridViewEditingCell;
                object editingCellFormattedValue = cell.GetEditingCellFormattedValue(DataGridViewDataErrorContexts.Formatting);
                if ((((editingCellFormattedValue == null) && (this.uneditedFormattedValue != null)) || ((editingCellFormattedValue != null) && (this.uneditedFormattedValue == null))) || ((editingCellFormattedValue != null) && !this.uneditedFormattedValue.Equals(editingCellFormattedValue)))
                {
                    dataGridViewCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
                    cell = dataGridViewCell as IDataGridViewEditingCell;
                    cell.EditingCellFormattedValue = this.uneditedFormattedValue;
                    cell.EditingCellValueChanged = false;
                }
            }
            catch (Exception exception)
            {
                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                {
                    throw;
                }
                e = new DataGridViewDataErrorEventArgs(exception, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
                this.OnDataErrorInternal(e);
            }
            finally
            {
                this.dataGridViewState1[0x200] = false;
            }
            if (e == null)
            {
                return true;
            }
            if (e.ThrowException)
            {
                throw e.Exception;
            }
            return !e.Cancel;
        }

        private bool InitializeEditingControlValue(ref DataGridViewCellStyle dataGridViewCellStyle, DataGridViewCell dataGridViewCell)
        {
            DataGridViewDataErrorEventArgs e = null;
            object initialFormattedValue = dataGridViewCell.GetFormattedValue(this.ptCurrentCell.Y, ref dataGridViewCellStyle, DataGridViewDataErrorContexts.Formatting);
            this.dataGridViewState1[0x4000] = true;
            this.dataGridViewState1[0x200] = true;
            try
            {
                dataGridViewCell.InitializeEditingControl(this.ptCurrentCell.Y, initialFormattedValue, dataGridViewCellStyle);
                ((IDataGridViewEditingControl) this.editingControl).EditingControlValueChanged = false;
            }
            catch (Exception exception)
            {
                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                {
                    throw;
                }
                e = new DataGridViewDataErrorEventArgs(exception, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
                this.OnDataErrorInternal(e);
            }
            finally
            {
                this.dataGridViewState1[0x4000] = false;
                this.dataGridViewState1[0x200] = false;
            }
            if (e != null)
            {
                if (e.ThrowException)
                {
                    throw e.Exception;
                }
                return !e.Cancel;
            }
            this.uneditedFormattedValue = initialFormattedValue;
            return true;
        }

        public void InvalidateCell(DataGridViewCell dataGridViewCell)
        {
            if (dataGridViewCell == null)
            {
                throw new ArgumentNullException("dataGridViewCell");
            }
            if (dataGridViewCell.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
            }
            this.InvalidateCellPrivate(dataGridViewCell);
        }

        public void InvalidateCell(int columnIndex, int rowIndex)
        {
            if ((columnIndex < -1) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if ((rowIndex < -1) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            this.InvalidateCellPrivate(columnIndex, rowIndex);
        }

        private void InvalidateCellPrivate(DataGridViewCell dataGridViewCell)
        {
            this.InvalidateCell(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex);
        }

        private void InvalidateCellPrivate(int columnIndex, int rowIndex)
        {
            if (base.IsHandleCreated)
            {
                Rectangle rc = this.GetCellAdjustedDisplayRectangle(columnIndex, rowIndex, true);
                if (!rc.IsEmpty)
                {
                    base.Invalidate(rc);
                }
            }
        }

        public void InvalidateColumn(int columnIndex)
        {
            if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            this.InvalidateColumnInternal(columnIndex);
        }

        internal void InvalidateColumnInternal(int columnIndex)
        {
            if (base.IsHandleCreated)
            {
                Rectangle columnDisplayRectanglePrivate = this.GetColumnDisplayRectanglePrivate(columnIndex, true);
                if (!columnDisplayRectanglePrivate.IsEmpty)
                {
                    base.Invalidate(columnDisplayRectanglePrivate);
                }
            }
        }

        private void InvalidateData()
        {
            if (base.IsHandleCreated)
            {
                base.Invalidate(this.layout.Data);
            }
        }

        private void InvalidateInside()
        {
            if (base.IsHandleCreated)
            {
                base.Invalidate(this.layout.Inside);
            }
        }

        public void InvalidateRow(int rowIndex)
        {
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            this.InvalidateRowPrivate(rowIndex);
        }

        private void InvalidateRowHeights()
        {
            this.Rows.InvalidateCachedRowsHeights();
            if (base.IsHandleCreated)
            {
                this.PerformLayoutPrivate(false, false, false, false);
                base.Invalidate();
            }
        }

        private void InvalidateRowPrivate(int rowIndex)
        {
            if (base.IsHandleCreated)
            {
                Rectangle rowDisplayRectanglePrivate = this.GetRowDisplayRectanglePrivate(rowIndex, true);
                if (!rowDisplayRectanglePrivate.IsEmpty)
                {
                    base.Invalidate(rowDisplayRectanglePrivate);
                }
            }
        }

        private void InvalidateRows(int lo, int hi)
        {
            if (this.Rows.GetRowCount(DataGridViewElementStates.Visible) != 0)
            {
                Rectangle data = this.layout.Data;
                if ((this.Rows.GetRowState(lo) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
                {
                    lo = this.Rows.GetNextRow(lo, DataGridViewElementStates.Visible);
                }
                if (lo != -1)
                {
                    int top;
                    int bottom;
                    if ((this.Rows.GetRowState(hi) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
                    {
                        hi = this.Rows.GetPreviousRow(hi, DataGridViewElementStates.Visible);
                    }
                    Rectangle rowDisplayRectangle = this.GetRowDisplayRectangle(lo, true);
                    if (rowDisplayRectangle.IsEmpty)
                    {
                        if ((this.Rows.GetRowState(lo) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
                        {
                            return;
                        }
                        if (this.displayedBandsInfo.NumDisplayedScrollingRows == 0)
                        {
                            return;
                        }
                        if ((lo >= this.displayedBandsInfo.FirstDisplayedScrollingRow) && (this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, lo) >= this.displayedBandsInfo.NumDisplayedScrollingRows))
                        {
                            return;
                        }
                        top = this.GetRowDisplayRectangle(this.displayedBandsInfo.FirstDisplayedScrollingRow, true).Top;
                    }
                    else
                    {
                        top = rowDisplayRectangle.Top;
                    }
                    rowDisplayRectangle = this.GetRowDisplayRectangle(hi, true);
                    if (!rowDisplayRectangle.IsEmpty)
                    {
                        bottom = rowDisplayRectangle.Bottom;
                    }
                    else if ((this.Rows.GetRowState(hi) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen)
                    {
                        bottom = data.Bottom;
                    }
                    else if (hi > this.displayedBandsInfo.FirstDisplayedScrollingRow)
                    {
                        bottom = data.Bottom;
                    }
                    else
                    {
                        if (this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen) == 0)
                        {
                            return;
                        }
                        bottom = 0;
                        int rowIndex = 0;
                        while (rowIndex < this.displayedBandsInfo.NumDisplayedFrozenRows)
                        {
                            if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
                            {
                                if (rowIndex == (this.displayedBandsInfo.NumDisplayedFrozenRows - 1))
                                {
                                    bottom = this.GetRowDisplayRectangle(rowIndex, true).Bottom;
                                    break;
                                }
                                rowIndex++;
                            }
                        }
                        if (bottom <= top)
                        {
                            return;
                        }
                    }
                    base.Invalidate(new Rectangle(data.X, top, data.Width, bottom - top));
                }
            }
        }

        private void InvalidateScrollBars()
        {
            if ((this.horizScrollBar != null) && this.horizScrollBar.Visible)
            {
                this.horizScrollBar.Invalidate();
            }
            if ((this.vertScrollBar != null) && this.vertScrollBar.Visible)
            {
                this.vertScrollBar.Invalidate();
            }
        }

        private bool IsColumnOutOfBounds(int columnIndex)
        {
            if (columnIndex < this.Columns.Count)
            {
                return (columnIndex == -1);
            }
            return true;
        }

        private bool IsInnerCellOutOfBounds(int columnIndex, int rowIndex)
        {
            if (((columnIndex < this.Columns.Count) && (rowIndex < this.Rows.Count)) && (columnIndex != -1))
            {
                return (rowIndex == -1);
            }
            return true;
        }

        protected override bool IsInputChar(char charCode) => 
            (((this.editingControl != null) && this.dataGridViewState1[0x20]) || base.IsInputChar(charCode));

        protected override bool IsInputKey(Keys keyData)
        {
            if ((keyData & Keys.Alt) == Keys.Alt)
            {
                return false;
            }
            switch ((keyData & Keys.KeyCode))
            {
                case Keys.Escape:
                    return this.IsEscapeKeyEffective;

                case Keys.Space:
                    if ((((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) != Keys.Shift) || ((this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect) && (this.SelectionMode != DataGridViewSelectionMode.RowHeaderSelect))) || (this.ptCurrentCell.X == -1))
                    {
                        break;
                    }
                    return true;

                case Keys.PageUp:
                case Keys.Next:
                case Keys.End:
                case Keys.Home:
                case Keys.Left:
                case Keys.Up:
                case Keys.Right:
                case Keys.Down:
                case Keys.Delete:
                case Keys.D0:
                case Keys.Enter:
                case Keys.NumPad0:
                case Keys.F2:
                    return true;

                case Keys.Insert:
                case Keys.C:
                    if ((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) != Keys.Control)
                    {
                        break;
                    }
                    return true;

                case Keys.Tab:
                    return this.GetTabKeyEffective((keyData & Keys.Shift) == Keys.Shift, (keyData & Keys.Control) == Keys.Control);

                case Keys.A:
                    if ((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) != Keys.Control)
                    {
                        break;
                    }
                    return true;
            }
            return base.IsInputKey(keyData);
        }

        private bool IsRowOutOfBounds(int rowIndex)
        {
            if (rowIndex < this.Rows.Count)
            {
                return (rowIndex == -1);
            }
            return true;
        }

        private bool IsSharedCellReadOnly(DataGridViewCell dataGridViewCell, int rowIndex)
        {
            DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
            return (((this.ReadOnly || ((rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None)) || ((dataGridViewCell.OwningColumn != null) && dataGridViewCell.OwningColumn.ReadOnly)) || dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly));
        }

        internal bool IsSharedCellSelected(DataGridViewCell dataGridViewCell, int rowIndex) => 
            ((((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None) || ((dataGridViewCell.OwningColumn != null) && dataGridViewCell.OwningColumn.Selected)) || dataGridViewCell.StateIncludes(DataGridViewElementStates.Selected));

        internal bool IsSharedCellVisible(DataGridViewCell dataGridViewCell, int rowIndex)
        {
            if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
            {
                return false;
            }
            return ((dataGridViewCell.OwningColumn != null) && dataGridViewCell.OwningColumn.Visible);
        }

        private void LayoutScrollBars()
        {
            base.SuspendLayout();
            try
            {
                int firstDisplayedScrollingRow;
                bool flag = ((this.scrollBars == System.Windows.Forms.ScrollBars.Both) || (this.scrollBars == System.Windows.Forms.ScrollBars.Horizontal)) && this.dataGridViewState2[0x2000000];
                bool flag2 = (this.scrollBars == System.Windows.Forms.ScrollBars.Both) || (this.scrollBars == System.Windows.Forms.ScrollBars.Vertical);
                bool flag3 = false;
                bool flag4 = false;
                bool flag5 = false;
                bool rightToLeftInternal = this.RightToLeftInternal;
                int columnCount = this.Columns.GetColumnCount(DataGridViewElementStates.Visible);
                int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible);
                int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible);
                int num5 = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
                int totalVisibleFrozenHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                int num8 = this.horizScrollBar.Height = SystemInformation.HorizontalScrollBarHeight;
                int num9 = this.vertScrollBar.Width = SystemInformation.VerticalScrollBarWidth;
                if ((flag && (columnsWidth > this.layout.Data.Width)) && ((num5 < this.layout.Data.Width) && (num8 <= this.layout.Data.Height)))
                {
                    int height = this.layout.Data.Height;
                    this.layout.Data.Height -= num8;
                    flag3 = flag4 = true;
                    if (((columnsWidth - this.layout.Data.Width) <= num9) || ((this.layout.Data.Width - num5) <= num9))
                    {
                        firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                        this.ComputeVisibleRows();
                        if (((this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen)) && (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != (rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen)))) && ((rowsHeight - totalVisibleFrozenHeight) != this.ComputeHeightOfFittingTrailingScrollingRows(totalVisibleFrozenHeight)))
                        {
                            flag4 = num5 < (this.layout.Data.Width - num9);
                        }
                        this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
                    }
                    if (flag4)
                    {
                        if (this.layout.RowHeadersVisible)
                        {
                            this.layout.RowHeaders.Height -= num8;
                        }
                    }
                    else
                    {
                        this.layout.Data.Height = height;
                    }
                }
                firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                this.ComputeVisibleRows();
                if (((flag2 && (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen))) && ((this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != (rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen))) && ((rowsHeight - totalVisibleFrozenHeight) != this.ComputeHeightOfFittingTrailingScrollingRows(totalVisibleFrozenHeight)))) && ((this.layout.Data.Height > totalVisibleFrozenHeight) && (num9 <= this.layout.Data.Width)))
                {
                    this.layout.Data.Width -= num9;
                    if (rightToLeftInternal)
                    {
                        this.layout.Data.X += num9;
                    }
                    if (this.layout.ColumnHeadersVisible)
                    {
                        this.layout.ColumnHeaders.Width -= num9;
                        if (rightToLeftInternal)
                        {
                            this.layout.ColumnHeaders.X += num9;
                        }
                    }
                    flag5 = true;
                }
                this.displayedBandsInfo.FirstDisplayedScrollingCol = this.ComputeFirstVisibleScrollingColumn();
                this.ComputeVisibleColumns();
                if (((flag && flag5) && (!flag4 && (columnsWidth > this.layout.Data.Width))) && ((num5 < this.layout.Data.Width) && (num8 <= this.layout.Data.Height)))
                {
                    this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
                    if (this.layout.ColumnHeadersVisible)
                    {
                        this.layout.ColumnHeaders.Width += num9;
                        if (rightToLeftInternal)
                        {
                            this.layout.ColumnHeaders.X -= num9;
                        }
                    }
                    this.layout.Data.Width += num9;
                    if (rightToLeftInternal)
                    {
                        this.layout.Data.X -= num9;
                    }
                    this.layout.Data.Height -= num8;
                    flag5 = false;
                    this.ComputeVisibleRows();
                    if ((((this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen)) && (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount)) && (((rowsHeight - totalVisibleFrozenHeight) != this.ComputeHeightOfFittingTrailingScrollingRows(totalVisibleFrozenHeight)) && (this.layout.Data.Height > totalVisibleFrozenHeight))) && (num9 <= this.layout.Data.Width))
                    {
                        this.layout.Data.Width -= num9;
                        if (rightToLeftInternal)
                        {
                            this.layout.Data.X += num9;
                        }
                        if (this.layout.ColumnHeadersVisible)
                        {
                            this.layout.ColumnHeaders.Width -= num9;
                            if (rightToLeftInternal)
                            {
                                this.layout.ColumnHeaders.X += num9;
                            }
                        }
                        flag5 = true;
                    }
                    if (flag5)
                    {
                        flag4 = true;
                    }
                    else
                    {
                        flag4 = flag3;
                    }
                }
                this.layout.ResizeBoxRect = new Rectangle();
                if (flag5 && flag4)
                {
                    this.layout.ResizeBoxRect = new Rectangle(rightToLeftInternal ? (this.layout.Data.X - this.vertScrollBar.Width) : this.layout.Data.Right, this.layout.Data.Bottom, this.vertScrollBar.Width, this.horizScrollBar.Height);
                }
                if (flag4 && (columnCount > 0))
                {
                    int num11 = columnsWidth - this.layout.Data.Width;
                    this.horizScrollBar.Minimum = 0;
                    this.horizScrollBar.Maximum = columnsWidth - num5;
                    this.horizScrollBar.SmallChange = 1;
                    this.horizScrollBar.LargeChange = Math.Max((columnsWidth - num5) - num11, 0);
                    this.horizScrollBar.Enabled = base.Enabled;
                    this.horizScrollBar.Bounds = new Rectangle(rightToLeftInternal ? (this.layout.Inside.X + this.layout.ResizeBoxRect.Width) : this.layout.Inside.X, this.layout.Data.Bottom, this.layout.Inside.Width - this.layout.ResizeBoxRect.Width, this.horizScrollBar.Height);
                    this.horizScrollBar.Visible = true;
                    this.horizScrollBar.Invalidate();
                }
                else
                {
                    this.horizScrollBar.Visible = false;
                    this.HorizontalOffset = 0;
                    this.horizScrollBar.Enabled = false;
                    this.horizScrollBar.Minimum = 0;
                    this.horizScrollBar.Maximum = 1;
                    this.horizScrollBar.SmallChange = 1;
                    this.horizScrollBar.LargeChange = 1;
                    this.horizScrollBar.Value = 0;
                }
                if (flag5)
                {
                    int y = this.layout.Data.Y;
                    int num13 = this.layout.Data.Height;
                    if (this.layout.ColumnHeadersVisible)
                    {
                        y = this.layout.ColumnHeaders.Y;
                        num13 += this.layout.ColumnHeaders.Height;
                    }
                    else if (this.SingleHorizontalBorderAdded)
                    {
                        y--;
                        num13++;
                    }
                    this.vertScrollBar.Minimum = 0;
                    this.vertScrollBar.Maximum = rowsHeight - totalVisibleFrozenHeight;
                    this.vertScrollBar.Value = this.ComputeHeightOfScrolledOffRows();
                    this.vertScrollBar.LargeChange = this.layout.Data.Height - totalVisibleFrozenHeight;
                    this.vertScrollBar.Bounds = new Rectangle(rightToLeftInternal ? (this.layout.Data.X - this.vertScrollBar.Width) : this.layout.Data.Right, y, this.vertScrollBar.Width, num13);
                    this.vertScrollBar.Enabled = base.Enabled;
                    this.vertScrollBar.Visible = true;
                    this.vertScrollBar.Invalidate();
                    this.verticalOffset = this.vertScrollBar.Value;
                }
                else
                {
                    this.vertScrollBar.Visible = false;
                    this.verticalOffset = 0;
                    this.vertScrollBar.Enabled = false;
                    this.vertScrollBar.Minimum = 0;
                    this.vertScrollBar.Maximum = 1;
                    this.vertScrollBar.LargeChange = 1;
                    this.vertScrollBar.Value = 0;
                }
            }
            finally
            {
                base.ResumeLayout(false);
            }
        }

        private void MakeFirstDisplayedCellCurrentCell(bool includeNewRow)
        {
            Point firstDisplayedCellAddress = this.FirstDisplayedCellAddress;
            if ((firstDisplayedCellAddress.X != -1) && ((includeNewRow || !this.AllowUserToAddRowsInternal) || (firstDisplayedCellAddress.Y != (this.Rows.Count - 1))))
            {
                this.SetAndSelectCurrentCellAddress(firstDisplayedCellAddress.X, firstDisplayedCellAddress.Y, true, false, false, true, false);
            }
        }

        private static DataGridViewAutoSizeRowMode MapAutoSizeRowsModeToRowMode(DataGridViewAutoSizeRowsMode autoSizeRowsMode)
        {
            switch (autoSizeRowsMode)
            {
                case DataGridViewAutoSizeRowsMode.AllHeaders:
                    return DataGridViewAutoSizeRowMode.RowHeader;

                case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
                    return DataGridViewAutoSizeRowMode.AllCellsExceptHeader;

                case DataGridViewAutoSizeRowsMode.AllCells:
                    return DataGridViewAutoSizeRowMode.AllCells;

                case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
                    return DataGridViewAutoSizeRowMode.RowHeader;

                case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
                    return DataGridViewAutoSizeRowMode.AllCellsExceptHeader;

                case DataGridViewAutoSizeRowsMode.DisplayedCells:
                    return DataGridViewAutoSizeRowMode.AllCells;
            }
            return DataGridViewAutoSizeRowMode.RowHeader;
        }

        private void MapDataGridViewColumnToDataBoundField(DataGridViewColumn dataGridViewColumn)
        {
            DataGridViewDataConnection dataConnection = this.DataConnection;
            int boundColumnIndex = (dataConnection == null) ? -1 : dataConnection.BoundColumnIndex(dataGridViewColumn.DataPropertyName);
            if (boundColumnIndex != -1)
            {
                dataGridViewColumn.IsDataBoundInternal = true;
                dataGridViewColumn.BoundColumnIndex = boundColumnIndex;
                dataGridViewColumn.BoundColumnConverter = dataConnection.BoundColumnConverter(boundColumnIndex);
                dataGridViewColumn.ValueType = dataConnection.BoundColumnValueType(boundColumnIndex);
                dataGridViewColumn.ReadOnly = dataConnection.DataFieldIsReadOnly(dataGridViewColumn.BoundColumnIndex) || dataGridViewColumn.ReadOnly;
                this.InvalidateColumnInternal(dataGridViewColumn.Index);
                if ((dataGridViewColumn.SortMode != DataGridViewColumnSortMode.NotSortable) && !this.dataGridViewOper[0x400])
                {
                    dataGridViewColumn.HeaderCell.SortGlyphDirection = dataConnection.BoundColumnSortOrder(boundColumnIndex);
                    if ((this.sortedColumn == null) && (dataGridViewColumn.HeaderCell.SortGlyphDirection != System.Windows.Forms.SortOrder.None))
                    {
                        this.sortedColumn = dataGridViewColumn;
                        this.sortOrder = dataGridViewColumn.HeaderCell.SortGlyphDirection;
                    }
                }
            }
            else
            {
                dataGridViewColumn.IsDataBoundInternal = false;
                dataGridViewColumn.BoundColumnIndex = -1;
                dataGridViewColumn.BoundColumnConverter = null;
                this.InvalidateColumnInternal(dataGridViewColumn.Index);
            }
        }

        private void MoveColumnHeadersOrRowResize(MouseEventArgs e)
        {
            this.lastRowSplitBar = this.currentRowSplitBar;
            this.currentRowSplitBar = e.Y;
            Rectangle rect = this.CalcRowResizeFeedbackRect(this.lastRowSplitBar);
            if (((this.editingControl != null) && !this.dataGridViewState1[0x1000]) && this.editingPanel.Bounds.IntersectsWith(rect))
            {
                this.editingPanel.Invalidate();
                this.editingPanel.Update();
                this.editingControl.Invalidate();
                this.editingControl.Update();
            }
            base.Invalidate(rect);
            base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
        }

        private void MoveColumnRelocation(MouseEventArgs e, HitTestInfo hti)
        {
            this.lastHeaderShadow = e.X;
            this.dataGridViewState2[0x400] = this.ColumnRelocationTarget(e, hti, out this.trackColumnEdge);
            base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
        }

        private void MoveRowHeadersOrColumnResize(MouseEventArgs e)
        {
            this.lastColSplitBar = this.currentColSplitBar;
            this.currentColSplitBar = e.X;
            Rectangle rect = this.CalcColResizeFeedbackRect(this.lastColSplitBar);
            if (((this.editingControl != null) && !this.dataGridViewState1[0x1000]) && this.editingPanel.Bounds.IntersectsWith(rect))
            {
                this.editingPanel.Invalidate();
                this.editingPanel.Update();
                this.editingControl.Invalidate();
                this.editingControl.Update();
            }
            base.Invalidate(rect);
            base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
        }

        public virtual void NotifyCurrentCellDirty(bool dirty)
        {
            if (!this.dataGridViewState1[0x200])
            {
                this.IsCurrentCellDirtyInternal = dirty;
                if ((dirty && (this.editingControl != null)) && ((IDataGridViewEditingControl) this.editingControl).RepositionEditingControlOnValueChange)
                {
                    this.PositionEditingControl(true, true, false);
                }
            }
        }

        internal void OnAddedColumn(DataGridViewColumn dataGridViewColumn)
        {
            if ((dataGridViewColumn.DisplayIndex == -1) || (dataGridViewColumn.DisplayIndex >= this.Columns.Count))
            {
                dataGridViewColumn.DisplayIndexInternal = dataGridViewColumn.Index;
            }
            this.CorrectColumnDisplayIndexesAfterInsertion(dataGridViewColumn);
            if (dataGridViewColumn.HasHeaderCell)
            {
                dataGridViewColumn.HeaderCell.DataGridViewInternal = this;
            }
            this.AdjustExpandingRows(dataGridViewColumn.Index, false);
            DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.InheritedAutoSizeMode;
            bool fixedColumnWidth = (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None) || (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill);
            if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
            {
                this.AutoResizeColumnHeadersHeight(dataGridViewColumn.Index, true, fixedColumnWidth);
            }
            if (!fixedColumnWidth)
            {
                dataGridViewColumn.CachedThickness = dataGridViewColumn.Thickness;
                this.AutoResizeColumnInternal(dataGridViewColumn.Index, (DataGridViewAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, true);
                if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(dataGridViewColumn.Index, true, true);
                }
            }
            this.OnColumnAdded(new DataGridViewColumnEventArgs(dataGridViewColumn));
        }

        internal void OnAddedRow_PostNotification(int rowIndex)
        {
            DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
            if ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
            {
                bool flag3;
                bool flag = (rowState & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None;
                DataGridViewAutoSizeRowsModeInternal autoSizeRowsMode = (DataGridViewAutoSizeRowsModeInternal) this.autoSizeRowsMode;
                bool flag2 = false;
                if ((autoSizeRowsMode != DataGridViewAutoSizeRowsModeInternal.None) && (((autoSizeRowsMode & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None) || flag))
                {
                    int height = this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
                    this.Rows.SharedRow(rowIndex).CachedThickness = height;
                    this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
                    flag2 = true;
                }
                DataGridViewAutoSizeColumnCriteriaInternal allRows = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
                if (flag)
                {
                    allRows |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
                }
                if (this.Rows.GetRowCount(DataGridViewElementStates.Visible) > 1)
                {
                    flag3 = this.AdjustExpandingColumns(allRows, rowIndex);
                }
                else
                {
                    flag3 = this.AutoResizeAllVisibleColumnsInternal(allRows, true);
                }
                bool fixedColumnHeadersHeight = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
                bool flag5 = (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing);
                if (!flag5 && !flag3)
                {
                    fixedColumnHeadersHeight = true;
                }
                if (flag5)
                {
                    this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, fixedColumnHeadersHeight, true);
                }
                if (!fixedColumnHeadersHeight)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
                if (flag2)
                {
                    this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                }
                if (flag5 && !fixedColumnHeadersHeight)
                {
                    this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, true, true);
                }
            }
        }

        internal void OnAddedRow_PreNotification(int rowIndex)
        {
            if (this.AllowUserToAddRowsInternal && (this.newRowIndex == -1))
            {
                this.newRowIndex = rowIndex;
            }
            if (((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None) && !this.ReadOnly)
            {
                foreach (DataGridViewCell cell in this.Rows.SharedRow(rowIndex).Cells)
                {
                    if (!cell.OwningColumn.ReadOnly && this.IsSharedCellReadOnly(cell, rowIndex))
                    {
                        this.individualReadOnlyCells.Add(cell);
                    }
                }
            }
        }

        internal void OnAddedRows_PostNotification(DataGridViewRow[] dataGridViewRows)
        {
            foreach (DataGridViewRow row in dataGridViewRows)
            {
                this.OnAddedRow_PostNotification(row.Index);
            }
        }

        internal void OnAddedRows_PreNotification(DataGridViewRow[] dataGridViewRows)
        {
            foreach (DataGridViewRow row in dataGridViewRows)
            {
                this.OnAddedRow_PreNotification(row.Index);
            }
        }

        internal void OnAddingColumn(DataGridViewColumn dataGridViewColumn)
        {
            if (dataGridViewColumn == null)
            {
                throw new ArgumentNullException("dataGridViewColumn");
            }
            if (dataGridViewColumn.DataGridView != null)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
            }
            if ((!this.InInitialization && (dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic)) && ((this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect) || (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)))
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[] { DataGridViewColumnSortMode.Automatic.ToString(), this.SelectionMode.ToString() }));
            }
            if (dataGridViewColumn.Visible)
            {
                if (!this.ColumnHeadersVisible && ((dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader) || ((dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader))))
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
                }
                if (dataGridViewColumn.Frozen && ((dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill) || ((dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill))))
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddAutoFillColumn"));
                }
                this.dataGridViewState2[0x4000000] = true;
            }
            float num = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None) + dataGridViewColumn.FillWeight;
            if (num > 65535f)
            {
                object[] args = new object[] { ((ushort) 0xffff).ToString(CultureInfo.CurrentCulture) };
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", args));
            }
            this.CorrectColumnFrozenState(dataGridViewColumn, this.Columns.Count);
            if (this.Rows.Count > 0)
            {
                if (dataGridViewColumn.CellType == null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddUntypedColumn"));
                }
                if ((dataGridViewColumn.CellTemplate.DefaultNewRowValue != null) && (this.newRowIndex != -1))
                {
                    DataGridViewRow row1 = this.Rows[this.newRowIndex];
                }
                int num2 = this.Columns.Count + 1;
                try
                {
                    for (int i = 0; i < this.Rows.Count; i++)
                    {
                        DataGridViewRow row = this.Rows.SharedRow(i);
                        if (row.Cells.Count < num2)
                        {
                            DataGridViewCell dataGridViewCell = (DataGridViewCell) dataGridViewColumn.CellTemplate.Clone();
                            row.Cells.AddInternal(dataGridViewCell);
                            if (i == this.newRowIndex)
                            {
                                dataGridViewCell.SetValueInternal(i, dataGridViewCell.DefaultNewRowValue);
                            }
                            dataGridViewCell.DataGridViewInternal = this;
                            dataGridViewCell.OwningRowInternal = row;
                            dataGridViewCell.OwningColumnInternal = dataGridViewColumn;
                        }
                    }
                }
                catch
                {
                    for (int j = 0; j < this.Rows.Count; j++)
                    {
                        DataGridViewRow row2 = this.Rows.SharedRow(j);
                        if (row2.Cells.Count != num2)
                        {
                            break;
                        }
                        row2.Cells.RemoveAtInternal(num2 - 1);
                    }
                    throw;
                }
            }
        }

        internal void OnAddingColumns(DataGridViewColumn[] dataGridViewColumns)
        {
            float columnsFillWeight = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None);
            foreach (DataGridViewColumn column in dataGridViewColumns)
            {
                if (column == null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_AtLeastOneColumnIsNull"));
                }
                if (column.DataGridView != null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
                }
                if ((this.Rows.Count > 0) && (column.CellType == null))
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddUntypedColumn"));
                }
                if ((!this.InInitialization && (column.SortMode == DataGridViewColumnSortMode.Automatic)) && ((this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect) || (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)))
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[] { DataGridViewColumnSortMode.Automatic.ToString(), this.SelectionMode.ToString() }));
                }
                if (column.Visible)
                {
                    if (!this.ColumnHeadersVisible && ((column.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader) || ((column.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader))))
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
                    }
                    if (column.Frozen && ((column.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill) || ((column.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill))))
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddAutoFillColumn"));
                    }
                    this.dataGridViewState2[0x4000000] = true;
                }
                columnsFillWeight += column.FillWeight;
                if (columnsFillWeight > 65535f)
                {
                    object[] args = new object[] { ((ushort) 0xffff).ToString(CultureInfo.CurrentCulture) };
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", args));
                }
            }
            int length = dataGridViewColumns.Length;
            for (int i = 0; i < (length - 1); i++)
            {
                for (int j = i + 1; j < length; j++)
                {
                    if (dataGridViewColumns[i] == dataGridViewColumns[j])
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddIdenticalColumns"));
                    }
                }
            }
            this.CorrectColumnFrozenStates(dataGridViewColumns);
            if (this.Rows.Count > 0)
            {
                foreach (DataGridViewColumn column2 in dataGridViewColumns)
                {
                    if ((column2.CellTemplate.DefaultNewRowValue != null) && (this.newRowIndex != -1))
                    {
                        DataGridViewRow row1 = this.Rows[this.newRowIndex];
                        break;
                    }
                }
                int count = this.Columns.Count;
                int num6 = 0;
                try
                {
                    foreach (DataGridViewColumn column3 in dataGridViewColumns)
                    {
                        num6++;
                        for (int k = 0; k < this.Rows.Count; k++)
                        {
                            DataGridViewRow row = this.Rows.SharedRow(k);
                            if (row.Cells.Count < (count + num6))
                            {
                                DataGridViewCell dataGridViewCell = (DataGridViewCell) column3.CellTemplate.Clone();
                                row.Cells.AddInternal(dataGridViewCell);
                                if (k == this.newRowIndex)
                                {
                                    dataGridViewCell.Value = dataGridViewCell.DefaultNewRowValue;
                                }
                                dataGridViewCell.DataGridViewInternal = this;
                                dataGridViewCell.OwningRowInternal = row;
                                dataGridViewCell.OwningColumnInternal = column3;
                            }
                        }
                    }
                }
                catch
                {
                    for (int m = 0; m < this.Rows.Count; m++)
                    {
                        DataGridViewRow row2 = this.Rows.SharedRow(m);
                        while (row2.Cells.Count > count)
                        {
                            row2.Cells.RemoveAtInternal(row2.Cells.Count - 1);
                        }
                    }
                    throw;
                }
            }
        }

        internal void OnAddingRow(DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, bool checkFrozenState)
        {
            if (dataGridViewRow == null)
            {
                throw new ArgumentNullException("dataGridViewRow");
            }
            if (checkFrozenState)
            {
                this.CorrectRowFrozenState(dataGridViewRow, rowState, this.Rows.Count);
            }
            if ((this.ReadOnly && (dataGridViewRow.DataGridView == null)) && dataGridViewRow.ReadOnly)
            {
                dataGridViewRow.ReadOnly = false;
            }
            int num = 0;
            foreach (DataGridViewColumn column in this.Columns)
            {
                DataGridViewCell cell = dataGridViewRow.Cells[num];
                if ((this.ReadOnly || column.ReadOnly) && cell.StateIncludes(DataGridViewElementStates.ReadOnly))
                {
                    cell.ReadOnlyInternal = false;
                }
                num++;
            }
        }

        internal void OnAddingRows(DataGridViewRow[] dataGridViewRows, bool checkFrozenStates)
        {
            foreach (DataGridViewRow row in dataGridViewRows)
            {
                if (row == null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_AtLeastOneRowIsNull"));
                }
                if (row.DataGridView != null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_RowAlreadyBelongsToDataGridView"));
                }
                if (row.Selected)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewRowCollection_CannotAddOrInsertSelectedRow"));
                }
                if (row.Cells.Count > this.Columns.Count)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewRowCollection_TooManyCells"));
                }
            }
            int length = dataGridViewRows.Length;
            for (int i = 0; i < (length - 1); i++)
            {
                for (int j = i + 1; j < length; j++)
                {
                    if (dataGridViewRows[i] == dataGridViewRows[j])
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddIdenticalRows"));
                    }
                }
            }
            if (checkFrozenStates)
            {
                this.CorrectRowFrozenStates(dataGridViewRows, this.Rows.Count);
            }
            foreach (DataGridViewRow row2 in dataGridViewRows)
            {
                this.CompleteCellsCollection(row2);
                this.OnAddingRow(row2, row2.State, false);
            }
        }

        internal void OnAdvancedBorderStyleChanged(DataGridViewAdvancedBorderStyle dgvabs)
        {
            if (!this.dataGridViewOper[0x10000])
            {
                if (dgvabs == this.advancedCellBorderStyle)
                {
                    this.OnCellBorderStyleChanged(EventArgs.Empty);
                }
                else if (dgvabs == this.advancedColumnHeadersBorderStyle)
                {
                    this.OnColumnHeadersBorderStyleChanged(EventArgs.Empty);
                }
                else if (dgvabs == this.advancedRowHeadersBorderStyle)
                {
                    this.OnRowHeadersBorderStyleChanged(EventArgs.Empty);
                }
            }
        }

        protected virtual void OnAllowUserToAddRowsChanged(EventArgs e)
        {
            this.PushAllowUserToAddRows();
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnAllowUserToDeleteRowsChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnAllowUserToOrderColumnsChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnAllowUserToResizeColumnsChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnAllowUserToResizeRowsChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnAlternatingRowsDefaultCellStyleChanged(EventArgs e)
        {
            DataGridViewCellStyleChangedEventArgs args = e as DataGridViewCellStyleChangedEventArgs;
            if ((args != null) && !args.ChangeAffectsPreferredSize)
            {
                this.InvalidateData();
            }
            else
            {
                this.OnRowsGlobalAutoSize();
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(true, true, false);
                }
            }
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnAutoGenerateColumnsChanged(EventArgs e)
        {
            if (this.AutoGenerateColumns && (this.DataSource != null))
            {
                this.RefreshColumnsAndRows();
            }
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnAutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventArgs e)
        {
            DataGridViewColumn column = e.Column;
            if (e.Column == null)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("InvalidNullArgument", new object[] { "e.Column" }));
            }
            DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = column.InheritedAutoSizeMode;
            DataGridViewAutoSizeColumnMode previousMode = e.PreviousMode;
            bool flag = ((previousMode != DataGridViewAutoSizeColumnMode.Fill) && (previousMode != DataGridViewAutoSizeColumnMode.None)) && (previousMode != DataGridViewAutoSizeColumnMode.NotSet);
            if ((inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill) || (previousMode == DataGridViewAutoSizeColumnMode.Fill))
            {
                this.dataGridViewState2[0x4000000] = true;
            }
            bool fixedHeight = (this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) == DataGridViewAutoSizeRowsMode.None;
            switch (inheritedAutoSizeMode)
            {
                case DataGridViewAutoSizeColumnMode.None:
                    if ((column.Thickness != column.CachedThickness) && flag)
                    {
                        column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
                    }
                    break;

                case DataGridViewAutoSizeColumnMode.Fill:
                    break;

                default:
                    if (!flag)
                    {
                        column.CachedThickness = column.Thickness;
                    }
                    this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, fixedHeight);
                    break;
            }
            this.PerformLayoutPrivate(false, true, true, false);
            if (!fixedHeight)
            {
                this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(column.Index, true, true);
                }
                if ((inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None) && (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill))
                {
                    this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, true);
                }
            }
            DataGridViewAutoSizeColumnModeEventHandler handler = base.Events[EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED] as DataGridViewAutoSizeColumnModeEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnAutoSizeColumnModeChanged(DataGridViewColumn dataGridViewColumn, DataGridViewAutoSizeColumnMode previousInheritedMode)
        {
            DataGridViewAutoSizeColumnModeEventArgs e = new DataGridViewAutoSizeColumnModeEventArgs(dataGridViewColumn, previousInheritedMode);
            this.OnAutoSizeColumnModeChanged(e);
        }

        protected virtual void OnAutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventArgs e)
        {
            DataGridViewAutoSizeColumnMode[] previousModes = e.PreviousModes;
            if (previousModes == null)
            {
                throw new ArgumentNullException("e.PreviousModes");
            }
            if (previousModes.Length != this.Columns.Count)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_PreviousModesHasWrongLength"));
            }
            foreach (DataGridViewColumn column in this.Columns)
            {
                if (column.Visible)
                {
                    DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = column.InheritedAutoSizeMode;
                    DataGridViewAutoSizeColumnMode mode2 = previousModes[column.Index];
                    bool flag = ((mode2 != DataGridViewAutoSizeColumnMode.Fill) && (mode2 != DataGridViewAutoSizeColumnMode.None)) && (mode2 != DataGridViewAutoSizeColumnMode.NotSet);
                    if ((inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill) || (mode2 == DataGridViewAutoSizeColumnMode.Fill))
                    {
                        this.dataGridViewState2[0x4000000] = true;
                    }
                    switch (inheritedAutoSizeMode)
                    {
                        case DataGridViewAutoSizeColumnMode.None:
                        {
                            if ((column.Thickness != column.CachedThickness) && flag)
                            {
                                column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
                            }
                            continue;
                        }
                        case DataGridViewAutoSizeColumnMode.Fill:
                        {
                            continue;
                        }
                    }
                    if (!flag)
                    {
                        column.CachedThickness = column.Thickness;
                    }
                    this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, (this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) == DataGridViewAutoSizeRowsMode.None);
                }
            }
            this.PerformLayoutPrivate(false, true, true, false);
            if ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None)
            {
                this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
                foreach (DataGridViewColumn column2 in this.Columns)
                {
                    DataGridViewAutoSizeColumnMode mode3 = column2.InheritedAutoSizeMode;
                    if ((mode3 != DataGridViewAutoSizeColumnMode.None) && (mode3 != DataGridViewAutoSizeColumnMode.Fill))
                    {
                        this.AutoResizeColumnInternal(column2.Index, (DataGridViewAutoSizeColumnCriteriaInternal) mode3, true);
                    }
                }
            }
            DataGridViewAutoSizeColumnsModeEventHandler handler = base.Events[EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED] as DataGridViewAutoSizeColumnsModeEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnAutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventArgs e)
        {
            if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
            {
                this.RestoreRowsCachedThickness();
            }
            else
            {
                if (!e.PreviousModeAutoSized)
                {
                    for (int i = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); i != -1; i = this.Rows.GetNextRow(i, DataGridViewElementStates.Visible))
                    {
                        int height = this.Rows.SharedRow(i).GetHeight(i);
                        this.Rows.SharedRow(i).CachedThickness = height;
                    }
                }
                this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
            }
            DataGridViewAutoSizeModeEventHandler handler = base.Events[EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED] as DataGridViewAutoSizeModeEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnBackgroundColorChanged(EventArgs e)
        {
            this.InvalidateInside();
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnBandContextMenuStripChanged(DataGridViewBand dataGridViewBand)
        {
            DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
            if (dataGridViewColumn != null)
            {
                DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
                this.OnColumnContextMenuStripChanged(e);
            }
            else
            {
                DataGridViewRowEventArgs args2 = new DataGridViewRowEventArgs((DataGridViewRow) dataGridViewBand);
                this.OnRowContextMenuStripChanged(args2);
            }
        }

        internal void OnBandDefaultCellStyleChanged(DataGridViewBand dataGridViewBand)
        {
            DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
            if (dataGridViewColumn != null)
            {
                DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
                this.OnColumnDefaultCellStyleChanged(e);
            }
            else
            {
                DataGridViewRowEventArgs args2 = new DataGridViewRowEventArgs((DataGridViewRow) dataGridViewBand);
                this.OnRowDefaultCellStyleChanged(args2);
            }
        }

        internal void OnBandDividerThicknessChanged(DataGridViewBand dataGridViewBand)
        {
            DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
            if (dataGridViewColumn != null)
            {
                DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
                this.OnColumnDividerWidthChanged(e);
            }
            else
            {
                DataGridViewRowEventArgs args2 = new DataGridViewRowEventArgs((DataGridViewRow) dataGridViewBand);
                this.OnRowDividerHeightChanged(args2);
            }
        }

        internal void OnBandHeaderCellChanged(DataGridViewBand dataGridViewBand)
        {
            DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
            if (dataGridViewColumn != null)
            {
                DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
                this.OnColumnHeaderCellChanged(e);
            }
            else
            {
                DataGridViewRowEventArgs args2 = new DataGridViewRowEventArgs((DataGridViewRow) dataGridViewBand);
                this.OnRowHeaderCellChanged(args2);
            }
        }

        internal void OnBandMinimumThicknessChanged(DataGridViewBand dataGridViewBand)
        {
            DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
            if (dataGridViewColumn != null)
            {
                DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
                this.OnColumnMinimumWidthChanged(e);
            }
            else
            {
                DataGridViewRowEventArgs args2 = new DataGridViewRowEventArgs((DataGridViewRow) dataGridViewBand);
                this.OnRowMinimumHeightChanged(args2);
            }
        }

        internal void OnBandThicknessChanged(DataGridViewBand dataGridViewBand)
        {
            DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
            if (dataGridViewColumn != null)
            {
                DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
                this.OnColumnWidthChanged(e);
            }
            else
            {
                DataGridViewRowEventArgs args2 = new DataGridViewRowEventArgs((DataGridViewRow) dataGridViewBand);
                this.OnRowHeightChanged(args2);
            }
        }

        internal void OnBandThicknessChanging()
        {
            if (this.InAdjustFillingColumns)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
            }
        }

        protected override void OnBindingContextChanged(EventArgs e)
        {
            if (!this.dataGridViewState2[0x1000000])
            {
                this.dataGridViewState2[0x1000000] = true;
                try
                {
                    if (this.dataConnection != null)
                    {
                        this.CurrentCell = null;
                        try
                        {
                            this.dataConnection.SetDataConnection(this.DataSource, this.DataMember);
                        }
                        catch (ArgumentException)
                        {
                            if (!base.DesignMode)
                            {
                                throw;
                            }
                            this.DataMember = string.Empty;
                            this.RefreshColumnsAndRows();
                            return;
                        }
                        this.RefreshColumnsAndRows();
                        base.OnBindingContextChanged(e);
                        if (this.dataConnection.CurrencyManager != null)
                        {
                            this.OnDataBindingComplete(ListChangedType.Reset);
                        }
                    }
                    else
                    {
                        base.OnBindingContextChanged(e);
                    }
                }
                finally
                {
                    this.dataGridViewState2[0x1000000] = false;
                }
            }
        }

        protected virtual void OnBorderStyleChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWBORDERSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCancelRowEdit(QuestionEventArgs e)
        {
            QuestionEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCANCELROWEDIT] as QuestionEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
                this.CorrectFocus(true);
            }
        }

        protected virtual void OnCellBeginEdit(DataGridViewCellCancelEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellCancelEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLBEGINEDIT] as DataGridViewCellCancelEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellBorderStyleChanged(EventArgs e)
        {
            this.PerformLayoutPrivate(false, false, true, false);
            base.Invalidate();
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellClick(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.ClickUnsharesRowInternal(e))
            {
                DataGridViewRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnClickInternal(e);
            }
            else
            {
                cellInternal.OnClickInternal(e);
            }
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLCLICK] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellClickInternal(DataGridViewCellEventArgs e)
        {
            this.OnCellClick(e);
        }

        internal void OnCellCommonChange(int columnIndex, int rowIndex)
        {
            if (columnIndex == -1)
            {
                this.OnRowHeaderGlobalAutoSize(rowIndex);
            }
            else if (rowIndex == -1)
            {
                this.OnColumnHeaderGlobalAutoSize(columnIndex);
            }
            else
            {
                this.InvalidateCellPrivate(columnIndex, rowIndex);
                bool flag = false;
                if (rowIndex != -1)
                {
                    flag = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None;
                }
                DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal) this.Columns[columnIndex].InheritedAutoSizeMode;
                bool flag2 = (inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.AllRows) != DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
                if (flag)
                {
                    flag2 |= (inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows) != DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
                }
                bool flag3 = (this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None;
                if (flag3)
                {
                    this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), !flag2, true);
                }
                if (flag2)
                {
                    this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
                    if (flag3)
                    {
                        this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                    }
                }
            }
        }

        protected virtual void OnCellContentClick(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.ContentClickUnsharesRowInternal(e))
            {
                DataGridViewRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnContentClickInternal(e);
            }
            else
            {
                cellInternal.OnContentClickInternal(e);
            }
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLCONTENTCLICK] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellContentClickInternal(DataGridViewCellEventArgs e)
        {
            this.OnCellContentClick(e);
        }

        protected virtual void OnCellContentDoubleClick(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.ContentDoubleClickUnsharesRowInternal(e))
            {
                DataGridViewRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnContentDoubleClickInternal(e);
            }
            else
            {
                cellInternal.OnContentDoubleClickInternal(e);
            }
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellContentDoubleClickInternal(DataGridViewCellEventArgs e)
        {
            this.OnCellContentDoubleClick(e);
        }

        internal void OnCellContextMenuStripChanged(DataGridViewCell dataGridViewCell)
        {
            DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(dataGridViewCell);
            this.OnCellContextMenuStripChanged(e);
        }

        protected virtual void OnCellContextMenuStripChanged(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellContextMenuStripNeededEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED] as DataGridViewCellContextMenuStripNeededEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal ContextMenuStrip OnCellContextMenuStripNeeded(int columnIndex, int rowIndex, ContextMenuStrip contextMenuStrip)
        {
            DataGridViewCellContextMenuStripNeededEventArgs e = new DataGridViewCellContextMenuStripNeededEventArgs(columnIndex, rowIndex, contextMenuStrip);
            this.OnCellContextMenuStripNeeded(e);
            return e.ContextMenuStrip;
        }

        protected virtual void OnCellDoubleClick(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.DoubleClickUnsharesRowInternal(e))
            {
                DataGridViewRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnDoubleClickInternal(e);
            }
            else
            {
                cellInternal.OnDoubleClickInternal(e);
            }
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLDOUBLECLICK] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellEndEdit(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLENDEDIT] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellEnter(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            try
            {
                this.noDimensionChangeCount++;
                DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLENTER] as DataGridViewCellEventHandler;
                if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        internal void OnCellEnter(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
        {
            this.OnCellEnter(new DataGridViewCellEventArgs(columnIndex, rowIndex));
            if (dataGridViewCell != null)
            {
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    dataGridViewCell = null;
                }
                else
                {
                    dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                }
            }
        }

        internal void OnCellErrorTextChanged(DataGridViewCell dataGridViewCell)
        {
            DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(dataGridViewCell);
            this.OnCellErrorTextChanged(e);
        }

        protected virtual void OnCellErrorTextChanged(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            this.UpdateCellErrorText(e.ColumnIndex, e.RowIndex);
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellErrorTextNeeded(DataGridViewCellErrorTextNeededEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellErrorTextNeededEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED] as DataGridViewCellErrorTextNeededEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal string OnCellErrorTextNeeded(int columnIndex, int rowIndex, string errorText)
        {
            DataGridViewCellErrorTextNeededEventArgs e = new DataGridViewCellErrorTextNeededEventArgs(columnIndex, rowIndex, errorText);
            this.OnCellErrorTextNeeded(e);
            return e.ErrorText;
        }

        protected virtual void OnCellFormatting(DataGridViewCellFormattingEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellFormattingEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLFORMATTING] as DataGridViewCellFormattingEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal DataGridViewCellFormattingEventArgs OnCellFormatting(int columnIndex, int rowIndex, object val, System.Type formattedValueType, DataGridViewCellStyle cellStyle)
        {
            DataGridViewCellFormattingEventArgs e = new DataGridViewCellFormattingEventArgs(columnIndex, rowIndex, val, formattedValueType, cellStyle);
            this.OnCellFormatting(e);
            return e;
        }

        protected virtual void OnCellLeave(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            try
            {
                this.noDimensionChangeCount++;
                DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLLEAVE] as DataGridViewCellEventHandler;
                if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        internal void OnCellLeave(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
        {
            this.OnCellLeave(new DataGridViewCellEventArgs(columnIndex, rowIndex));
            if (dataGridViewCell != null)
            {
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    dataGridViewCell = null;
                }
                else
                {
                    dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                }
            }
        }

        protected virtual void OnCellMouseClick(DataGridViewCellMouseEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseClickUnsharesRowInternal(e))
            {
                DataGridViewRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseClickInternal(e);
            }
            else
            {
                cellInternal.OnMouseClickInternal(e);
            }
            this.dataGridViewState2[0x800000] = false;
            DataGridViewCellMouseEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLMOUSECLICK] as DataGridViewCellMouseEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellMouseDoubleClick(DataGridViewCellMouseEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseDoubleClickUnsharesRowInternal(e))
            {
                DataGridViewRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseDoubleClickInternal(e);
            }
            else
            {
                cellInternal.OnMouseDoubleClickInternal(e);
            }
            this.dataGridViewState2[0x800000] = true;
            DataGridViewCellMouseEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellMouseDown(DataGridViewCellMouseEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            Keys modifierKeys = Control.ModifierKeys;
            bool isControlDown = ((modifierKeys & Keys.Control) == Keys.Control) && ((modifierKeys & Keys.Alt) == Keys.None);
            bool isShiftDown = (modifierKeys & Keys.Shift) == Keys.Shift;
            bool flag3 = (modifierKeys & Keys.Alt) == Keys.Alt;
            Point point = this.ConvertCellToGridCoord(e.ColumnIndex, e.RowIndex, e.X, e.Y);
            HitTestInfo hti = this.HitTest(point.X, point.Y);
            if (!this.dataGridViewState2[0x8000000] && (e.Button == MouseButtons.Left))
            {
                switch (hti.typeInternal)
                {
                    case DataGridViewHitTestTypeInternal.ColumnResizeLeft:
                    case DataGridViewHitTestTypeInternal.ColumnResizeRight:
                    case DataGridViewHitTestTypeInternal.RowResizeTop:
                    case DataGridViewHitTestTypeInternal.RowResizeBottom:
                    case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft:
                    case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight:
                    case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop:
                    case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom:
                    case DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom:
                    case DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop:
                    case DataGridViewHitTestTypeInternal.RowHeadersResizeRight:
                    case DataGridViewHitTestTypeInternal.RowHeadersResizeLeft:
                        this.dataGridViewOper[0x800000] = e.Clicks == 1;
                        break;
                }
            }
            try
            {
                if ((e.RowIndex >= 0) && cellInternal.MouseDownUnsharesRowInternal(e))
                {
                    DataGridViewRow row1 = this.Rows[e.RowIndex];
                    this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseDownInternal(e);
                }
                else
                {
                    cellInternal.OnMouseDownInternal(e);
                }
                DataGridViewCellMouseEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLMOUSEDOWN] as DataGridViewCellMouseEventHandler;
                if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                }
                if (this.dataGridViewState2[0x8000000] || (e.Button != MouseButtons.Left))
                {
                    return;
                }
                switch (hti.typeInternal)
                {
                    case DataGridViewHitTestTypeInternal.Cell:
                        this.OnCellMouseDown(hti, isShiftDown, isControlDown);
                        goto Label_0377;

                    case DataGridViewHitTestTypeInternal.ColumnHeader:
                    case DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft:
                    case DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
                    case DataGridViewHitTestTypeInternal.ColumnHeaderRight:
                        if ((!flag3 || !this.AllowUserToOrderColumns) || ((this.SelectionMode != DataGridViewSelectionMode.FullColumnSelect) && (this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect)))
                        {
                            break;
                        }
                        this.BeginColumnRelocation(point.X, hti.col);
                        goto Label_0377;

                    case DataGridViewHitTestTypeInternal.RowHeader:
                        this.OnRowHeaderMouseDown(hti, isShiftDown, isControlDown);
                        goto Label_0377;

                    case DataGridViewHitTestTypeInternal.ColumnResizeLeft:
                    case DataGridViewHitTestTypeInternal.ColumnResizeRight:
                    {
                        int index = (hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnResizeRight) ? hti.col : hti.adjacentCol;
                        if (e.Clicks == 1)
                        {
                            this.BeginColumnResize(point.X, hti.mouseBarOffset, index);
                        }
                        goto Label_0377;
                    }
                    case DataGridViewHitTestTypeInternal.RowResizeTop:
                    case DataGridViewHitTestTypeInternal.RowResizeBottom:
                    {
                        int num2 = (hti.typeInternal == DataGridViewHitTestTypeInternal.RowResizeBottom) ? hti.row : hti.adjacentRow;
                        if (e.Clicks == 1)
                        {
                            this.BeginRowResize(point.Y, hti.mouseBarOffset, num2);
                        }
                        goto Label_0377;
                    }
                    case DataGridViewHitTestTypeInternal.TopLeftHeader:
                        this.OnTopLeftHeaderMouseDown();
                        goto Label_0377;

                    case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft:
                    case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight:
                    case DataGridViewHitTestTypeInternal.RowHeadersResizeRight:
                    case DataGridViewHitTestTypeInternal.RowHeadersResizeLeft:
                        if (e.Clicks == 1)
                        {
                            this.BeginRowHeadersResize(point.X, hti.mouseBarOffset);
                        }
                        goto Label_0377;

                    case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop:
                    case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom:
                    case DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom:
                    case DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop:
                        if (e.Clicks == 1)
                        {
                            this.BeginColumnHeadersResize(point.Y, hti.mouseBarOffset);
                        }
                        goto Label_0377;

                    default:
                        goto Label_0377;
                }
                this.OnColumnHeaderMouseDown(hti, isShiftDown, isControlDown);
            Label_0377:
                if (this.ptCurrentCell.X == -1)
                {
                    this.MakeFirstDisplayedCellCurrentCell(true);
                }
            }
            finally
            {
                this.dataGridViewOper[0x800000] = false;
            }
        }

        private void OnCellMouseDown(HitTestInfo hti, bool isShiftDown, bool isControlDown)
        {
            if ((this.ptCurrentCell.X >= 0) && ((this.ptCurrentCell.X != hti.col) || (this.ptCurrentCell.Y != hti.row)))
            {
                Point ptCurrentCell = this.ptCurrentCell;
                if (!this.CommitEdit(DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, (this.ptCurrentCell.X != hti.col) || (this.ptCurrentCell.Y != hti.row), this.ptCurrentCell.Y != hti.row))
                {
                    return;
                }
                if (this.ptCurrentCell != ptCurrentCell)
                {
                    isShiftDown = isControlDown = false;
                }
            }
            if (hti.col >= this.Columns.Count)
            {
                DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                if ((this.ptCurrentCell.X != -1) || (lastColumn == null))
                {
                    return;
                }
                hti.col = lastColumn.Index;
            }
            if (hti.row >= this.Rows.Count)
            {
                int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
                if ((this.ptCurrentCell.X != -1) || (lastRow == -1))
                {
                    return;
                }
                hti.row = lastRow;
            }
            bool flag = true;
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                        if ((isControlDown && this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row)) && (!isShiftDown || !this.MultiSelect))
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_0279;
                        }
                        if ((!this.MultiSelect || !isControlDown) && (!this.MultiSelect || !isShiftDown))
                        {
                            this.RemoveIndividuallySelectedCells(hti.col, hti.row);
                        }
                        if (!this.MultiSelect)
                        {
                            break;
                        }
                        if (this.dataGridViewOper[0x200])
                        {
                            this.dataGridViewOper[0x10] = true;
                        }
                        if (isShiftDown)
                        {
                            int x = this.ptCurrentCell.X;
                            int y = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                return;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, hti.col, this.ptAnchorCell.Y, ref y, hti.row);
                        }
                        else
                        {
                            this.SetSelectedCellCore(hti.col, hti.row, true);
                        }
                        goto Label_028C;

                    case DataGridViewSelectionMode.FullRowSelect:
                    {
                        if (isControlDown && ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None))
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_0806;
                        }
                        bool flag5 = false;
                        this.trackRow = hti.row;
                        this.trackRowEdge = -1;
                        if ((this.MultiSelect && isShiftDown) && ((this.ptAnchorCell.Y > -1) && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)))
                        {
                            flag5 = true;
                        }
                        if ((!this.MultiSelect || !isControlDown) || isShiftDown)
                        {
                            int num7 = 0;
                            bool flag6 = false;
                            if (this.selectedBandIndexes.Count > 8)
                            {
                                this.inBulkPaintCount++;
                                flag6 = true;
                            }
                            try
                            {
                                while (num7 < this.selectedBandIndexes.Count)
                                {
                                    if (this.selectedBandIndexes[num7] != hti.row)
                                    {
                                        this.SetSelectedRowCore(this.selectedBandIndexes[num7], false);
                                    }
                                    else
                                    {
                                        num7++;
                                    }
                                }
                            }
                            finally
                            {
                                if (flag6)
                                {
                                    this.ExitBulkPaint(-1, -1);
                                }
                            }
                        }
                        if (this.MultiSelect && this.dataGridViewOper[0x200])
                        {
                            this.dataGridViewOper[8] = true;
                        }
                        if (flag5)
                        {
                            if (hti.row >= this.ptAnchorCell.Y)
                            {
                                this.SelectRowRange(this.ptAnchorCell.Y, hti.row, true);
                            }
                            else
                            {
                                this.SelectRowRange(hti.row, this.ptAnchorCell.Y, true);
                            }
                        }
                        else if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
                        {
                            this.SetSelectedRowCore(hti.row, true);
                        }
                        goto Label_0813;
                    }
                    case DataGridViewSelectionMode.FullColumnSelect:
                    {
                        if (isControlDown && this.Columns[hti.col].Selected)
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_043F;
                        }
                        bool flag2 = false;
                        this.trackColumn = hti.col;
                        this.trackColumnEdge = -1;
                        if ((this.MultiSelect && isShiftDown) && ((this.ptAnchorCell.X > -1) && this.Columns[this.ptAnchorCell.X].Selected))
                        {
                            flag2 = true;
                        }
                        if ((!this.MultiSelect || !isControlDown) || isShiftDown)
                        {
                            int num4 = 0;
                            bool flag3 = false;
                            if (this.selectedBandIndexes.Count > 8)
                            {
                                this.inBulkPaintCount++;
                                flag3 = true;
                            }
                            try
                            {
                                while (num4 < this.selectedBandIndexes.Count)
                                {
                                    if (this.selectedBandIndexes[num4] != hti.col)
                                    {
                                        this.SetSelectedColumnCore(this.selectedBandIndexes[num4], false);
                                    }
                                    else
                                    {
                                        num4++;
                                    }
                                }
                            }
                            finally
                            {
                                if (flag3)
                                {
                                    this.ExitBulkPaint(-1, -1);
                                }
                            }
                        }
                        if (this.MultiSelect && this.dataGridViewOper[0x200])
                        {
                            this.dataGridViewOper[4] = true;
                        }
                        if (flag2)
                        {
                            if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, hti.col))
                            {
                                this.SelectColumnRange(this.ptAnchorCell.X, hti.col, true);
                            }
                            else
                            {
                                this.SelectColumnRange(hti.col, this.ptAnchorCell.X, true);
                            }
                        }
                        else if (!this.selectedBandIndexes.Contains(hti.col))
                        {
                            this.SetSelectedColumnCore(hti.col, true);
                        }
                        goto Label_044C;
                    }
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if ((isControlDown && (((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None) || this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row))) && (!isShiftDown || !this.MultiSelect))
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_09D2;
                        }
                        if (this.MultiSelect)
                        {
                            goto Label_08D4;
                        }
                        if (this.selectedBandIndexes.Count > 0)
                        {
                            this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        else
                        {
                            this.RemoveIndividuallySelectedCells();
                        }
                        this.SetSelectedCellCore(hti.col, hti.row, true);
                        goto Label_0A24;

                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if ((isControlDown && (this.Columns[hti.col].Selected || this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row))) && (!isShiftDown || !this.MultiSelect))
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_060D;
                        }
                        if (this.MultiSelect)
                        {
                            goto Label_050F;
                        }
                        if (this.selectedBandIndexes.Count > 0)
                        {
                            this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        else
                        {
                            this.RemoveIndividuallySelectedCells();
                        }
                        this.SetSelectedCellCore(hti.col, hti.row, true);
                        goto Label_065F;

                    default:
                        return;
                }
                this.SetSelectedCellCore(hti.col, hti.row, true);
                goto Label_028C;
            Label_0279:
                this.SetSelectedCellCore(hti.col, hti.row, false);
            Label_028C:
                this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
                return;
            Label_043F:
                this.SetSelectedColumnCore(hti.col, false);
            Label_044C:
                this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
                return;
            Label_050F:
                if (!isControlDown && !isShiftDown)
                {
                    bool flag4 = false;
                    if (this.selectedBandIndexes.Count > 8)
                    {
                        this.inBulkPaintCount++;
                        flag4 = true;
                    }
                    try
                    {
                        while (this.selectedBandIndexes.Count > 0)
                        {
                            this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        this.RemoveIndividuallySelectedCells(hti.col, hti.row);
                    }
                    finally
                    {
                        if (flag4)
                        {
                            this.ExitBulkPaint(-1, -1);
                        }
                    }
                }
                if (this.dataGridViewOper[0x200])
                {
                    this.dataGridViewOper[0x10] = true;
                }
                if (isShiftDown)
                {
                    int oldEdgeColumnIndex = this.ptCurrentCell.X;
                    int oldEdgeRowIndex = this.ptCurrentCell.Y;
                    if (this.ptAnchorCell.X == -1)
                    {
                        return;
                    }
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, hti.col, this.ptAnchorCell.Y, ref oldEdgeRowIndex, hti.row);
                }
                else
                {
                    this.SetSelectedCellCore(hti.col, hti.row, true);
                }
                goto Label_065F;
            Label_060D:
                if (!this.MultiSelect)
                {
                    if (this.selectedBandIndexes.Count > 0)
                    {
                        this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
                    }
                    else
                    {
                        this.SetSelectedCellCore(hti.col, hti.row, false);
                    }
                }
                else
                {
                    this.SetSelectedCellCore(hti.col, hti.row, false);
                }
            Label_065F:
                this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
                return;
            Label_0806:
                this.SetSelectedRowCore(hti.row, false);
            Label_0813:
                this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
                return;
            Label_08D4:
                if (!isControlDown && !isShiftDown)
                {
                    bool flag7 = false;
                    if (this.selectedBandIndexes.Count > 8)
                    {
                        this.inBulkPaintCount++;
                        flag7 = true;
                    }
                    try
                    {
                        while (this.selectedBandIndexes.Count > 0)
                        {
                            this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        this.RemoveIndividuallySelectedCells(hti.col, hti.row);
                    }
                    finally
                    {
                        if (flag7)
                        {
                            this.ExitBulkPaint(-1, -1);
                        }
                    }
                }
                if (this.dataGridViewOper[0x200])
                {
                    this.dataGridViewOper[0x10] = true;
                }
                if (isShiftDown)
                {
                    int num8 = this.ptCurrentCell.X;
                    int num9 = this.ptCurrentCell.Y;
                    if (this.ptAnchorCell.X == -1)
                    {
                        return;
                    }
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num8, hti.col, this.ptAnchorCell.Y, ref num9, hti.row);
                }
                else
                {
                    this.SetSelectedCellCore(hti.col, hti.row, true);
                }
                goto Label_0A24;
            Label_09D2:
                if (!this.MultiSelect)
                {
                    if (this.selectedBandIndexes.Count > 0)
                    {
                        this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
                    }
                    else
                    {
                        this.SetSelectedCellCore(hti.col, hti.row, false);
                    }
                }
                else
                {
                    this.SetSelectedCellCore(hti.col, hti.row, false);
                }
            Label_0A24:
                this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        protected virtual void OnCellMouseEnter(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            this.ptMouseEnteredCell.X = e.ColumnIndex;
            this.ptMouseEnteredCell.Y = e.RowIndex;
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseEnterUnsharesRowInternal(e.RowIndex))
            {
                DataGridViewRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseEnterInternal(e.RowIndex);
            }
            else
            {
                cellInternal.OnMouseEnterInternal(e.RowIndex);
            }
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLMOUSEENTER] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellMouseLeave(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            this.ptMouseEnteredCell.X = -2;
            this.ptMouseEnteredCell.Y = -2;
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseLeaveUnsharesRowInternal(e.RowIndex))
            {
                DataGridViewRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseLeaveInternal(e.RowIndex);
            }
            else
            {
                cellInternal.OnMouseLeaveInternal(e.RowIndex);
            }
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLMOUSELEAVE] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellMouseMove(DataGridViewCellMouseEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseMoveUnsharesRowInternal(e))
            {
                DataGridViewRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseMoveInternal(e);
            }
            else
            {
                cellInternal.OnMouseMoveInternal(e);
            }
            DataGridViewCellMouseEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLMOUSEMOVE] as DataGridViewCellMouseEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((((!this.dataGridViewState1[0x800] && !this.dataGridViewOper[1]) && (!this.dataGridViewOper[2] && !this.dataGridViewOper[0x20])) && ((!this.dataGridViewOper[0x80] && !this.dataGridViewOper[0x100]) && (this.AllowUserToOrderColumns && (this.SelectionMode != DataGridViewSelectionMode.FullColumnSelect)))) && ((((this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect) && (e.Button == MouseButtons.Left)) && ((this.ptMouseDownCell.Y == -1) && (this.ptMouseDownCell.X >= 0))) && (this.ptMouseDownCell.X < this.Columns.Count)))
            {
                Point point = this.ConvertCellToGridCoord(e.ColumnIndex, e.RowIndex, e.X, e.Y);
                switch (this.HitTest(point.X, point.Y).typeInternal)
                {
                    case DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
                    case DataGridViewHitTestTypeInternal.ColumnHeaderRight:
                    case DataGridViewHitTestTypeInternal.ColumnHeader:
                    case DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft:
                        if ((Math.Abs((int) (this.ptMouseDownGridCoord.X - point.X)) >= DragSize.Width) || (Math.Abs((int) (this.ptMouseDownGridCoord.Y - point.Y)) >= DragSize.Height))
                        {
                            this.BeginColumnRelocation(this.ptMouseDownGridCoord.X, this.ptMouseDownCell.X);
                        }
                        break;

                    default:
                        return;
                }
            }
        }

        protected virtual void OnCellMouseUp(DataGridViewCellMouseEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseUpUnsharesRowInternal(e))
            {
                DataGridViewRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseUpInternal(e);
            }
            else
            {
                cellInternal.OnMouseUpInternal(e);
            }
            DataGridViewCellMouseEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLMOUSEUP] as DataGridViewCellMouseEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected internal virtual void OnCellPainting(DataGridViewCellPaintingEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellPaintingEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLPAINTING] as DataGridViewCellPaintingEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellParsing(DataGridViewCellParsingEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellParsingEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLPARSING] as DataGridViewCellParsingEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal DataGridViewCellParsingEventArgs OnCellParsing(int rowIndex, int columnIndex, object formattedValue, System.Type valueType, DataGridViewCellStyle cellStyle)
        {
            DataGridViewCellParsingEventArgs e = new DataGridViewCellParsingEventArgs(rowIndex, columnIndex, formattedValue, valueType, cellStyle);
            this.OnCellParsing(e);
            return e;
        }

        private void OnCellSelectMouseMove(HitTestInfo hti)
        {
            int x = this.ptCurrentCell.X;
            int y = this.ptCurrentCell.Y;
            if (((hti.col == this.ptCurrentCell.X) && (hti.row == this.ptCurrentCell.Y)) || this.CommitEditForOperation(hti.col, hti.row, true))
            {
                this.noSelectionChangeCount++;
                try
                {
                    if ((this.ptAnchorCell.X != -1) && !this.IsInnerCellOutOfBounds(hti.col, hti.row))
                    {
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, hti.col, this.ptAnchorCell.Y, ref y, hti.row);
                        if ((hti.col != this.ptCurrentCell.X) || (hti.row != this.ptCurrentCell.Y))
                        {
                            this.SetCurrentCellAddressCore(hti.col, hti.row, false, false, false);
                        }
                    }
                }
                finally
                {
                    this.NoSelectionChangeCount--;
                }
            }
        }

        protected virtual void OnCellStateChanged(DataGridViewCellStateChangedEventArgs e)
        {
            DataGridViewCell dataGridViewCell = e.Cell;
            if ((e.StateChanged == DataGridViewElementStates.Selected) && (this.inBulkPaintCount == 0))
            {
                this.InvalidateCellPrivate(dataGridViewCell);
            }
            DataGridViewCellStateChangedEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLSTATECHANGED] as DataGridViewCellStateChangedEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((((e.StateChanged == DataGridViewElementStates.ReadOnly) && (this.ptCurrentCell.X == dataGridViewCell.ColumnIndex)) && ((this.ptCurrentCell.Y == dataGridViewCell.RowIndex) && (dataGridViewCell.RowIndex > -1))) && !this.dataGridViewOper[0x4000])
            {
                base.VerifyImeRestrictedModeChanged();
                if (((!dataGridViewCell.ReadOnly && this.ColumnEditable(this.ptCurrentCell.X)) && !this.IsCurrentCellInEditMode) && ((this.EditMode == DataGridViewEditMode.EditOnEnter) || ((this.EditMode != DataGridViewEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null))))
                {
                    this.BeginEditInternal(true);
                }
            }
        }

        internal void OnCellStyleChanged(DataGridViewCell dataGridViewCell)
        {
            DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(dataGridViewCell);
            this.OnCellStyleChanged(e);
        }

        protected virtual void OnCellStyleChanged(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            this.OnCellCommonChange(e.ColumnIndex, e.RowIndex);
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLSTYLECHANGED] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellStyleContentChanged(DataGridViewCellStyleContentChangedEventArgs e)
        {
            bool flag = false;
            if (((e.CellStyleScope & DataGridViewCellStyleScopes.Cell) == DataGridViewCellStyleScopes.Cell) && ((e.CellStyleScope & DataGridViewCellStyleScopes.DataGridView) == DataGridViewCellStyleScopes.None))
            {
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = true;
                    this.OnGlobalAutoSize();
                }
                else
                {
                    base.Invalidate();
                }
            }
            if ((e.CellStyleScope & DataGridViewCellStyleScopes.Column) == DataGridViewCellStyleScopes.Column)
            {
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = true;
                    this.OnColumnsGlobalAutoSize();
                }
                else
                {
                    this.InvalidateData();
                }
            }
            if ((((e.CellStyleScope & DataGridViewCellStyleScopes.Row) == DataGridViewCellStyleScopes.Row) && ((e.CellStyleScope & DataGridViewCellStyleScopes.Rows) == DataGridViewCellStyleScopes.None)) && ((e.CellStyleScope & DataGridViewCellStyleScopes.AlternatingRows) == DataGridViewCellStyleScopes.None))
            {
                this.InvalidateData();
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = true;
                    if ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
                    }
                    this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows | DataGridViewAutoSizeColumnCriteriaInternal.AllRows, true);
                    if ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                    }
                }
            }
            if ((e.CellStyleScope & DataGridViewCellStyleScopes.DataGridView) == DataGridViewCellStyleScopes.DataGridView)
            {
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = false;
                }
                this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
            if ((e.CellStyleScope & DataGridViewCellStyleScopes.ColumnHeaders) == DataGridViewCellStyleScopes.ColumnHeaders)
            {
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = false;
                }
                this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
            if ((e.CellStyleScope & DataGridViewCellStyleScopes.RowHeaders) == DataGridViewCellStyleScopes.RowHeaders)
            {
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = false;
                }
                this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
            if ((e.CellStyleScope & DataGridViewCellStyleScopes.Rows) == DataGridViewCellStyleScopes.Rows)
            {
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = false;
                }
                this.OnRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
            if ((e.CellStyleScope & DataGridViewCellStyleScopes.AlternatingRows) == DataGridViewCellStyleScopes.AlternatingRows)
            {
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = false;
                }
                this.OnAlternatingRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
            if (flag && (this.editingControl != null))
            {
                this.PositionEditingControl(true, true, false);
            }
            DataGridViewCellStyleContentChangedEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED] as DataGridViewCellStyleContentChangedEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellStyleContentChanged(DataGridViewCellStyle dataGridViewCellStyle, DataGridViewCellStyle.DataGridViewCellStylePropertyInternal property)
        {
            switch (property)
            {
                case DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.Font:
                    if (((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.DataGridView) != DataGridViewCellStyleScopes.None) && this.dataGridViewState1[0x2000000])
                    {
                        this.dataGridViewState1[0x2000000] = false;
                    }
                    if (((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.ColumnHeaders) != DataGridViewCellStyleScopes.None) && this.dataGridViewState1[0x4000000])
                    {
                        this.dataGridViewState1[0x4000000] = false;
                    }
                    if (((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.RowHeaders) != DataGridViewCellStyleScopes.None) && this.dataGridViewState1[0x8000000])
                    {
                        this.dataGridViewState1[0x8000000] = false;
                    }
                    break;

                case DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.ForeColor:
                    if (((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.DataGridView) != DataGridViewCellStyleScopes.None) && this.dataGridViewState1[0x400])
                    {
                        this.dataGridViewState1[0x400] = false;
                    }
                    break;
            }
            DataGridViewCellStyleContentChangedEventArgs e = new DataGridViewCellStyleContentChangedEventArgs(dataGridViewCellStyle, (property != DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.Color) && (property != DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.ForeColor));
            this.OnCellStyleContentChanged(e);
        }

        internal void OnCellToolTipTextChanged(DataGridViewCell dataGridViewCell)
        {
            DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(dataGridViewCell);
            this.OnCellToolTipTextChanged(e);
        }

        protected virtual void OnCellToolTipTextChanged(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellToolTipTextNeededEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED] as DataGridViewCellToolTipTextNeededEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal string OnCellToolTipTextNeeded(int columnIndex, int rowIndex, string toolTipText)
        {
            DataGridViewCellToolTipTextNeededEventArgs e = new DataGridViewCellToolTipTextNeededEventArgs(columnIndex, rowIndex, toolTipText);
            this.OnCellToolTipTextNeeded(e);
            return e.ToolTipText;
        }

        protected virtual void OnCellValidated(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            try
            {
                this.noDimensionChangeCount++;
                DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLVALIDATED] as DataGridViewCellEventHandler;
                if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        internal void OnCellValidated(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
        {
            this.OnCellValidated(new DataGridViewCellEventArgs(columnIndex, rowIndex));
            if (dataGridViewCell != null)
            {
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    dataGridViewCell = null;
                }
                else
                {
                    dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                }
            }
        }

        protected virtual void OnCellValidating(DataGridViewCellValidatingEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            try
            {
                this.noDimensionChangeCount++;
                this.dataGridViewOper[0x8000] = true;
                DataGridViewCellValidatingEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLVALIDATING] as DataGridViewCellValidatingEventHandler;
                if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
                this.dataGridViewOper[0x8000] = false;
            }
        }

        internal bool OnCellValidating(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex, DataGridViewDataErrorContexts context)
        {
            DataGridViewCell cell = (dataGridViewCell == null) ? this.CurrentCellInternal : dataGridViewCell;
            DataGridViewCellStyle dataGridViewCellStyle = cell.GetInheritedStyle(null, rowIndex, false);
            object valueInternal = cell.GetValueInternal(rowIndex);
            object formattedValue = cell.GetEditedFormattedValue(valueInternal, rowIndex, ref dataGridViewCellStyle, context);
            DataGridViewCellValidatingEventArgs e = new DataGridViewCellValidatingEventArgs(columnIndex, rowIndex, formattedValue);
            this.OnCellValidating(e);
            if (dataGridViewCell != null)
            {
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    dataGridViewCell = null;
                }
                else
                {
                    dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                }
            }
            return e.Cancel;
        }

        protected virtual void OnCellValueChanged(DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            this.OnCellCommonChange(e.ColumnIndex, e.RowIndex);
            DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLVALUECHANGED] as DataGridViewCellEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellValueChangedInternal(DataGridViewCellEventArgs e)
        {
            this.OnCellValueChanged(e);
        }

        protected virtual void OnCellValueNeeded(DataGridViewCellValueEventArgs e)
        {
            if ((e.ColumnIndex < 0) || (e.ColumnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if ((e.RowIndex < 0) || (e.RowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellValueEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLVALUENEEDED] as DataGridViewCellValueEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal object OnCellValueNeeded(int columnIndex, int rowIndex)
        {
            DataGridViewCellValueEventArgs cellValueEventArgs = this.CellValueEventArgs;
            cellValueEventArgs.SetProperties(columnIndex, rowIndex, null);
            this.OnCellValueNeeded(cellValueEventArgs);
            return cellValueEventArgs.Value;
        }

        protected virtual void OnCellValuePushed(DataGridViewCellValueEventArgs e)
        {
            if ((e.ColumnIndex < 0) || (e.ColumnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if ((e.RowIndex < 0) || (e.RowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            DataGridViewCellValueEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCELLVALUEPUSHED] as DataGridViewCellValueEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellValuePushed(int columnIndex, int rowIndex, object value)
        {
            DataGridViewCellValueEventArgs cellValueEventArgs = this.CellValueEventArgs;
            cellValueEventArgs.SetProperties(columnIndex, rowIndex, value);
            this.OnCellValuePushed(cellValueEventArgs);
        }

        internal void OnClearedRows()
        {
            foreach (DataGridViewRow row in this.lstRows)
            {
                if (row.Displayed)
                {
                    row.DisplayedInternal = false;
                    DataGridViewRowStateChangedEventArgs e = new DataGridViewRowStateChangedEventArgs(row, DataGridViewElementStates.Displayed);
                    this.OnRowStateChanged(-1, e);
                }
            }
            this.lstRows.Clear();
        }

        internal void OnClearingColumns()
        {
            this.CurrentCell = null;
            this.Rows.ClearInternal(false);
            this.sortedColumn = null;
            this.sortOrder = System.Windows.Forms.SortOrder.None;
        }

        internal void OnClearingRows()
        {
            this.lstRows.Clear();
            int num = this.displayedBandsInfo.NumDisplayedFrozenRows + this.displayedBandsInfo.NumDisplayedScrollingRows;
            if (num > 0)
            {
                this.lstRows.Capacity = num;
                int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Displayed);
                while ((num > 0) && (firstRow != -1))
                {
                    this.lstRows.Add(this.Rows[firstRow]);
                    num--;
                    if (num > 0)
                    {
                        firstRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Displayed);
                    }
                }
            }
            this.CurrentCell = null;
            this.newRowIndex = -1;
            this.dataGridViewState2[0x40000] = (this.selectedBandIndexes.Count > 0) || (this.individualSelectedCells.Count > 0);
            this.selectedBandIndexes.Clear();
            if (this.selectedBandSnapshotIndexes != null)
            {
                this.selectedBandSnapshotIndexes.Clear();
            }
            this.individualSelectedCells.Clear();
            this.individualReadOnlyCells.Clear();
        }

        protected virtual void OnColumnAdded(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNADDED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnCollectionChanged_PostNotification(DataGridViewColumn dataGridViewColumn)
        {
            if ((this.Columns.Count != 0) && (this.Rows.Count == 0))
            {
                if ((this.DataSource != null) && !this.dataGridViewOper[0x400])
                {
                    this.RefreshRows(true);
                }
                else if (this.AllowUserToAddRowsInternal)
                {
                    this.AddNewRow(false);
                }
            }
            if (this.AutoSize && ((dataGridViewColumn == null) || dataGridViewColumn.Visible))
            {
                LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Columns);
            }
        }

        internal void OnColumnCollectionChanged_PreNotification(CollectionChangeEventArgs ccea)
        {
            if ((this.DataSource != null) && !this.dataGridViewOper[0x400])
            {
                if (ccea.Action == CollectionChangeAction.Add)
                {
                    DataGridViewColumn element = (DataGridViewColumn) ccea.Element;
                    if (element.DataPropertyName.Length != 0)
                    {
                        this.MapDataGridViewColumnToDataBoundField(element);
                    }
                }
                else if (ccea.Action == CollectionChangeAction.Refresh)
                {
                    for (int i = 0; i < this.Columns.Count; i++)
                    {
                        if (this.Columns[i].DataPropertyName.Length != 0)
                        {
                            this.MapDataGridViewColumnToDataBoundField(this.Columns[i]);
                        }
                    }
                }
            }
            this.ResetUIState(false, false);
        }

        internal void OnColumnCommonChange(int columnIndex)
        {
            this.OnColumnGlobalAutoSize(columnIndex);
        }

        protected virtual void OnColumnContextMenuStripChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnDataPropertyNameChanged(DataGridViewColumn dataGridViewColumn)
        {
            this.OnColumnDataPropertyNameChanged(new DataGridViewColumnEventArgs(dataGridViewColumn));
        }

        protected virtual void OnColumnDataPropertyNameChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            if (((this.DataSource != null) && (e.Column.DataPropertyName.Length != 0)) && !this.dataGridViewOper[0x400])
            {
                this.MapDataGridViewColumnToDataBoundField(e.Column);
            }
            else if (((this.DataSource != null) && (e.Column.DataPropertyName.Length == 0)) && e.Column.IsDataBound)
            {
                e.Column.IsDataBoundInternal = false;
                e.Column.BoundColumnIndex = -1;
                e.Column.BoundColumnConverter = null;
                this.InvalidateColumnInternal(e.Column.Index);
            }
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnColumnDefaultCellStyleChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            this.OnColumnGlobalAutoSize(e.Column.Index);
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnDisplayIndexChanged(DataGridViewColumn dataGridViewColumn)
        {
            DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
            this.OnColumnDisplayIndexChanged(e);
        }

        protected virtual void OnColumnDisplayIndexChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnDisplayIndexChanged_PostNotification()
        {
            this.FlushDisplayIndexChanged(true);
        }

        internal void OnColumnDisplayIndexChanged_PreNotification()
        {
            this.Columns.InvalidateCachedColumnsOrder();
            this.PerformLayoutPrivate(false, false, true, false);
            if (this.editingControl != null)
            {
                this.PositionEditingControl(true, true, false);
            }
            base.Invalidate(Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data));
        }

        internal void OnColumnDisplayIndexChanging(DataGridViewColumn dataGridViewColumn, int newDisplayIndex)
        {
            if (this.dataGridViewOper[0x800])
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAlterDisplayIndexWithinAdjustments"));
            }
            this.CorrectColumnFrozenStatesForMove(dataGridViewColumn, newDisplayIndex);
            try
            {
                this.dataGridViewOper[0x800] = true;
                if (newDisplayIndex < dataGridViewColumn.DisplayIndex)
                {
                    foreach (DataGridViewColumn column in this.Columns)
                    {
                        if ((newDisplayIndex <= column.DisplayIndex) && (column.DisplayIndex < dataGridViewColumn.DisplayIndex))
                        {
                            column.DisplayIndexInternal = column.DisplayIndex + 1;
                            column.DisplayIndexHasChanged = true;
                        }
                    }
                }
                else
                {
                    foreach (DataGridViewColumn column2 in this.Columns)
                    {
                        if ((dataGridViewColumn.DisplayIndex < column2.DisplayIndex) && (column2.DisplayIndex <= newDisplayIndex))
                        {
                            column2.DisplayIndexInternal = column2.DisplayIndex - 1;
                            column2.DisplayIndexHasChanged = true;
                        }
                    }
                }
            }
            finally
            {
                this.dataGridViewOper[0x800] = false;
            }
        }

        protected virtual void OnColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventArgs e)
        {
            DataGridViewColumnDividerDoubleClickEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK] as DataGridViewColumnDividerDoubleClickEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((!e.Handled && (e.Button == MouseButtons.Left)) && (e.ColumnIndex < this.Columns.Count))
            {
                if (e.ColumnIndex == -1)
                {
                    this.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders, true, true);
                }
                else
                {
                    DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = this.Columns[e.ColumnIndex].InheritedAutoSizeMode;
                    switch (inheritedAutoSizeMode)
                    {
                        case DataGridViewAutoSizeColumnMode.None:
                        case DataGridViewAutoSizeColumnMode.Fill:
                            this.AutoResizeColumnInternal(e.ColumnIndex, DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.Header, true);
                            return;
                    }
                    this.AutoResizeColumnInternal(e.ColumnIndex, (DataGridViewAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, true);
                }
            }
        }

        protected virtual void OnColumnDividerWidthChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            this.OnColumnGlobalAutoSize(e.Column.Index);
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnFillWeightChanged(DataGridViewColumn dataGridViewColumn)
        {
            if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
            {
                this.dataGridViewState2[0x4000000] = true;
                this.PerformLayoutPrivate(false, true, false, false);
            }
        }

        internal void OnColumnFillWeightChanging(DataGridViewColumn dataGridViewColumn, float fillWeight)
        {
            if (this.InAdjustFillingColumns)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
            }
            float num = (this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None) - dataGridViewColumn.FillWeight) + fillWeight;
            if (num > 65535f)
            {
                object[] args = new object[] { ((ushort) 0xffff).ToString(CultureInfo.CurrentCulture) };
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", args));
            }
        }

        private void OnColumnGlobalAutoSize(int columnIndex)
        {
            if (this.Columns[columnIndex].Visible)
            {
                this.InvalidateColumnInternal(columnIndex);
                if (this.noAutoSizeCount <= 0)
                {
                    bool fixedHeight = (this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) == DataGridViewAutoSizeRowsMode.None;
                    DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal) this.Columns[columnIndex].InheritedAutoSizeMode;
                    if ((inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.None) && (inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.Fill))
                    {
                        this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, fixedHeight);
                    }
                    if (!fixedHeight)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                    }
                    if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
                    }
                    if ((!fixedHeight && (inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.None)) && (inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.Fill))
                    {
                        this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
                    }
                }
            }
        }

        protected virtual void OnColumnHeaderCellChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            this.OnColumnHeaderGlobalAutoSize(e.Column.Index);
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnColumnHeaderGlobalAutoSize(int columnIndex)
        {
            if (this.ColumnHeadersVisible)
            {
                this.InvalidateCellPrivate(columnIndex, -1);
                if (this.noAutoSizeCount <= 0)
                {
                    DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal) this.Columns[columnIndex].InheritedAutoSizeMode;
                    DataGridViewAutoSizeColumnCriteriaInternal internal3 = inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header;
                    bool fixedColumnWidth = internal3 == DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
                    if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(columnIndex, true, fixedColumnWidth);
                    }
                    if (!fixedColumnWidth)
                    {
                        bool fixedHeight = (this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) == DataGridViewAutoSizeRowsMode.None;
                        this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, fixedHeight);
                        if (!fixedHeight)
                        {
                            this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                            this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
                        }
                        if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                        {
                            this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
                        }
                    }
                }
            }
        }

        protected virtual void OnColumnHeaderMouseClick(DataGridViewCellMouseEventArgs e)
        {
            if (((e.Button == MouseButtons.Left) && (this.SelectionMode != DataGridViewSelectionMode.FullColumnSelect)) && (this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect))
            {
                DataGridViewColumn dataGridViewColumn = this.Columns[e.ColumnIndex];
                if ((dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic) && (!this.VirtualMode || dataGridViewColumn.IsDataBound))
                {
                    ListSortDirection ascending = ListSortDirection.Ascending;
                    if ((this.sortedColumn == dataGridViewColumn) && (this.sortOrder == System.Windows.Forms.SortOrder.Ascending))
                    {
                        ascending = ListSortDirection.Descending;
                    }
                    if ((this.DataSource == null) || (((this.DataSource != null) && (this.dataConnection.List is IBindingList)) && (((IBindingList) this.dataConnection.List).SupportsSorting && dataGridViewColumn.IsDataBound)))
                    {
                        this.Sort(dataGridViewColumn, ascending);
                    }
                }
            }
            DataGridViewCellMouseEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK] as DataGridViewCellMouseEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e)
        {
            DataGridViewCellMouseEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnColumnHeaderMouseDown(HitTestInfo hti, bool isShiftDown, bool isControlDown)
        {
            this.noSelectionChangeCount++;
            try
            {
                int firstRow;
                int x;
                int y;
                DataGridViewCell cell;
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        return;

                    case DataGridViewSelectionMode.FullColumnSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                    {
                        bool flag = true;
                        if (isControlDown && this.Columns[hti.col].Selected)
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_0385;
                        }
                        firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                        if ((firstRow <= -1) || (hti.col == this.ptCurrentCell.X))
                        {
                            goto Label_015C;
                        }
                        x = this.ptCurrentCell.X;
                        y = this.ptCurrentCell.Y;
                        if (this.EndEdit(DataGridViewDataErrorContexts.CurrentCellChange | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.Always, true, true, firstRow != this.ptCurrentCell.Y, firstRow != this.ptCurrentCell.Y, false, this.EditMode != DataGridViewEditMode.EditOnEnter, true, false))
                        {
                            if ((firstRow == y) || (y == -1))
                            {
                                goto Label_015C;
                            }
                            cell = null;
                            if (!this.IsInnerCellOutOfBounds(x, y))
                            {
                                if (!this.OnRowValidating(ref cell, x, y))
                                {
                                    break;
                                }
                                if (!this.IsInnerCellOutOfBounds(x, y))
                                {
                                    this.OnRowEnter(ref cell, x, y, true, true);
                                    if (!this.IsInnerCellOutOfBounds(x, y))
                                    {
                                        this.OnCellEnter(ref cell, x, y);
                                    }
                                }
                            }
                        }
                        return;
                    }
                    default:
                        return;
                }
                if (this.IsInnerCellOutOfBounds(x, y))
                {
                    return;
                }
                this.OnRowValidated(ref cell, x, y);
            Label_015C:
                if (!this.IsColumnOutOfBounds(hti.col))
                {
                    bool flag2 = false;
                    this.trackColumn = hti.col;
                    this.trackColumnEdge = -1;
                    if ((this.MultiSelect && isShiftDown) && ((this.ptAnchorCell.X > -1) && this.Columns[this.ptAnchorCell.X].Selected))
                    {
                        flag2 = true;
                    }
                    if ((!this.MultiSelect || !isControlDown) || isShiftDown)
                    {
                        int num4 = 0;
                        bool flag3 = false;
                        if (this.selectedBandIndexes.Count > 8)
                        {
                            this.inBulkPaintCount++;
                            flag3 = true;
                        }
                        try
                        {
                            while (num4 < this.selectedBandIndexes.Count)
                            {
                                if (this.selectedBandIndexes[num4] != hti.col)
                                {
                                    this.SetSelectedColumnCore(this.selectedBandIndexes[num4], false);
                                }
                                else
                                {
                                    num4++;
                                }
                            }
                            if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
                            {
                                this.RemoveIndividuallySelectedCells();
                            }
                        }
                        finally
                        {
                            if (flag3)
                            {
                                this.ExitBulkPaint(-1, -1);
                            }
                        }
                    }
                    if (this.MultiSelect && this.dataGridViewOper[0x200])
                    {
                        this.dataGridViewOper[4] = true;
                    }
                    if (flag2)
                    {
                        if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, hti.col))
                        {
                            this.SelectColumnRange(this.ptAnchorCell.X, hti.col, true);
                        }
                        else
                        {
                            this.SelectColumnRange(hti.col, this.ptAnchorCell.X, true);
                        }
                    }
                    else if (!this.selectedBandIndexes.Contains(hti.col))
                    {
                        this.SetSelectedColumnCore(hti.col, true);
                    }
                    if (firstRow != -1)
                    {
                        if (hti.col != this.ptCurrentCell.X)
                        {
                            if (!this.IsInnerCellOutOfBounds(hti.col, firstRow))
                            {
                                this.ScrollIntoView(hti.col, firstRow, false);
                                if (!this.IsInnerCellOutOfBounds(hti.col, firstRow))
                                {
                                    this.SetCurrentCellAddressCore(hti.col, firstRow, !isShiftDown, false, true);
                                }
                            }
                        }
                        else if (-1 != this.ptCurrentCell.X)
                        {
                            this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
                        }
                    }
                }
                return;
            Label_0385:
                this.SetSelectedColumnCore(hti.col, false);
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        protected virtual void OnColumnHeadersBorderStyleChanged(EventArgs e)
        {
            this.PerformLayoutPrivate(false, false, true, false);
            base.Invalidate();
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnColumnHeadersDefaultCellStyleChanged(EventArgs e)
        {
            if (this.ColumnHeadersVisible)
            {
                base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
                DataGridViewCellStyleChangedEventArgs args = e as DataGridViewCellStyleChangedEventArgs;
                if ((args == null) || args.ChangeAffectsPreferredSize)
                {
                    this.OnColumnHeadersGlobalAutoSize();
                    if (this.editingControl != null)
                    {
                        this.PositionEditingControl(true, true, false);
                    }
                }
            }
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnColumnHeadersGlobalAutoSize()
        {
            if (this.noAutoSizeCount <= 0)
            {
                bool fixedRowHeadersWidth = (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing) || (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing);
                bool flag2 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
                if (!flag2)
                {
                    this.AutoResizeColumnHeadersHeight(fixedRowHeadersWidth, false);
                }
                if (!fixedRowHeadersWidth)
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, false);
                }
                bool flag3 = this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header, false);
                if (!fixedRowHeadersWidth || flag3)
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                }
                if (!flag2)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
                if (!fixedRowHeadersWidth)
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
                }
                this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header, true);
            }
        }

        protected virtual void OnColumnHeadersHeightChanged(EventArgs e)
        {
            if (this.editingControl != null)
            {
                this.PositionEditingControl(true, false, false);
            }
            this.UpdateMouseEnteredCell(null, null);
            this.OnColumnHeadersGlobalAutoSize();
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)
        {
            if (this.columnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
            {
                if (!e.PreviousModeAutoSized)
                {
                    this.cachedColumnHeadersHeight = this.ColumnHeadersHeight;
                }
                this.AutoResizeColumnHeadersHeight(true, true);
            }
            else if (e.PreviousModeAutoSized)
            {
                this.ColumnHeadersHeight = this.cachedColumnHeadersHeight;
            }
            DataGridViewAutoSizeModeEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED] as DataGridViewAutoSizeModeEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnHidden(DataGridViewColumn dataGridViewColumn)
        {
            if (dataGridViewColumn.Displayed)
            {
                dataGridViewColumn.DisplayedInternal = false;
                DataGridViewColumnStateChangedEventArgs e = new DataGridViewColumnStateChangedEventArgs(dataGridViewColumn, DataGridViewElementStates.Displayed);
                this.OnColumnStateChanged(e);
            }
        }

        protected virtual void OnColumnMinimumWidthChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            if (e.Column.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
            {
                this.PerformLayoutPrivate(false, true, false, false);
            }
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnMinimumWidthChanging(DataGridViewColumn dataGridViewColumn, int minimumWidth)
        {
            if ((dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill) && (dataGridViewColumn.Width < minimumWidth))
            {
                try
                {
                    this.dataGridViewState2[0x4000000] = true;
                    dataGridViewColumn.DesiredMinimumWidth = minimumWidth;
                    this.PerformLayoutPrivate(false, true, true, false);
                }
                finally
                {
                    dataGridViewColumn.DesiredMinimumWidth = 0;
                }
            }
        }

        internal void OnColumnNameChanged(DataGridViewColumn dataGridViewColumn)
        {
            DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
            this.OnColumnNameChanged(e);
        }

        protected virtual void OnColumnNameChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            DataGridViewColumn column = e.Column;
            if ((column.HasHeaderCell && (column.HeaderCell.Value is string)) && (string.Compare((string) column.HeaderCell.Value, column.Name, false, CultureInfo.InvariantCulture) == 0))
            {
                this.InvalidateCellPrivate(column.Index, -1);
                DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal) column.InheritedAutoSizeMode;
                bool fixedColumnWidth = ((inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header) == DataGridViewAutoSizeColumnCriteriaInternal.NotSet) || !this.ColumnHeadersVisible;
                if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(column.Index, true, fixedColumnWidth);
                }
                if (!fixedColumnWidth)
                {
                    bool fixedHeight = (this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) == DataGridViewAutoSizeRowsMode.None;
                    this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, fixedHeight);
                    if (!fixedHeight)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                        this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, true);
                    }
                    if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(column.Index, true, true);
                    }
                }
            }
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnRemoved(DataGridViewColumn dataGridViewColumn)
        {
            this.OnColumnRemoved(new DataGridViewColumnEventArgs(dataGridViewColumn));
        }

        protected virtual void OnColumnRemoved(DataGridViewColumnEventArgs e)
        {
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNREMOVED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnColumnSelectMouseMove(HitTestInfo hti)
        {
            if ((((this.ptCurrentCell.X == -1) || (hti.col == this.ptCurrentCell.X)) || this.CommitEditForOperation(hti.col, this.ptCurrentCell.Y, true)) && !this.IsColumnOutOfBounds(hti.col))
            {
                this.noSelectionChangeCount++;
                try
                {
                    if (((this.trackColumnEdge >= 0) && (this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) || (this.trackColumnEdge == this.trackColumn))) && this.Columns.DisplayInOrder(this.trackColumnEdge, hti.col))
                    {
                        DataGridViewColumn column = this.Columns.GetNextColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectColumnRange(column.Index, hti.col, true);
                        this.trackColumnEdge = hti.col;
                    }
                    else if ((((this.trackColumnEdge >= 0) && this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge)) && this.Columns.DisplayInOrder(hti.col, this.trackColumnEdge)) && (this.Columns.DisplayInOrder(this.trackColumn, hti.col) || (hti.col == this.trackColumn)))
                    {
                        DataGridViewColumn column2 = this.Columns.GetNextColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectColumnRange(column2.Index, this.trackColumnEdge, false);
                        this.trackColumnEdge = hti.col;
                    }
                    else if ((this.trackColumnEdge == -1) && this.Columns.DisplayInOrder(this.trackColumn, hti.col))
                    {
                        DataGridViewColumn column3 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectColumnRange(column3.Index, hti.col, true);
                        this.trackColumnEdge = hti.col;
                    }
                    else if (((this.trackColumnEdge >= 0) && (this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn) || (this.trackColumnEdge == this.trackColumn))) && this.Columns.DisplayInOrder(hti.col, this.trackColumnEdge))
                    {
                        DataGridViewColumn column4 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectColumnRange(hti.col, column4.Index, true);
                        this.trackColumnEdge = hti.col;
                    }
                    else if ((((this.trackColumnEdge >= 0) && this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn)) && this.Columns.DisplayInOrder(this.trackColumnEdge, hti.col)) && (this.Columns.DisplayInOrder(hti.col, this.trackColumn) || (hti.col == this.trackColumn)))
                    {
                        DataGridViewColumn column5 = this.Columns.GetPreviousColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectColumnRange(this.trackColumnEdge, column5.Index, false);
                        this.trackColumnEdge = hti.col;
                    }
                    else if ((this.trackColumnEdge == -1) && this.Columns.DisplayInOrder(hti.col, this.trackColumn))
                    {
                        DataGridViewColumn column6 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectColumnRange(hti.col, column6.Index, true);
                        this.trackColumnEdge = hti.col;
                    }
                    else if (((this.trackColumnEdge >= 0) && this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge)) && this.Columns.DisplayInOrder(hti.col, this.trackColumn))
                    {
                        DataGridViewColumn column7 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectColumnRange(column7.Index, this.trackColumnEdge, false);
                        column7 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectColumnRange(hti.col, column7.Index, true);
                        this.trackColumnEdge = hti.col;
                    }
                    else if (((this.trackColumnEdge >= 0) && this.Columns.DisplayInOrder(this.trackColumn, hti.col)) && this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn))
                    {
                        DataGridViewColumn column8 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectColumnRange(this.trackColumnEdge, column8.Index, false);
                        column8 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectColumnRange(column8.Index, hti.col, true);
                        this.trackColumnEdge = hti.col;
                    }
                }
                finally
                {
                    this.NoSelectionChangeCount--;
                }
                if (((this.ptCurrentCell.X != -1) && (hti.col != this.ptCurrentCell.X)) && ((this.ptCurrentCell.Y != -1) && !this.IsColumnOutOfBounds(hti.col)))
                {
                    this.SetCurrentCellAddressCore(hti.col, this.ptCurrentCell.Y, false, false, false);
                }
            }
        }

        private void OnColumnsGlobalAutoSize()
        {
            this.InvalidateData();
            if (this.noAutoSizeCount <= 0)
            {
                bool fixedHeight = (this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) == DataGridViewAutoSizeRowsMode.None;
                bool flag2 = this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows | DataGridViewAutoSizeColumnCriteriaInternal.AllRows, fixedHeight);
                if (!fixedHeight)
                {
                    if (flag2)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                    }
                    this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows | DataGridViewAutoSizeColumnCriteriaInternal.AllRows, true);
                }
            }
        }

        internal void OnColumnSortModeChanged(DataGridViewColumn dataGridViewColumn)
        {
            DataGridViewColumnEventArgs e = new DataGridViewColumnEventArgs(dataGridViewColumn);
            this.OnColumnSortModeChanged(e);
        }

        protected virtual void OnColumnSortModeChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            DataGridViewColumn column = e.Column;
            if (column.HasHeaderCell)
            {
                if ((column.SortMode == DataGridViewColumnSortMode.NotSortable) || ((column.SortMode == DataGridViewColumnSortMode.Programmatic) && (this.SortedColumn == column)))
                {
                    column.HeaderCell.SortGlyphDirection = System.Windows.Forms.SortOrder.None;
                }
                DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal) column.InheritedAutoSizeMode;
                bool fixedColumnWidth = ((inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header) == DataGridViewAutoSizeColumnCriteriaInternal.NotSet) || !this.ColumnHeadersVisible;
                if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(column.Index, true, fixedColumnWidth);
                }
                if (!fixedColumnWidth)
                {
                    bool fixedHeight = (this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) == DataGridViewAutoSizeRowsMode.None;
                    this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, fixedHeight);
                    if (!fixedHeight)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                        this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, true);
                    }
                    if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(column.Index, true, true);
                    }
                }
            }
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnColumnStateChanged(DataGridViewColumnStateChangedEventArgs e)
        {
            bool flag;
            bool flag2;
            DataGridViewAutoSizeColumnMode inheritedAutoSizeMode;
            DataGridViewColumnStateChangedEventHandler handler;
            DataGridViewColumn column = e.Column;
            switch (e.StateChanged)
            {
                case DataGridViewElementStates.Frozen:
                    if (column.Visible)
                    {
                        if (column.Frozen)
                        {
                            if (this.horizontalOffset >= column.Thickness)
                            {
                                this.horizontalOffset -= column.Thickness;
                            }
                            else
                            {
                                this.horizontalOffset = this.negOffset = 0;
                            }
                        }
                        else
                        {
                            this.horizontalOffset = this.negOffset = 0;
                        }
                        if (this.horizScrollBar.Enabled)
                        {
                            this.horizScrollBar.Value = this.horizontalOffset;
                        }
                        this.dataGridViewState2[0x4000000] = true;
                        this.PerformLayoutPrivate(false, false, true, true);
                        base.Invalidate();
                    }
                    break;

                case DataGridViewElementStates.Selected:
                    if (column.Visible && (this.inBulkPaintCount == 0))
                    {
                        this.InvalidateColumnInternal(column.Index);
                    }
                    break;

                case DataGridViewElementStates.Visible:
                {
                    if (!column.Visible && column.Displayed)
                    {
                        column.DisplayedInternal = false;
                    }
                    this.dataGridViewState2[0x4000000] = true;
                    this.PerformLayoutPrivate(false, false, true, true);
                    flag = ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None) || (((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 1)) != DataGridViewAutoSizeRowsMode.None) && this.RowHeadersVisible);
                    flag2 = false;
                    inheritedAutoSizeMode = column.InheritedAutoSizeMode;
                    switch (inheritedAutoSizeMode)
                    {
                        case DataGridViewAutoSizeColumnMode.None:
                        case DataGridViewAutoSizeColumnMode.Fill:
                            goto Label_01A3;
                    }
                    int thicknessInternal = column.ThicknessInternal;
                    if (column.Visible)
                    {
                        column.CachedThickness = thicknessInternal;
                        this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, !flag);
                        flag2 = true;
                    }
                    else if (thicknessInternal != column.CachedThickness)
                    {
                        column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
                    }
                    goto Label_01A3;
                }
            }
            goto Label_01E5;
        Label_01A3:
            if (flag)
            {
                if (column.Visible)
                {
                    this.AdjustExpandingRows(column.Index, true);
                }
                else
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                }
                if (flag2)
                {
                    this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, true);
                }
            }
            else
            {
                base.Invalidate();
            }
        Label_01E5:
            handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED] as DataGridViewColumnStateChangedEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if (((e.StateChanged == DataGridViewElementStates.ReadOnly) && (column.Index == this.ptCurrentCell.X)) && !this.dataGridViewOper[0x4000])
            {
                base.VerifyImeRestrictedModeChanged();
                if (((!column.ReadOnly && this.ColumnEditable(this.ptCurrentCell.X)) && (((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None) && !this.IsCurrentCellInEditMode)) && ((this.EditMode == DataGridViewEditMode.EditOnEnter) || ((this.EditMode != DataGridViewEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null))))
                {
                    this.BeginEditInternal(true);
                }
            }
        }

        internal void OnColumnToolTipTextChanged(DataGridViewColumn dataGridViewColumn)
        {
            this.OnColumnToolTipTextChanged(new DataGridViewColumnEventArgs(dataGridViewColumn));
        }

        protected virtual void OnColumnToolTipTextChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnColumnWidthChanged(DataGridViewColumnEventArgs e)
        {
            if (e.Column.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            this.Columns.InvalidateCachedColumnsWidths();
            if (e.Column.Visible && base.IsHandleCreated)
            {
                this.PerformLayoutPrivate(false, false, false, false);
                Rectangle data = this.layout.Data;
                if (this.layout.ColumnHeadersVisible)
                {
                    data = Rectangle.Union(data, this.layout.ColumnHeaders);
                }
                else if (this.SingleHorizontalBorderAdded)
                {
                    data.Y--;
                    data.Height++;
                }
                if ((data.Width > 0) && (data.Height > 0))
                {
                    int columnXFromIndex = this.GetColumnXFromIndex(e.Column.Index);
                    if (this.RightToLeftInternal)
                    {
                        data.Width -= data.Right - columnXFromIndex;
                    }
                    else
                    {
                        data.Width -= columnXFromIndex - data.X;
                        data.X = columnXFromIndex;
                    }
                    if ((data.Width > 0) && (data.Height > 0))
                    {
                        base.Invalidate(data);
                    }
                }
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(this.ptCurrentCell.X != e.Column.Index, true, false);
                }
                this.UpdateMouseEnteredCell(null, null);
                if (this.AutoSize)
                {
                    LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Columns);
                }
            }
            DataGridViewColumnEventHandler handler = base.Events[EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED] as DataGridViewColumnEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if (!this.InAdjustFillingColumns)
            {
                this.OnColumnGlobalAutoSize(e.Column.Index);
            }
        }

        internal void OnCommonCellContentClick(int columnIndex, int rowIndex, bool doubleClick)
        {
            if ((this.ptMouseDownCell.X == -2) || (((this.dataGridViewState2[0x10000000] && (this.ptMouseDownCell.X == columnIndex)) && (this.ptMouseDownCell.Y == rowIndex)) && (((this.ptMouseDownCell.X == -1) || (this.ptMouseDownCell.Y == -1)) || ((columnIndex == this.ptCurrentCell.X) && (rowIndex == this.ptCurrentCell.Y)))))
            {
                DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(columnIndex, rowIndex);
                if (doubleClick)
                {
                    this.OnCellContentDoubleClick(e);
                }
                else
                {
                    this.OnCellContentClick(e);
                }
            }
        }

        protected virtual void OnCurrentCellChanged(EventArgs e)
        {
            base.VerifyImeRestrictedModeChanged();
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWCURRENTCELLCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnCurrentCellDirtyStateChanged(EventArgs e)
        {
            if (this.RowHeadersVisible && this.ShowEditingIcon)
            {
                this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
            }
            if (this.IsCurrentCellDirty && (this.newRowIndex == this.ptCurrentCell.Y))
            {
                this.newRowIndex = -1;
                this.AddNewRow(true);
            }
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected override void OnCursorChanged(EventArgs e)
        {
            base.OnCursorChanged(e);
            if (!this.dataGridViewState2[0x200000])
            {
                this.oldCursor = this.Cursor;
            }
        }

        internal void OnDataBindingComplete(ListChangedType listChangedType)
        {
            this.OnDataBindingComplete(new DataGridViewBindingCompleteEventArgs(listChangedType));
        }

        protected virtual void OnDataBindingComplete(DataGridViewBindingCompleteEventArgs e)
        {
            DataGridViewBindingCompleteEventHandler handler = base.Events[EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE] as DataGridViewBindingCompleteEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnDataError(bool displayErrorDialogIfNoHandler, DataGridViewDataErrorEventArgs e)
        {
            DataGridViewDataErrorEventHandler handler = base.Events[EVENT_DATAGRIDVIEWDATAERROR] as DataGridViewDataErrorEventHandler;
            if (!this.dataGridViewOper[0x100000] && !base.IsDisposed)
            {
                if (handler == null)
                {
                    if (displayErrorDialogIfNoHandler)
                    {
                        string str;
                        if (e.Exception == null)
                        {
                            str = System.Windows.Forms.SR.GetString("DataGridView_ErrorMessageText_NoException");
                        }
                        else
                        {
                            str = System.Windows.Forms.SR.GetString("DataGridView_ErrorMessageText_WithException", new object[] { e.Exception });
                        }
                        if (this.RightToLeftInternal)
                        {
                            MessageBox.Show(str, System.Windows.Forms.SR.GetString("DataGridView_ErrorMessageCaption"), MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RtlReading | MessageBoxOptions.RightAlign);
                        }
                        else
                        {
                            MessageBox.Show(str, System.Windows.Forms.SR.GetString("DataGridView_ErrorMessageCaption"), MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        }
                        this.CorrectFocus(true);
                    }
                }
                else
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
        }

        internal void OnDataErrorInternal(DataGridViewDataErrorEventArgs e)
        {
            this.OnDataError(!base.DesignMode, e);
        }

        internal void OnDataGridViewElementStateChanged(DataGridViewElement element, int index, DataGridViewElementStates elementState)
        {
            DataGridViewColumn dataGridViewColumn = element as DataGridViewColumn;
            if (dataGridViewColumn != null)
            {
                DataGridViewColumnStateChangedEventArgs e = new DataGridViewColumnStateChangedEventArgs(dataGridViewColumn, elementState);
                this.OnColumnStateChanged(e);
            }
            else
            {
                DataGridViewRow dataGridViewRow = element as DataGridViewRow;
                if (dataGridViewRow != null)
                {
                    if (((base.Events[EVENT_DATAGRIDVIEWROWSTATECHANGED] is DataGridViewRowStateChangedEventHandler) && (dataGridViewRow.DataGridView != null)) && (dataGridViewRow.Index == -1))
                    {
                        dataGridViewRow = this.Rows[index];
                    }
                    DataGridViewRowStateChangedEventArgs args2 = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, elementState);
                    this.OnRowStateChanged((dataGridViewRow.Index == -1) ? index : dataGridViewRow.Index, args2);
                }
                else
                {
                    DataGridViewCell dataGridViewCell = element as DataGridViewCell;
                    if (dataGridViewCell != null)
                    {
                        DataGridViewCellStateChangedEventArgs args3 = new DataGridViewCellStateChangedEventArgs(dataGridViewCell, elementState);
                        this.OnCellStateChanged(args3);
                    }
                }
            }
            if ((elementState & DataGridViewElementStates.Selected) == DataGridViewElementStates.Selected)
            {
                if (this.noSelectionChangeCount > 0)
                {
                    this.dataGridViewState2[0x40000] = true;
                }
                else
                {
                    this.OnSelectionChanged(EventArgs.Empty);
                }
            }
        }

        internal void OnDataGridViewElementStateChanging(DataGridViewElement element, int index, DataGridViewElementStates elementState)
        {
            DataGridViewColumn dataGridViewColumn = element as DataGridViewColumn;
            if (dataGridViewColumn != null)
            {
                switch (elementState)
                {
                    case DataGridViewElementStates.Frozen:
                    case DataGridViewElementStates.Visible:
                        if (elementState == DataGridViewElementStates.Visible)
                        {
                            if ((!dataGridViewColumn.Visible && (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader)) && !this.ColumnHeadersVisible)
                            {
                                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotMakeAutoSizedColumnVisible"));
                            }
                            if ((!dataGridViewColumn.Visible && dataGridViewColumn.Frozen) && (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
                            {
                                dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
                            }
                            else if (dataGridViewColumn.Visible && (this.ptCurrentCell.X == dataGridViewColumn.Index))
                            {
                                this.ResetCurrentCell();
                            }
                        }
                        if (((elementState == DataGridViewElementStates.Frozen) && !dataGridViewColumn.Frozen) && (dataGridViewColumn.Visible && (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)))
                        {
                            dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
                        }
                        this.CorrectColumnFrozenStates(dataGridViewColumn, elementState == DataGridViewElementStates.Frozen);
                        return;

                    case (DataGridViewElementStates.Frozen | DataGridViewElementStates.Displayed):
                        return;

                    case DataGridViewElementStates.ReadOnly:
                        if ((((this.ptCurrentCell.X == dataGridViewColumn.Index) && this.IsCurrentCellInEditMode) && (!dataGridViewColumn.ReadOnly && !this.dataGridViewOper[0x4000])) && !this.EndEdit(DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
                        {
                            throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
                        }
                        return;
                }
            }
            else
            {
                DataGridViewRow dataGridViewRow = element as DataGridViewRow;
                if (dataGridViewRow != null)
                {
                    int rowIndex = (dataGridViewRow.Index > -1) ? dataGridViewRow.Index : index;
                    switch (elementState)
                    {
                        case DataGridViewElementStates.Frozen:
                        case DataGridViewElementStates.Visible:
                            if ((elementState == DataGridViewElementStates.Visible) && (this.ptCurrentCell.Y == rowIndex))
                            {
                                if (this.DataSource != null)
                                {
                                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CurrencyManagerRowCannotBeInvisible"));
                                }
                                this.ResetCurrentCell();
                            }
                            this.CorrectRowFrozenStates(dataGridViewRow, rowIndex, elementState == DataGridViewElementStates.Frozen);
                            return;

                        case (DataGridViewElementStates.Frozen | DataGridViewElementStates.Displayed):
                            return;

                        case DataGridViewElementStates.ReadOnly:
                            if ((((this.ptCurrentCell.Y == rowIndex) && ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None)) && (!this.ReadOnly && this.IsCurrentCellInEditMode)) && (!this.dataGridViewOper[0x4000] && !this.EndEdit(DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false)))
                            {
                                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
                            }
                            return;
                    }
                }
                else
                {
                    DataGridViewCell cell = element as DataGridViewCell;
                    if (cell != null)
                    {
                        DataGridViewElementStates states3 = elementState;
                        if ((states3 == DataGridViewElementStates.ReadOnly) && ((((this.ptCurrentCell.X == cell.ColumnIndex) && (this.ptCurrentCell.Y == cell.RowIndex)) && (this.IsCurrentCellInEditMode && !cell.ReadOnly)) && (!this.dataGridViewOper[0x4000] && !this.EndEdit(DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))))
                        {
                            throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
                        }
                    }
                }
            }
        }

        protected virtual void OnDataMemberChanged(EventArgs e)
        {
            this.RefreshColumnsAndRows();
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWDATAMEMBERCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((this.dataConnection != null) && (this.dataConnection.CurrencyManager != null))
            {
                this.OnDataBindingComplete(ListChangedType.Reset);
            }
        }

        protected virtual void OnDataSourceChanged(EventArgs e)
        {
            this.RefreshColumnsAndRows();
            this.InvalidateRowHeights();
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWDATASOURCECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((this.dataConnection != null) && (this.dataConnection.CurrencyManager != null))
            {
                this.OnDataBindingComplete(ListChangedType.Reset);
            }
        }

        protected virtual void OnDefaultCellStyleChanged(EventArgs e)
        {
            DataGridViewCellStyleChangedEventArgs args = e as DataGridViewCellStyleChangedEventArgs;
            if ((args != null) && !args.ChangeAffectsPreferredSize)
            {
                base.Invalidate();
            }
            else
            {
                this.OnGlobalAutoSize();
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(true, true, false);
                }
            }
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnDefaultValuesNeeded(DataGridViewRowEventArgs e)
        {
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected override void OnDoubleClick(EventArgs e)
        {
            base.OnDoubleClick(e);
            if ((!this.dataGridViewState2[0x8000000] && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                MouseEventArgs args = e as MouseEventArgs;
                if (args != null)
                {
                    HitTestInfo info = this.HitTest(args.X, args.Y);
                    if (((info.Type != DataGridViewHitTestType.None) && (info.Type != DataGridViewHitTestType.HorizontalScrollBar)) && ((info.Type != DataGridViewHitTestType.VerticalScrollBar) && (args.Button == MouseButtons.Left)))
                    {
                        this.OnCellDoubleClick(new DataGridViewCellEventArgs(info.col, info.row));
                    }
                }
            }
        }

        protected virtual void OnEditingControlShowing(DataGridViewEditingControlShowingEventArgs e)
        {
            DataGridViewEditingControlShowingEventHandler handler = base.Events[EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING] as DataGridViewEditingControlShowingEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnEditModeChanged(EventArgs e)
        {
            if ((this.Focused && (this.EditMode == DataGridViewEditMode.EditOnEnter)) && ((this.ptCurrentCell.X > -1) && !this.IsCurrentCellInEditMode))
            {
                this.BeginEditInternal(true);
            }
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWEDITMODECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected override void OnEnabledChanged(EventArgs e)
        {
            base.OnEnabledChanged(e);
            if (!base.GetAnyDisposingInHierarchy() && (base.IsHandleCreated && base.Enabled))
            {
                if ((this.vertScrollBar != null) && this.vertScrollBar.Visible)
                {
                    this.vertScrollBar.Enabled = true;
                }
                if ((this.horizScrollBar != null) && this.horizScrollBar.Visible)
                {
                    this.horizScrollBar.Enabled = true;
                }
            }
        }

        protected override void OnEnter(EventArgs e)
        {
            if ((this.editingControl == null) || !this.editingControl.ContainsFocus)
            {
                base.OnEnter(e);
                if (!base.DesignMode)
                {
                    this.dataGridViewState1[0x40] = false;
                    if (this.ptCurrentCell.X > -1)
                    {
                        DataGridViewCell dataGridViewCell = null;
                        this.OnRowEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false);
                        if (this.ptCurrentCell.X == -1)
                        {
                            return;
                        }
                        this.OnCellEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                    }
                    else if (!this.dataGridViewOper[0x2000])
                    {
                        this.MakeFirstDisplayedCellCurrentCell(true);
                    }
                    if ((this.ptCurrentCell.X > -1) && !this.IsCurrentCellInEditMode)
                    {
                        if ((this.EditMode == DataGridViewEditMode.EditOnEnter) || ((this.EditMode != DataGridViewEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null)))
                        {
                            this.BeginEditInternal(true);
                            if (((this.ptCurrentCell.X > -1) && (this.CurrentCellInternal.EditType == null)) && !this.dataGridViewOper[0x2000])
                            {
                                this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                            }
                        }
                        else if (!this.dataGridViewOper[0x2000])
                        {
                            this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                        }
                    }
                }
            }
        }

        protected override void OnFontChanged(EventArgs e)
        {
            base.OnFontChanged(e);
            if (!base.GetAnyDisposingInHierarchy())
            {
                if (this.dataGridViewState1[0x4000000] && (this.ColumnHeadersDefaultCellStyle.Font != base.Font))
                {
                    this.ColumnHeadersDefaultCellStyle.Font = base.Font;
                    this.dataGridViewState1[0x4000000] = true;
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
                    this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
                if (this.dataGridViewState1[0x8000000] && (this.RowHeadersDefaultCellStyle.Font != base.Font))
                {
                    this.RowHeadersDefaultCellStyle.Font = base.Font;
                    this.dataGridViewState1[0x8000000] = true;
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
                    this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
                if (this.dataGridViewState1[0x2000000] && (this.DefaultCellStyle.Font != base.Font))
                {
                    this.DefaultCellStyle.Font = base.Font;
                    this.dataGridViewState1[0x2000000] = true;
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
                    this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        protected override void OnForeColorChanged(EventArgs e)
        {
            base.OnForeColorChanged(e);
            if (!base.GetAnyDisposingInHierarchy() && (this.dataGridViewState1[0x400] && (this.DefaultCellStyle.ForeColor != base.ForeColor)))
            {
                this.DefaultCellStyle.ForeColor = base.ForeColor;
                this.dataGridViewState1[0x400] = true;
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = false;
                this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
        }

        private void OnGlobalAutoSize()
        {
            base.Invalidate();
            if (this.noAutoSizeCount <= 0)
            {
                bool flag = (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing);
                if (flag)
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize, this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None);
                }
                if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(true, false);
                }
                if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None)
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
                }
                this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows | DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.Header, true);
                if (flag && ((this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize) || (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None)))
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
                }
                if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
                if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None)
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                }
            }
        }

        protected override void OnGotFocus(EventArgs e)
        {
            base.OnGotFocus(e);
            if (this.ptCurrentCell.X != -1)
            {
                this.InvalidateCell(this.ptCurrentCell.X, this.ptCurrentCell.Y);
            }
            if (((!this.dataGridViewOper[0x20000] && (!this.dataGridViewOper[0x400000] || (this.EditMode != DataGridViewEditMode.EditOnEnter))) && (!this.dataGridViewOper[0x2000] || (this.EditMode != DataGridViewEditMode.EditOnEnter))) && (this.ptCurrentCell.X > -1))
            {
                this.AccessibilityNotifyCurrentCellChanged(this.ptCurrentCell);
            }
        }

        protected virtual void OnGridColorChanged(EventArgs e)
        {
            this.InvalidateInside();
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWGRIDCOLORCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected override void OnHandleCreated(EventArgs e)
        {
            base.OnHandleCreated(e);
            this.DisposeCachedGraphics();
            if (this.layout.dirty)
            {
                this.PerformLayoutPrivate(false, true, false, false);
            }
            if (this.ptCurrentCell.X == -1)
            {
                this.MakeFirstDisplayedCellCurrentCell(false);
            }
            else
            {
                this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
            }
            if (this.dataGridViewState2[0x100000])
            {
                this.dataGridViewState2[0x100000] = false;
                this.OnGlobalAutoSize();
            }
            SystemEvents.UserPreferenceChanged += new UserPreferenceChangedEventHandler(this.OnUserPreferenceChanged);
        }

        protected override void OnHandleDestroyed(EventArgs e)
        {
            SystemEvents.UserPreferenceChanged -= new UserPreferenceChangedEventHandler(this.OnUserPreferenceChanged);
            base.OnHandleDestroyed(e);
        }

        internal void OnInsertedColumn_PostNotification(Point newCurrentCell)
        {
            if (newCurrentCell.X != -1)
            {
                this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 1);
            }
        }

        internal void OnInsertedColumn_PreNotification(DataGridViewColumn dataGridViewColumn)
        {
            this.displayedBandsInfo.CorrectColumnIndexAfterInsertion(dataGridViewColumn.Index, 1);
            this.CorrectColumnIndexesAfterInsertion(dataGridViewColumn, 1);
            this.OnAddedColumn(dataGridViewColumn);
        }

        internal void OnInsertedRow_PostNotification(int rowIndex, Point newCurrentCell, bool lastInsertion)
        {
            this.OnAddedRow_PostNotification(rowIndex);
            if (lastInsertion && (newCurrentCell.Y != -1))
            {
                this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 1);
            }
        }

        internal void OnInsertedRow_PreNotification(int rowIndex, int insertionCount)
        {
            this.displayedBandsInfo.CorrectRowIndexAfterInsertion(rowIndex, insertionCount);
            this.CorrectRowIndexesAfterInsertion(rowIndex, insertionCount);
            this.OnAddedRow_PreNotification(rowIndex);
        }

        internal void OnInsertedRows_PostNotification(DataGridViewRow[] dataGridViewRows, Point newCurrentCell)
        {
            this.OnAddedRows_PostNotification(dataGridViewRows);
            if (newCurrentCell.Y != -1)
            {
                this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
            }
        }

        internal void OnInsertedRows_PreNotification(int rowIndex, DataGridViewRow[] dataGridViewRows)
        {
            this.displayedBandsInfo.CorrectRowIndexAfterInsertion(rowIndex, dataGridViewRows.Length);
            this.CorrectRowIndexesAfterInsertion(rowIndex, dataGridViewRows.Length);
            this.OnAddedRows_PreNotification(dataGridViewRows);
        }

        internal void OnInsertingColumn(int columnIndexInserted, DataGridViewColumn dataGridViewColumn, out Point newCurrentCell)
        {
            if (dataGridViewColumn.DataGridView != null)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
            }
            if ((!this.InInitialization && (dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic)) && ((this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect) || (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)))
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[] { DataGridViewColumnSortMode.Automatic.ToString(), this.SelectionMode.ToString() }));
            }
            if (dataGridViewColumn.Visible)
            {
                if (!this.ColumnHeadersVisible && ((dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader) || ((dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader))))
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
                }
                if (dataGridViewColumn.Frozen && ((dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill) || ((dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill))))
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddAutoFillColumn"));
                }
            }
            this.CorrectColumnFrozenState(dataGridViewColumn, columnIndexInserted);
            if (this.ptCurrentCell.X != -1)
            {
                newCurrentCell = new Point((columnIndexInserted <= this.ptCurrentCell.X) ? (this.ptCurrentCell.X + 1) : this.ptCurrentCell.X, this.ptCurrentCell.Y);
                this.ResetCurrentCell();
            }
            else
            {
                newCurrentCell = new Point(-1, -1);
            }
            if (this.Rows.Count > 0)
            {
                if (dataGridViewColumn.CellType == null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAddUntypedColumn"));
                }
                if ((dataGridViewColumn.CellTemplate.DefaultNewRowValue != null) && (this.newRowIndex != -1))
                {
                    DataGridViewRow row1 = this.Rows[this.newRowIndex];
                }
                int num = this.Columns.Count + 1;
                try
                {
                    for (int i = 0; i < this.Rows.Count; i++)
                    {
                        DataGridViewRow row = this.Rows.SharedRow(i);
                        if (row.Cells.Count < num)
                        {
                            DataGridViewCell dataGridViewCell = (DataGridViewCell) dataGridViewColumn.CellTemplate.Clone();
                            row.Cells.InsertInternal(columnIndexInserted, dataGridViewCell);
                            if (i == this.newRowIndex)
                            {
                                dataGridViewCell.Value = dataGridViewCell.DefaultNewRowValue;
                            }
                            dataGridViewCell.DataGridViewInternal = this;
                            dataGridViewCell.OwningRowInternal = row;
                            dataGridViewCell.OwningColumnInternal = dataGridViewColumn;
                        }
                    }
                }
                catch
                {
                    for (int j = 0; j < this.Rows.Count; j++)
                    {
                        DataGridViewRow row2 = this.Rows.SharedRow(j);
                        if (row2.Cells.Count != num)
                        {
                            break;
                        }
                        row2.Cells.RemoveAtInternal(columnIndexInserted);
                    }
                    throw;
                }
            }
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.FullColumnSelect:
                case DataGridViewSelectionMode.ColumnHeaderSelect:
                {
                    int count = this.selectedBandIndexes.Count;
                    int num5 = 0;
                    while (num5 < count)
                    {
                        int num6 = this.selectedBandIndexes[num5];
                        if (columnIndexInserted <= num6)
                        {
                            this.selectedBandIndexes[num5] = num6 + 1;
                        }
                        num5++;
                    }
                    if (this.selectedBandSnapshotIndexes != null)
                    {
                        count = this.selectedBandSnapshotIndexes.Count;
                        for (num5 = 0; num5 < count; num5++)
                        {
                            int num7 = this.selectedBandSnapshotIndexes[num5];
                            if (columnIndexInserted <= num7)
                            {
                                this.selectedBandSnapshotIndexes[num5] = num7 + 1;
                            }
                        }
                    }
                    break;
                }
                case DataGridViewSelectionMode.RowHeaderSelect:
                    break;

                default:
                    return;
            }
        }

        internal void OnInsertingRow(int rowIndexInserted, DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, ref Point newCurrentCell, bool firstInsertion, int insertionCount, bool force)
        {
            if (firstInsertion)
            {
                if ((this.ptCurrentCell.Y != -1) && (rowIndexInserted <= this.ptCurrentCell.Y))
                {
                    newCurrentCell = new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y + insertionCount);
                    if (force)
                    {
                        this.dataGridViewState1[0x400000] = true;
                        this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                    }
                    else
                    {
                        this.ResetCurrentCell();
                    }
                }
                else
                {
                    newCurrentCell = new Point(-1, -1);
                }
            }
            else if (newCurrentCell.Y != -1)
            {
                newCurrentCell.Y += insertionCount;
            }
            this.OnAddingRow(dataGridViewRow, rowState, false);
            this.CorrectRowFrozenState(dataGridViewRow, rowState, rowIndexInserted);
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.FullRowSelect:
                case DataGridViewSelectionMode.RowHeaderSelect:
                {
                    int count = this.selectedBandIndexes.Count;
                    int num2 = 0;
                    while (num2 < count)
                    {
                        int num3 = this.selectedBandIndexes[num2];
                        if (rowIndexInserted <= num3)
                        {
                            this.selectedBandIndexes[num2] = num3 + insertionCount;
                        }
                        num2++;
                    }
                    if (this.selectedBandSnapshotIndexes != null)
                    {
                        count = this.selectedBandSnapshotIndexes.Count;
                        for (num2 = 0; num2 < count; num2++)
                        {
                            int num4 = this.selectedBandSnapshotIndexes[num2];
                            if (rowIndexInserted <= num4)
                            {
                                this.selectedBandSnapshotIndexes[num2] = num4 + insertionCount;
                            }
                        }
                    }
                    break;
                }
                case DataGridViewSelectionMode.FullColumnSelect:
                    break;

                default:
                    return;
            }
        }

        internal void OnInsertingRows(int rowIndexInserted, DataGridViewRow[] dataGridViewRows, ref Point newCurrentCell)
        {
            if ((this.ptCurrentCell.Y != -1) && (rowIndexInserted <= this.ptCurrentCell.Y))
            {
                newCurrentCell = new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y + dataGridViewRows.Length);
                this.ResetCurrentCell();
            }
            else
            {
                newCurrentCell = new Point(-1, -1);
            }
            this.OnAddingRows(dataGridViewRows, false);
            this.CorrectRowFrozenStates(dataGridViewRows, rowIndexInserted);
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.FullRowSelect:
                case DataGridViewSelectionMode.RowHeaderSelect:
                {
                    int count = this.selectedBandIndexes.Count;
                    int num2 = 0;
                    while (num2 < count)
                    {
                        int num3 = this.selectedBandIndexes[num2];
                        if (rowIndexInserted <= num3)
                        {
                            this.selectedBandIndexes[num2] = num3 + dataGridViewRows.Length;
                        }
                        num2++;
                    }
                    if (this.selectedBandSnapshotIndexes != null)
                    {
                        count = this.selectedBandSnapshotIndexes.Count;
                        for (num2 = 0; num2 < count; num2++)
                        {
                            int num4 = this.selectedBandSnapshotIndexes[num2];
                            if (rowIndexInserted <= num4)
                            {
                                this.selectedBandSnapshotIndexes[num2] = num4 + dataGridViewRows.Length;
                            }
                        }
                    }
                    break;
                }
                case DataGridViewSelectionMode.FullColumnSelect:
                    break;

                default:
                    return;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);
            if (e.Handled)
            {
                return;
            }
            if (this.ptCurrentCell.X != -1)
            {
                DataGridViewCell currentCellInternal = this.CurrentCellInternal;
                if (currentCellInternal.KeyDownUnsharesRowInternal(e, this.ptCurrentCell.Y))
                {
                    DataGridViewRow row1 = this.Rows[this.ptCurrentCell.Y];
                    this.CurrentCellInternal.OnKeyDownInternal(e, this.ptCurrentCell.Y);
                }
                else
                {
                    currentCellInternal.OnKeyDownInternal(e, this.ptCurrentCell.Y);
                }
            }
            if (e.Handled)
            {
                return;
            }
            Keys keys = e.KeyData & Keys.KeyCode;
            if (keys <= Keys.D0)
            {
                if (keys != Keys.Tab)
                {
                    switch (keys)
                    {
                        case Keys.Escape:
                        case Keys.Space:
                        case Keys.PageUp:
                        case Keys.Next:
                        case Keys.End:
                        case Keys.Home:
                        case Keys.Left:
                        case Keys.Up:
                        case Keys.Right:
                        case Keys.Down:
                        case Keys.Insert:
                        case Keys.Delete:
                        case Keys.D0:
                        case Keys.Enter:
                            goto Label_012A;

                        case Keys.IMEConvert:
                        case Keys.IMENonconvert:
                        case Keys.IMEAccept:
                        case Keys.IMEModeChange:
                        case Keys.Select:
                        case Keys.Print:
                        case Keys.Execute:
                        case Keys.PrintScreen:
                        case Keys.Help:
                            return;
                    }
                    return;
                }
            }
            else
            {
                switch (keys)
                {
                    case Keys.A:
                    case Keys.C:
                    case Keys.NumPad0:
                    case Keys.F2:
                        goto Label_012A;

                    case Keys.B:
                        return;
                }
                return;
            }
        Label_012A:
            e.Handled = this.ProcessDataGridViewKey(e);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected override void OnKeyPress(KeyPressEventArgs e)
        {
            base.OnKeyPress(e);
            if (!e.Handled && (this.ptCurrentCell.X != -1))
            {
                DataGridViewCell currentCellInternal = this.CurrentCellInternal;
                if (currentCellInternal.KeyPressUnsharesRowInternal(e, this.ptCurrentCell.Y))
                {
                    DataGridViewRow row1 = this.Rows[this.ptCurrentCell.Y];
                    this.CurrentCellInternal.OnKeyPressInternal(e, this.ptCurrentCell.Y);
                }
                else
                {
                    currentCellInternal.OnKeyPressInternal(e, this.ptCurrentCell.Y);
                }
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected override void OnKeyUp(KeyEventArgs e)
        {
            base.OnKeyUp(e);
            if (!e.Handled && (this.ptCurrentCell.X != -1))
            {
                DataGridViewCell currentCellInternal = this.CurrentCellInternal;
                if (currentCellInternal.KeyUpUnsharesRowInternal(e, this.ptCurrentCell.Y))
                {
                    DataGridViewRow row1 = this.Rows[this.ptCurrentCell.Y];
                    this.CurrentCellInternal.OnKeyUpInternal(e, this.ptCurrentCell.Y);
                }
                else
                {
                    currentCellInternal.OnKeyUpInternal(e, this.ptCurrentCell.Y);
                }
            }
        }

        protected override void OnLayout(LayoutEventArgs e)
        {
            if (!this.dataGridViewState1[0x4000])
            {
                base.OnLayout(e);
                this.PerformLayoutPrivate(false, false, false, false);
                if (this.RightToLeftInternal)
                {
                    base.Invalidate();
                }
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(true, true, false);
                }
            }
        }

        protected override void OnLeave(EventArgs e)
        {
            if ((this.ptCurrentCell.X > -1) && !this.dataGridViewState1[0x40])
            {
                DataGridViewCell dataGridViewCell = null;
                this.OnCellLeave(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                if (this.ptCurrentCell.X == -1)
                {
                    return;
                }
                this.OnRowLeave(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
            }
            if (!this.dataGridViewState1[0x40])
            {
                base.OnLeave(e);
                if ((this.ptCurrentCell.X > -1) && (this.ptCurrentCell.Y > -1))
                {
                    this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                }
            }
        }

        protected override void OnLostFocus(EventArgs e)
        {
            base.OnLostFocus(e);
            if (this.ptCurrentCell.X != -1)
            {
                this.InvalidateCell(this.ptCurrentCell.X, this.ptCurrentCell.Y);
            }
        }

        protected override void OnMouseClick(MouseEventArgs e)
        {
            bool flag = false;
            if (((!this.dataGridViewState2[0x8000000] && !this.dataGridViewOper[0x100000]) && (!base.IsDisposed && !this.dataGridViewOper[1])) && ((!this.dataGridViewOper[2] && !this.dataGridViewOper[0x80]) && !this.dataGridViewOper[0x100]))
            {
                HitTestInfo info = this.HitTest(e.X, e.Y);
                if (((this.ptMouseDownCell.X == info.col) && (this.ptMouseDownCell.Y == info.row)) && (((e.Button != MouseButtons.Left) || (this.ptMouseDownCell.X == -1)) || ((this.ptMouseDownCell.Y == -1) || ((this.ptMouseDownCell.X == this.ptCurrentCell.X) && (this.ptMouseDownCell.Y == this.ptCurrentCell.Y)))))
                {
                    DataGridViewCellMouseEventArgs dgvcme = null;
                    if (((info.Type != DataGridViewHitTestType.None) && (info.Type != DataGridViewHitTestType.HorizontalScrollBar)) && (info.Type != DataGridViewHitTestType.VerticalScrollBar))
                    {
                        int localX = e.X - info.ColumnX;
                        if (this.RightToLeftInternal)
                        {
                            localX += (info.col == -1) ? this.RowHeadersWidth : this.Columns[info.col].Thickness;
                        }
                        dgvcme = new DataGridViewCellMouseEventArgs(info.col, info.row, localX, e.Y - info.RowY, e);
                        this.RecordCellMouseClick(dgvcme);
                        if (e.Button == MouseButtons.Left)
                        {
                            this.OnCellClick(new DataGridViewCellEventArgs(info.col, info.row));
                        }
                        base.OnMouseClick(e);
                        flag = true;
                        if ((dgvcme.ColumnIndex < this.Columns.Count) && (dgvcme.RowIndex < this.Rows.Count))
                        {
                            this.OnCellMouseClick(dgvcme);
                        }
                    }
                    else
                    {
                        base.OnMouseClick(e);
                        flag = true;
                    }
                    if (!this.dataGridViewOper[0x20])
                    {
                        switch (info.typeInternal)
                        {
                            case DataGridViewHitTestTypeInternal.ColumnHeader:
                            case DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft:
                            case DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
                            case DataGridViewHitTestTypeInternal.ColumnHeaderRight:
                                if ((dgvcme.ColumnIndex < this.Columns.Count) && (dgvcme.RowIndex < this.Rows.Count))
                                {
                                    this.OnColumnHeaderMouseClick(dgvcme);
                                }
                                break;

                            case DataGridViewHitTestTypeInternal.RowHeader:
                                if ((dgvcme.ColumnIndex < this.Columns.Count) && (dgvcme.RowIndex < this.Rows.Count))
                                {
                                    this.OnRowHeaderMouseClick(dgvcme);
                                }
                                break;
                        }
                    }
                }
            }
            if (!flag)
            {
                base.OnMouseClick(e);
            }
        }

        protected override void OnMouseDoubleClick(MouseEventArgs e)
        {
            base.OnMouseDoubleClick(e);
            if (((!this.dataGridViewState2[0x8000000] && !this.dataGridViewOper[1]) && (!this.dataGridViewOper[2] && !this.dataGridViewOper[0x80])) && !this.dataGridViewOper[0x100])
            {
                HitTestInfo info = this.HitTest(e.X, e.Y);
                if ((this.ptMouseDownCell.X == info.col) && (this.ptMouseDownCell.Y == info.row))
                {
                    DataGridViewCellMouseEventArgs args = null;
                    if (((info.Type != DataGridViewHitTestType.None) && (info.Type != DataGridViewHitTestType.HorizontalScrollBar)) && (info.Type != DataGridViewHitTestType.VerticalScrollBar))
                    {
                        int localX = e.X - info.ColumnX;
                        if (this.RightToLeftInternal)
                        {
                            localX += (info.col == -1) ? this.RowHeadersWidth : this.Columns[info.col].Thickness;
                        }
                        args = new DataGridViewCellMouseEventArgs(info.col, info.row, localX, e.Y - info.RowY, e);
                        this.OnCellMouseDoubleClick(args);
                    }
                    if (!this.dataGridViewOper[0x20])
                    {
                        switch (info.typeInternal)
                        {
                            case DataGridViewHitTestTypeInternal.ColumnHeader:
                            case DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft:
                            case DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
                            case DataGridViewHitTestTypeInternal.ColumnHeaderRight:
                                if ((args.ColumnIndex < this.Columns.Count) && (args.RowIndex < this.Rows.Count))
                                {
                                    this.OnColumnHeaderMouseDoubleClick(args);
                                }
                                return;

                            case DataGridViewHitTestTypeInternal.RowHeader:
                                if ((args.ColumnIndex < this.Columns.Count) && (args.RowIndex < this.Rows.Count))
                                {
                                    this.OnRowHeaderMouseDoubleClick(args);
                                }
                                return;

                            case DataGridViewHitTestTypeInternal.ColumnResizeLeft:
                            case DataGridViewHitTestTypeInternal.ColumnResizeRight:
                            {
                                int columnIndex = (info.typeInternal == DataGridViewHitTestTypeInternal.ColumnResizeRight) ? info.col : info.adjacentCol;
                                if (columnIndex < this.Columns.Count)
                                {
                                    HandledMouseEventArgs args2 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
                                    DataGridViewColumnDividerDoubleClickEventArgs args3 = new DataGridViewColumnDividerDoubleClickEventArgs(columnIndex, args2);
                                    this.OnColumnDividerDoubleClick(args3);
                                }
                                return;
                            }
                            case DataGridViewHitTestTypeInternal.RowResizeTop:
                            case DataGridViewHitTestTypeInternal.RowResizeBottom:
                            {
                                int rowIndex = (info.typeInternal == DataGridViewHitTestTypeInternal.RowResizeBottom) ? info.row : info.adjacentRow;
                                if (rowIndex < this.Rows.Count)
                                {
                                    HandledMouseEventArgs args6 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
                                    DataGridViewRowDividerDoubleClickEventArgs args7 = new DataGridViewRowDividerDoubleClickEventArgs(rowIndex, args6);
                                    this.OnRowDividerDoubleClick(args7);
                                }
                                return;
                            }
                            case DataGridViewHitTestTypeInternal.TopLeftHeader:
                                return;

                            case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft:
                            case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight:
                            case DataGridViewHitTestTypeInternal.RowHeadersResizeRight:
                            case DataGridViewHitTestTypeInternal.RowHeadersResizeLeft:
                            {
                                HandledMouseEventArgs args8 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
                                DataGridViewColumnDividerDoubleClickEventArgs args9 = new DataGridViewColumnDividerDoubleClickEventArgs(-1, args8);
                                this.OnColumnDividerDoubleClick(args9);
                                return;
                            }
                            case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop:
                            case DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom:
                            case DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom:
                            case DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop:
                            {
                                HandledMouseEventArgs args4 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
                                DataGridViewRowDividerDoubleClickEventArgs args5 = new DataGridViewRowDividerDoubleClickEventArgs(-1, args4);
                                this.OnRowDividerDoubleClick(args5);
                                return;
                            }
                        }
                    }
                }
            }
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            if (!this.dataGridViewState2[0x8000000])
            {
                this.dataGridViewOper[0x200] = true;
            }
            base.OnMouseDown(e);
            if (!this.dataGridViewState2[0x8000000] && (this.ptMouseDownCell.X == -2))
            {
                HitTestInfo info = this.HitTest(e.X, e.Y);
                if (((info.Type != DataGridViewHitTestType.None) && (info.Type != DataGridViewHitTestType.HorizontalScrollBar)) && (info.Type != DataGridViewHitTestType.VerticalScrollBar))
                {
                    this.ptMouseDownCell.X = info.col;
                    this.ptMouseDownCell.Y = info.row;
                    this.ptMouseDownGridCoord = new Point(e.X, e.Y);
                    int localX = e.X - info.ColumnX;
                    if (this.RightToLeftInternal)
                    {
                        localX += (info.col == -1) ? this.RowHeadersWidth : this.Columns[info.col].Thickness;
                    }
                    DataGridViewCellMouseEventArgs args = new DataGridViewCellMouseEventArgs(info.col, info.row, localX, e.Y - info.RowY, e);
                    this.OnCellMouseDown(args);
                }
            }
        }

        protected override void OnMouseEnter(EventArgs e)
        {
            if ((!this.dataGridViewState2[8] && !this.dataGridViewState2[0x10]) && (this.dataGridViewState2[0x20] && !this.toolTipControl.Activated))
            {
                base.OnMouseEnter(e);
            }
            this.dataGridViewState2[8] = false;
            this.dataGridViewState2[0x10] = false;
            this.dataGridViewState2[0x20] = false;
        }

        protected override void OnMouseLeave(EventArgs e)
        {
            if (this.dataGridViewState1[0x1000000])
            {
                this.dataGridViewState1[0x1000000] = false;
                this.CursorInternal = this.oldCursor;
            }
            bool mouseOverEditingControl = this.MouseOverEditingControl;
            bool mouseOverEditingPanel = this.MouseOverEditingPanel;
            bool flag3 = this.toolTipControl.Activated && base.ClientRectangle.Contains(base.PointToClient(Control.MousePosition));
            if ((!mouseOverEditingPanel && !mouseOverEditingControl) && (!flag3 && (this.ptMouseEnteredCell.X != -2)))
            {
                if (((this.ptMouseEnteredCell.X >= -1) && (this.ptMouseEnteredCell.X < this.Columns.Count)) && ((this.ptMouseEnteredCell.Y >= -1) && (this.ptMouseEnteredCell.Y < this.Rows.Count)))
                {
                    DataGridViewCellEventArgs args = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
                    this.OnCellMouseLeave(args);
                }
                else
                {
                    this.ptMouseEnteredCell.X = this.ptMouseEnteredCell.Y = -2;
                }
            }
            this.ResetTrackingState();
            this.dataGridViewOper[0x200] = false;
            if ((!mouseOverEditingPanel && !mouseOverEditingControl) && (!flag3 && !this.MouseOverScrollBar))
            {
                this.toolTipControl.Activate(false);
                base.OnMouseLeave(e);
                this.dataGridViewState2[0x20] = true;
            }
        }

        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);
            HitTestInfo hti = this.HitTest(e.X, e.Y);
            this.UpdateMouseEnteredCell(hti, e);
            if (this.dataGridViewOper[1])
            {
                this.MoveRowHeadersOrColumnResize(e);
            }
            else if (this.dataGridViewOper[2])
            {
                this.MoveColumnHeadersOrRowResize(e);
            }
            else if (this.dataGridViewOper[0x20])
            {
                this.MoveColumnRelocation(e, hti);
            }
            else if (this.dataGridViewOper[0x80])
            {
                this.MoveColumnHeadersOrRowResize(e);
            }
            else if (this.dataGridViewOper[0x100])
            {
                this.MoveRowHeadersOrColumnResize(e);
            }
            if ((this.dataGridViewOper[1] || this.dataGridViewOper[0x100]) || (((((hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnResizeLeft) || (hti.typeInternal == DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft)) || ((hti.typeInternal == DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight) || (hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnResizeRight))) || ((hti.typeInternal == DataGridViewHitTestTypeInternal.RowHeadersResizeLeft) || (hti.typeInternal == DataGridViewHitTestTypeInternal.RowHeadersResizeRight))) && (((!this.dataGridViewOper[0x80] && !this.dataGridViewOper[0x20]) && (!this.dataGridViewOper[4] && !this.dataGridViewOper[8])) && !this.dataGridViewOper[0x10])))
            {
                if (!this.dataGridViewState1[0x1000000])
                {
                    this.dataGridViewState1[0x1000000] = true;
                    this.oldCursor = this.Cursor;
                }
                this.CursorInternal = Cursors.SizeWE;
            }
            else if ((this.dataGridViewOper[2] || this.dataGridViewOper[0x80]) || (((((hti.typeInternal == DataGridViewHitTestTypeInternal.RowResizeBottom) || (hti.typeInternal == DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop)) || ((hti.typeInternal == DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom) || (hti.typeInternal == DataGridViewHitTestTypeInternal.RowResizeTop))) || ((hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop) || (hti.typeInternal == DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom))) && (((!this.dataGridViewOper[0x100] && !this.dataGridViewOper[0x20]) && (!this.dataGridViewOper[4] && !this.dataGridViewOper[8])) && !this.dataGridViewOper[0x10])))
            {
                if (!this.dataGridViewState1[0x1000000])
                {
                    this.dataGridViewState1[0x1000000] = true;
                    this.oldCursor = this.Cursor;
                }
                this.CursorInternal = Cursors.SizeNS;
            }
            else
            {
                if (this.dataGridViewState1[0x1000000])
                {
                    this.dataGridViewState1[0x1000000] = false;
                    this.CursorInternal = this.oldCursor;
                }
                if ((this.dataGridViewOper[4] || this.dataGridViewOper[8]) || this.dataGridViewOper[0x10])
                {
                    int num;
                    int num2;
                    int x = e.X;
                    int y = e.Y;
                    if (this.GetOutOfBoundCorrectedHitTestInfo(ref hti, ref x, ref y, out num, out num2))
                    {
                        if (num == 0)
                        {
                            if ((this.horizScrollTimer != null) && this.horizScrollTimer.Enabled)
                            {
                                this.horizScrollTimer.Enabled = false;
                            }
                        }
                        else if ((this.horizScrollTimer == null) || !this.horizScrollTimer.Enabled)
                        {
                            this.HorizScrollTimer.Interval = GetColumnScrollRate(Math.Abs(num));
                            this.HorizScrollTimer.Enabled = true;
                        }
                        if (num2 == 0)
                        {
                            if ((this.vertScrollTimer != null) && this.vertScrollTimer.Enabled)
                            {
                                this.vertScrollTimer.Enabled = false;
                            }
                        }
                        else if ((this.vertScrollTimer == null) || !this.vertScrollTimer.Enabled)
                        {
                            this.VertScrollTimer.Interval = GetRowScrollRate(Math.Abs(num2));
                            this.VertScrollTimer.Enabled = true;
                        }
                        if (this.HorizScrollTimer.Enabled || this.VertScrollTimer.Enabled)
                        {
                            return;
                        }
                        if (((hti.Type != DataGridViewHitTestType.None) && (hti.Type != DataGridViewHitTestType.HorizontalScrollBar)) && (hti.Type != DataGridViewHitTestType.VerticalScrollBar))
                        {
                            if (this.dataGridViewOper[4] && (hti.col >= 0))
                            {
                                this.OnColumnSelectMouseMove(hti);
                            }
                            else if (this.dataGridViewOper[8] && (hti.row >= 0))
                            {
                                this.OnRowSelectMouseMove(hti);
                            }
                            else if ((this.dataGridViewOper[0x10] && (hti.col >= 0)) && (hti.row >= 0))
                            {
                                this.OnCellSelectMouseMove(hti);
                            }
                        }
                    }
                }
                if (!this.toolTipControl.Activated)
                {
                    this.ptToolTipCell = new Point(-1, -1);
                }
            }
        }

        protected override void OnMouseUp(MouseEventArgs e)
        {
            if (!this.dataGridViewState2[0x8000000])
            {
                this.dataGridViewState1[0x800] = false;
                HitTestInfo hti = this.HitTest(e.X, e.Y);
                if (((!this.dataGridViewOper[1] && !this.dataGridViewOper[2]) && (!this.dataGridViewOper[0x20] && !this.dataGridViewOper[0x80])) && !this.dataGridViewOper[0x100])
                {
                    if (((hti.Type != DataGridViewHitTestType.None) && (hti.Type != DataGridViewHitTestType.HorizontalScrollBar)) && (hti.Type != DataGridViewHitTestType.VerticalScrollBar))
                    {
                        DataGridViewCellMouseEventArgs args;
                        int localX = e.X - hti.ColumnX;
                        if (this.RightToLeftInternal)
                        {
                            localX += (hti.col == -1) ? this.RowHeadersWidth : this.Columns[hti.col].Thickness;
                        }
                        if (this.dataGridViewState2[0x800000])
                        {
                            MouseEventArgs args2 = new MouseEventArgs(e.Button, 2, e.X, e.Y, e.Delta);
                            args = new DataGridViewCellMouseEventArgs(hti.col, hti.row, localX, e.Y - hti.RowY, args2);
                        }
                        else
                        {
                            args = new DataGridViewCellMouseEventArgs(hti.col, hti.row, localX, e.Y - hti.RowY, e);
                        }
                        if ((((hti.col >= 0) && (this.ptMouseDownCell.X == hti.col)) && ((hti.row >= 0) && (this.ptMouseDownCell.Y == hti.row))) && ((this.EditMode == DataGridViewEditMode.EditOnEnter) && (this.editingControl != null)))
                        {
                            this.OnClick(e);
                            this.OnMouseClick(e);
                        }
                        this.CorrectFocus(true);
                        if ((args.ColumnIndex < this.Columns.Count) && (args.RowIndex < this.Rows.Count))
                        {
                            this.OnCellMouseUp(args);
                        }
                    }
                    else if (hti.Type == DataGridViewHitTestType.None)
                    {
                        this.CorrectFocus(true);
                    }
                }
                else
                {
                    if (this.dataGridViewOper[1])
                    {
                        this.EndColumnResize(e);
                    }
                    if (this.dataGridViewOper[2])
                    {
                        this.EndRowResize(e);
                    }
                    if (this.dataGridViewOper[0x20])
                    {
                        this.EndColumnRelocation(e, hti);
                    }
                    if (this.dataGridViewOper[0x80])
                    {
                        this.EndColumnHeadersResize(e);
                    }
                    if (this.dataGridViewOper[0x100])
                    {
                        this.EndRowHeadersResize(e);
                    }
                    this.CorrectFocus(true);
                    hti = this.HitTest(e.X, e.Y);
                    if (((hti.Type != DataGridViewHitTestType.None) && (hti.Type != DataGridViewHitTestType.HorizontalScrollBar)) && (hti.Type != DataGridViewHitTestType.VerticalScrollBar))
                    {
                        int num2 = e.X - hti.ColumnX;
                        if (this.RightToLeftInternal)
                        {
                            num2 += (hti.col == -1) ? this.RowHeadersWidth : this.Columns[hti.col].Thickness;
                        }
                        this.OnCellMouseUp(new DataGridViewCellMouseEventArgs(hti.col, hti.row, num2, e.Y - hti.RowY, e));
                    }
                }
                this.ResetTrackingState();
            }
            base.OnMouseUp(e);
        }

        protected override void OnMouseWheel(MouseEventArgs e)
        {
            base.OnMouseWheel(e);
            HandledMouseEventArgs args = e as HandledMouseEventArgs;
            if (((args == null) || !args.Handled) && (((Control.ModifierKeys & (Keys.Alt | Keys.Shift)) == Keys.None) && (Control.MouseButtons == MouseButtons.None)))
            {
                bool flag = (Control.ModifierKeys & Keys.Control) == Keys.None;
                System.Windows.Forms.ScrollBar bar = flag ? ((System.Windows.Forms.ScrollBar) this.vertScrollBar) : ((System.Windows.Forms.ScrollBar) this.horizScrollBar);
                if (bar.Visible && bar.Enabled)
                {
                    if (args != null)
                    {
                        args.Handled = true;
                    }
                    int mouseWheelScrollLines = SystemInformation.MouseWheelScrollLines;
                    if (mouseWheelScrollLines != 0)
                    {
                        float num2;
                        if (flag)
                        {
                            this.cumulativeVerticalWheelDelta += e.Delta;
                            num2 = ((float) this.cumulativeVerticalWheelDelta) / 120f;
                        }
                        else
                        {
                            this.cumulativeHorizontalWheelDelta += e.Delta;
                            num2 = ((float) this.cumulativeHorizontalWheelDelta) / 120f;
                        }
                        int num3 = (int) num2;
                        if (mouseWheelScrollLines == -1)
                        {
                            if ((num3 != 0) && ((this.ptCurrentCell.X < 0) || this.CommitEdit(DataGridViewDataErrorContexts.Scroll | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, false, false)))
                            {
                                if (flag)
                                {
                                    int verticalOffset = this.VerticalOffset;
                                    this.VerticalOffset -= num3 * this.vertScrollBar.LargeChange;
                                    if (Math.Abs((int) (this.VerticalOffset - verticalOffset)) >= Math.Abs((int) (num3 * this.vertScrollBar.LargeChange)))
                                    {
                                        this.cumulativeVerticalWheelDelta -= num3 * 120;
                                    }
                                    else
                                    {
                                        this.cumulativeVerticalWheelDelta = 0;
                                    }
                                }
                                else
                                {
                                    int horizontalOffset = this.HorizontalOffset;
                                    this.HorizontalOffset -= num3 * this.horizScrollBar.LargeChange;
                                    if (Math.Abs((int) (this.HorizontalOffset - horizontalOffset)) >= Math.Abs((int) (num3 * this.horizScrollBar.LargeChange)))
                                    {
                                        this.cumulativeHorizontalWheelDelta -= num3 * 120;
                                    }
                                    else
                                    {
                                        this.cumulativeHorizontalWheelDelta = 0;
                                    }
                                }
                            }
                        }
                        else
                        {
                            int num6 = (int) (mouseWheelScrollLines * num2);
                            if ((num6 != 0) && ((this.ptCurrentCell.X < 0) || this.CommitEdit(DataGridViewDataErrorContexts.Scroll | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, false, false)))
                            {
                                int num7;
                                if (flag)
                                {
                                    if (num6 > 0)
                                    {
                                        for (num7 = num6; (this.vertScrollBar.Value != this.vertScrollBar.Minimum) && (num7 > 0); num7--)
                                        {
                                            this.ScrollRowsByCount(-1, ScrollEventType.SmallDecrement);
                                        }
                                        if (this.vertScrollBar.Value == this.vertScrollBar.Minimum)
                                        {
                                            this.cumulativeVerticalWheelDelta = 0;
                                        }
                                        else
                                        {
                                            this.cumulativeVerticalWheelDelta -= (int) (num6 * (120f / ((float) mouseWheelScrollLines)));
                                        }
                                    }
                                    else
                                    {
                                        num7 = -num6;
                                        int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                                        while ((num7 > 0) && ((this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow)) <= (this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))))
                                        {
                                            this.ScrollRowsByCount(1, ScrollEventType.SmallIncrement);
                                            num7--;
                                        }
                                        if ((this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow)) > (this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight)))
                                        {
                                            this.cumulativeVerticalWheelDelta = 0;
                                        }
                                        else
                                        {
                                            this.cumulativeVerticalWheelDelta -= (int) (num6 * (120f / ((float) mouseWheelScrollLines)));
                                        }
                                    }
                                }
                                else
                                {
                                    int minimum;
                                    int num10;
                                    if (num6 > 0)
                                    {
                                        minimum = this.horizScrollBar.Minimum;
                                        num10 = -1;
                                    }
                                    else
                                    {
                                        minimum = this.horizScrollBar.Maximum;
                                        num10 = 1;
                                    }
                                    for (num7 = Math.Abs(num6); (this.horizScrollBar.Value != minimum) && (num7 > 0); num7--)
                                    {
                                        this.ScrollColumns(num10);
                                    }
                                    if (this.horizScrollBar.Value == minimum)
                                    {
                                        this.cumulativeHorizontalWheelDelta = 0;
                                    }
                                    else
                                    {
                                        this.cumulativeHorizontalWheelDelta -= (int) (num6 * (120f / ((float) mouseWheelScrollLines)));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        internal void OnMouseWheelInternal(MouseEventArgs e)
        {
            this.OnMouseWheel(e);
        }

        protected virtual void OnMultiSelectChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWMULTISELECTCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnNewRowNeeded(DataGridViewRowEventArgs e)
        {
            if (e.Row.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
            }
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWNEWROWNEEDED] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            try
            {
                if (this.layout.dirty)
                {
                    this.PerformLayoutPrivate(false, true, false, false);
                }
                Graphics graphics = e.Graphics;
                bool singleVerticalBorderAdded = false;
                bool singleHorizontalBorderAdded = false;
                Rectangle clipRectangle = e.ClipRectangle;
                Rectangle data = this.layout.Data;
                if (this.layout.RowHeadersVisible)
                {
                    data = Rectangle.Union(data, this.layout.RowHeaders);
                }
                else if (this.SingleVerticalBorderAdded)
                {
                    singleVerticalBorderAdded = true;
                    if (!this.RightToLeftInternal)
                    {
                        data.X--;
                    }
                    data.Width++;
                }
                if (this.layout.ColumnHeadersVisible)
                {
                    data = Rectangle.Union(data, this.layout.ColumnHeaders);
                }
                else if (this.SingleHorizontalBorderAdded)
                {
                    singleHorizontalBorderAdded = true;
                    if (data.Y == this.layout.Data.Y)
                    {
                        data.Y--;
                        data.Height++;
                    }
                }
                if (this.currentRowSplitBar != -1)
                {
                    clipRectangle = Rectangle.Union(clipRectangle, this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
                }
                else if (this.currentColSplitBar != -1)
                {
                    clipRectangle = Rectangle.Union(clipRectangle, this.CalcColResizeFeedbackRect(this.currentColSplitBar));
                }
                if (clipRectangle.IntersectsWith(data))
                {
                    using (Region region = graphics.Clip)
                    {
                        graphics.SetClip(data);
                        this.PaintBackground(graphics, clipRectangle, data);
                        this.PaintGrid(graphics, data, clipRectangle, singleVerticalBorderAdded, singleHorizontalBorderAdded);
                        graphics.Clip = region;
                    }
                }
                this.PaintBorder(graphics, clipRectangle, this.layout.ClientRectangle);
                if (clipRectangle.IntersectsWith(this.layout.ResizeBoxRect))
                {
                    graphics.FillRectangle(SystemBrushes.Control, this.layout.ResizeBoxRect);
                }
                base.OnPaint(e);
            }
            catch (Exception exception)
            {
                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                {
                    throw;
                }
            }
        }

        internal override void OnParentBecameInvisible()
        {
            base.OnParentBecameInvisible();
            if (base.GetState(2))
            {
                this.OnVisibleChangedPrivate();
            }
        }

        protected virtual void OnReadOnlyChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWREADONLYCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            base.VerifyImeRestrictedModeChanged();
            if ((((!this.ReadOnly && (this.ptCurrentCell.X != -1)) && (this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode)) && ((this.EditMode == DataGridViewEditMode.EditOnEnter) || ((this.EditMode != DataGridViewEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null)))) && !this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X].ReadOnly)
            {
                this.BeginEditInternal(true);
            }
        }

        internal void OnRemovedColumn_PostNotification(DataGridViewColumn dataGridViewColumn, Point newCurrentCell)
        {
            if (newCurrentCell.X != -1)
            {
                this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
            }
            this.FlushSelectionChanged();
            this.OnColumnHidden(dataGridViewColumn);
            DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.GetInheritedAutoSizeMode(this);
            if (((inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None) && (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)) && (dataGridViewColumn.ThicknessInternal != dataGridViewColumn.CachedThickness))
            {
                dataGridViewColumn.ThicknessInternal = Math.Max(dataGridViewColumn.MinimumWidth, dataGridViewColumn.CachedThickness);
            }
            this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
        }

        internal void OnRemovedColumn_PreNotification(DataGridViewColumn dataGridViewColumn)
        {
            if (dataGridViewColumn.HasHeaderCell)
            {
                dataGridViewColumn.HeaderCell.SortGlyphDirectionInternal = System.Windows.Forms.SortOrder.None;
            }
            this.CorrectColumnIndexesAfterDeletion(dataGridViewColumn);
            this.CorrectColumnDisplayIndexesAfterDeletion(dataGridViewColumn);
            this.displayedBandsInfo.CorrectRowIndexAfterDeletion(dataGridViewColumn.Index);
            this.OnColumnRemoved(dataGridViewColumn);
        }

        internal void OnRemovedRow_PostNotification(DataGridViewRow dataGridViewRow, Point newCurrentCell)
        {
            if (newCurrentCell.Y != -1)
            {
                this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
            }
            this.FlushSelectionChanged();
            bool flag = (dataGridViewRow.DataGridView == null) && dataGridViewRow.Displayed;
            if (flag)
            {
                dataGridViewRow.DisplayedInternal = false;
                DataGridViewRowStateChangedEventArgs e = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, DataGridViewElementStates.Displayed);
                this.OnRowStateChanged(-1, e);
            }
            if ((this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None) && (dataGridViewRow.ThicknessInternal != dataGridViewRow.CachedThickness))
            {
                dataGridViewRow.ThicknessInternal = Math.Max(dataGridViewRow.MinimumHeight, dataGridViewRow.CachedThickness);
            }
            DataGridViewAutoSizeColumnCriteriaInternal allRows = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
            if (flag)
            {
                allRows |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
            }
            bool flag2 = this.AutoResizeAllVisibleColumnsInternal(allRows, true);
            bool flag3 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            bool fixedRowHeadersWidth = (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing) || (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing);
            if (fixedRowHeadersWidth && !flag2)
            {
                flag3 = true;
            }
            if (!flag3)
            {
                this.AutoResizeColumnHeadersHeight(fixedRowHeadersWidth, true);
            }
            if (!fixedRowHeadersWidth)
            {
                this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
            }
            if (!flag3 && !fixedRowHeadersWidth)
            {
                this.AutoResizeColumnHeadersHeight(true, true);
            }
        }

        internal void OnRemovedRow_PreNotification(int rowIndexDeleted)
        {
            this.displayedBandsInfo.CorrectRowIndexAfterDeletion(rowIndexDeleted);
            this.CorrectRowIndexesAfterDeletion(rowIndexDeleted);
            this.ComputeVisibleRows();
        }

        internal unsafe void OnRemovingColumn(DataGridViewColumn dataGridViewColumn, out Point newCurrentCell, bool force)
        {
            ref BitVector32 vectorRef;
            this.dataGridViewState1[0x400000] = false;
            int index = dataGridViewColumn.Index;
            if (this.ptCurrentCell.X != -1)
            {
                int x = this.ptCurrentCell.X;
                if (index == this.ptCurrentCell.X)
                {
                    DataGridViewColumn column = this.Columns.GetNextColumn(this.Columns[index], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    if (column != null)
                    {
                        if (column.Index > index)
                        {
                            x = column.Index - 1;
                        }
                        else
                        {
                            x = column.Index;
                        }
                    }
                    else
                    {
                        DataGridViewColumn column2 = this.Columns.GetPreviousColumn(this.Columns[index], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        if (column2 != null)
                        {
                            if (column2.Index > index)
                            {
                                x = column2.Index - 1;
                            }
                            else
                            {
                                x = column2.Index;
                            }
                        }
                        else
                        {
                            x = -1;
                        }
                    }
                }
                else if (index < this.ptCurrentCell.X)
                {
                    x = this.ptCurrentCell.X - 1;
                }
                newCurrentCell = new Point(x, (x == -1) ? -1 : this.ptCurrentCell.Y);
                if (index == this.ptCurrentCell.X)
                {
                    this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                }
                else if (force)
                {
                    this.dataGridViewState1[0x400000] = true;
                    this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                }
                else
                {
                    this.ResetCurrentCell();
                }
            }
            else
            {
                newCurrentCell = new Point(-1, -1);
            }
            if (this.Columns.Count == 1)
            {
                this.Rows.ClearInternal(false);
            }
            int num3 = this.Columns.Count - 1;
            for (int i = 0; i < this.Rows.Count; i++)
            {
                DataGridViewRow row = this.Rows.SharedRow(i);
                if (row.Cells.Count > num3)
                {
                    row.Cells.RemoveAtInternal(index);
                }
            }
            if (dataGridViewColumn.HasHeaderCell)
            {
                dataGridViewColumn.HeaderCell.DataGridViewInternal = null;
            }
            if (dataGridViewColumn == this.sortedColumn)
            {
                this.sortedColumn = null;
                this.sortOrder = System.Windows.Forms.SortOrder.None;
                if (dataGridViewColumn.IsDataBound)
                {
                    for (int j = 0; j < this.Columns.Count; j++)
                    {
                        if (((dataGridViewColumn != this.Columns[j]) && (this.Columns[j].SortMode != DataGridViewColumnSortMode.NotSortable)) && (string.Compare(dataGridViewColumn.DataPropertyName, this.Columns[j].DataPropertyName, true, CultureInfo.InvariantCulture) == 0))
                        {
                            this.sortedColumn = this.Columns[j];
                            this.sortOrder = this.Columns[j].HeaderCell.SortGlyphDirection;
                            break;
                        }
                    }
                }
            }
            if ((dataGridViewColumn.Visible && !dataGridViewColumn.Frozen) && (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0))
            {
                if (this.displayedBandsInfo.FirstDisplayedScrollingCol == dataGridViewColumn.Index)
                {
                    this.horizontalOffset -= this.negOffset;
                    this.negOffset = 0;
                }
                else if (this.Columns.DisplayInOrder(this.displayedBandsInfo.FirstDisplayedScrollingCol, dataGridViewColumn.Index))
                {
                    if (this.horizScrollBar.Enabled)
                    {
                        int num6 = (this.horizScrollBar.Maximum - this.horizScrollBar.LargeChange) - dataGridViewColumn.Thickness;
                        if ((num6 >= 0) && (num6 < this.horizScrollBar.Value))
                        {
                            this.horizontalOffset = num6;
                            this.negOffset = this.GetNegOffsetFromHorizontalOffset(this.horizontalOffset);
                        }
                    }
                    else
                    {
                        this.horizontalOffset = this.negOffset = 0;
                    }
                }
                else
                {
                    this.horizontalOffset -= dataGridViewColumn.Thickness;
                }
                if (this.horizScrollBar.Enabled)
                {
                    this.horizScrollBar.Value = this.horizontalOffset;
                }
            }
            bool flag = false;
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.FullColumnSelect:
                case DataGridViewSelectionMode.ColumnHeaderSelect:
                {
                    int count = this.selectedBandIndexes.Count;
                    int num8 = 0;
                    while (num8 < count)
                    {
                        int num9 = this.selectedBandIndexes[num8];
                        if (index == num9)
                        {
                            this.selectedBandIndexes.RemoveAt(num8);
                            count--;
                            flag = true;
                        }
                        else
                        {
                            if (index < num9)
                            {
                                this.selectedBandIndexes[num8] = num9 - 1;
                            }
                            num8++;
                        }
                    }
                    break;
                }
            }
            (vectorRef = (BitVector32) &this.dataGridViewState2)[0x40000] = vectorRef[0x40000] | ((this.individualSelectedCells.RemoveAllCellsAtBand(true, index) > 0) || flag);
            this.individualReadOnlyCells.RemoveAllCellsAtBand(true, index);
        }

        internal unsafe void OnRemovingRow(int rowIndexDeleted, out Point newCurrentCell, bool force)
        {
            ref BitVector32 vectorRef;
            this.dataGridViewState1[0x400000] = false;
            newCurrentCell = new Point(-1, -1);
            if ((this.ptCurrentCell.Y != -1) && (rowIndexDeleted <= this.ptCurrentCell.Y))
            {
                int num;
                if (rowIndexDeleted == this.ptCurrentCell.Y)
                {
                    int previousRow = this.Rows.GetPreviousRow(rowIndexDeleted, DataGridViewElementStates.Visible);
                    int nextRow = this.Rows.GetNextRow(rowIndexDeleted, DataGridViewElementStates.Visible);
                    if ((previousRow > -1) && this.AllowUserToAddRowsInternal)
                    {
                        if ((nextRow > -1) && (nextRow < (this.Rows.Count - 1)))
                        {
                            num = nextRow - 1;
                        }
                        else
                        {
                            num = previousRow;
                        }
                    }
                    else if (nextRow > -1)
                    {
                        num = nextRow - 1;
                    }
                    else
                    {
                        num = previousRow;
                    }
                    this.IsCurrentCellDirtyInternal = false;
                    this.IsCurrentRowDirtyInternal = false;
                }
                else
                {
                    num = this.ptCurrentCell.Y - 1;
                }
                newCurrentCell = new Point(this.ptCurrentCell.X, num);
                if (rowIndexDeleted == this.ptCurrentCell.Y)
                {
                    this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                }
                else if (force)
                {
                    this.dataGridViewState1[0x400000] = true;
                    this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                }
                else
                {
                    this.ResetCurrentCell();
                }
            }
            bool flag = false;
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.FullRowSelect:
                case DataGridViewSelectionMode.RowHeaderSelect:
                {
                    int count = this.selectedBandIndexes.Count;
                    int index = 0;
                    while (index < count)
                    {
                        int num6 = this.selectedBandIndexes[index];
                        if (rowIndexDeleted == num6)
                        {
                            flag = true;
                            this.selectedBandIndexes.RemoveAt(index);
                            count--;
                        }
                        else
                        {
                            if (rowIndexDeleted < num6)
                            {
                                this.selectedBandIndexes[index] = num6 - 1;
                            }
                            index++;
                        }
                    }
                    if (this.selectedBandSnapshotIndexes != null)
                    {
                        count = this.selectedBandSnapshotIndexes.Count;
                        index = 0;
                        while (index < count)
                        {
                            int num7 = this.selectedBandSnapshotIndexes[index];
                            if (rowIndexDeleted == num7)
                            {
                                this.selectedBandSnapshotIndexes.RemoveAt(index);
                                count--;
                            }
                            else
                            {
                                if (rowIndexDeleted < num7)
                                {
                                    this.selectedBandSnapshotIndexes[index] = num7 - 1;
                                }
                                index++;
                            }
                        }
                    }
                    break;
                }
            }
            (vectorRef = (BitVector32) &this.dataGridViewState2)[0x40000] = vectorRef[0x40000] | ((this.individualSelectedCells.RemoveAllCellsAtBand(false, rowIndexDeleted) > 0) || flag);
            this.individualReadOnlyCells.RemoveAllCellsAtBand(false, rowIndexDeleted);
        }

        internal void OnReplacedCell(DataGridViewRow dataGridViewRow, int columnIndex)
        {
            DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[columnIndex];
            if (this.dataGridViewState2[0x10000])
            {
                this.individualSelectedCells.Add(dataGridViewCell);
            }
            if (this.dataGridViewState2[0x20000])
            {
                this.individualReadOnlyCells.Add(dataGridViewCell);
            }
            this.OnCellCommonChange(columnIndex, dataGridViewRow.Index);
            if (this.ptCurrentCellCache.X != -1)
            {
                if (!this.IsInnerCellOutOfBounds(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y))
                {
                    this.SetCurrentCellAddressCore(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y, false, false, false);
                }
                this.ptCurrentCellCache.X = -1;
                this.ptCurrentCellCache.Y = -1;
            }
        }

        internal void OnReplacingCell(DataGridViewRow dataGridViewRow, int columnIndex)
        {
            if ((this.ptCurrentCell.X == dataGridViewRow.Index) && (this.ptCurrentCell.Y == columnIndex))
            {
                this.ptCurrentCellCache.X = this.ptCurrentCell.X;
                this.ptCurrentCellCache.Y = this.ptCurrentCell.Y;
                this.ResetCurrentCell();
            }
            else
            {
                this.ptCurrentCellCache.X = -1;
                this.ptCurrentCellCache.Y = -1;
            }
            DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[columnIndex];
            this.dataGridViewState2[0x10000] = this.individualSelectedCells.Contains(dataGridViewCell);
            if (this.dataGridViewState2[0x10000])
            {
                this.individualSelectedCells.Remove(dataGridViewCell);
            }
            this.dataGridViewState2[0x20000] = this.individualReadOnlyCells.Contains(dataGridViewCell);
            if (this.dataGridViewState2[0x20000])
            {
                this.individualReadOnlyCells.Remove(dataGridViewCell);
            }
        }

        protected override void OnResize(EventArgs e)
        {
            int borderWidth = this.BorderWidth;
            Rectangle clientRectangle = this.layout.ClientRectangle;
            Rectangle rc = new Rectangle((clientRectangle.X + clientRectangle.Width) - borderWidth, clientRectangle.Y, borderWidth, clientRectangle.Height);
            Rectangle rectangle2 = new Rectangle(clientRectangle.X, (clientRectangle.Y + clientRectangle.Height) - borderWidth, clientRectangle.Width, borderWidth);
            if (!this.IsMinimized)
            {
                this.normalClientRectangle = base.ClientRectangle;
            }
            Rectangle normalClientRectangle = this.normalClientRectangle;
            if (normalClientRectangle.Width != clientRectangle.Width)
            {
                base.Invalidate(rc);
                rc = new Rectangle((normalClientRectangle.X + normalClientRectangle.Width) - borderWidth, normalClientRectangle.Y, borderWidth, normalClientRectangle.Height);
                base.Invalidate(rc);
            }
            if (normalClientRectangle.Height != clientRectangle.Height)
            {
                base.Invalidate(rectangle2);
                rectangle2 = new Rectangle(normalClientRectangle.X, (normalClientRectangle.Y + normalClientRectangle.Height) - borderWidth, normalClientRectangle.Width, borderWidth);
                base.Invalidate(rectangle2);
            }
            if (!this.layout.ResizeBoxRect.IsEmpty)
            {
                base.Invalidate(this.layout.ResizeBoxRect);
            }
            this.layout.ClientRectangle = normalClientRectangle;
            int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            base.OnResize(e);
            if (firstDisplayedScrollingRow != this.displayedBandsInfo.FirstDisplayedScrollingRow)
            {
                base.Invalidate();
            }
        }

        protected override void OnRightToLeftChanged(EventArgs e)
        {
            this.dataGridViewState2[0x1000] = false;
            base.OnRightToLeftChanged(e);
            this.CorrectFocus(true);
            this.PerformLayoutPrivate(false, false, true, false);
        }

        internal void OnRowCollectionChanged_PostNotification(bool recreateNewRow, bool allowSettingCurrentCell, CollectionChangeAction cca, DataGridViewRow dataGridViewRow, int rowIndex)
        {
            if (((recreateNewRow && (cca == CollectionChangeAction.Refresh)) && ((this.Columns.Count != 0) && (this.Rows.Count == 0))) && this.AllowUserToAddRowsInternal)
            {
                this.AddNewRow(false);
            }
            if (cca == CollectionChangeAction.Refresh)
            {
                this.FlushSelectionChanged();
            }
            if ((((cca == CollectionChangeAction.Refresh) || (cca == CollectionChangeAction.Add)) && ((this.ptCurrentCell.X == -1) && allowSettingCurrentCell)) && !this.InSortOperation)
            {
                this.MakeFirstDisplayedCellCurrentCell(false);
            }
            if (this.AutoSize)
            {
                bool flag = true;
                switch (cca)
                {
                    case CollectionChangeAction.Add:
                        flag = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None;
                        break;

                    case CollectionChangeAction.Remove:
                        flag = (dataGridViewRow.DataGridView == null) && dataGridViewRow.Visible;
                        break;
                }
                if (flag)
                {
                    LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
                }
            }
        }

        protected virtual void OnRowContextMenuStripChanged(DataGridViewRowEventArgs e)
        {
            if (e.Row.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
            }
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventArgs e)
        {
            DataGridViewRowContextMenuStripNeededEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED] as DataGridViewRowContextMenuStripNeededEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal ContextMenuStrip OnRowContextMenuStripNeeded(int rowIndex, ContextMenuStrip contextMenuStrip)
        {
            DataGridViewRowContextMenuStripNeededEventArgs e = new DataGridViewRowContextMenuStripNeededEventArgs(rowIndex, contextMenuStrip);
            this.OnRowContextMenuStripNeeded(e);
            return e.ContextMenuStrip;
        }

        protected virtual void OnRowDefaultCellStyleChanged(DataGridViewRowEventArgs e)
        {
            if (e.Row.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
            }
            this.OnRowGlobalAutoSize(e.Row.Index);
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowDirtyStateNeeded(QuestionEventArgs e)
        {
            QuestionEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED] as QuestionEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventArgs e)
        {
            DataGridViewRowDividerDoubleClickEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK] as DataGridViewRowDividerDoubleClickEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((!e.Handled && (e.Button == MouseButtons.Left)) && (e.RowIndex < this.Rows.Count))
            {
                if (e.RowIndex == -1)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
                else if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
                {
                    this.AutoResizeRowInternal(e.RowIndex, DataGridViewAutoSizeRowMode.AllCells, true, true);
                }
                else
                {
                    this.AutoResizeRowInternal(e.RowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                }
            }
        }

        protected virtual void OnRowDividerHeightChanged(DataGridViewRowEventArgs e)
        {
            if (e.Row.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
            }
            this.OnRowGlobalAutoSize(e.Row.Index);
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowEnter(DataGridViewCellEventArgs e)
        {
            try
            {
                this.noDimensionChangeCount++;
                DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWENTER] as DataGridViewCellEventHandler;
                if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        private void OnRowEnter(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex, bool canCreateNewRow, bool validationFailureOccurred)
        {
            if (!validationFailureOccurred)
            {
                this.dataGridViewState1[0x80000] = false;
            }
            if ((rowIndex < this.Rows.Count) && (columnIndex < this.Columns.Count))
            {
                bool flag = false;
                if ((!validationFailureOccurred && this.AllowUserToAddRowsInternal) && (this.newRowIndex == rowIndex))
                {
                    this.dataGridViewState1[0x80000] = true;
                    if (canCreateNewRow)
                    {
                        DataGridViewRowEventArgs args = new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]);
                        if (this.VirtualMode || (this.DataSource != null))
                        {
                            if ((this.dataConnection != null) && this.dataConnection.InterestedInRowEvents)
                            {
                                this.dataConnection.OnNewRowNeeded();
                                flag = true;
                            }
                            if (this.VirtualMode)
                            {
                                this.OnNewRowNeeded(args);
                            }
                        }
                        if (this.AllowUserToAddRowsInternal)
                        {
                            this.OnDefaultValuesNeeded(args);
                            this.InvalidateRowPrivate(this.newRowIndex);
                        }
                    }
                }
                if (flag && (rowIndex > (this.Rows.Count - 1)))
                {
                    rowIndex = Math.Min(rowIndex, this.Rows.Count - 1);
                }
                DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(columnIndex, rowIndex);
                this.OnRowEnter(e);
                if ((((this.dataConnection != null) && this.dataConnection.InterestedInRowEvents) && (!this.dataConnection.PositionChangingOutsideDataGridView && !this.dataConnection.ListWasReset)) && (!flag || (this.dataConnection.List.Count > 0)))
                {
                    this.dataConnection.OnRowEnter(e);
                }
                if (dataGridViewCell != null)
                {
                    if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                    {
                        dataGridViewCell = null;
                    }
                    else
                    {
                        dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                    }
                }
            }
        }

        internal void OnRowErrorTextChanged(DataGridViewRow dataGridViewRow)
        {
            DataGridViewRowEventArgs e = new DataGridViewRowEventArgs(dataGridViewRow);
            this.OnRowErrorTextChanged(e);
        }

        protected virtual void OnRowErrorTextChanged(DataGridViewRowEventArgs e)
        {
            if (e.Row.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
            }
            this.UpdateRowErrorText(e.Row.Index);
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowErrorTextNeeded(DataGridViewRowErrorTextNeededEventArgs e)
        {
            DataGridViewRowErrorTextNeededEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED] as DataGridViewRowErrorTextNeededEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal string OnRowErrorTextNeeded(int rowIndex, string errorText)
        {
            DataGridViewRowErrorTextNeededEventArgs e = new DataGridViewRowErrorTextNeededEventArgs(rowIndex, errorText);
            this.OnRowErrorTextNeeded(e);
            return e.ErrorText;
        }

        private void OnRowGlobalAutoSize(int rowIndex)
        {
            DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
            if ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
            {
                this.InvalidateRowPrivate(rowIndex);
                if (this.noAutoSizeCount <= 0)
                {
                    DataGridViewAutoSizeRowsModeInternal autoSizeRowsMode = (DataGridViewAutoSizeRowsModeInternal) this.autoSizeRowsMode;
                    bool flag = false;
                    bool flag2 = (rowState & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None;
                    if ((autoSizeRowsMode != DataGridViewAutoSizeRowsModeInternal.None) && (((autoSizeRowsMode & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None) || flag2))
                    {
                        this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
                        flag = true;
                    }
                    DataGridViewAutoSizeColumnCriteriaInternal allRows = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
                    if (flag2)
                    {
                        allRows |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
                    }
                    this.AutoResizeAllVisibleColumnsInternal(allRows, true);
                    bool fixedRowHeadersWidth = (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing) || (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing);
                    if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(fixedRowHeadersWidth, true);
                    }
                    if (!fixedRowHeadersWidth)
                    {
                        this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
                    }
                    if (flag)
                    {
                        this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                    }
                    if ((this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize) && !fixedRowHeadersWidth)
                    {
                        this.AutoResizeColumnHeadersHeight(true, true);
                    }
                }
            }
        }

        protected virtual void OnRowHeaderCellChanged(DataGridViewRowEventArgs e)
        {
            if (e.Row.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
            }
            this.OnRowHeaderGlobalAutoSize(e.Row.Index);
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnRowHeaderGlobalAutoSize(int rowIndex)
        {
            if (this.RowHeadersVisible)
            {
                this.InvalidateCellPrivate(-1, rowIndex);
                if (this.noAutoSizeCount <= 0)
                {
                    bool flag = false;
                    if (rowIndex != -1)
                    {
                        flag = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None;
                    }
                    bool fixedColumnHeadersHeight = (rowIndex != -1) || (this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize);
                    bool fixedRowHeight = ((rowIndex == -1) || ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 1)) == DataGridViewAutoSizeRowsMode.None)) || ((((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 8)) != DataGridViewAutoSizeRowsMode.None) && (rowIndex != -1)) && !flag);
                    bool flag4 = false;
                    if ((((this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders) || (((this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders) && (rowIndex != -1)) && flag)) || (((this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing)) && (rowIndex == -1))) || (((this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader) && (rowIndex != -1)) && (rowIndex == this.Rows.GetFirstRow(DataGridViewElementStates.Visible))))
                    {
                        this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, fixedColumnHeadersHeight, fixedRowHeight);
                        flag4 = true;
                    }
                    if (!fixedColumnHeadersHeight)
                    {
                        this.AutoResizeColumnHeadersHeight(-1, true, true);
                    }
                    if (!fixedRowHeight)
                    {
                        this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                    }
                    if (flag4 && (!fixedColumnHeadersHeight || !fixedRowHeight))
                    {
                        this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, true, true);
                    }
                }
            }
        }

        protected virtual void OnRowHeaderMouseClick(DataGridViewCellMouseEventArgs e)
        {
            DataGridViewCellMouseEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK] as DataGridViewCellMouseEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e)
        {
            DataGridViewCellMouseEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnRowHeaderMouseDown(HitTestInfo hti, bool isShiftDown, bool isControlDown)
        {
            this.noSelectionChangeCount++;
            try
            {
                DataGridViewColumn firstColumn;
                int x;
                int y;
                DataGridViewCell cell;
                bool flag2;
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.FullColumnSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        return;

                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                    {
                        bool flag = true;
                        if (isControlDown && ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None))
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_03F4;
                        }
                        firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
                        if ((firstColumn == null) || (hti.row == this.ptCurrentCell.Y))
                        {
                            goto Label_01D4;
                        }
                        x = this.ptCurrentCell.X;
                        y = this.ptCurrentCell.Y;
                        if (this.EndEdit(DataGridViewDataErrorContexts.CurrentCellChange | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.Always, true, true, hti.row != this.ptCurrentCell.Y, hti.row != this.ptCurrentCell.Y, false, this.EditMode != DataGridViewEditMode.EditOnEnter, true, false))
                        {
                            if (y == -1)
                            {
                                goto Label_01D4;
                            }
                            cell = null;
                            if (!this.IsInnerCellOutOfBounds(x, y))
                            {
                                if (!this.OnRowValidating(ref cell, x, y))
                                {
                                    break;
                                }
                                if (!this.IsInnerCellOutOfBounds(x, y))
                                {
                                    this.OnRowEnter(ref cell, x, y, true, true);
                                    if (!this.IsInnerCellOutOfBounds(x, y))
                                    {
                                        this.OnCellEnter(ref cell, x, y);
                                    }
                                }
                            }
                        }
                        return;
                    }
                    default:
                        return;
                }
                if (this.IsInnerCellOutOfBounds(x, y))
                {
                    return;
                }
                this.OnRowValidated(ref cell, x, y);
                if (hti.row >= this.Rows.Count)
                {
                    int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
                    if (((this.ptCurrentCell.X == -1) && (lastRow != -1)) && !this.IsColumnOutOfBounds(x))
                    {
                        this.SetAndSelectCurrentCellAddress(x, lastRow, true, false, false, false, false);
                    }
                    return;
                }
                if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
                {
                    return;
                }
            Label_01D4:
                flag2 = false;
                this.trackRow = hti.row;
                this.trackRowEdge = -1;
                if ((this.MultiSelect && isShiftDown) && ((this.ptAnchorCell.Y > -1) && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)))
                {
                    flag2 = true;
                }
                if ((!this.MultiSelect || !isControlDown) || isShiftDown)
                {
                    int num4 = 0;
                    bool flag3 = false;
                    if (this.selectedBandIndexes.Count > 8)
                    {
                        this.inBulkPaintCount++;
                        flag3 = true;
                    }
                    try
                    {
                        while (num4 < this.selectedBandIndexes.Count)
                        {
                            if (this.selectedBandIndexes[num4] != hti.row)
                            {
                                this.SetSelectedRowCore(this.selectedBandIndexes[num4], false);
                            }
                            else
                            {
                                num4++;
                            }
                        }
                        if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
                        {
                            this.RemoveIndividuallySelectedCells();
                        }
                    }
                    finally
                    {
                        if (flag3)
                        {
                            this.ExitBulkPaint(-1, -1);
                        }
                    }
                }
                if (this.MultiSelect && this.dataGridViewOper[0x200])
                {
                    this.dataGridViewOper[8] = true;
                }
                if (flag2)
                {
                    if (hti.row >= this.ptAnchorCell.Y)
                    {
                        this.SelectRowRange(this.ptAnchorCell.Y, hti.row, true);
                    }
                    else
                    {
                        this.SelectRowRange(hti.row, this.ptAnchorCell.Y, true);
                    }
                }
                else if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
                {
                    this.SetSelectedRowCore(hti.row, true);
                }
                if (firstColumn != null)
                {
                    if (hti.row != this.ptCurrentCell.Y)
                    {
                        if (!this.IsInnerCellOutOfBounds(firstColumn.Index, hti.row))
                        {
                            this.ScrollIntoView(firstColumn.Index, hti.row, false);
                            if (!this.IsInnerCellOutOfBounds(firstColumn.Index, hti.row))
                            {
                                this.SetCurrentCellAddressCore(firstColumn.Index, hti.row, !flag2, false, true);
                            }
                        }
                    }
                    else if (-1 != this.ptCurrentCell.Y)
                    {
                        this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
                    }
                }
                return;
            Label_03F4:
                this.SetSelectedRowCore(hti.row, false);
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        protected virtual void OnRowHeadersBorderStyleChanged(EventArgs e)
        {
            this.PerformLayoutPrivate(false, false, true, false);
            base.Invalidate();
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowHeadersDefaultCellStyleChanged(EventArgs e)
        {
            if (this.RowHeadersVisible)
            {
                base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.RowHeaders));
                DataGridViewCellStyleChangedEventArgs args = e as DataGridViewCellStyleChangedEventArgs;
                if ((args == null) || args.ChangeAffectsPreferredSize)
                {
                    this.OnRowHeadersGlobalAutoSize(false);
                    if (this.editingControl != null)
                    {
                        this.PositionEditingControl(true, true, false);
                    }
                }
            }
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnRowHeadersGlobalAutoSize(bool expandingRows)
        {
            if (this.noAutoSizeCount <= 0)
            {
                bool fixedRowsHeight = ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 1)) == DataGridViewAutoSizeRowsMode.None) || !this.RowHeadersVisible;
                bool flag2 = (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing);
                if (flag2)
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, fixedRowsHeight);
                }
                if (!fixedRowsHeight)
                {
                    if (expandingRows)
                    {
                        this.AdjustExpandingRows(-1, true);
                    }
                    else
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                    }
                    if (flag2)
                    {
                        this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
                    }
                }
            }
        }

        protected virtual void OnRowHeadersWidthChanged(EventArgs e)
        {
            if (this.RowHeadersVisible)
            {
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(true, false, false);
                }
                this.UpdateMouseEnteredCell(null, null);
                this.OnRowHeadersGlobalAutoSize(false);
            }
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)
        {
            if ((this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing))
            {
                if (!e.PreviousModeAutoSized)
                {
                    this.cachedRowHeadersWidth = this.RowHeadersWidth;
                }
                this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
            }
            else if (e.PreviousModeAutoSized)
            {
                this.RowHeadersWidth = this.cachedRowHeadersWidth;
            }
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowHeightChanged(DataGridViewRowEventArgs e)
        {
            if (e.Row.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
            }
            this.UpdateRowHeightInfoPrivate(e.Row.Index, false, false);
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWHEIGHTCHANGED] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            this.OnRowGlobalAutoSize(e.Row.Index);
        }

        protected virtual void OnRowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventArgs e)
        {
            DataGridViewRowHeightInfoNeededEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED] as DataGridViewRowHeightInfoNeededEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal DataGridViewRowHeightInfoNeededEventArgs OnRowHeightInfoNeeded(int rowIndex, int height, int minimumHeight)
        {
            DataGridViewRowHeightInfoNeededEventArgs rowHeightInfoNeededEventArgs = this.RowHeightInfoNeededEventArgs;
            rowHeightInfoNeededEventArgs.SetProperties(rowIndex, height, minimumHeight);
            this.OnRowHeightInfoNeeded(rowHeightInfoNeededEventArgs);
            return rowHeightInfoNeededEventArgs;
        }

        protected virtual void OnRowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventArgs e)
        {
            DataGridViewRowHeightInfoPushedEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED] as DataGridViewRowHeightInfoPushedEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private bool OnRowHeightInfoPushed(int rowIndex, int height, int minimumHeight)
        {
            if (this.VirtualMode || (this.DataSource != null))
            {
                DataGridViewRowHeightInfoPushedEventArgs e = new DataGridViewRowHeightInfoPushedEventArgs(rowIndex, height, minimumHeight);
                this.OnRowHeightInfoPushed(e);
                if (e.Handled)
                {
                    this.UpdateRowHeightInfoPrivate(rowIndex, false, true);
                    return true;
                }
            }
            return false;
        }

        protected virtual void OnRowLeave(DataGridViewCellEventArgs e)
        {
            try
            {
                this.noDimensionChangeCount++;
                DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWLEAVE] as DataGridViewCellEventHandler;
                if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        private void OnRowLeave(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
        {
            if ((rowIndex < this.Rows.Count) && (columnIndex < this.Columns.Count))
            {
                DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(columnIndex, rowIndex);
                this.OnRowLeave(e);
                if (dataGridViewCell != null)
                {
                    if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                    {
                        dataGridViewCell = null;
                    }
                    else
                    {
                        dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                    }
                }
            }
        }

        protected virtual void OnRowMinimumHeightChanged(DataGridViewRowEventArgs e)
        {
            if (e.Row.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
            }
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected internal virtual void OnRowPostPaint(DataGridViewRowPostPaintEventArgs e)
        {
            DataGridViewRowPostPaintEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWPOSTPAINT] as DataGridViewRowPostPaintEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected internal virtual void OnRowPrePaint(DataGridViewRowPrePaintEventArgs e)
        {
            DataGridViewRowPrePaintEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWPREPAINT] as DataGridViewRowPrePaintEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowsAdded(DataGridViewRowsAddedEventArgs e)
        {
            DataGridViewRowsAddedEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWSADDED] as DataGridViewRowsAddedEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnRowsAddedInternal(int rowIndex, int rowCount)
        {
            this.OnRowsAdded(new DataGridViewRowsAddedEventArgs(rowIndex, rowCount));
        }

        protected virtual void OnRowsDefaultCellStyleChanged(EventArgs e)
        {
            DataGridViewCellStyleChangedEventArgs args = e as DataGridViewCellStyleChangedEventArgs;
            if ((args != null) && !args.ChangeAffectsPreferredSize)
            {
                this.InvalidateData();
            }
            else
            {
                this.OnRowsGlobalAutoSize();
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(true, true, false);
                }
            }
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnRowSelectMouseMove(HitTestInfo hti)
        {
            if ((((this.ptCurrentCell.Y == -1) || (hti.row == this.ptCurrentCell.Y)) || this.CommitEditForOperation(this.ptCurrentCell.X, hti.row, true)) && !this.IsRowOutOfBounds(hti.row))
            {
                this.noSelectionChangeCount++;
                try
                {
                    if (((this.trackRowEdge >= this.trackRow) && (hti.row > this.trackRowEdge)) && (this.trackRowEdge >= 0))
                    {
                        this.SelectRowRange(this.Rows.GetNextRow(this.trackRowEdge, DataGridViewElementStates.Visible), hti.row, true);
                        this.trackRowEdge = hti.row;
                    }
                    else if (((this.trackRowEdge > this.trackRow) && (hti.row < this.trackRowEdge)) && ((hti.row >= this.trackRow) && (this.trackRowEdge >= 0)))
                    {
                        this.SelectRowRange(this.Rows.GetNextRow(hti.row, DataGridViewElementStates.Visible), this.trackRowEdge, false);
                        this.trackRowEdge = hti.row;
                    }
                    else if ((hti.row > this.trackRow) && (this.trackRowEdge == -1))
                    {
                        this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), hti.row, true);
                        this.trackRowEdge = hti.row;
                    }
                    else if (((this.trackRowEdge <= this.trackRow) && (hti.row < this.trackRowEdge)) && (this.trackRowEdge >= 0))
                    {
                        this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRowEdge, DataGridViewElementStates.Visible), true);
                        this.trackRowEdge = hti.row;
                    }
                    else if (((this.trackRowEdge < this.trackRow) && (hti.row > this.trackRowEdge)) && ((hti.row <= this.trackRow) && (this.trackRowEdge >= 0)))
                    {
                        this.SelectRowRange(this.trackRowEdge, this.Rows.GetPreviousRow(hti.row, DataGridViewElementStates.Visible), false);
                        this.trackRowEdge = hti.row;
                    }
                    else if ((hti.row < this.trackRow) && (this.trackRowEdge == -1))
                    {
                        this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), true);
                        this.trackRowEdge = hti.row;
                    }
                    else if ((this.trackRowEdge > this.trackRow) && (hti.row < this.trackRow))
                    {
                        this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), this.trackRowEdge, false);
                        this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), true);
                        this.trackRowEdge = hti.row;
                    }
                    else if (((hti.row > this.trackRow) && (this.trackRowEdge < this.trackRow)) && (this.trackRowEdge >= 0))
                    {
                        this.SelectRowRange(this.trackRowEdge, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), false);
                        this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), hti.row, true);
                        this.trackRowEdge = hti.row;
                    }
                }
                finally
                {
                    this.NoSelectionChangeCount--;
                }
                if (((this.ptCurrentCell.Y != -1) && (hti.row != this.ptCurrentCell.Y)) && !this.IsRowOutOfBounds(hti.row))
                {
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, hti.row, false, false, false);
                }
            }
        }

        private void OnRowsGlobalAutoSize()
        {
            this.InvalidateData();
            if (this.noAutoSizeCount <= 0)
            {
                if ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None)
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
                }
                this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows | DataGridViewAutoSizeColumnCriteriaInternal.AllRows, true);
                bool fixedRowHeadersWidth = (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing) || (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing);
                if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(fixedRowHeadersWidth, true);
                }
                if (!fixedRowHeadersWidth)
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
                }
                if ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None)
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                }
                if ((this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize) && !fixedRowHeadersWidth)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
            }
        }

        protected virtual void OnRowsRemoved(DataGridViewRowsRemovedEventArgs e)
        {
            DataGridViewRowsRemovedEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWSREMOVED] as DataGridViewRowsRemovedEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnRowsRemovedInternal(int rowIndex, int rowCount)
        {
            this.OnRowsRemoved(new DataGridViewRowsRemovedEventArgs(rowIndex, rowCount));
        }

        protected virtual void OnRowStateChanged(int rowIndex, DataGridViewRowStateChangedEventArgs e)
        {
            DataGridViewRow row = e.Row;
            DataGridViewElementStates none = DataGridViewElementStates.None;
            bool flag = false;
            if (rowIndex >= 0)
            {
                none = this.Rows.GetRowState(rowIndex);
                flag = (none & DataGridViewElementStates.Visible) != DataGridViewElementStates.None;
            }
            switch (e.StateChanged)
            {
                case DataGridViewElementStates.Frozen:
                    if (flag)
                    {
                        if ((none & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
                        {
                            this.FirstVisibleScrollingRowTempted(rowIndex);
                        }
                        this.PerformLayoutPrivate(false, false, true, true);
                        base.Invalidate();
                    }
                    break;

                case DataGridViewElementStates.Selected:
                    if (flag && (this.inBulkPaintCount == 0))
                    {
                        this.InvalidateRowPrivate(rowIndex);
                    }
                    break;

                case DataGridViewElementStates.Visible:
                {
                    if (!flag && ((none & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None))
                    {
                        this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Displayed, false);
                    }
                    this.PerformLayoutPrivate(false, false, true, true);
                    base.Invalidate();
                    bool flag2 = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None;
                    DataGridViewAutoSizeRowsModeInternal autoSizeRowsMode = (DataGridViewAutoSizeRowsModeInternal) this.autoSizeRowsMode;
                    bool flag3 = false;
                    if (autoSizeRowsMode != DataGridViewAutoSizeRowsModeInternal.None)
                    {
                        int thicknessInternal = row.ThicknessInternal;
                        if (flag)
                        {
                            row.CachedThickness = thicknessInternal;
                            if (((autoSizeRowsMode & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None) || flag2)
                            {
                                this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
                                flag3 = true;
                            }
                        }
                        else if (thicknessInternal != row.CachedThickness)
                        {
                            if (row.Index == -1)
                            {
                                row = this.Rows[rowIndex];
                            }
                            row.ThicknessInternal = Math.Max(row.MinimumHeight, row.CachedThickness);
                        }
                    }
                    DataGridViewAutoSizeColumnCriteriaInternal allRows = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
                    if (flag2)
                    {
                        allRows |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
                    }
                    if (flag && (this.Rows.GetRowCount(DataGridViewElementStates.Visible) > 1))
                    {
                        this.AdjustExpandingColumns(allRows, rowIndex);
                    }
                    else
                    {
                        this.AutoResizeAllVisibleColumnsInternal(allRows, true);
                    }
                    if (flag3)
                    {
                        this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                    }
                    break;
                }
            }
            DataGridViewRowStateChangedEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWSTATECHANGED] as DataGridViewRowStateChangedEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if (((e.StateChanged == DataGridViewElementStates.ReadOnly) && (rowIndex == this.ptCurrentCell.Y)) && !this.dataGridViewOper[0x4000])
            {
                base.VerifyImeRestrictedModeChanged();
                if (((((none & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None) && !this.ReadOnly) && (!this.Columns[this.ptCurrentCell.X].ReadOnly && this.ColumnEditable(this.ptCurrentCell.X))) && (!this.IsCurrentCellInEditMode && ((this.EditMode == DataGridViewEditMode.EditOnEnter) || ((this.EditMode != DataGridViewEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null)))))
                {
                    this.BeginEditInternal(true);
                }
            }
        }

        internal void OnRowUnshared(DataGridViewRow dataGridViewRow)
        {
            if (((-1 != this.ptCurrentCell.X) && (dataGridViewRow.Index == this.ptCurrentCell.Y)) && (this.editingControl != null))
            {
                this.CurrentCellInternal.CacheEditingControl();
            }
            DataGridViewRowEventArgs e = new DataGridViewRowEventArgs(dataGridViewRow);
            this.OnRowUnshared(e);
        }

        protected virtual void OnRowUnshared(DataGridViewRowEventArgs e)
        {
            if (e.Row.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
            }
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWUNSHARED] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnRowValidated(DataGridViewCellEventArgs e)
        {
            try
            {
                this.noDimensionChangeCount++;
                DataGridViewCellEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWVALIDATED] as DataGridViewCellEventHandler;
                if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        private void OnRowValidated(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
        {
            this.IsCurrentRowDirtyInternal = false;
            this.dataGridViewState1[0x200000] = false;
            if (rowIndex == this.newRowIndex)
            {
                this.InvalidateRowPrivate(rowIndex);
            }
            DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(columnIndex, rowIndex);
            this.OnRowValidated(e);
            if (dataGridViewCell != null)
            {
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    dataGridViewCell = null;
                }
                else
                {
                    dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                }
            }
        }

        protected virtual void OnRowValidating(DataGridViewCellCancelEventArgs e)
        {
            try
            {
                this.noDimensionChangeCount++;
                DataGridViewCellCancelEventHandler handler = base.Events[EVENT_DATAGRIDVIEWROWVALIDATING] as DataGridViewCellCancelEventHandler;
                if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        private bool OnRowValidating(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
        {
            DataGridViewCellCancelEventArgs e = new DataGridViewCellCancelEventArgs(columnIndex, rowIndex);
            this.OnRowValidating(e);
            if (((!e.Cancel && (this.dataConnection != null)) && (this.dataConnection.InterestedInRowEvents && !this.dataConnection.PositionChangingOutsideDataGridView)) && !this.dataConnection.ListWasReset)
            {
                this.dataConnection.OnRowValidating(e);
            }
            if (((dataGridViewCell != null) && (rowIndex < this.Rows.Count)) && (columnIndex < this.Columns.Count))
            {
                dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
            }
            return e.Cancel;
        }

        protected virtual void OnScroll(ScrollEventArgs e)
        {
            ScrollEventHandler handler = base.Events[EVENT_DATAGRIDVIEWSCROLL] as ScrollEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnScroll(ScrollEventType scrollEventType, int oldValue, int newValue, ScrollOrientation orientation)
        {
            ScrollEventArgs e = new ScrollEventArgs(scrollEventType, oldValue, newValue, orientation);
            this.OnScroll(e);
            if (ScrollOrientation.VerticalScroll == orientation)
            {
                if (e.NewValue != newValue)
                {
                    try
                    {
                        this.dataGridViewState2[0x4000] = true;
                        int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                        int num2 = firstRow;
                        newValue = e.NewValue;
                        while ((firstRow != -1) && (newValue > 0))
                        {
                            num2 = firstRow;
                            firstRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible);
                            newValue--;
                        }
                        if (firstRow != -1)
                        {
                            num2 = firstRow;
                        }
                        if (num2 != -1)
                        {
                            this.FirstDisplayedScrollingRowIndex = num2;
                        }
                    }
                    finally
                    {
                        this.dataGridViewState2[0x4000] = false;
                    }
                }
            }
            else if (e.NewValue != newValue)
            {
                try
                {
                    this.dataGridViewState2[0x8000] = true;
                    this.HorizontalOffset = e.NewValue;
                }
                finally
                {
                    this.dataGridViewState2[0x8000] = false;
                }
            }
        }

        protected virtual void OnSelectionChanged(EventArgs e)
        {
            this.dataGridViewState2[0x40000] = false;
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWSELECTIONCHANGED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnSortCompare(DataGridViewSortCompareEventArgs e)
        {
            DataGridViewSortCompareEventHandler handler = base.Events[EVENT_DATAGRIDVIEWSORTCOMPARE] as DataGridViewSortCompareEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal bool OnSortCompare(DataGridViewColumn dataGridViewSortedColumn, object value1, object value2, int rowIndex1, int rowIndex2, out int sortResult)
        {
            DataGridViewSortCompareEventArgs e = new DataGridViewSortCompareEventArgs(dataGridViewSortedColumn, value1, value2, rowIndex1, rowIndex2);
            this.OnSortCompare(e);
            sortResult = e.SortResult;
            return e.Handled;
        }

        protected virtual void OnSorted(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_DATAGRIDVIEWSORTED] as EventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnSortGlyphDirectionChanged(DataGridViewColumnHeaderCell dataGridViewColumnHeaderCell)
        {
            if (dataGridViewColumnHeaderCell.OwningColumn == this.SortedColumn)
            {
                if (dataGridViewColumnHeaderCell.SortGlyphDirection == System.Windows.Forms.SortOrder.None)
                {
                    this.sortedColumn = null;
                    DataGridViewColumn owningColumn = dataGridViewColumnHeaderCell.OwningColumn;
                    if (owningColumn.IsDataBound)
                    {
                        for (int i = 0; i < this.Columns.Count; i++)
                        {
                            if (((owningColumn != this.Columns[i]) && (this.Columns[i].SortMode != DataGridViewColumnSortMode.NotSortable)) && (string.Compare(owningColumn.DataPropertyName, this.Columns[i].DataPropertyName, true, CultureInfo.InvariantCulture) == 0))
                            {
                                this.sortedColumn = this.Columns[i];
                                break;
                            }
                        }
                    }
                }
                this.sortOrder = (this.sortedColumn != null) ? this.sortedColumn.HeaderCell.SortGlyphDirection : System.Windows.Forms.SortOrder.None;
            }
            this.InvalidateCellPrivate(dataGridViewColumnHeaderCell);
        }

        private void OnTopLeftHeaderMouseDown()
        {
            if (this.MultiSelect)
            {
                this.SelectAll();
                if (-1 != this.ptCurrentCell.X)
                {
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
                }
            }
        }

        protected virtual void OnUserAddedRow(DataGridViewRowEventArgs e)
        {
            if (e.Row.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
            }
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWUSERADDEDROW] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnUserDeletedRow(DataGridViewRowEventArgs e)
        {
            DataGridViewRowEventHandler handler = base.Events[EVENT_DATAGRIDVIEWUSERDELETEDROW] as DataGridViewRowEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected virtual void OnUserDeletingRow(DataGridViewRowCancelEventArgs e)
        {
            DataGridViewRowCancelEventHandler handler = base.Events[EVENT_DATAGRIDVIEWUSERDELETINGROW] as DataGridViewRowCancelEventHandler;
            if (((handler != null) && !this.dataGridViewOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e)
        {
            if (((e.Category == UserPreferenceCategory.Color) || (e.Category == UserPreferenceCategory.Locale)) || (((e.Category == UserPreferenceCategory.General) || (e.Category == UserPreferenceCategory.Window)) || (e.Category == UserPreferenceCategory.VisualStyle)))
            {
                this.OnGlobalAutoSize();
                if (e.Category == UserPreferenceCategory.Window)
                {
                    this.cachedEditingControl = null;
                    if (this.editingControl != null)
                    {
                        this.dataGridViewState2[0x20000000] = true;
                    }
                    this.PerformLayoutPrivate(false, false, false, true);
                }
            }
        }

        protected override void OnValidating(CancelEventArgs e)
        {
            if (!base.BecomingActiveControl && ((this.editingControl == null) || !this.editingControl.BecomingActiveControl))
            {
                if (!this.dataGridViewState1[0x40] && !this.EndEdit(DataGridViewDataErrorContexts.LeaveControl | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.Always, false, false, false, false, false, false, false, false))
                {
                    e.Cancel = true;
                    return;
                }
                if (this.ptCurrentCell.X >= 0)
                {
                    DataGridViewCell dataGridViewCell = null;
                    if (this.OnRowValidating(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y))
                    {
                        e.Cancel = true;
                        return;
                    }
                    if (this.ptCurrentCell.X == -1)
                    {
                        return;
                    }
                    this.OnRowValidated(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                    if (((this.DataSource != null) && (this.ptCurrentCell.X >= 0)) && (this.AllowUserToAddRowsInternal && (this.newRowIndex == this.ptCurrentCell.Y)))
                    {
                        int previousRow = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
                        if (previousRow > -1)
                        {
                            this.SetAndSelectCurrentCellAddress(this.ptCurrentCell.X, previousRow, true, false, false, false, false);
                        }
                        else
                        {
                            this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                        }
                    }
                }
            }
            base.OnValidating(e);
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            this.OnVisibleChangedPrivate();
        }

        private void OnVisibleChangedPrivate()
        {
            if (base.Visible)
            {
                int firstDisplayedScrollingRow;
                int numDisplayedFrozenRows = this.displayedBandsInfo.NumDisplayedFrozenRows;
                if (numDisplayedFrozenRows > 0)
                {
                    firstDisplayedScrollingRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    while (numDisplayedFrozenRows > 0)
                    {
                        if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
                        {
                            return;
                        }
                        this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, true);
                        firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                        numDisplayedFrozenRows--;
                    }
                }
                firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                if (firstDisplayedScrollingRow > -1)
                {
                    for (int i = this.displayedBandsInfo.NumDisplayedScrollingRows; i > 0; i--)
                    {
                        if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
                        {
                            return;
                        }
                        this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, true);
                        firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible);
                    }
                }
            }
            else
            {
                this.UpdateRowsDisplayedState(false);
            }
            this.UpdateColumnsDisplayedState(base.Visible);
        }

        protected virtual void PaintBackground(Graphics graphics, Rectangle clipBounds, Rectangle gridBounds)
        {
            Rectangle rect = gridBounds;
            int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
            if (this.layout.ColumnHeadersVisible)
            {
                rect.Y += this.layout.ColumnHeaders.Height;
                rect.Height -= this.layout.ColumnHeaders.Height;
            }
            else if (this.SingleHorizontalBorderAdded && (rowsHeight > 0))
            {
                rect.Y++;
                rect.Height--;
            }
            int num2 = rowsHeight - this.verticalOffset;
            rect.Y += num2;
            rect.Height -= num2;
            if ((rect.Width > 0) && (rect.Height > 0))
            {
                graphics.FillRectangle(this.backgroundBrush, rect);
            }
            int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible);
            Rectangle rectangle2 = gridBounds;
            if (this.Columns.Count > 0)
            {
                if (this.layout.RowHeadersVisible)
                {
                    if (!this.RightToLeftInternal)
                    {
                        rectangle2.X += this.layout.RowHeaders.Width;
                    }
                    rectangle2.Width -= this.layout.RowHeaders.Width;
                }
                else if (this.SingleVerticalBorderAdded && (columnsWidth > 0))
                {
                    if (!this.RightToLeftInternal)
                    {
                        rectangle2.X++;
                    }
                    rectangle2.Width--;
                }
            }
            int num4 = columnsWidth - this.horizontalOffset;
            if (!this.RightToLeftInternal)
            {
                rectangle2.X += num4;
            }
            rectangle2.Width -= num4;
            rectangle2.Height = gridBounds.Height - rect.Height;
            if ((rectangle2.Width > 0) && (rectangle2.Height > 0))
            {
                graphics.FillRectangle(this.backgroundBrush, rectangle2);
            }
        }

        private void PaintBorder(Graphics g, Rectangle clipRect, Rectangle bounds)
        {
            if (this.BorderStyle != System.Windows.Forms.BorderStyle.None)
            {
                bool flag = false;
                int borderWidth = this.BorderWidth;
                Rectangle rect = new Rectangle(0, 0, bounds.Width, borderWidth);
                flag = clipRect.IntersectsWith(rect);
                if (!flag)
                {
                    rect.Y = bounds.Height - borderWidth;
                    flag = clipRect.IntersectsWith(rect);
                    if (!flag)
                    {
                        rect.Y = 0;
                        rect.Height = bounds.Height;
                        rect.Width = borderWidth;
                        flag = clipRect.IntersectsWith(rect);
                        if (!flag)
                        {
                            rect.X = bounds.Width - borderWidth;
                            flag = clipRect.IntersectsWith(rect);
                        }
                    }
                }
                if (flag)
                {
                    if (this.BorderStyle == System.Windows.Forms.BorderStyle.Fixed3D)
                    {
                        if (Application.RenderWithVisualStyles)
                        {
                            Pen cachedPen = this.GetCachedPen(VisualStyleInformation.TextControlBorder);
                            g.DrawRectangle(cachedPen, new Rectangle(0, 0, bounds.Width - 1, bounds.Height - 1));
                        }
                        else
                        {
                            ControlPaint.DrawBorder3D(g, bounds, Border3DStyle.Sunken);
                        }
                    }
                    else if (this.BorderStyle == System.Windows.Forms.BorderStyle.FixedSingle)
                    {
                        Pen pen = this.GetCachedPen(SystemColors.ControlText);
                        g.DrawRectangle(pen, new Rectangle(0, 0, bounds.Width - 1, bounds.Height - 1));
                    }
                }
            }
        }

        private void PaintColumnHeaders(Graphics g, Rectangle clipBounds, bool singleBorderAdded)
        {
            if (g.IsVisible(this.layout.ColumnHeaders))
            {
                Rectangle rectangle2;
                DataGridViewCell headerCell;
                DataGridViewAdvancedBorderStyle style3;
                Rectangle rectangle = rectangle2 = this.layout.ColumnHeaders;
                rectangle.Height = rectangle2.Height = this.columnHeadersHeight;
                int num = 0;
                bool isFirstDisplayedColumn = true;
                bool isLastVisibleColumn = false;
                DataGridViewCellStyle inheritedCellStyle = new DataGridViewCellStyle();
                DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder = new DataGridViewAdvancedBorderStyle();
                DataGridViewColumn column = null;
                DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                while (firstColumn != null)
                {
                    headerCell = firstColumn.HeaderCell;
                    rectangle2.Width = firstColumn.Thickness;
                    if (singleBorderAdded && isFirstDisplayedColumn)
                    {
                        rectangle2.Width++;
                    }
                    if (this.RightToLeftInternal)
                    {
                        rectangle2.X = (rectangle.Right - num) - rectangle2.Width;
                    }
                    else
                    {
                        rectangle2.X = rectangle.X + num;
                    }
                    this.BuildInheritedColumnHeaderCellStyle(inheritedCellStyle, headerCell);
                    column = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, DataGridViewElementStates.None);
                    if (column == null)
                    {
                        isLastVisibleColumn = this.displayedBandsInfo.FirstDisplayedScrollingCol < 0;
                    }
                    style3 = this.AdjustColumnHeaderBorderStyle(this.AdvancedColumnHeadersBorderStyle, dataGridViewAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn);
                    headerCell.PaintWork(g, clipBounds, rectangle2, -1, firstColumn.State, inheritedCellStyle, style3, DataGridViewPaintParts.SelectionBackground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.Border | DataGridViewPaintParts.Background);
                    num += rectangle2.Width;
                    if (num >= rectangle.Width)
                    {
                        break;
                    }
                    firstColumn = column;
                    isFirstDisplayedColumn = false;
                }
                Rectangle rectangle3 = rectangle;
                if (!this.RightToLeftInternal)
                {
                    rectangle3.X -= this.negOffset;
                }
                rectangle3.Width += this.negOffset;
                if ((this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0) && (num < rectangle3.Width))
                {
                    Region clip = null;
                    if (this.negOffset > 0)
                    {
                        clip = g.Clip;
                        Rectangle rect = rectangle;
                        if (!this.RightToLeftInternal)
                        {
                            rect.X += num;
                        }
                        rect.Width -= num;
                        g.SetClip(rect);
                    }
                    firstColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                    while (firstColumn != null)
                    {
                        headerCell = firstColumn.HeaderCell;
                        rectangle2.Width = firstColumn.Thickness;
                        if (singleBorderAdded && isFirstDisplayedColumn)
                        {
                            rectangle2.Width++;
                        }
                        if (this.RightToLeftInternal)
                        {
                            rectangle2.X = (rectangle3.Right - num) - rectangle2.Width;
                        }
                        else
                        {
                            rectangle2.X = rectangle3.X + num;
                        }
                        this.BuildInheritedColumnHeaderCellStyle(inheritedCellStyle, headerCell);
                        column = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        isLastVisibleColumn = column == null;
                        style3 = this.AdjustColumnHeaderBorderStyle(this.AdvancedColumnHeadersBorderStyle, dataGridViewAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn);
                        headerCell.PaintWork(g, clipBounds, rectangle2, -1, firstColumn.State, inheritedCellStyle, style3, DataGridViewPaintParts.SelectionBackground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.Border | DataGridViewPaintParts.Background);
                        num += rectangle2.Width;
                        if (num >= rectangle3.Width)
                        {
                            break;
                        }
                        firstColumn = column;
                        isFirstDisplayedColumn = false;
                    }
                    if (this.negOffset > 0)
                    {
                        g.Clip = clip;
                        clip.Dispose();
                    }
                }
            }
        }

        private void PaintGrid(Graphics g, Rectangle gridBounds, Rectangle clipRect, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded)
        {
            Rectangle boundingRect = gridBounds;
            if (((this.layout.TopLeftHeader.Width > 0) && (clipRect.IntersectsWith(this.layout.TopLeftHeader) || (this.lastHeaderShadow != -1))) && ((this.Columns.Count > 0) || (this.Rows.Count > 0)))
            {
                using (Region region = g.Clip)
                {
                    g.SetClip(this.layout.TopLeftHeader);
                    this.PaintTopLeftHeaderCell(g);
                    g.Clip = region;
                }
            }
            if (this.layout.ColumnHeadersVisible)
            {
                Rectangle rect = new Rectangle();
                rect = this.layout.ColumnHeaders;
                if (singleVerticalBorderAdded)
                {
                    rect.Width++;
                }
                if (clipRect.IntersectsWith(rect) || (this.lastHeaderShadow != -1))
                {
                    using (Region region2 = g.Clip)
                    {
                        g.SetClip(rect);
                        this.PaintColumnHeaders(g, rect, singleVerticalBorderAdded);
                        g.Clip = region2;
                    }
                }
                int height = this.layout.ColumnHeaders.Height;
                boundingRect.Y += height;
                boundingRect.Height -= height;
                if (this.lastHeaderShadow != -1)
                {
                    this.DrawColHeaderShadow(g, this.lastHeaderShadow);
                }
            }
            if (boundingRect.Height > 0)
            {
                this.PaintRows(g, boundingRect, clipRect, singleHorizontalBorderAdded);
            }
            if (this.currentRowSplitBar != -1)
            {
                this.DrawRowSplitBar(this.currentRowSplitBar);
            }
            else if (this.currentColSplitBar != -1)
            {
                this.DrawColSplitBar(this.currentColSplitBar);
            }
        }

        private void PaintRows(Graphics g, Rectangle boundingRect, Rectangle clipRect, bool singleHorizontalBorderAdded)
        {
            Rectangle rectangle;
            int nextRow;
            int num = 0;
            bool isFirstDisplayedRow = true;
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            while (firstRow != -1)
            {
                rectangle = boundingRect;
                rectangle.Height = this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                if (isFirstDisplayedRow && singleHorizontalBorderAdded)
                {
                    rectangle.Height++;
                }
                rectangle.Y = boundingRect.Y + num;
                nextRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                if (clipRect.IntersectsWith(rectangle))
                {
                    this.Rows.SharedRow(firstRow).Paint(g, clipRect, rectangle, firstRow, this.Rows.GetRowState(firstRow), isFirstDisplayedRow, (nextRow == -1) && (this.displayedBandsInfo.FirstDisplayedScrollingRow == -1));
                }
                num += rectangle.Height;
                if (num >= boundingRect.Height)
                {
                    break;
                }
                firstRow = nextRow;
                isFirstDisplayedRow = false;
            }
            if ((this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0) && (num < boundingRect.Height))
            {
                firstRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                while (firstRow != -1)
                {
                    rectangle = boundingRect;
                    rectangle.Height = this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                    if (isFirstDisplayedRow && singleHorizontalBorderAdded)
                    {
                        rectangle.Height++;
                    }
                    rectangle.Y = boundingRect.Y + num;
                    nextRow = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible);
                    if (clipRect.IntersectsWith(rectangle))
                    {
                        this.Rows.SharedRow(firstRow).Paint(g, clipRect, rectangle, firstRow, this.Rows.GetRowState(firstRow), isFirstDisplayedRow, nextRow == -1);
                    }
                    num += rectangle.Height;
                    if (num >= boundingRect.Height)
                    {
                        return;
                    }
                    firstRow = nextRow;
                    isFirstDisplayedRow = false;
                }
            }
        }

        private void PaintTopLeftHeaderCell(Graphics g)
        {
            if (g.IsVisible(this.layout.TopLeftHeader))
            {
                DataGridViewCell topLeftHeaderCell = this.TopLeftHeaderCell;
                DataGridViewCellStyle inheritedCellStyle = new DataGridViewCellStyle();
                this.BuildInheritedColumnHeaderCellStyle(inheritedCellStyle, topLeftHeaderCell);
                Rectangle topLeftHeader = this.layout.TopLeftHeader;
                topLeftHeader.Width = this.rowHeadersWidth;
                topLeftHeader.Height = this.columnHeadersHeight;
                topLeftHeaderCell.PaintWork(g, this.layout.TopLeftHeader, topLeftHeader, -1, topLeftHeaderCell.State, inheritedCellStyle, this.AdjustedTopLeftHeaderBorderStyle, DataGridViewPaintParts.SelectionBackground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.Border | DataGridViewPaintParts.Background);
            }
        }

        private void PerformLayoutPrivate(bool useRowShortcut, bool computeVisibleRows, bool invalidInAdjustFillingColumns, bool repositionEditingControl)
        {
            this.inPerformLayoutCount++;
            try
            {
                if (invalidInAdjustFillingColumns && this.InAdjustFillingColumns)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
                }
                if (base.IsHandleCreated)
                {
                    bool flag = false;
                    if (useRowShortcut)
                    {
                        this.ComputeLayoutShortcut(computeVisibleRows);
                    }
                    else
                    {
                        flag = this.ComputeLayout();
                    }
                    this.FlushDisplayedChanged();
                    if (flag && (this.inPerformLayoutCount < 3))
                    {
                        if ((this.autoSizeRowsMode & ((DataGridViewAutoSizeRowsMode) 2)) != DataGridViewAutoSizeRowsMode.None)
                        {
                            this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                        }
                        if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                        {
                            this.AutoResizeColumnHeadersHeight(true, true);
                        }
                    }
                    if (repositionEditingControl && (this.editingControl != null))
                    {
                        this.PositionEditingControl(true, false, false);
                    }
                }
                else
                {
                    this.displayedBandsInfo.FirstDisplayedFrozenCol = -1;
                    this.displayedBandsInfo.FirstDisplayedFrozenRow = -1;
                    this.displayedBandsInfo.FirstDisplayedScrollingRow = -1;
                    this.displayedBandsInfo.FirstDisplayedScrollingCol = -1;
                    this.displayedBandsInfo.NumDisplayedFrozenRows = 0;
                    this.displayedBandsInfo.NumDisplayedFrozenCols = 0;
                    this.displayedBandsInfo.NumDisplayedScrollingRows = 0;
                    this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
                    this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = 0;
                    this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0;
                    this.displayedBandsInfo.LastDisplayedScrollingRow = -1;
                    this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
                    if (this.layout != null)
                    {
                        this.layout.dirty = true;
                    }
                }
            }
            finally
            {
                this.inPerformLayoutCount--;
            }
        }

        private void PopulateNewRowWithDefaultValues()
        {
            if (this.newRowIndex != -1)
            {
                DataGridViewCellCollection cells = this.Rows.SharedRow(this.newRowIndex).Cells;
                foreach (DataGridViewCell cell in cells)
                {
                    if (cell.DefaultNewRowValue != null)
                    {
                        DataGridViewRow row = this.Rows[this.newRowIndex];
                        cells = row.Cells;
                        break;
                    }
                }
                foreach (DataGridViewCell cell2 in cells)
                {
                    cell2.SetValueInternal(this.newRowIndex, cell2.DefaultNewRowValue);
                }
            }
        }

        private void PositionEditingControl(bool setLocation, bool setSize, bool setFocus)
        {
            if (base.IsHandleCreated)
            {
                Rectangle data = this.layout.Data;
                if ((data.Width != 0) && (data.Height != 0))
                {
                    this.dataGridViewState1[0x4000] = true;
                    try
                    {
                        int columnXFromIndex = this.GetColumnXFromIndex(this.ptCurrentCell.X);
                        if (this.RightToLeftInternal)
                        {
                            columnXFromIndex -= this.Columns[this.ptCurrentCell.X].Width - 1;
                        }
                        DataGridViewRow introduced10 = this.Rows.SharedRow(this.ptCurrentCell.Y);
                        Rectangle cellBounds = new Rectangle(columnXFromIndex, this.GetRowYFromIndex(this.ptCurrentCell.Y), this.Columns[this.ptCurrentCell.X].Width, introduced10.GetHeight(this.ptCurrentCell.Y));
                        Rectangle cellClip = cellBounds;
                        if (!this.Columns[this.ptCurrentCell.X].Frozen)
                        {
                            int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                            if (!this.RightToLeftInternal)
                            {
                                data.X += columnsWidth;
                            }
                            data.Width = Math.Max(0, data.Width - columnsWidth);
                        }
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
                        {
                            int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                            data.Y += rowsHeight;
                        }
                        cellClip.Intersect(data);
                        if ((cellClip.Width == 0) || (cellClip.Height == 0))
                        {
                            this.editingPanel.Location = new Point(base.Width + 1, 0);
                            this.dataGridViewState1[0x1000] = true;
                        }
                        else
                        {
                            bool singleVerticalBorderAdded = this.SingleVerticalBorderAdded;
                            bool singleHorizontalBorderAdded = this.SingleHorizontalBorderAdded;
                            bool isFirstDisplayedColumn = this.FirstDisplayedColumnIndex == this.ptCurrentCell.X;
                            bool isFirstDisplayedRow = this.FirstDisplayedRowIndex == this.ptCurrentCell.Y;
                            if (singleVerticalBorderAdded && isFirstDisplayedColumn)
                            {
                                if (!this.RightToLeftInternal)
                                {
                                    cellBounds.X--;
                                    cellClip.X--;
                                }
                                cellBounds.Width++;
                                cellClip.Width++;
                            }
                            if (singleHorizontalBorderAdded && isFirstDisplayedRow)
                            {
                                cellBounds.Y--;
                                cellClip.Y--;
                                cellBounds.Height++;
                                cellClip.Height++;
                            }
                            this.CurrentCellInternal.PositionEditingControl(setLocation || this.dataGridViewState1[0x1000], setSize || this.dataGridViewState1[0x1000], cellBounds, cellClip, this.InheritedEditingCellStyle, singleVerticalBorderAdded, singleHorizontalBorderAdded, isFirstDisplayedColumn, isFirstDisplayedRow);
                            this.dataGridViewState1[0x1000] = false;
                        }
                        this.editingPanel.Visible = true;
                        if (setFocus)
                        {
                            this.CorrectFocus(false);
                        }
                    }
                    finally
                    {
                        this.dataGridViewState1[0x4000] = false;
                    }
                }
            }
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessAKey(Keys keyData)
        {
            if (((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) == Keys.Control) && this.MultiSelect)
            {
                this.SelectAll();
                return true;
            }
            return false;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected virtual bool ProcessDataGridViewKey(KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.Escape:
                    return this.ProcessEscapeKey(e.KeyData);

                case Keys.Space:
                    return this.ProcessSpaceKey(e.KeyData);

                case Keys.PageUp:
                    return this.ProcessPriorKey(e.KeyData);

                case Keys.Next:
                    return this.ProcessNextKey(e.KeyData);

                case Keys.End:
                    return this.ProcessEndKey(e.KeyData);

                case Keys.Home:
                    return this.ProcessHomeKey(e.KeyData);

                case Keys.Left:
                    return this.ProcessLeftKey(e.KeyData);

                case Keys.Up:
                    return this.ProcessUpKey(e.KeyData);

                case Keys.Right:
                    return this.ProcessRightKey(e.KeyData);

                case Keys.Down:
                    return this.ProcessDownKey(e.KeyData);

                case Keys.Insert:
                case Keys.C:
                    return this.ProcessInsertKey(e.KeyData);

                case Keys.Delete:
                    return this.ProcessDeleteKey(e.KeyData);

                case Keys.D0:
                case Keys.NumPad0:
                    return this.ProcessZeroKey(e.KeyData);

                case Keys.Enter:
                    return this.ProcessEnterKey(e.KeyData);

                case Keys.Tab:
                    return this.ProcessTabKey(e.KeyData);

                case Keys.A:
                    return this.ProcessAKey(e.KeyData);

                case Keys.F2:
                    return this.ProcessF2Key(e.KeyData);
            }
            return false;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessDeleteKey(Keys keyData)
        {
            if (this.AllowUserToDeleteRowsInternal)
            {
                if (this.editingControl != null)
                {
                    return false;
                }
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                    {
                        int num = 0;
                        try
                        {
                            this.selectedBandSnapshotIndexes = new DataGridViewIntLinkedList(this.selectedBandIndexes);
                            while (this.selectedBandSnapshotIndexes.Count > num)
                            {
                                int rowIndex = this.selectedBandSnapshotIndexes[num];
                                if ((rowIndex == this.newRowIndex) || (rowIndex >= this.Rows.Count))
                                {
                                    num++;
                                }
                                else
                                {
                                    DataGridViewRowCancelEventArgs e = new DataGridViewRowCancelEventArgs(this.Rows[rowIndex]);
                                    this.OnUserDeletingRow(e);
                                    if (!e.Cancel)
                                    {
                                        DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
                                        if (this.DataSource != null)
                                        {
                                            int count = this.dataConnection.CurrencyManager.List.Count;
                                            DataGridViewDataErrorEventArgs args2 = null;
                                            try
                                            {
                                                this.DataConnection.DeleteRow(rowIndex);
                                            }
                                            catch (Exception exception)
                                            {
                                                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                                                {
                                                    throw;
                                                }
                                                args2 = new DataGridViewDataErrorEventArgs(exception, -1, rowIndex, DataGridViewDataErrorContexts.RowDeletion);
                                                this.OnDataErrorInternal(args2);
                                                if (args2.ThrowException)
                                                {
                                                    throw args2.Exception;
                                                }
                                                num++;
                                            }
                                            catch
                                            {
                                                throw;
                                            }
                                            if (count != this.dataConnection.CurrencyManager.List.Count)
                                            {
                                                DataGridViewRowEventArgs args3 = new DataGridViewRowEventArgs(dataGridViewRow);
                                                this.OnUserDeletedRow(args3);
                                            }
                                            else if (args2 == null)
                                            {
                                                num++;
                                            }
                                        }
                                        else
                                        {
                                            this.Rows.RemoveAtInternal(rowIndex, false);
                                            DataGridViewRowEventArgs args4 = new DataGridViewRowEventArgs(dataGridViewRow);
                                            this.OnUserDeletedRow(args4);
                                        }
                                        continue;
                                    }
                                    num++;
                                }
                            }
                        }
                        finally
                        {
                            this.selectedBandSnapshotIndexes = null;
                        }
                        return true;
                    }
                }
            }
            return false;
        }

        [UIPermission(SecurityAction.LinkDemand, Window=UIPermissionWindow.AllWindows)]
        protected override bool ProcessDialogKey(Keys keyData)
        {
            switch ((keyData & Keys.KeyCode))
            {
                case Keys.Enter:
                    if (this.ProcessEnterKey(keyData))
                    {
                        return true;
                    }
                    break;

                case Keys.Escape:
                {
                    bool isEscapeKeyEffective = this.IsEscapeKeyEffective;
                    bool flag2 = base.ProcessDialogKey(keyData);
                    if (((!isEscapeKeyEffective && this.Focused) && ((this.ptCurrentCell.X > -1) && !this.IsCurrentCellInEditMode)) && ((this.EditMode == DataGridViewEditMode.EditOnEnter) || ((this.EditMode != DataGridViewEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null))))
                    {
                        this.BeginEditInternal(true);
                    }
                    return flag2;
                }
                case Keys.D0:
                case Keys.NumPad0:
                    if (this.ProcessZeroKey(keyData))
                    {
                        return true;
                    }
                    break;

                case Keys.C:
                case Keys.Insert:
                    if (this.ProcessInsertKey(keyData))
                    {
                        return true;
                    }
                    break;

                case Keys.Tab:
                {
                    System.Windows.Forms.IntSecurity.AllWindows.Demand();
                    if (this.ProcessTabKey(keyData))
                    {
                        return true;
                    }
                    if (this.editingControl != null)
                    {
                        this.dataGridViewState1[0x40] = true;
                        if (!this.EndEdit(DataGridViewDataErrorContexts.LeaveControl | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.Always, true, true, true, true, true, false, false, false))
                        {
                            return true;
                        }
                    }
                    keyData &= ~Keys.Control;
                    bool flag3 = false;
                    System.Windows.Forms.IntSecurity.ModifyFocus.Assert();
                    try
                    {
                        flag3 = base.ProcessDialogKey(keyData);
                    }
                    finally
                    {
                        CodeAccessPermission.RevertAssert();
                    }
                    if (this.dataGridViewState1[0x40] && this.Focused)
                    {
                        this.OnEnter(EventArgs.Empty);
                    }
                    return flag3;
                }
            }
            return base.ProcessDialogKey(keyData);
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessDownKey(Keys keyData)
        {
            bool flag;
            return this.ProcessDownKeyInternal(keyData, out flag);
        }

        private bool ProcessDownKeyInternal(Keys keyData, out bool moved)
        {
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
            if ((columnIndex == -1) || (lastRow == -1))
            {
                moved = false;
                return false;
            }
            int rowIndex = -1;
            if (this.ptCurrentCell.Y != -1)
            {
                rowIndex = this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
            }
            moved = true;
            this.noSelectionChangeCount++;
            try
            {
                bool flag;
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0319;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_0247;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0112;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            break;
                        }
                        moved = false;
                        return true;

                    case DataGridViewSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_07AE;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_06E8;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_05D6;
                        }
                        this.ClearSelection();
                        this.SetSelectedRowCore(lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            goto Label_05BC;
                        }
                        moved = false;
                        return true;

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_10CB;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_1068;
                        }
                        this.ClearSelection();
                        this.SetSelectedColumnCore(columnIndex, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            goto Label_104E;
                        }
                        moved = false;
                        return true;

                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0D02;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_0C05;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0A4C;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            goto Label_0A32;
                        }
                        moved = false;
                        return true;

                    default:
                        goto Label_1195;
                }
                if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                {
                    moved = false;
                }
                goto Label_0557;
            Label_0112:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    int x = this.ptCurrentCell.X;
                    int y = this.ptCurrentCell.Y;
                    if (((this.ptCurrentCell.X == -1) || (this.ptAnchorCell.X == -1)) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, lastRow);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_0557;
            Label_0247:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_0557;
            Label_0319:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                        {
                            moved = false;
                        }
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            moved = false;
                            return true;
                        }
                        if (this.MultiSelect)
                        {
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                moved = false;
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, oldEdgeColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, rowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                        }
                        if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false))
                        {
                            moved = false;
                        }
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false))
                    {
                        moved = false;
                    }
                }
            Label_0557:
                return true;
            Label_05BC:
                if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                {
                    moved = false;
                }
                goto Label_09CC;
            Label_05D6:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.Y == -1) || (this.ptCurrentCell.X == -1)) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
                    this.SetSelectedRowCore(lastRow, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_09CC;
            Label_06E8:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(lastRow, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_09CC;
            Label_07AE:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                        {
                            moved = false;
                        }
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            moved = false;
                            return true;
                        }
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                moved = false;
                                return true;
                            }
                            if (rowIndex >= this.ptAnchorCell.Y)
                            {
                                this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                            }
                            else
                            {
                                this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                            }
                        }
                        else
                        {
                            this.SetSelectedRowCore(rowIndex, true);
                        }
                        if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false))
                        {
                            moved = false;
                        }
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(rowIndex, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false))
                    {
                        moved = false;
                    }
                }
            Label_09CC:
                return true;
            Label_0A32:
                if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                {
                    moved = false;
                }
                goto Label_0FFA;
            Label_0A4C:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.Y == -1) || (this.ptCurrentCell.Y == -1)) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                    {
                        this.ClearSelection();
                        this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
                    }
                    else
                    {
                        int num8 = this.ptCurrentCell.X;
                        int num9 = this.ptCurrentCell.Y;
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num8, num8, this.ptAnchorCell.Y, ref num9, lastRow);
                    }
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                    {
                        this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
                        this.SetSelectedRowCore(lastRow, true);
                    }
                    else
                    {
                        this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                        this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
                    }
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_0FFA;
            Label_0C05:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(lastRow, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
                    }
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_0FFA;
            Label_0D02:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                        {
                            moved = false;
                        }
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            moved = false;
                            return true;
                        }
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                        {
                            this.ClearSelection();
                            if (this.MultiSelect)
                            {
                                if (this.ptAnchorCell.Y == -1)
                                {
                                    moved = false;
                                    return true;
                                }
                                if (rowIndex >= this.ptAnchorCell.Y)
                                {
                                    this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                                }
                                else
                                {
                                    this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                                }
                            }
                            else
                            {
                                this.SetSelectedRowCore(rowIndex, true);
                            }
                        }
                        else if (this.MultiSelect)
                        {
                            int num10 = this.ptCurrentCell.X;
                            int num11 = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                moved = false;
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num10, num10, this.ptAnchorCell.Y, ref num11, rowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                        }
                        if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false))
                        {
                            moved = false;
                        }
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        moved = false;
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false))
                    {
                        moved = false;
                    }
                }
            Label_0FFA:
                return true;
            Label_104E:
                if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                {
                    moved = false;
                }
                goto Label_117F;
            Label_1068:
                if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(lastRow))
                {
                    moved = false;
                    return true;
                }
                if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                {
                    moved = false;
                }
                goto Label_117F;
            Label_10CB:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(columnIndex, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false))
                    {
                        moved = false;
                    }
                }
            Label_117F:
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_1195:
            return true;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessEndKey(Keys keyData)
        {
            DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
            int lastVisibleColumnIndex = (lastColumn == null) ? -1 : lastColumn.Index;
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
            int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
            if ((lastVisibleColumnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            break;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_05E8;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_034A;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_0193;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_040E;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    default:
                        goto Label_06A7;
                }
                if (this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptAnchorCell.X >= 0))
                        {
                            int x = this.ptCurrentCell.X;
                            int y = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref y, lastRow);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, true, false, false);
                    }
                }
                return true;
            Label_0193:
                if (this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptAnchorCell.X >= 0))
                        {
                            if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None))
                            {
                                this.ClearSelection();
                                this.SelectRowRange(this.ptCurrentCell.Y, lastRow, true);
                            }
                            else
                            {
                                int oldEdgeColumnIndex = this.ptCurrentCell.X;
                                int oldEdgeRowIndex = this.ptCurrentCell.Y;
                                this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, lastRow);
                            }
                        }
                        else if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None))
                        {
                            this.ClearSelection();
                            this.SetSelectedRowCore(lastRow, true);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None))
                        {
                            this.ClearSelection();
                            this.SetSelectedRowCore(lastRow, true);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, true, false, false);
                    }
                }
                return true;
            Label_034A:
                if (this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptCurrentCell.X >= 0))
                        {
                            this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
                        }
                        else
                        {
                            this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, true, false, false);
                    }
                }
                return true;
            Label_040E:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (!this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                    {
                        return true;
                    }
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X >= 0) && this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
                        }
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    }
                    else if (this.MultiSelect && (this.ptCurrentCell.X >= 0))
                    {
                        int num8 = this.ptCurrentCell.X;
                        int num9 = this.ptCurrentCell.Y;
                        if (this.ptAnchorCell.X == -1)
                        {
                            return true;
                        }
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num8, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref num9, lastRow);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, !this.MultiSelect, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                    {
                        return true;
                    }
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X >= 0) && this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, true, false, false);
                }
                return true;
            Label_05E8:
                if (this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptCurrentCell.Y >= 0))
                        {
                            if (this.ptAnchorCell.Y == -1)
                            {
                                return true;
                            }
                            this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
                        }
                        else
                        {
                            this.SetSelectedRowCore(lastRow, true);
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        this.SetSelectedRowCore(lastRow, true);
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, true, false, false);
                    }
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_06A7:
            return true;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessEnterKey(Keys keyData)
        {
            bool moved = false;
            bool flag2 = true;
            bool flag3 = true;
            if ((keyData & Keys.Control) == Keys.None)
            {
                flag3 = false;
                keyData &= ~Keys.Shift;
                flag2 = this.ProcessDownKeyInternal(keyData, out moved);
            }
            if (!moved)
            {
                DataGridViewCell dataGridViewCurrentCell = null;
                if (this.EditMode == DataGridViewEditMode.EditOnEnter)
                {
                    if (this.ptCurrentCell.X != -1)
                    {
                        dataGridViewCurrentCell = this.CurrentCellInternal;
                        DataGridViewDataErrorEventArgs args = this.CommitEdit(ref dataGridViewCurrentCell, DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.WhenChanged, false, false, false, false, false);
                        if ((args != null) && args.ThrowException)
                        {
                            throw args.Exception;
                        }
                    }
                }
                else
                {
                    this.EndEdit(DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.WhenChanged, false, false, false, false, false, true, true, true);
                }
                if (!flag3 || !this.IsCurrentRowDirty)
                {
                    return flag2;
                }
                dataGridViewCurrentCell = null;
                int x = this.ptCurrentCell.X;
                int y = this.ptCurrentCell.Y;
                if (this.IsInnerCellOutOfBounds(x, y))
                {
                    return flag2;
                }
                if (this.OnRowValidating(ref dataGridViewCurrentCell, x, y))
                {
                    return flag2;
                }
                if (this.IsInnerCellOutOfBounds(x, y))
                {
                    return flag2;
                }
                this.OnRowValidated(ref dataGridViewCurrentCell, x, y);
            }
            return flag2;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessEscapeKey(Keys keyData)
        {
            if (!this.IsEscapeKeyEffective)
            {
                return false;
            }
            if ((this.dataGridViewOper[1] || this.dataGridViewOper[2]) || ((this.dataGridViewOper[0x80] || this.dataGridViewOper[0x100]) || this.dataGridViewOper[0x20]))
            {
                this.ResetTrackingState();
            }
            else
            {
                this.CancelEdit(true);
            }
            return true;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessF2Key(Keys keyData)
        {
            if ((((this.ptCurrentCell.X == -1) || this.IsCurrentCellInEditMode) || ((Control.ModifierKeys != Keys.None) || !this.ColumnEditable(this.ptCurrentCell.X))) || (this.IsSharedCellReadOnly(this.CurrentCellInternal, this.ptCurrentCell.Y) || ((this.EditMode != DataGridViewEditMode.EditOnKeystrokeOrF2) && (this.EditMode != DataGridViewEditMode.EditOnF2))))
            {
                return false;
            }
            this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
            this.BeginEditInternal(this.EditMode == DataGridViewEditMode.EditOnF2);
            return true;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessHomeKey(Keys keyData)
        {
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
            int firstVisibleColumnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
            if ((firstVisibleColumnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            break;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_05E8;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_033A;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_0183;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_0414;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    default:
                        goto Label_0637;
                }
                if (this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptAnchorCell.X >= 0))
                        {
                            int x = this.ptCurrentCell.X;
                            int y = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref y, firstRow);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                }
                return true;
            Label_0183:
                if (this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptAnchorCell.X >= 0))
                        {
                            if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None))
                            {
                                this.ClearSelection();
                                this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
                            }
                            else
                            {
                                int oldEdgeColumnIndex = this.ptCurrentCell.X;
                                int oldEdgeRowIndex = this.ptCurrentCell.Y;
                                this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, firstRow);
                            }
                        }
                        else if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None))
                        {
                            this.ClearSelection();
                            this.SetSelectedRowCore(firstRow, true);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None))
                        {
                            this.ClearSelection();
                            this.SetSelectedRowCore(firstRow, true);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                }
                return true;
            Label_033A:
                if (this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptCurrentCell.X >= 0))
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
                        }
                        else
                        {
                            this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                }
                return true;
            Label_0414:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                    {
                        return true;
                    }
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X >= 0) && this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
                        }
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    }
                    else if (this.MultiSelect && (this.ptCurrentCell.X >= 0))
                    {
                        int num7 = this.ptCurrentCell.X;
                        int num8 = this.ptCurrentCell.Y;
                        if (this.ptAnchorCell.X == -1)
                        {
                            return true;
                        }
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num7, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref num8, firstRow);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, !this.MultiSelect, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                    {
                        return true;
                    }
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X >= 0) && this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                return true;
            Label_05E8:
                if (this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0637:
            return true;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessInsertKey(Keys keyData)
        {
            if ((((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) == Keys.Control) || (((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) == (Keys.Control | Keys.Shift)) && ((keyData & Keys.KeyCode) == Keys.C))) && (this.ClipboardCopyMode != DataGridViewClipboardCopyMode.Disable))
            {
                DataObject clipboardContent = this.GetClipboardContent();
                if (clipboardContent != null)
                {
                    Clipboard.SetDataObject(clipboardContent);
                    return true;
                }
            }
            return false;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected override bool ProcessKeyEventArgs(ref Message m)
        {
            if ((m.Msg == 260) || (m.Msg == 0x100))
            {
                if (this.ptCurrentCell.X != -1)
                {
                    DataGridViewCell currentCellInternal = this.CurrentCellInternal;
                    if (((!this.IsCurrentCellInEditMode && this.ColumnEditable(this.ptCurrentCell.X)) && !this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y)) && ((this.EditMode == DataGridViewEditMode.EditOnKeystroke) || (this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2)))
                    {
                        KeyEventArgs e = new KeyEventArgs(((Keys) ((int) ((long) m.WParam))) | Control.ModifierKeys);
                        if ((e.KeyCode != Keys.ProcessKey) || (((int) m.LParam) != 1))
                        {
                            System.Type editType = currentCellInternal.EditType;
                            System.Type type2 = null;
                            if (editType == null)
                            {
                                type2 = currentCellInternal.GetType().GetInterface("System.Windows.Forms.IDataGridViewEditingCell");
                            }
                            if (((editType != null) || (type2 == null)) && currentCellInternal.KeyEntersEditMode(e))
                            {
                                this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                                if (this.BeginEditInternal(((e.KeyCode != Keys.F2) || (Control.ModifierKeys != Keys.None)) || (this.EditMode != DataGridViewEditMode.EditOnKeystrokeOrF2)) && (this.editingControl != null))
                                {
                                    this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
                                    this.dataGridViewState1[0x20] = true;
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            else if (this.dataGridViewState1[0x20] && (((m.Msg == 0x106) || (m.Msg == 0x102)) || (m.Msg == 0x286)))
            {
                this.dataGridViewState1[0x20] = false;
                if (this.editingControl != null)
                {
                    this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
                    return true;
                }
            }
            return base.ProcessKeyEventArgs(ref m);
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected override bool ProcessKeyPreview(ref Message m)
        {
            bool flag;
            KeyEventArgs e = new KeyEventArgs(((Keys) ((int) m.WParam)) | Control.ModifierKeys);
            switch (e.KeyCode)
            {
                case Keys.Escape:
                case Keys.Space:
                case Keys.PageUp:
                case Keys.Next:
                case Keys.End:
                case Keys.Home:
                case Keys.Left:
                case Keys.Up:
                case Keys.Right:
                case Keys.Down:
                case Keys.Delete:
                case Keys.F2:
                case Keys.Tab:
                case Keys.Enter:
                    flag = true;
                    break;

                default:
                    flag = false;
                    break;
            }
            if ((this.editingControl != null) && ((m.Msg == 0x100) || (m.Msg == 260)))
            {
                this.dataGridViewState2[0x2000] = ((IDataGridViewEditingControl) this.editingControl).EditingControlWantsInputKey(e.KeyData, flag);
            }
            if (!this.dataGridViewState2[0x2000] && flag)
            {
                if ((m.Msg != 0x100) && (m.Msg != 260))
                {
                    return true;
                }
                if (this.ProcessDataGridViewKey(e))
                {
                    return true;
                }
                this.dataGridViewState2[0x2000] = true;
            }
            return base.ProcessKeyPreview(ref m);
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessLeftKey(Keys keyData)
        {
            if (this.RightToLeftInternal)
            {
                return this.ProcessRightKeyPrivate(keyData);
            }
            return this.ProcessLeftKeyPrivate(keyData);
        }

        private bool ProcessLeftKeyPrivate(Keys keyData)
        {
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
            int firstVisibleColumnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
            if ((firstVisibleColumnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            int columnIndex = -1;
            if (this.ptCurrentCell.X != -1)
            {
                firstColumn = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                if (firstColumn != null)
                {
                    columnIndex = firstColumn.Index;
                }
            }
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            break;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0802;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0300;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0519;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    default:
                        goto Label_08B0;
                }
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        if (this.MultiSelect)
                        {
                            int x = this.ptCurrentCell.X;
                            int y = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, columnIndex, this.ptAnchorCell.Y, ref y, y);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_0300:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, columnIndex))
                            {
                                this.SelectColumnRange(this.ptAnchorCell.X, columnIndex, true);
                            }
                            else
                            {
                                this.SelectColumnRange(columnIndex, this.ptAnchorCell.X, true);
                            }
                        }
                        else
                        {
                            this.SetSelectedColumnCore(columnIndex, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedColumnCore(columnIndex, true);
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_0519:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        if (this.Columns[this.ptCurrentCell.X].Selected)
                        {
                            this.ClearSelection();
                            if (this.MultiSelect)
                            {
                                if (this.ptAnchorCell.X == -1)
                                {
                                    return true;
                                }
                                if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, columnIndex))
                                {
                                    this.SelectColumnRange(this.ptAnchorCell.X, columnIndex, true);
                                }
                                else
                                {
                                    this.SelectColumnRange(columnIndex, this.ptAnchorCell.X, true);
                                }
                            }
                            this.SetSelectedColumnCore(columnIndex, true);
                        }
                        else if (this.MultiSelect)
                        {
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, columnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, oldEdgeRowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(columnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_0802:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_08B0:
            return true;
        }

        private bool ProcessLeftMost(bool shift, int firstVisibleColumnIndex, int firstVisibleRowIndex)
        {
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if (!shift)
                        {
                            goto Label_01A0;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0086;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            break;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullRowSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_076E;
                        }
                        this.ClearSelection();
                        this.SetSelectedRowCore(firstVisibleRowIndex, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_0760;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if (!shift)
                        {
                            goto Label_03A0;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_02A9;
                        }
                        this.ClearSelection();
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_0298;
                        }
                        return true;

                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if (!shift)
                        {
                            goto Label_0641;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_049E;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_048D;
                        }
                        return true;

                    default:
                        goto Label_07D0;
                }
                this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_0252;
            Label_0086:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    int x = this.ptCurrentCell.X;
                    int y = this.ptCurrentCell.Y;
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.X == -1)) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref y, y);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_0252;
            Label_01A0:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_0252:
                return true;
            Label_0298:
                this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_0446;
            Label_02A9:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.Y == -1)) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
                    this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_0446;
            Label_03A0:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_0446:
                return true;
            Label_048D:
                this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_0723;
            Label_049E:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.X == -1)) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
                    }
                    else
                    {
                        int oldEdgeColumnIndex = this.ptCurrentCell.X;
                        int oldEdgeRowIndex = this.ptCurrentCell.Y;
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, oldEdgeRowIndex);
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                        this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_0723;
            Label_0641:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_0723:
                return true;
            Label_0760:
                this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_07BA;
            Label_076E:
                if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
            Label_07BA:
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_07D0:
            return true;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessNextKey(Keys keyData)
        {
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            if (columnIndex == -1)
            {
                return false;
            }
            int rowIndex = -1;
            int numTotallyDisplayedFrozenRows = 0;
            if (this.ptCurrentCell.Y == -1)
            {
                rowIndex = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                if (rowIndex == -1)
                {
                    return false;
                }
            }
            else
            {
                rowIndex = this.ptCurrentCell.Y;
            }
            if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
            {
                if (this.displayedBandsInfo.FirstDisplayedScrollingRow > 0)
                {
                    int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                    if (!this.ScrollIntoView((this.ptCurrentCell.X == -1) ? columnIndex : this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    numTotallyDisplayedFrozenRows = this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.ptCurrentCell.Y, firstRow) - 1;
                }
                else
                {
                    numTotallyDisplayedFrozenRows = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows;
                }
            }
            numTotallyDisplayedFrozenRows += this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
            int nextRow = rowIndex;
            if (numTotallyDisplayedFrozenRows == 0)
            {
                numTotallyDisplayedFrozenRows = 1;
            }
            while ((numTotallyDisplayedFrozenRows > 0) && (nextRow != -1))
            {
                nextRow = this.Rows.GetNextRow(rowIndex, DataGridViewElementStates.Visible);
                if (nextRow != -1)
                {
                    rowIndex = nextRow;
                    numTotallyDisplayedFrozenRows--;
                }
            }
            this.noSelectionChangeCount++;
            try
            {
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    switch (this.SelectionMode)
                    {
                        case DataGridViewSelectionMode.CellSelect:
                        case DataGridViewSelectionMode.RowHeaderSelect:
                        case DataGridViewSelectionMode.ColumnHeaderSelect:
                            this.SetSelectedCellCore(columnIndex, rowIndex, true);
                            break;

                        case DataGridViewSelectionMode.FullRowSelect:
                            this.SetSelectedRowCore(rowIndex, true);
                            break;

                        case DataGridViewSelectionMode.FullColumnSelect:
                            this.SetSelectedColumnCore(columnIndex, true);
                            break;
                    }
                    this.ScrollIntoView(columnIndex, rowIndex, false);
                    if (!this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                    {
                        this.SetCurrentCellAddressCore(columnIndex, rowIndex, true, false, false);
                    }
                    return true;
                }
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            break;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullRowSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_02CE;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_050A;
                        }
                        return true;

                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_039A;
                        }
                        return true;

                    default:
                        goto Label_0552;
                }
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        int x = this.ptCurrentCell.X;
                        int y = this.ptCurrentCell.Y;
                        if (this.ptAnchorCell.Y == -1)
                        {
                            return true;
                        }
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, rowIndex);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, false, false, false);
                }
                return true;
            Label_02CE:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    this.ClearSelection();
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        if (this.ptAnchorCell.Y == -1)
                        {
                            return true;
                        }
                        if (this.ptAnchorCell.Y < rowIndex)
                        {
                            this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                        }
                        else
                        {
                            this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                        }
                    }
                    else
                    {
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, false, false, false);
                }
                return true;
            Label_039A:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        if (this.ptAnchorCell.Y == -1)
                        {
                            return true;
                        }
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                        {
                            this.ClearSelection();
                            if (this.ptAnchorCell.Y < rowIndex)
                            {
                                this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                            }
                            else
                            {
                                this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                            }
                        }
                        else
                        {
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, oldEdgeColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, rowIndex);
                        }
                    }
                    else if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false);
                }
                return true;
            Label_050A:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0552:
            return true;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessPriorKey(Keys keyData)
        {
            int numTotallyDisplayedFrozenRows;
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            if (columnIndex == -1)
            {
                return false;
            }
            int rowIndex = -1;
            if (this.ptCurrentCell.Y == -1)
            {
                rowIndex = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                if (rowIndex == -1)
                {
                    return false;
                }
            }
            else
            {
                rowIndex = this.ptCurrentCell.Y;
            }
            if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
            {
                numTotallyDisplayedFrozenRows = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows;
            }
            else
            {
                numTotallyDisplayedFrozenRows = this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
            }
            if (numTotallyDisplayedFrozenRows == 0)
            {
                numTotallyDisplayedFrozenRows = 1;
            }
            int previousRow = rowIndex;
            while ((numTotallyDisplayedFrozenRows > 0) && (previousRow != -1))
            {
                previousRow = this.Rows.GetPreviousRow(rowIndex, DataGridViewElementStates.Visible);
                if (previousRow != -1)
                {
                    rowIndex = previousRow;
                }
                numTotallyDisplayedFrozenRows--;
            }
            if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
            {
                int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                if ((firstRow != -1) && !this.ScrollIntoView((this.ptCurrentCell.X == -1) ? columnIndex : this.ptCurrentCell.X, firstRow, true))
                {
                    return true;
                }
                rowIndex = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            }
            this.noSelectionChangeCount++;
            try
            {
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    switch (this.SelectionMode)
                    {
                        case DataGridViewSelectionMode.CellSelect:
                        case DataGridViewSelectionMode.RowHeaderSelect:
                        case DataGridViewSelectionMode.ColumnHeaderSelect:
                            this.SetSelectedCellCore(columnIndex, rowIndex, true);
                            break;

                        case DataGridViewSelectionMode.FullRowSelect:
                            this.SetSelectedRowCore(rowIndex, true);
                            break;

                        case DataGridViewSelectionMode.FullColumnSelect:
                            this.SetSelectedColumnCore(columnIndex, true);
                            break;
                    }
                    this.ScrollIntoView(columnIndex, rowIndex, false);
                    if (!this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                    {
                        this.SetCurrentCellAddressCore(columnIndex, rowIndex, true, false, false);
                    }
                    return true;
                }
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            break;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullRowSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_02BF;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_04FB;
                        }
                        return true;

                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_038B;
                        }
                        return true;

                    default:
                        goto Label_0543;
                }
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        int x = this.ptCurrentCell.X;
                        int y = this.ptCurrentCell.Y;
                        if (this.ptAnchorCell.X == -1)
                        {
                            return true;
                        }
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, rowIndex);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, false, false, false);
                }
                return true;
            Label_02BF:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    this.ClearSelection();
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        if (this.ptAnchorCell.Y == -1)
                        {
                            return true;
                        }
                        if (this.ptAnchorCell.Y < rowIndex)
                        {
                            this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                        }
                        else
                        {
                            this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                        }
                    }
                    else
                    {
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, false, false, false);
                }
                return true;
            Label_038B:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        if (this.ptAnchorCell.Y == -1)
                        {
                            return true;
                        }
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                        {
                            this.ClearSelection();
                            if (this.ptAnchorCell.Y < rowIndex)
                            {
                                this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                            }
                            else
                            {
                                this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                            }
                        }
                        else
                        {
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, oldEdgeColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, rowIndex);
                        }
                    }
                    else if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false);
                }
                return true;
            Label_04FB:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0543:
            return true;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessRightKey(Keys keyData)
        {
            if (this.RightToLeftInternal)
            {
                return this.ProcessLeftKeyPrivate(keyData);
            }
            return this.ProcessRightKeyPrivate(keyData);
        }

        private bool ProcessRightKeyPrivate(Keys keyData)
        {
            DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
            int lastVisibleColumnIndex = (lastColumn == null) ? -1 : lastColumn.Index;
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
            if ((lastVisibleColumnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            int columnIndex = -1;
            if (this.ptCurrentCell.X != -1)
            {
                lastColumn = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                if (lastColumn != null)
                {
                    columnIndex = lastColumn.Index;
                }
            }
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            break;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_080B;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0301;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_051A;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    default:
                        goto Label_08B9;
                }
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, firstRow, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        if (this.MultiSelect)
                        {
                            int x = this.ptCurrentCell.X;
                            int y = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, columnIndex, this.ptAnchorCell.Y, ref y, y);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, firstRow, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_0301:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, columnIndex))
                            {
                                this.SelectColumnRange(this.ptAnchorCell.X, columnIndex, true);
                            }
                            else
                            {
                                this.SelectColumnRange(columnIndex, this.ptAnchorCell.X, true);
                            }
                        }
                        else
                        {
                            this.SetSelectedColumnCore(columnIndex, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedColumnCore(columnIndex, true);
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_051A:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, firstRow, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        if (this.Columns[this.ptCurrentCell.X].Selected)
                        {
                            this.ClearSelection();
                            if (this.MultiSelect)
                            {
                                if (this.ptAnchorCell.X == -1)
                                {
                                    return true;
                                }
                                if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, columnIndex))
                                {
                                    this.SelectColumnRange(this.ptAnchorCell.X, columnIndex, true);
                                }
                                else
                                {
                                    this.SelectColumnRange(columnIndex, this.ptAnchorCell.X, true);
                                }
                            }
                            else
                            {
                                this.SetSelectedColumnCore(columnIndex, true);
                            }
                        }
                        else if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, columnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, oldEdgeRowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, firstRow, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(columnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_080B:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_08B9:
            return true;
        }

        private bool ProcessRightMost(bool shift, int lastVisibleColumnIndex, int firstVisibleRowIndex)
        {
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if (!shift)
                        {
                            goto Label_0169;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0086;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            break;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullRowSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_06CE;
                        }
                        this.ClearSelection();
                        this.SetSelectedRowCore(firstVisibleRowIndex, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_06C0;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if (!shift)
                        {
                            goto Label_0335;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0272;
                        }
                        this.ClearSelection();
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_0261;
                        }
                        return true;

                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if (!shift)
                        {
                            goto Label_05A1;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0433;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_0422;
                        }
                        return true;

                    default:
                        goto Label_0730;
                }
                this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_021B;
            Label_0086:
                if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                {
                    return true;
                }
                if (this.MultiSelect)
                {
                    if (this.ptAnchorCell.X == -1)
                    {
                        return true;
                    }
                    int x = this.ptCurrentCell.X;
                    int y = this.ptCurrentCell.Y;
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref y, y);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_021B;
            Label_0169:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_021B:
                return true;
            Label_0261:
                this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_03DB;
            Label_0272:
                if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                {
                    return true;
                }
                if (this.MultiSelect)
                {
                    if (this.ptAnchorCell.X == -1)
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
                    this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_03DB;
            Label_0335:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_03DB:
                return true;
            Label_0422:
                this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_0683;
            Label_0433:
                if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                {
                    return true;
                }
                if (this.MultiSelect)
                {
                    if (this.ptAnchorCell.X == -1)
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
                    }
                    else
                    {
                        int oldEdgeColumnIndex = this.ptCurrentCell.X;
                        int oldEdgeRowIndex = this.ptCurrentCell.Y;
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, oldEdgeRowIndex);
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                        this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_0683;
            Label_05A1:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_0683:
                return true;
            Label_06C0:
                this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_071A;
            Label_06CE:
                if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
            Label_071A:
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0730:
            return true;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessSpaceKey(Keys keyData)
        {
            if (((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) == Keys.Shift) && (this.ptCurrentCell.X != -1))
            {
                this.noSelectionChangeCount++;
                bool flag = false;
                if (this.selectedBandIndexes.Count > 8)
                {
                    this.inBulkPaintCount++;
                    flag = true;
                }
                try
                {
                    if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
                    {
                        int num = 0;
                        while (num < this.selectedBandIndexes.Count)
                        {
                            if (this.selectedBandIndexes[num] != this.ptCurrentCell.X)
                            {
                                this.SetSelectedColumnCore(this.selectedBandIndexes[num], false);
                            }
                            else
                            {
                                num++;
                            }
                        }
                        this.RemoveIndividuallySelectedCells();
                        if (!this.Columns[this.ptCurrentCell.X].Selected)
                        {
                            this.SetSelectedColumnCore(this.ptCurrentCell.X, true);
                        }
                        return true;
                    }
                    if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
                    {
                        int num2 = 0;
                        while (num2 < this.selectedBandIndexes.Count)
                        {
                            if (this.selectedBandIndexes[num2] != this.ptCurrentCell.Y)
                            {
                                this.SetSelectedRowCore(this.selectedBandIndexes[num2], false);
                            }
                            else
                            {
                                num2++;
                            }
                        }
                        this.RemoveIndividuallySelectedCells();
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
                        {
                            this.SetSelectedRowCore(this.ptCurrentCell.Y, true);
                        }
                        return true;
                    }
                }
                finally
                {
                    this.NoSelectionChangeCount--;
                    if (flag)
                    {
                        this.ExitBulkPaint(-1, -1);
                    }
                }
            }
            return false;
        }

        [UIPermission(SecurityAction.LinkDemand, Window=UIPermissionWindow.AllWindows)]
        protected bool ProcessTabKey(Keys keyData)
        {
            if (this.StandardTab)
            {
                if ((keyData & Keys.Control) == Keys.Control)
                {
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        return ((this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell) && this.TabToPreviousCell());
                    }
                    if (this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell)
                    {
                        return this.TabToNextCell();
                    }
                }
                return false;
            }
            if ((keyData & Keys.Control) == Keys.Control)
            {
                return false;
            }
            if ((keyData & Keys.Shift) == Keys.Shift)
            {
                return ((this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell) && this.TabToPreviousCell());
            }
            return ((this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell) && this.TabToNextCell());
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessUpKey(Keys keyData)
        {
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
            if ((columnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            int rowIndex = -1;
            if (this.ptCurrentCell.Y != -1)
            {
                rowIndex = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
            }
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_02D5;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_021B;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_00FE;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            break;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_06E7;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_0639;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0542;
                        }
                        this.ClearSelection();
                        this.SetSelectedRowCore(firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            goto Label_0531;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0F1C;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0EC5;
                        }
                        this.ClearSelection();
                        this.SetSelectedColumnCore(columnIndex, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            goto Label_0EB4;
                        }
                        return true;

                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0BBC;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_0AD7;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0936;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            goto Label_0925;
                        }
                        return true;

                    default:
                        goto Label_0FCA;
                }
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                goto Label_04CF;
            Label_00FE:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.X == -1)) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    int x = this.ptCurrentCell.X;
                    int y = this.ptCurrentCell.Y;
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, firstRow);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_04CF;
            Label_021B:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_04CF;
            Label_02D5:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            return true;
                        }
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.Y == -1)
                            {
                                return true;
                            }
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, oldEdgeColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, rowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                        }
                        this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
            Label_04CF:
                return true;
            Label_0531:
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                goto Label_08C2;
            Label_0542:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.X == -1)) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
                    this.SetSelectedRowCore(firstRow, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_08C2;
            Label_0639:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_08C2;
            Label_06E7:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            return true;
                        }
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.Y == -1)
                            {
                                return true;
                            }
                            if (this.ptAnchorCell.Y >= rowIndex)
                            {
                                this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                            }
                            else
                            {
                                this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                            }
                        }
                        else
                        {
                            this.SetSelectedRowCore(rowIndex, true);
                        }
                        this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(rowIndex, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
            Label_08C2:
                return true;
            Label_0925:
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                goto Label_0E63;
            Label_0936:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.X == -1)) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                    {
                        this.ClearSelection();
                        this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
                    }
                    else
                    {
                        int num8 = this.ptCurrentCell.X;
                        int num9 = this.ptCurrentCell.Y;
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num8, num8, this.ptAnchorCell.Y, ref num9, firstRow);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                    {
                        this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
                        this.SetSelectedRowCore(firstRow, true);
                    }
                    else
                    {
                        this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                        this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_0E63;
            Label_0AD7:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(firstRow, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_0E63;
            Label_0BBC:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            return true;
                        }
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                        {
                            this.ClearSelection();
                            if (this.MultiSelect)
                            {
                                if (this.ptAnchorCell.Y == -1)
                                {
                                    return true;
                                }
                                if (this.ptAnchorCell.Y >= rowIndex)
                                {
                                    this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                                }
                                else
                                {
                                    this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                                }
                            }
                            this.SetSelectedRowCore(rowIndex, true);
                        }
                        else if (this.MultiSelect)
                        {
                            int num10 = this.ptCurrentCell.X;
                            int num11 = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.Y == -1)
                            {
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num10, num10, this.ptAnchorCell.Y, ref num11, rowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                        }
                        this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
            Label_0E63:
                return true;
            Label_0EB4:
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                goto Label_0FB4;
            Label_0EC5:
                if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                goto Label_0FB4;
            Label_0F1C:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(columnIndex, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
            Label_0FB4:
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0FCA:
            return true;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessZeroKey(Keys keyData)
        {
            if (((this.ptCurrentCell.X != -1) && !this.IsCurrentCellInEditMode) && this.ColumnEditable(this.ptCurrentCell.X))
            {
                DataGridViewCell dataGridViewCell = this.CurrentCellInternal;
                if ((!this.IsSharedCellReadOnly(dataGridViewCell, this.ptCurrentCell.Y) && ((this.EditMode == DataGridViewEditMode.EditOnKeystroke) || (this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2))) && (dataGridViewCell.EditType != null))
                {
                    this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                    if (!this.BeginEditInternal(false))
                    {
                        return false;
                    }
                }
            }
            if (((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) != Keys.Control) || !this.IsCurrentCellInEditMode)
            {
                return false;
            }
            DataGridViewCell currentCellInternal = this.CurrentCellInternal;
            object nullValue = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, false).NullValue;
            if ((nullValue != null) && ((currentCellInternal.FormattedValueType == null) || !currentCellInternal.FormattedValueType.IsAssignableFrom(nullValue.GetType())))
            {
                return false;
            }
            if (this.editingControl != null)
            {
                ((IDataGridViewEditingControl) this.editingControl).EditingControlFormattedValue = nullValue;
                ((IDataGridViewEditingControl) this.editingControl).EditingControlValueChanged = true;
                ((IDataGridViewEditingControl) this.editingControl).PrepareEditingControlForEdit(true);
            }
            else
            {
                IDataGridViewEditingCell cell3 = currentCellInternal as IDataGridViewEditingCell;
                cell3.EditingCellFormattedValue = nullValue;
                cell3.EditingCellValueChanged = true;
                cell3.PrepareEditingCellForEdit(true);
                this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
            }
            this.NotifyCurrentCellDirty(true);
            return true;
        }

        private void PushAllowUserToAddRows()
        {
            if (this.AllowUserToAddRowsInternal)
            {
                if ((this.Columns.Count > 0) && (this.newRowIndex == -1))
                {
                    this.AddNewRow(false);
                }
            }
            else if (this.newRowIndex != -1)
            {
                this.Rows.RemoveAtInternal(this.newRowIndex, false);
            }
        }

        private bool PushFormattedValue(ref DataGridViewCell dataGridViewCurrentCell, object formattedValue, out Exception exception)
        {
            object obj2;
            exception = null;
            DataGridViewCellStyle inheritedEditingCellStyle = this.InheritedEditingCellStyle;
            DataGridViewCellParsingEventArgs args = this.OnCellParsing(this.ptCurrentCell.Y, this.ptCurrentCell.X, formattedValue, dataGridViewCurrentCell.ValueType, inheritedEditingCellStyle);
            if ((args.ParsingApplied && (args.Value != null)) && ((dataGridViewCurrentCell.ValueType != null) && dataGridViewCurrentCell.ValueType.IsAssignableFrom(args.Value.GetType())))
            {
                if (dataGridViewCurrentCell.RowIndex == -1)
                {
                    dataGridViewCurrentCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
                }
                return dataGridViewCurrentCell.SetValueInternal(this.ptCurrentCell.Y, args.Value);
            }
            try
            {
                obj2 = dataGridViewCurrentCell.ParseFormattedValue(formattedValue, args.InheritedCellStyle, null, null);
            }
            catch (Exception exception2)
            {
                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception2))
                {
                    throw;
                }
                exception = exception2;
                return false;
            }
            if (dataGridViewCurrentCell.RowIndex == -1)
            {
                dataGridViewCurrentCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
            }
            return dataGridViewCurrentCell.SetValueInternal(this.ptCurrentCell.Y, obj2);
        }

        private void RealeaseMouse()
        {
            Cursor.ClipInternal = Rectangle.Empty;
            base.CaptureInternal = false;
        }

        private void RecordCellMouseClick(DataGridViewCellMouseEventArgs dgvcme)
        {
            this.lastMouseClickInfo.button = dgvcme.Button;
            this.lastMouseClickInfo.timeStamp = DateTime.Now.Ticks;
            this.lastMouseClickInfo.x = dgvcme.X;
            this.lastMouseClickInfo.y = dgvcme.Y;
            this.lastMouseClickInfo.col = dgvcme.ColumnIndex;
            this.lastMouseClickInfo.row = dgvcme.RowIndex;
        }

        private void RefreshColumns()
        {
            bool visible = base.Visible;
            if (visible)
            {
                base.BeginUpdateInternal();
            }
            this.dataGridViewOper[0x400] = true;
            try
            {
                DataGridViewColumnCollection columns = this.Columns;
                DataGridViewColumn[] boundColumns = null;
                if (this.dataConnection != null)
                {
                    boundColumns = this.dataConnection.GetCollectionOfBoundDataGridViewColumns();
                }
                if (this.AutoGenerateColumns)
                {
                    this.AutoGenerateDataBoundColumns(boundColumns);
                }
                else
                {
                    for (int i = 0; i < columns.Count; i++)
                    {
                        columns[i].IsDataBoundInternal = false;
                        columns[i].BoundColumnIndex = -1;
                        columns[i].BoundColumnConverter = null;
                        if ((this.DataSource != null) && (columns[i].DataPropertyName.Length != 0))
                        {
                            this.MapDataGridViewColumnToDataBoundField(columns[i]);
                        }
                    }
                }
                if (this.DataSource != null)
                {
                    this.dataConnection.ApplySortingInformationFromBackEnd();
                }
            }
            finally
            {
                this.dataGridViewOper[0x400] = false;
                if (visible)
                {
                    base.EndUpdateInternal(false);
                    base.Invalidate(true);
                }
            }
        }

        private void RefreshColumnsAndRows()
        {
            this.Rows.ClearInternal(false);
            this.RefreshColumns();
            this.RefreshRows(true);
        }

        public bool RefreshEdit()
        {
            if ((this.ptCurrentCell.X == -1) || !this.IsCurrentCellInEditMode)
            {
                return true;
            }
            DataGridViewCell currentCellInternal = this.CurrentCellInternal;
            DataGridViewCellStyle dataGridViewCellStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
            if (this.editingControl != null)
            {
                if (!this.InitializeEditingControlValue(ref dataGridViewCellStyle, currentCellInternal))
                {
                    return false;
                }
                if (((IDataGridViewEditingControl) this.editingControl).RepositionEditingControlOnValueChange)
                {
                    this.PositionEditingControl(true, true, false);
                }
                ((IDataGridViewEditingControl) this.editingControl).PrepareEditingControlForEdit(true);
                ((IDataGridViewEditingControl) this.editingControl).EditingControlValueChanged = false;
                this.IsCurrentCellDirtyInternal = false;
                return true;
            }
            if (this.InitializeEditingCellValue(ref dataGridViewCellStyle, ref currentCellInternal))
            {
                IDataGridViewEditingCell cell2 = currentCellInternal as IDataGridViewEditingCell;
                cell2.PrepareEditingCellForEdit(true);
                cell2.EditingCellValueChanged = false;
                this.IsCurrentCellDirtyInternal = false;
                return true;
            }
            return false;
        }

        private void RefreshRows(bool scrollIntoView)
        {
            bool visible = base.Visible;
            if (visible)
            {
                base.BeginUpdateInternal();
            }
            try
            {
                if (this.dataGridViewOper[0x20000])
                {
                    this.dataGridViewState2[0x400000] = true;
                }
                this.Rows.ClearInternal(true);
                if ((this.dataConnection != null) && (this.Columns.Count > 0))
                {
                    IList list = this.dataConnection.List;
                    if ((list != null) && (list.Count > 0))
                    {
                        int count = list.Count;
                        bool doNotChangePositionInTheCurrencyManager = this.dataConnection.DoNotChangePositionInTheCurrencyManager;
                        bool flag3 = !this.layout.dirty && !this.InSortOperation;
                        if (flag3)
                        {
                            this.dataConnection.DoNotChangePositionInTheCurrencyManager = true;
                        }
                        try
                        {
                            this.Rows.AddInternal(this.RowTemplateClone);
                            if (count > 1)
                            {
                                this.Rows.AddCopiesInternal(0, count - 1);
                            }
                        }
                        finally
                        {
                            this.dataConnection.DoNotChangePositionInTheCurrencyManager = doNotChangePositionInTheCurrencyManager;
                        }
                        if (flag3)
                        {
                            this.dataConnection.MatchCurrencyManagerPosition(scrollIntoView, true);
                        }
                    }
                }
            }
            finally
            {
                if (visible)
                {
                    base.EndUpdateInternal(false);
                    base.Invalidate(true);
                }
            }
        }

        private void RemoveIndividuallySelectedCells()
        {
            bool flag = false;
            if (this.individualSelectedCells.Count > 8)
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                while (this.individualSelectedCells.Count > 0)
                {
                    DataGridViewCell headCell = this.individualSelectedCells.HeadCell;
                    this.SetSelectedCellCore(headCell.ColumnIndex, headCell.RowIndex, false);
                }
            }
            finally
            {
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private void RemoveIndividuallySelectedCells(int columnIndexException, int rowIndexException)
        {
            bool flag = false;
            if (this.individualSelectedCells.Count > 8)
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                while (this.individualSelectedCells.Count > 0)
                {
                    DataGridViewCell headCell = this.individualSelectedCells.HeadCell;
                    if ((headCell.ColumnIndex == columnIndexException) && (headCell.RowIndex == rowIndexException))
                    {
                        goto Label_0075;
                    }
                    this.SetSelectedCellCore(headCell.ColumnIndex, headCell.RowIndex, false);
                    continue;
                Label_0055:
                    headCell = this.individualSelectedCells[1];
                    this.SetSelectedCellCore(headCell.ColumnIndex, headCell.RowIndex, false);
                Label_0075:
                    if (this.individualSelectedCells.Count > 1)
                    {
                        goto Label_0055;
                    }
                    return;
                }
            }
            finally
            {
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private void RemoveIndividuallySelectedCellsInColumn(int columnIndex)
        {
            DataGridViewCell cell;
            int num = 0;
            int num2 = 0;
            bool flag = false;
            while (num < this.individualSelectedCells.Count)
            {
                cell = this.individualSelectedCells[num];
                if (cell.ColumnIndex == columnIndex)
                {
                    this.SetSelectedCellCore(cell.ColumnIndex, cell.RowIndex, false);
                    num2++;
                    if (num2 <= 8)
                    {
                        continue;
                    }
                    flag = true;
                    break;
                }
                num++;
            }
            if (flag)
            {
                this.inBulkPaintCount++;
                try
                {
                    while (num < this.individualSelectedCells.Count)
                    {
                        cell = this.individualSelectedCells[num];
                        if (cell.ColumnIndex == columnIndex)
                        {
                            this.SetSelectedCellCore(cell.ColumnIndex, cell.RowIndex, false);
                        }
                        else
                        {
                            num++;
                        }
                    }
                }
                finally
                {
                    this.ExitBulkPaint(columnIndex, -1);
                }
            }
        }

        private void RemoveIndividuallySelectedCellsInRow(int rowIndex)
        {
            int num = 0;
            while (num < this.individualSelectedCells.Count)
            {
                DataGridViewCell cell = this.individualSelectedCells[num];
                if (cell.RowIndex == rowIndex)
                {
                    this.SetSelectedCellCore(cell.ColumnIndex, cell.RowIndex, false);
                }
                else
                {
                    num++;
                }
            }
        }

        private void RemoveIndividualReadOnlyCellsInColumn(int columnIndex)
        {
            int num = 0;
            while (num < this.individualReadOnlyCells.Count)
            {
                DataGridViewCell cell = this.individualReadOnlyCells[num];
                if (cell.ColumnIndex == columnIndex)
                {
                    this.SetReadOnlyCellCore(cell.ColumnIndex, cell.RowIndex, false);
                }
                else
                {
                    num++;
                }
            }
        }

        private void RemoveIndividualReadOnlyCellsInRow(int rowIndex)
        {
            int num = 0;
            while (num < this.individualReadOnlyCells.Count)
            {
                DataGridViewCell cell = this.individualReadOnlyCells[num];
                if (cell.RowIndex == rowIndex)
                {
                    this.SetReadOnlyCellCore(cell.ColumnIndex, rowIndex, false);
                }
                else
                {
                    num++;
                }
            }
        }

        private void ResetBackgroundColor()
        {
            this.BackgroundColor = DefaultBackgroundBrush.Color;
        }

        private void ResetCurrentCell()
        {
            if ((this.ptCurrentCell.X != -1) && !this.SetCurrentCellAddressCore(-1, -1, true, true, false))
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
            }
        }

        private void ResetGridColor()
        {
            this.GridColor = DefaultGridColor;
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override void ResetText()
        {
            base.ResetText();
        }

        private void ResetTrackingState()
        {
            if ((this.horizScrollTimer != null) && this.horizScrollTimer.Enabled)
            {
                this.horizScrollTimer.Enabled = false;
            }
            if ((this.vertScrollTimer != null) && this.vertScrollTimer.Enabled)
            {
                this.vertScrollTimer.Enabled = false;
            }
            this.dataGridViewOper[1] = false;
            this.dataGridViewOper[2] = false;
            this.dataGridViewOper[0x20] = false;
            this.dataGridViewOper[0x80] = false;
            this.dataGridViewOper[0x100] = false;
            this.dataGridViewOper[4] = false;
            this.dataGridViewOper[8] = false;
            this.dataGridViewOper[0x10] = false;
            this.trackColumn = -1;
            this.trackRow = -1;
            this.ptMouseDownCell.X = -2;
            this.ptMouseDownCell.Y = -2;
            if (this.currentRowSplitBar != -1)
            {
                base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
                this.lastRowSplitBar = this.currentRowSplitBar = -1;
            }
            if (this.currentColSplitBar != -1)
            {
                base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
                this.lastColSplitBar = this.currentColSplitBar = -1;
            }
            if (this.lastHeaderShadow != -1)
            {
                this.dataGridViewState2[0x400] = false;
                this.trackColumnEdge = -1;
                this.lastHeaderShadow = -1;
                base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
            }
            this.RealeaseMouse();
        }

        internal void ResetUIState(bool useRowShortcut, bool computeVisibleRows)
        {
            this.PerformLayoutPrivate(useRowShortcut, computeVisibleRows, true, !useRowShortcut);
            if (!useRowShortcut)
            {
                base.Invalidate();
                this.InvalidateScrollBars();
            }
        }

        private void RestoreRowsCachedThickness()
        {
            this.inBulkPaintCount++;
            this.inBulkLayoutCount++;
            try
            {
                for (int i = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); i != -1; i = this.Rows.GetNextRow(i, DataGridViewElementStates.Visible))
                {
                    int num2;
                    int num3;
                    DataGridViewRow row = this.Rows.SharedRow(i);
                    row.GetHeightInfo(i, out num2, out num3);
                    if ((num2 != row.CachedThickness) && !this.OnRowHeightInfoPushed(i, row.CachedThickness, num3))
                    {
                        row.ThicknessInternal = row.CachedThickness;
                    }
                }
            }
            finally
            {
                this.ExitBulkLayout(true);
                this.ExitBulkPaint(-1, -1);
            }
        }

        private bool RowIsResizable(int rowIndex)
        {
            DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
            if ((rowState & DataGridViewElementStates.ResizableSet) == DataGridViewElementStates.ResizableSet)
            {
                return ((rowState & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable);
            }
            return this.AllowUserToResizeRows;
        }

        private bool RowNeedsDisplayedState(int rowIndex, int lastDisplayedFrozenRowIndex, int lastDisplayedScrollingRowIndex)
        {
            DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
            if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
            {
                return false;
            }
            if ((rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
            {
                return (rowIndex <= lastDisplayedFrozenRowIndex);
            }
            return (((this.displayedBandsInfo.FirstDisplayedScrollingRow != -1) && (rowIndex >= this.displayedBandsInfo.FirstDisplayedScrollingRow)) && (rowIndex <= lastDisplayedScrollingRowIndex));
        }

        private void ScrollBar_MouseEnter(object sender, EventArgs e)
        {
            if (this.dataGridViewState2[0x20])
            {
                this.OnMouseEnter(EventArgs.Empty);
            }
            this.UpdateMouseEnteredCell(null, null);
        }

        private void ScrollBar_MouseLeave(object sender, EventArgs e)
        {
            this.UpdateMouseEnteredCell(null, null);
            Point pt = base.PointToClient(Control.MousePosition);
            if (!base.ClientRectangle.Contains(pt))
            {
                this.OnMouseLeave(EventArgs.Empty);
            }
        }

        private bool ScrollColumnIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange)
        {
            if (((this.displayedBandsInfo.FirstDisplayedScrollingCol != -1) && !this.Columns[columnIndex].Frozen) && ((columnIndex != this.displayedBandsInfo.FirstDisplayedScrollingCol) || (this.negOffset > 0)))
            {
                int num;
                if (this.Columns.DisplayInOrder(columnIndex, this.displayedBandsInfo.FirstDisplayedScrollingCol))
                {
                    if ((!committed && (this.ptCurrentCell.X >= 0)) && !this.CommitEdit(DataGridViewDataErrorContexts.Scroll | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, forCurrentCellChange && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)), this.ptCurrentCell.Y != rowIndex))
                    {
                        return false;
                    }
                    num = this.Columns.GetColumnCount(DataGridViewElementStates.Visible, columnIndex, this.displayedBandsInfo.FirstDisplayedScrollingCol);
                    if (this.negOffset > 0)
                    {
                        num++;
                    }
                    this.ScrollColumns(-num);
                }
                else if ((columnIndex == this.displayedBandsInfo.FirstDisplayedScrollingCol) && (this.negOffset > 0))
                {
                    if ((!committed && (this.ptCurrentCell.X >= 0)) && !this.CommitEdit(DataGridViewDataErrorContexts.Scroll | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, forCurrentCellChange && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)), this.ptCurrentCell.Y != rowIndex))
                    {
                        return false;
                    }
                    this.ScrollColumns(-1);
                }
                else if ((this.displayedBandsInfo.LastTotallyDisplayedScrollingCol == -1) || ((this.displayedBandsInfo.LastTotallyDisplayedScrollingCol != columnIndex) && this.Columns.DisplayInOrder(this.displayedBandsInfo.LastTotallyDisplayedScrollingCol, columnIndex)))
                {
                    int num3;
                    if ((!committed && (this.ptCurrentCell.X >= 0)) && !this.CommitEdit(DataGridViewDataErrorContexts.Scroll | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, forCurrentCellChange && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)), this.ptCurrentCell.Y != rowIndex))
                    {
                        return false;
                    }
                    num = 0;
                    int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
                    if (this.RightToLeftInternal)
                    {
                        num3 = this.GetColumnXFromIndex(columnIndex) - this.Columns[columnIndex].Width;
                        while ((num3 < this.layout.Data.X) && this.Columns.DisplayInOrder(firstDisplayedScrollingCol, columnIndex))
                        {
                            num3 += this.Columns[firstDisplayedScrollingCol].Width;
                            if (firstDisplayedScrollingCol == this.displayedBandsInfo.FirstDisplayedScrollingCol)
                            {
                                num3 -= this.negOffset;
                            }
                            num++;
                            if (num3 < this.layout.Data.X)
                            {
                                firstDisplayedScrollingCol = this.Columns.GetNextColumn(this.Columns[firstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
                            }
                        }
                    }
                    else
                    {
                        num3 = this.GetColumnXFromIndex(columnIndex) + this.Columns[columnIndex].Width;
                        while ((num3 > this.layout.Data.Right) && this.Columns.DisplayInOrder(firstDisplayedScrollingCol, columnIndex))
                        {
                            num3 -= this.Columns[firstDisplayedScrollingCol].Width;
                            if (firstDisplayedScrollingCol == this.displayedBandsInfo.FirstDisplayedScrollingCol)
                            {
                                num3 += this.negOffset;
                            }
                            num++;
                            if (num3 > this.layout.Data.Right)
                            {
                                firstDisplayedScrollingCol = this.Columns.GetNextColumn(this.Columns[firstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
                            }
                        }
                    }
                    if (num != 0)
                    {
                        this.ScrollColumns(num);
                    }
                }
            }
            return true;
        }

        private void ScrollColumns(int columns)
        {
            DataGridViewColumn column = null;
            DataGridViewColumn column2;
            int num = 0;
            if (columns > 0)
            {
                if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol >= 0)
                {
                    column2 = this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol];
                    while ((num < columns) && (column2 != null))
                    {
                        column2 = this.Columns.GetNextColumn(column2, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        num++;
                    }
                    if (column2 == null)
                    {
                        return;
                    }
                }
                column2 = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                num = 0;
                while ((num < columns) && (column2 != null))
                {
                    column2 = this.Columns.GetNextColumn(column2, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    num++;
                }
                column = column2;
            }
            if (columns < 0)
            {
                column2 = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                if (this.negOffset > 0)
                {
                    num++;
                }
                while ((num < -columns) && (column2 != null))
                {
                    column2 = this.Columns.GetPreviousColumn(column2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                    num++;
                }
                column = column2;
                if (column == null)
                {
                    if (this.negOffset == 0)
                    {
                        this.FlushDisplayedChanged();
                        return;
                    }
                    column = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                }
            }
            int num2 = 0;
            for (DataGridViewColumn column3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); column3 != column; column3 = this.Columns.GetNextColumn(column3, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
            {
                num2 += column3.Thickness;
            }
            this.HorizontalOffset = num2;
        }

        private bool ScrollIntoView(int columnIndex, int rowIndex, bool forCurrentCellChange)
        {
            bool committed = false;
            if ((this.ptCurrentCell.X >= 0) && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)))
            {
                if (!this.CommitEditForOperation(columnIndex, rowIndex, forCurrentCellChange))
                {
                    return false;
                }
                committed = true;
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    return false;
                }
            }
            if (!this.ScrollColumnIntoView(columnIndex, rowIndex, committed, forCurrentCellChange))
            {
                return false;
            }
            if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
            {
                return false;
            }
            return this.ScrollRowIntoView(columnIndex, rowIndex, committed, forCurrentCellChange);
        }

        private void ScrollRectangles(System.Windows.Forms.NativeMethods.RECT[] rects, int change)
        {
            if (rects != null)
            {
                if (Control.MouseButtons != MouseButtons.None)
                {
                    this.dataGridViewState1[0x800] = true;
                }
                for (int i = 0; i < rects.Length; i++)
                {
                    System.Windows.Forms.NativeMethods.RECT rectScrollRegion = rects[i];
                    System.Windows.Forms.SafeNativeMethods.ScrollWindow(new HandleRef(this, base.Handle), change, 0, ref rectScrollRegion, ref rectScrollRegion);
                }
            }
        }

        private bool ScrollRowIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange)
        {
            if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
            {
                int num;
                if (rowIndex < this.displayedBandsInfo.FirstDisplayedScrollingRow)
                {
                    if ((!committed && (this.ptCurrentCell.X >= 0)) && !this.CommitEdit(DataGridViewDataErrorContexts.Scroll | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, forCurrentCellChange && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)), this.ptCurrentCell.Y != rowIndex))
                    {
                        return false;
                    }
                    num = this.Rows.GetRowCount(DataGridViewElementStates.Visible, rowIndex, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                    this.ScrollRowsByCount(-num, (num > 1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
                }
                else if ((this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0) && (rowIndex > this.displayedBandsInfo.FirstDisplayedScrollingRow))
                {
                    num = 0;
                    int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                    int num3 = this.GetRowYFromIndex(rowIndex) + this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
                    while ((num3 > this.layout.Data.Bottom) && (rowIndex > firstDisplayedScrollingRow))
                    {
                        num3 -= this.Rows.SharedRow(firstDisplayedScrollingRow).GetHeight(firstDisplayedScrollingRow);
                        num++;
                        if (num3 > this.layout.Data.Bottom)
                        {
                            firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible);
                        }
                    }
                    if (num != 0)
                    {
                        if ((!committed && (this.ptCurrentCell.X >= 0)) && !this.CommitEdit(DataGridViewDataErrorContexts.Scroll | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, forCurrentCellChange && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)), this.ptCurrentCell.Y != rowIndex))
                        {
                            return false;
                        }
                        this.ScrollRowsByCount(num, (num > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
                    }
                }
            }
            return true;
        }

        private void ScrollRows(int rowCount, int deltaY, ScrollEventType scrollEventType)
        {
            bool flag = false;
            this.verticalOffset -= deltaY;
            if (this.vertScrollBar.Enabled)
            {
                this.vertScrollBar.Value = this.verticalOffset;
            }
            this.ClearRegionCache();
            int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
            Rectangle data = this.layout.Data;
            if (this.layout.RowHeadersVisible)
            {
                data = Rectangle.Union(data, this.layout.RowHeaders);
                if (this.SingleHorizontalBorderAdded)
                {
                    data.Y++;
                    data.Height--;
                    flag = true;
                }
            }
            else if (this.SingleVerticalBorderAdded)
            {
                data.X--;
                data.Width++;
            }
            data.Y += rowsHeight;
            data.Height -= rowsHeight;
            if ((this.editingControl != null) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None))
            {
                this.PositionEditingControl(true, false, false);
            }
            if (Control.MouseButtons != MouseButtons.None)
            {
                this.dataGridViewState1[0x800] = true;
            }
            this.UpdateMouseEnteredCell(null, null);
            System.Windows.Forms.NativeMethods.RECT rectScrollRegion = System.Windows.Forms.NativeMethods.RECT.FromXYWH(data.X, data.Y, data.Width, data.Height);
            System.Windows.Forms.SafeNativeMethods.ScrollWindow(new HandleRef(this, base.Handle), 0, deltaY, ref rectScrollRegion, ref rectScrollRegion);
            if (flag)
            {
                data.X = this.layout.Inside.X;
                data.Y = this.layout.Inside.Y;
                data.Width = this.layout.RowHeaders.Width;
                data.Height = 1;
                base.Invalidate(data);
            }
            if (!this.dataGridViewState2[0x4000])
            {
                int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                int newValue = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                this.OnScroll(scrollEventType, newValue - rowCount, newValue, ScrollOrientation.VerticalScroll);
            }
        }

        private void ScrollRowsByCount(int rows, ScrollEventType scrollEventType)
        {
            int deltaY = 0;
            int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            if (rows > 0)
            {
                for (int i = rows; i > 0; i--)
                {
                    deltaY -= this.Rows.SharedRow(firstDisplayedScrollingRow).GetHeight(firstDisplayedScrollingRow);
                    firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible);
                }
                if (firstDisplayedScrollingRow != -1)
                {
                    int fromRowIndex = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                    this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
                    this.ComputeVisibleRows();
                    if (this.displayedBandsInfo.FirstDisplayedScrollingRow > fromRowIndex)
                    {
                        deltaY = -this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, fromRowIndex, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                        rows = this.Rows.GetRowCount(DataGridViewElementStates.Visible, fromRowIndex, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                    }
                    else
                    {
                        rows = 0;
                    }
                }
            }
            else
            {
                for (int j = rows; j < 0; j++)
                {
                    firstDisplayedScrollingRow = this.Rows.GetPreviousRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                    if (firstDisplayedScrollingRow != -1)
                    {
                        deltaY += this.Rows.SharedRow(firstDisplayedScrollingRow).GetHeight(firstDisplayedScrollingRow);
                    }
                }
                if (firstDisplayedScrollingRow != -1)
                {
                    this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
                    this.ComputeVisibleRows();
                }
            }
            if ((firstDisplayedScrollingRow != -1) && (rows != 0))
            {
                this.ScrollRows(rows, deltaY, scrollEventType);
            }
            this.FlushDisplayedChanged();
        }

        private void ScrollRowsByHeight(int height)
        {
            int num;
            int num2 = 0;
            int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            int rowIndex = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            if (height > 0)
            {
                for (num = this.Rows.SharedRow(rowIndex).GetHeight(rowIndex); num <= height; num += this.Rows.SharedRow(rowIndex).GetHeight(rowIndex))
                {
                    rowIndex = this.Rows.GetNextRow(rowIndex, DataGridViewElementStates.Visible);
                    if (rowIndex == -1)
                    {
                        throw new InvalidOperationException();
                    }
                }
            }
            else
            {
                rowIndex = this.Rows.GetPreviousRow(rowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                num = -this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
                while (num >= height)
                {
                    int num5 = this.Rows.GetPreviousRow(rowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
                    if (num5 == -1)
                    {
                        break;
                    }
                    num -= this.Rows.SharedRow(num5).GetHeight(num5);
                    if (num >= height)
                    {
                        rowIndex = num5;
                    }
                }
            }
            this.displayedBandsInfo.FirstDisplayedScrollingRow = rowIndex;
            this.ComputeVisibleRows();
            ScrollEventType endScroll = ScrollEventType.EndScroll;
            int rowCount = 0;
            if (this.displayedBandsInfo.FirstDisplayedScrollingRow > firstDisplayedScrollingRow)
            {
                num2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                endScroll = (rowCount > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement;
            }
            else if (this.displayedBandsInfo.FirstDisplayedScrollingRow < firstDisplayedScrollingRow)
            {
                num2 = -this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, firstDisplayedScrollingRow);
                rowCount = -this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, firstDisplayedScrollingRow);
                endScroll = (rowCount < -1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement;
            }
            if (num2 != 0)
            {
                this.ScrollRows(rowCount, -num2, endScroll);
            }
            this.FlushDisplayedChanged();
        }

        public void SelectAll()
        {
            DataGridViewColumn column;
            if (!this.MultiSelect)
            {
                return;
            }
            this.inBulkPaintCount++;
            this.noDimensionChangeCount++;
            this.noSelectionChangeCount++;
            try
            {
                int count;
                int num2;
                int num3;
                int num5;
                int num6;
                int num7;
                int num8;
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                        count = this.Columns.Count;
                        num2 = 0;
                        num3 = this.Rows.Count;
                        goto Label_009D;

                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        num5 = 0;
                        num6 = this.Rows.Count;
                        goto Label_00DA;

                    case DataGridViewSelectionMode.FullColumnSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        num7 = 0;
                        num8 = this.Columns.Count;
                        goto Label_0117;

                    default:
                        goto Label_0144;
                }
            Label_0077:
                DataGridViewRow row1 = this.Rows[num2];
                for (int i = 0; i < count; i++)
                {
                    this.SetSelectedCellCore(i, num2, true);
                }
                num2++;
            Label_009D:
                if (num2 < num3)
                {
                    goto Label_0077;
                }
                goto Label_0144;
            Label_00B5:
                if ((this.Rows.GetRowState(num5) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
                {
                    this.SetSelectedRowCore(num5, true);
                }
                num5++;
            Label_00DA:
                if (num5 < num6)
                {
                    goto Label_00B5;
                }
                goto Label_0144;
            Label_00F4:
                if (!this.Columns[num7].Selected)
                {
                    this.SetSelectedColumnCore(num7, true);
                }
                num7++;
            Label_0117:
                if (num7 < num8)
                {
                    goto Label_00F4;
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
                this.noSelectionChangeCount--;
                this.ExitBulkPaint(-1, -1);
            }
        Label_0144:
            column = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
            if ((column != null) && (firstRow != -1))
            {
                this.ptAnchorCell.X = column.Index;
                this.ptAnchorCell.Y = firstRow;
            }
            else
            {
                this.ptAnchorCell.X = -1;
                this.ptAnchorCell.Y = -1;
            }
            if (this.noSelectionChangeCount == 0)
            {
                this.FlushSelectionChanged();
            }
        }

        private void SelectCellRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select)
        {
            bool flag = false;
            if ((rowIndexTo - rowIndexFrom) > 8)
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                if (select)
                {
                    int columnIndex = columnIndexFrom;
                    do
                    {
                        for (int i = rowIndexFrom; i <= rowIndexTo; i++)
                        {
                            this.SetSelectedCellCore(columnIndex, i, true);
                        }
                        if (columnIndex != columnIndexTo)
                        {
                            columnIndex = this.Columns.GetNextColumn(this.Columns[columnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
                        }
                    }
                    while (columnIndex != columnIndexTo);
                    if (columnIndexFrom != columnIndexTo)
                    {
                        for (int j = rowIndexFrom; j <= rowIndexTo; j++)
                        {
                            this.SetSelectedCellCore(columnIndex, j, true);
                        }
                    }
                }
                else
                {
                    int index = columnIndexTo;
                    do
                    {
                        for (int k = rowIndexTo; k >= rowIndexFrom; k--)
                        {
                            this.SetSelectedCellCore(index, k, false);
                        }
                        if (index != columnIndexFrom)
                        {
                            index = this.Columns.GetPreviousColumn(this.Columns[index], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
                        }
                    }
                    while (index != columnIndexFrom);
                    if (columnIndexFrom != columnIndexTo)
                    {
                        for (int m = rowIndexTo; m >= rowIndexFrom; m--)
                        {
                            this.SetSelectedCellCore(index, m, false);
                        }
                    }
                }
            }
            finally
            {
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private void SelectCellUnorderedRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select)
        {
            int num;
            int num2;
            int num3;
            int num4;
            if (this.Columns.DisplayInOrder(columnIndexFrom, columnIndexTo))
            {
                num = columnIndexFrom;
                num3 = columnIndexTo;
            }
            else
            {
                num = columnIndexTo;
                num3 = columnIndexFrom;
            }
            if (rowIndexFrom < rowIndexTo)
            {
                num2 = rowIndexFrom;
                num4 = rowIndexTo;
            }
            else
            {
                num2 = rowIndexTo;
                num4 = rowIndexFrom;
            }
            this.SelectCellRange(num, num2, num3, num4, select);
        }

        private void SelectColumnRange(int columnIndexFrom, int columnIndexTo, bool select)
        {
            int integer = columnIndexFrom;
            do
            {
                if (select)
                {
                    if (!this.selectedBandIndexes.Contains(integer))
                    {
                        this.SetSelectedColumnCore(integer, true);
                    }
                }
                else
                {
                    this.SetSelectedColumnCore(integer, false);
                }
                if (integer != columnIndexTo)
                {
                    integer = this.Columns.GetNextColumn(this.Columns[integer], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
                }
            }
            while (integer != columnIndexTo);
            if (columnIndexFrom != columnIndexTo)
            {
                if (select)
                {
                    if (!this.selectedBandIndexes.Contains(columnIndexTo))
                    {
                        this.SetSelectedColumnCore(columnIndexTo, true);
                    }
                }
                else
                {
                    this.SetSelectedColumnCore(columnIndexTo, false);
                }
            }
        }

        private DataGridViewCell SelectedCell(int index)
        {
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.CellSelect:
                    if (index >= this.individualSelectedCells.Count)
                    {
                        break;
                    }
                    return this.individualSelectedCells[index];

                case DataGridViewSelectionMode.FullRowSelect:
                case DataGridViewSelectionMode.RowHeaderSelect:
                {
                    int num4 = 0;
                    int count = this.selectedBandIndexes.Count;
                    while ((num4 < count) && (index >= 0))
                    {
                        if (index >= this.Columns.Count)
                        {
                            index -= this.Columns.Count;
                            num4++;
                        }
                        else
                        {
                            int rowIndex = this.selectedBandIndexes[num4];
                            return this.Rows.SharedRow(rowIndex).Cells[index];
                        }
                    }
                    if ((this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect) && (index < this.individualSelectedCells.Count))
                    {
                        return this.individualSelectedCells[index];
                    }
                    break;
                }
                case DataGridViewSelectionMode.FullColumnSelect:
                case DataGridViewSelectionMode.ColumnHeaderSelect:
                {
                    int num = 0;
                    int num2 = this.selectedBandIndexes.Count;
                    while ((num < num2) && (index >= 0))
                    {
                        if (index >= this.Rows.Count)
                        {
                            index -= this.Rows.Count;
                            num++;
                        }
                        else
                        {
                            int num3 = this.selectedBandIndexes[num];
                            return this.Rows.SharedRow(index).Cells[num3];
                        }
                    }
                    if ((this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect) || (index >= this.individualSelectedCells.Count))
                    {
                        break;
                    }
                    return this.individualSelectedCells[index];
                }
            }
            return null;
        }

        private void SelectRowRange(int rowIndexFrom, int rowIndexTo, bool select)
        {
            bool flag = false;
            if ((rowIndexTo - rowIndexFrom) > 8)
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                if (select)
                {
                    for (int i = rowIndexFrom; i <= rowIndexTo; i++)
                    {
                        if ((this.Rows.GetRowState(i) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
                        {
                            this.SetSelectedRowCore(i, true);
                        }
                    }
                }
                else
                {
                    for (int j = rowIndexTo; j >= rowIndexFrom; j--)
                    {
                        this.SetSelectedRowCore(j, false);
                    }
                }
            }
            finally
            {
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private bool SetAndSelectCurrentCellAddress(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick, bool clearSelection, bool forceCurrentCellSelection)
        {
            if (!this.SetCurrentCellAddressCore(columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick))
            {
                return false;
            }
            if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
            {
                return false;
            }
            if (clearSelection)
            {
                this.ClearSelection(columnIndex, rowIndex, true);
            }
            else if (forceCurrentCellSelection)
            {
                this.SetSelectedElementCore(columnIndex, rowIndex, true);
            }
            else
            {
                if (this.MultiSelect && ((this.individualSelectedCells.Count + this.selectedBandIndexes.Count) > 1))
                {
                    return true;
                }
                if (this.individualSelectedCells.Count == 1)
                {
                    DataGridViewCell headCell = this.individualSelectedCells.HeadCell;
                    if ((headCell.ColumnIndex != columnIndex) || (headCell.RowIndex != rowIndex))
                    {
                        return true;
                    }
                }
                else if (this.selectedBandIndexes.Count == 1)
                {
                    switch (this.SelectionMode)
                    {
                        case DataGridViewSelectionMode.FullRowSelect:
                        case DataGridViewSelectionMode.RowHeaderSelect:
                            if (this.selectedBandIndexes.HeadInt == rowIndex)
                            {
                                break;
                            }
                            return true;

                        case DataGridViewSelectionMode.FullColumnSelect:
                        case DataGridViewSelectionMode.ColumnHeaderSelect:
                            if (this.selectedBandIndexes.HeadInt == columnIndex)
                            {
                                break;
                            }
                            return true;
                    }
                }
                this.SetSelectedElementCore(columnIndex, rowIndex, true);
            }
            return true;
        }

        protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
        {
            if (((specified & BoundsSpecified.Width) == BoundsSpecified.Width) && (width > 0x7fffff))
            {
                object[] args = new object[] { 0x7fffff.ToString(CultureInfo.CurrentCulture) };
                throw new ArgumentOutOfRangeException("width", width, System.Windows.Forms.SR.GetString("DataGridView_SizeTooLarge", args));
            }
            if (((specified & BoundsSpecified.Height) == BoundsSpecified.Height) && (height > 0x7fffff))
            {
                object[] objArray2 = new object[] { 0x7fffff.ToString(CultureInfo.CurrentCulture) };
                throw new ArgumentOutOfRangeException("height", height, System.Windows.Forms.SR.GetString("DataGridView_SizeTooLarge", objArray2));
            }
            base.SetBoundsCore(x, y, width, height, specified);
        }

        private void SetColumnHeadersHeightInternal(int columnHeadersHeight, bool invalidInAdjustFillingColumns)
        {
            using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ColumnHeadersHeight))
            {
                this.columnHeadersHeight = columnHeadersHeight;
                if (this.AutoSize)
                {
                    this.InvalidateInside();
                }
                else if (this.layout.ColumnHeadersVisible)
                {
                    this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, true);
                    this.InvalidateInside();
                }
                this.OnColumnHeadersHeightChanged(EventArgs.Empty);
            }
        }

        protected virtual bool SetCurrentCellAddressCore(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
        {
            if (((columnIndex < -1) || ((columnIndex >= 0) && (rowIndex == -1))) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if (((rowIndex < -1) || ((columnIndex == -1) && (rowIndex >= 0))) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if (((columnIndex > -1) && (rowIndex > -1)) && !this.IsSharedCellVisible(this.Rows.SharedRow(rowIndex).Cells[columnIndex], rowIndex))
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
            }
            if (this.dataGridViewOper[0x20000] && ((this.dataConnection == null) || !this.dataConnection.ProcessingListChangedEvent))
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_SetCurrentCellAddressCoreNotReentrant"));
            }
            this.dataGridViewOper[0x20000] = true;
            try
            {
                DataGridViewCell dataGridViewCell = null;
                if (columnIndex > -1)
                {
                    if ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex))
                    {
                        DataGridViewCell currentCellInternal;
                        if (this.dataGridViewState1[0x400000])
                        {
                            this.dataGridViewState1[0x400000] = false;
                            this.ptCurrentCell.X = columnIndex;
                            this.ptCurrentCell.Y = rowIndex;
                            if (this.cachedEditingControl != null)
                            {
                                this.editingControl = this.cachedEditingControl;
                                ((IDataGridViewEditingControl) this.editingControl).EditingControlRowIndex = rowIndex;
                                this.cachedEditingControl = null;
                                this.PositionEditingControl(true, true, false);
                            }
                            this.OnCurrentCellChanged(EventArgs.Empty);
                            return true;
                        }
                        int x = this.ptCurrentCell.X;
                        int y = this.ptCurrentCell.Y;
                        if (x >= 0)
                        {
                            currentCellInternal = this.CurrentCellInternal;
                            if (!this.EndEdit(DataGridViewDataErrorContexts.CurrentCellChange | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, validateCurrentCell ? DataGridViewValidateCellInternal.Always : DataGridViewValidateCellInternal.Never, validateCurrentCell, false, validateCurrentCell && (y != rowIndex), false, false, this.EditMode != DataGridViewEditMode.EditOnEnter, false, false))
                            {
                                return false;
                            }
                            if (!this.IsInnerCellOutOfBounds(x, y))
                            {
                                currentCellInternal = this.Rows.SharedRow(y).Cells[x];
                                if (currentCellInternal.LeaveUnsharesRowInternal(y, throughMouseClick))
                                {
                                    currentCellInternal = this.Rows[y].Cells[x];
                                }
                                currentCellInternal.OnLeaveInternal(y, throughMouseClick);
                            }
                            if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                            {
                                return false;
                            }
                            if ((y != rowIndex) && validateCurrentCell)
                            {
                                if (this.OnRowValidating(ref dataGridViewCell, x, y))
                                {
                                    if (!this.IsInnerCellOutOfBounds(x, y))
                                    {
                                        this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
                                        if (!this.IsInnerCellOutOfBounds(x, y))
                                        {
                                            currentCellInternal.OnEnterInternal(y, throughMouseClick);
                                            this.OnCellEnter(ref dataGridViewCell, x, y);
                                        }
                                    }
                                    return false;
                                }
                                if (!this.IsInnerCellOutOfBounds(x, y))
                                {
                                    this.OnRowValidated(ref dataGridViewCell, x, y);
                                }
                            }
                        }
                        this.dataGridViewState2[0x400000] = false;
                        try
                        {
                            if ((y != rowIndex) && !this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                            {
                                this.OnRowEnter(ref dataGridViewCell, columnIndex, rowIndex, true, false);
                            }
                            if (this.dataGridViewState2[0x400000] && (rowIndex >= this.Rows.Count))
                            {
                                return false;
                            }
                            if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                            {
                                return false;
                            }
                            this.ptCurrentCell.X = columnIndex;
                            this.ptCurrentCell.Y = rowIndex;
                            if (this.editingControl != null)
                            {
                                ((IDataGridViewEditingControl) this.editingControl).EditingControlRowIndex = rowIndex;
                            }
                            this.OnCurrentCellChanged(EventArgs.Empty);
                            if (setAnchorCellAddress)
                            {
                                this.ptAnchorCell.X = columnIndex;
                                this.ptAnchorCell.Y = rowIndex;
                            }
                            currentCellInternal = this.CurrentCellInternal;
                            if (currentCellInternal.EnterUnsharesRowInternal(rowIndex, throughMouseClick))
                            {
                                currentCellInternal = this.Rows[rowIndex].Cells[columnIndex];
                            }
                            currentCellInternal.OnEnterInternal(rowIndex, throughMouseClick);
                            this.OnCellEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                            if (x >= 0)
                            {
                                if ((x < this.Columns.Count) && (y < this.Rows.Count))
                                {
                                    this.InvalidateCellPrivate(x, y);
                                }
                                if (((y != this.ptCurrentCell.Y) && this.RowHeadersVisible) && (y < this.Rows.Count))
                                {
                                    this.InvalidateCellPrivate(-1, y);
                                }
                            }
                            this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                            if (this.RowHeadersVisible && (y != this.ptCurrentCell.Y))
                            {
                                this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
                            }
                            if (((this.Focused && (this.ptCurrentCell.X != -1)) && (!this.IsCurrentCellInEditMode && !this.dataGridViewState2[0x400000])) && ((this.EditMode == DataGridViewEditMode.EditOnEnter) || ((this.EditMode != DataGridViewEditMode.EditProgrammatically) && (currentCellInternal.EditType == null))))
                            {
                                this.BeginEditInternal(true);
                            }
                        }
                        finally
                        {
                            this.dataGridViewState2[0x400000] = false;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            this.AccessibilityNotifyCurrentCellChanged(new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y));
                        }
                    }
                    else
                    {
                        if (setAnchorCellAddress)
                        {
                            this.ptAnchorCell.X = columnIndex;
                            this.ptAnchorCell.Y = rowIndex;
                        }
                        if ((this.Focused && !this.IsCurrentCellInEditMode) && ((this.EditMode == DataGridViewEditMode.EditOnEnter) || ((this.EditMode != DataGridViewEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null))))
                        {
                            this.BeginEditInternal(true);
                        }
                        else
                        {
                            this.CorrectFocus(false);
                        }
                    }
                }
                else
                {
                    int num3 = this.ptCurrentCell.X;
                    int num4 = this.ptCurrentCell.Y;
                    if (((num3 >= 0) && !this.dataGridViewState1[0x400000]) && !this.dataGridViewOper[0x100000])
                    {
                        DataGridViewCell cell3 = this.CurrentCellInternal;
                        if (!this.EndEdit(DataGridViewDataErrorContexts.CurrentCellChange | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, validateCurrentCell ? DataGridViewValidateCellInternal.Always : DataGridViewValidateCellInternal.Never, validateCurrentCell, false, validateCurrentCell, false, false, this.EditMode != DataGridViewEditMode.EditOnEnter, false, false))
                        {
                            return false;
                        }
                        if (!this.IsInnerCellOutOfBounds(num3, num4))
                        {
                            cell3 = this.Rows.SharedRow(num4).Cells[num3];
                            if (cell3.LeaveUnsharesRowInternal(num4, throughMouseClick))
                            {
                                cell3 = this.Rows[num4].Cells[num3];
                            }
                            cell3.OnLeaveInternal(num4, throughMouseClick);
                        }
                        if (validateCurrentCell)
                        {
                            if (this.OnRowValidating(ref dataGridViewCell, num3, num4))
                            {
                                if (!this.IsInnerCellOutOfBounds(num3, num4))
                                {
                                    this.OnRowEnter(ref dataGridViewCell, num3, num4, true, true);
                                    if (!this.IsInnerCellOutOfBounds(num3, num4))
                                    {
                                        cell3.OnEnterInternal(num4, throughMouseClick);
                                        this.OnCellEnter(ref dataGridViewCell, num3, num4);
                                    }
                                }
                                return false;
                            }
                            if (!this.IsInnerCellOutOfBounds(num3, num4))
                            {
                                this.OnRowValidated(ref dataGridViewCell, num3, num4);
                            }
                        }
                    }
                    if (this.ptCurrentCell.X != -1)
                    {
                        this.ptCurrentCell.X = -1;
                        this.ptCurrentCell.Y = -1;
                        this.OnCurrentCellChanged(EventArgs.Empty);
                    }
                    if (setAnchorCellAddress)
                    {
                        this.ptAnchorCell.X = -1;
                        this.ptAnchorCell.Y = -1;
                    }
                    if (this.dataGridViewState1[0x400000])
                    {
                        if (this.editingControl != null)
                        {
                            if (this.dataGridViewState2[0x20000000])
                            {
                                this.dataGridViewState2[0x20000000] = false;
                            }
                            else
                            {
                                this.cachedEditingControl = this.editingControl;
                            }
                            this.editingControl = null;
                        }
                    }
                    else if ((num3 >= 0) && !this.dataGridViewOper[0x100000])
                    {
                        if ((num3 < this.Columns.Count) && (num4 < this.Rows.Count))
                        {
                            this.InvalidateCellPrivate(num3, num4);
                        }
                        if (this.RowHeadersVisible && (num4 < this.Rows.Count))
                        {
                            this.InvalidateCellPrivate(-1, num4);
                        }
                    }
                }
            }
            finally
            {
                this.dataGridViewOper[0x20000] = false;
            }
            return true;
        }

        internal void SetCurrentCellAddressCoreInternal(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
        {
            this.SetCurrentCellAddressCore(columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick);
        }

        internal void SetReadOnlyCellCore(int columnIndex, int rowIndex, bool readOnly)
        {
            DataGridViewRow row = this.Rows.SharedRow(rowIndex);
            DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
            if (this.IsSharedCellReadOnly(row.Cells[columnIndex], rowIndex) != readOnly)
            {
                DataGridViewCell dataGridViewCell = this.Rows[rowIndex].Cells[columnIndex];
                if (readOnly)
                {
                    if (((rowState & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None) && !this.Columns[columnIndex].ReadOnly)
                    {
                        this.individualReadOnlyCells.Add(dataGridViewCell);
                        dataGridViewCell.ReadOnlyInternal = true;
                    }
                }
                else
                {
                    if (this.individualReadOnlyCells.Contains(dataGridViewCell))
                    {
                        this.individualReadOnlyCells.Remove(dataGridViewCell);
                    }
                    else
                    {
                        DataGridViewCell cell2;
                        if (this.Columns[columnIndex].ReadOnly)
                        {
                            this.Columns[columnIndex].ReadOnlyInternal = false;
                            for (int i = 0; i < rowIndex; i++)
                            {
                                cell2 = this.Rows[i].Cells[columnIndex];
                                cell2.ReadOnlyInternal = true;
                                this.individualReadOnlyCells.Add(cell2);
                            }
                            for (int j = rowIndex + 1; j < this.Rows.Count; j++)
                            {
                                cell2 = this.Rows[j].Cells[columnIndex];
                                cell2.ReadOnlyInternal = true;
                                this.individualReadOnlyCells.Add(cell2);
                            }
                        }
                        if ((rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None)
                        {
                            this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, false);
                            for (int k = 0; k < columnIndex; k++)
                            {
                                cell2 = this.Rows[rowIndex].Cells[k];
                                cell2.ReadOnlyInternal = true;
                                this.individualReadOnlyCells.Add(cell2);
                            }
                            for (int m = columnIndex + 1; m < this.Columns.Count; m++)
                            {
                                cell2 = this.Rows[rowIndex].Cells[m];
                                cell2.ReadOnlyInternal = true;
                                this.individualReadOnlyCells.Add(cell2);
                            }
                        }
                    }
                    if (dataGridViewCell.ReadOnly)
                    {
                        dataGridViewCell.ReadOnlyInternal = false;
                    }
                }
            }
        }

        internal void SetReadOnlyColumnCore(int columnIndex, bool readOnly)
        {
            if (this.Columns[columnIndex].ReadOnly != readOnly)
            {
                if (readOnly)
                {
                    try
                    {
                        this.dataGridViewOper[0x4000] = true;
                        this.RemoveIndividualReadOnlyCellsInColumn(columnIndex);
                    }
                    finally
                    {
                        this.dataGridViewOper[0x4000] = false;
                    }
                    this.Columns[columnIndex].ReadOnlyInternal = true;
                }
                else
                {
                    this.Columns[columnIndex].ReadOnlyInternal = false;
                }
            }
            else if (!readOnly)
            {
                this.RemoveIndividualReadOnlyCellsInColumn(columnIndex);
            }
        }

        internal void SetReadOnlyRowCore(int rowIndex, bool readOnly)
        {
            if (((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None) != readOnly)
            {
                if (readOnly)
                {
                    try
                    {
                        this.dataGridViewOper[0x4000] = true;
                        this.RemoveIndividualReadOnlyCellsInRow(rowIndex);
                    }
                    finally
                    {
                        this.dataGridViewOper[0x4000] = false;
                    }
                    this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, true);
                }
                else
                {
                    this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, false);
                }
            }
            else if (!readOnly)
            {
                this.RemoveIndividualReadOnlyCellsInRow(rowIndex);
            }
        }

        protected virtual void SetSelectedCellCore(int columnIndex, int rowIndex, bool selected)
        {
            if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            DataGridViewRow row = this.Rows.SharedRow(rowIndex);
            DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
            if (this.IsSharedCellSelected(row.Cells[columnIndex], rowIndex) == selected)
            {
                return;
            }
            DataGridViewCell dataGridViewCell = this.Rows[rowIndex].Cells[columnIndex];
            if (selected)
            {
                if (((rowState & DataGridViewElementStates.Selected) == DataGridViewElementStates.None) && !this.Columns[columnIndex].Selected)
                {
                    this.individualSelectedCells.Add(dataGridViewCell);
                    dataGridViewCell.SelectedInternal = true;
                    return;
                }
                return;
            }
            if ((dataGridViewCell.State & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
            {
                this.individualSelectedCells.Remove(dataGridViewCell);
            }
            else
            {
                DataGridViewCell cell2;
                bool flag = false;
                if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
                {
                    if (this.Rows.Count > 8)
                    {
                        this.inBulkPaintCount++;
                        flag = true;
                    }
                    try
                    {
                        this.selectedBandIndexes.Remove(columnIndex);
                        this.Columns[columnIndex].SelectedInternal = false;
                        for (int i = 0; i < rowIndex; i++)
                        {
                            cell2 = this.Rows[i].Cells[columnIndex];
                            cell2.SelectedInternal = true;
                            this.individualSelectedCells.Add(cell2);
                        }
                        for (int j = rowIndex + 1; j < this.Rows.Count; j++)
                        {
                            cell2 = this.Rows[j].Cells[columnIndex];
                            cell2.SelectedInternal = true;
                            this.individualSelectedCells.Add(cell2);
                        }
                        goto Label_0295;
                    }
                    finally
                    {
                        if (flag)
                        {
                            this.ExitBulkPaint(columnIndex, -1);
                        }
                    }
                }
                if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
                {
                    if (this.Columns.Count > 8)
                    {
                        this.inBulkPaintCount++;
                        flag = true;
                    }
                    try
                    {
                        this.selectedBandIndexes.Remove(rowIndex);
                        this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, false);
                        for (int k = 0; k < columnIndex; k++)
                        {
                            cell2 = this.Rows[rowIndex].Cells[k];
                            cell2.SelectedInternal = true;
                            this.individualSelectedCells.Add(cell2);
                        }
                        for (int m = columnIndex + 1; m < this.Columns.Count; m++)
                        {
                            cell2 = this.Rows[rowIndex].Cells[m];
                            cell2.SelectedInternal = true;
                            this.individualSelectedCells.Add(cell2);
                        }
                    }
                    finally
                    {
                        if (flag)
                        {
                            this.ExitBulkPaint(-1, rowIndex);
                        }
                    }
                }
            }
        Label_0295:
            if (dataGridViewCell.Selected)
            {
                dataGridViewCell.SelectedInternal = false;
            }
        }

        internal void SetSelectedCellCoreInternal(int columnIndex, int rowIndex, bool selected)
        {
            if (selected && !this.MultiSelect)
            {
                if (!this.Columns[columnIndex].Visible || ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None))
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
                }
                if (!this.ScrollIntoView(columnIndex, rowIndex, true))
                {
                    return;
                }
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    return;
                }
            }
            this.noSelectionChangeCount++;
            try
            {
                int num;
                int num2;
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                        if (selected && !this.MultiSelect)
                        {
                            this.RemoveIndividuallySelectedCells();
                        }
                        this.SetSelectedCellCore(columnIndex, rowIndex, selected);
                        goto Label_02C5;

                    case DataGridViewSelectionMode.FullRowSelect:
                        if (!selected)
                        {
                            goto Label_021A;
                        }
                        if (this.MultiSelect)
                        {
                            goto Label_01F9;
                        }
                        num2 = 0;
                        goto Label_01EB;

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if (!selected)
                        {
                            goto Label_010C;
                        }
                        if (this.MultiSelect)
                        {
                            goto Label_00EE;
                        }
                        num = 0;
                        goto Label_00E0;

                    case DataGridViewSelectionMode.RowHeaderSelect:
                        if (!selected)
                        {
                            goto Label_0276;
                        }
                        if (!this.MultiSelect)
                        {
                            if (this.selectedBandIndexes.Count <= 0)
                            {
                                goto Label_0265;
                            }
                            this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        goto Label_026B;

                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if (!selected)
                        {
                            goto Label_016B;
                        }
                        if (!this.MultiSelect)
                        {
                            if (this.selectedBandIndexes.Count <= 0)
                            {
                                goto Label_0157;
                            }
                            this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        goto Label_015D;

                    default:
                        goto Label_02C5;
                }
            Label_00B8:
                if (this.selectedBandIndexes[num] != columnIndex)
                {
                    this.SetSelectedColumnCore(this.selectedBandIndexes[num], false);
                }
                else
                {
                    num++;
                }
            Label_00E0:
                if (num < this.selectedBandIndexes.Count)
                {
                    goto Label_00B8;
                }
            Label_00EE:
                if (!this.selectedBandIndexes.Contains(columnIndex))
                {
                    this.SetSelectedColumnCore(columnIndex, true);
                }
                goto Label_02C5;
            Label_010C:
                if (this.selectedBandIndexes.Contains(columnIndex))
                {
                    this.SetSelectedColumnCore(columnIndex, false);
                }
                goto Label_02C5;
            Label_0157:
                this.RemoveIndividuallySelectedCells();
            Label_015D:
                this.SetSelectedCellCore(columnIndex, rowIndex, true);
                goto Label_02C5;
            Label_016B:
                if (!this.MultiSelect)
                {
                    if (this.selectedBandIndexes.Count > 0)
                    {
                        this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
                    }
                    else
                    {
                        this.SetSelectedCellCore(columnIndex, rowIndex, false);
                    }
                }
                else
                {
                    this.SetSelectedCellCore(columnIndex, rowIndex, false);
                }
                goto Label_02C5;
            Label_01C3:
                if (this.selectedBandIndexes[num2] != rowIndex)
                {
                    this.SetSelectedRowCore(this.selectedBandIndexes[num2], false);
                }
                else
                {
                    num2++;
                }
            Label_01EB:
                if (num2 < this.selectedBandIndexes.Count)
                {
                    goto Label_01C3;
                }
            Label_01F9:
                if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
                {
                    this.SetSelectedRowCore(rowIndex, true);
                }
                goto Label_02C5;
            Label_021A:
                if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
                {
                    this.SetSelectedRowCore(rowIndex, false);
                }
                goto Label_02C5;
            Label_0265:
                this.RemoveIndividuallySelectedCells();
            Label_026B:
                this.SetSelectedCellCore(columnIndex, rowIndex, true);
                goto Label_02C5;
            Label_0276:
                if (!this.MultiSelect)
                {
                    if (this.selectedBandIndexes.Count > 0)
                    {
                        this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
                    }
                    else
                    {
                        this.SetSelectedCellCore(columnIndex, rowIndex, false);
                    }
                }
                else
                {
                    this.SetSelectedCellCore(columnIndex, rowIndex, false);
                }
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_02C5:
            if (selected && !this.MultiSelect)
            {
                this.SetCurrentCellAddressCore(columnIndex, rowIndex, true, false, true);
            }
        }

        protected virtual void SetSelectedColumnCore(int columnIndex, bool selected)
        {
            if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            this.noSelectionChangeCount++;
            try
            {
                if (this.Columns[columnIndex].Selected != selected)
                {
                    if (selected)
                    {
                        this.RemoveIndividuallySelectedCellsInColumn(columnIndex);
                        this.Columns[columnIndex].SelectedInternal = true;
                        this.selectedBandIndexes.Add(columnIndex);
                    }
                    else
                    {
                        this.Columns[columnIndex].SelectedInternal = false;
                        this.selectedBandIndexes.Remove(columnIndex);
                    }
                }
                else if (!selected)
                {
                    this.RemoveIndividuallySelectedCellsInColumn(columnIndex);
                }
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        internal void SetSelectedColumnCoreInternal(int columnIndex, bool selected)
        {
            this.noSelectionChangeCount++;
            try
            {
                if (!this.MultiSelect && (this.selectedBandIndexes.Count > 0))
                {
                    int headInt = this.selectedBandIndexes.HeadInt;
                    if (headInt != columnIndex)
                    {
                        this.SetSelectedColumnCore(headInt, false);
                    }
                }
                this.SetSelectedColumnCore(columnIndex, selected);
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        private void SetSelectedElementCore(int columnIndex, int rowIndex, bool selected)
        {
            switch (this.SelectionMode)
            {
                case DataGridViewSelectionMode.CellSelect:
                    this.SetSelectedCellCore(columnIndex, rowIndex, selected);
                    return;

                case DataGridViewSelectionMode.FullRowSelect:
                    this.SetSelectedRowCore(rowIndex, selected);
                    return;

                case DataGridViewSelectionMode.FullColumnSelect:
                    this.SetSelectedColumnCore(columnIndex, selected);
                    return;

                case DataGridViewSelectionMode.RowHeaderSelect:
                    if (columnIndex != -1)
                    {
                        this.SetSelectedCellCore(columnIndex, rowIndex, selected);
                        return;
                    }
                    this.SetSelectedRowCore(rowIndex, selected);
                    return;

                case DataGridViewSelectionMode.ColumnHeaderSelect:
                    if (rowIndex != -1)
                    {
                        this.SetSelectedCellCore(columnIndex, rowIndex, selected);
                        return;
                    }
                    this.SetSelectedColumnCore(columnIndex, selected);
                    return;
            }
        }

        protected virtual void SetSelectedRowCore(int rowIndex, bool selected)
        {
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            this.noSelectionChangeCount++;
            try
            {
                if (((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None) != selected)
                {
                    if (selected)
                    {
                        this.RemoveIndividuallySelectedCellsInRow(rowIndex);
                        this.selectedBandIndexes.Add(rowIndex);
                        this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, true);
                    }
                    else
                    {
                        this.selectedBandIndexes.Remove(rowIndex);
                        this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, false);
                    }
                }
                else if (!selected)
                {
                    this.RemoveIndividuallySelectedCellsInRow(rowIndex);
                }
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        internal void SetSelectedRowCoreInternal(int rowIndex, bool selected)
        {
            this.noSelectionChangeCount++;
            try
            {
                if (!this.MultiSelect && (this.selectedBandIndexes.Count > 0))
                {
                    int headInt = this.selectedBandIndexes.HeadInt;
                    if (headInt != rowIndex)
                    {
                        this.SetSelectedRowCore(headInt, false);
                    }
                }
                this.SetSelectedRowCore(rowIndex, selected);
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        private bool ShouldSerializeAlternatingRowsDefaultCellStyle()
        {
            DataGridViewCellStyle style = new DataGridViewCellStyle();
            return !this.AlternatingRowsDefaultCellStyle.Equals(style);
        }

        private bool ShouldSerializeBackgroundColor() => 
            !this.BackgroundColor.Equals(DefaultBackgroundBrush.Color);

        private bool ShouldSerializeColumnHeadersDefaultCellStyle() => 
            !this.ColumnHeadersDefaultCellStyle.Equals(this.DefaultColumnHeadersDefaultCellStyle);

        private bool ShouldSerializeColumnHeadersHeight() => 
            ((this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize) && (0x17 != this.ColumnHeadersHeight));

        private bool ShouldSerializeDefaultCellStyle() => 
            !this.DefaultCellStyle.Equals(this.DefaultDefaultCellStyle);

        private bool ShouldSerializeGridColor() => 
            !this.GridPen.Color.Equals(DefaultGridColor);

        private bool ShouldSerializeRowHeadersDefaultCellStyle() => 
            !this.RowHeadersDefaultCellStyle.Equals(this.DefaultRowHeadersDefaultCellStyle);

        private bool ShouldSerializeRowHeadersWidth()
        {
            if ((this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing))
            {
                return false;
            }
            return (0x29 != this.RowHeadersWidth);
        }

        private bool ShouldSerializeRowsDefaultCellStyle()
        {
            DataGridViewCellStyle style = new DataGridViewCellStyle();
            return !this.RowsDefaultCellStyle.Equals(style);
        }

        private bool ShouldSerializeRowTemplate() => 
            (this.rowTemplate != null);

        public virtual void Sort(IComparer comparer)
        {
            if (comparer == null)
            {
                throw new ArgumentNullException("comparer");
            }
            if (this.VirtualMode)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_OperationDisabledInVirtualMode"));
            }
            if (this.DataSource != null)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotUseAComparerToSortDataGridViewWhenDataBound"));
            }
            this.SortInternal(comparer, null, ListSortDirection.Ascending);
        }

        public virtual void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
        {
            if (dataGridViewColumn == null)
            {
                throw new ArgumentNullException("dataGridViewColumn");
            }
            if ((direction != ListSortDirection.Ascending) && (direction != ListSortDirection.Descending))
            {
                throw new InvalidEnumArgumentException("direction", (int) direction, typeof(ListSortDirection));
            }
            if (dataGridViewColumn.DataGridView != this)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
            }
            if (this.VirtualMode && !dataGridViewColumn.IsDataBound)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_OperationDisabledInVirtualMode"));
            }
            this.SortInternal(null, dataGridViewColumn, direction);
        }

        private void SortDataBoundDataGridView_PerformCheck(DataGridViewColumn dataGridViewColumn)
        {
            IBindingList list = this.dataConnection.List as IBindingList;
            if (list == null)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotSortDataBoundDataGridViewBoundToNonIBindingList"));
            }
            if (!list.SupportsSorting)
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_IBindingListNeedsToSupportSorting"));
            }
            if (!dataGridViewColumn.IsDataBound)
            {
                throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_ColumnNeedsToBeDataBoundWhenSortingDataBoundDataGridView"), "dataGridViewColumn");
            }
        }

        private void SortInternal(IComparer comparer, DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
        {
            this.ptCurrentCellCache.X = this.ptCurrentCell.X;
            this.ptCurrentCellCache.Y = this.ptCurrentCell.Y;
            this.dataGridViewOper[0x40] = true;
            try
            {
                if (!this.SetCurrentCellAddressCore(-1, -1, true, true, false))
                {
                    return;
                }
                int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                if ((rowCount > 0) && (this.DataSource == null))
                {
                    int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    this.Rows.SetRowState(firstRow, DataGridViewElementStates.Frozen, false);
                }
                if (((this.sortedColumn != null) && (this.sortedColumn.SortMode == DataGridViewColumnSortMode.Automatic)) && this.sortedColumn.HasHeaderCell)
                {
                    this.sortedColumn.HeaderCell.SortGlyphDirection = System.Windows.Forms.SortOrder.None;
                }
                if (comparer == null)
                {
                    this.sortedColumn = dataGridViewColumn;
                    this.sortOrder = (direction == ListSortDirection.Ascending) ? System.Windows.Forms.SortOrder.Ascending : System.Windows.Forms.SortOrder.Descending;
                    if ((dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic) && dataGridViewColumn.HasHeaderCell)
                    {
                        dataGridViewColumn.HeaderCell.SortGlyphDirection = this.sortOrder;
                    }
                }
                else
                {
                    this.sortedColumn = null;
                    this.sortOrder = System.Windows.Forms.SortOrder.None;
                }
                if (this.DataSource == null)
                {
                    this.UpdateRowsDisplayedState(false);
                    this.Rows.Sort(comparer, direction == ListSortDirection.Ascending);
                }
                else
                {
                    this.SortDataBoundDataGridView_PerformCheck(dataGridViewColumn);
                    this.dataConnection.Sort(dataGridViewColumn, direction);
                }
                if ((this.ptCurrentCellCache.X != -1) && !this.IsInnerCellOutOfBounds(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y))
                {
                    this.SetAndSelectCurrentCellAddress(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y, true, false, false, false, false);
                }
                if (rowCount > 0)
                {
                    int indexStart = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                    while (rowCount > 1)
                    {
                        indexStart = this.Rows.GetNextRow(indexStart, DataGridViewElementStates.Visible);
                        rowCount--;
                    }
                    this.Rows.SetRowState(indexStart, DataGridViewElementStates.Frozen, true);
                }
                this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
            }
            finally
            {
                this.dataGridViewOper[0x40] = false;
            }
            this.OnGlobalAutoSize();
            if (this.DataSource == null)
            {
                this.displayedBandsInfo.EnsureDirtyState();
            }
            this.ResetUIState(false, false);
            this.OnSorted(EventArgs.Empty);
        }

        internal void SwapSortedRows(int rowIndex1, int rowIndex2)
        {
            if (rowIndex1 != rowIndex2)
            {
                if (rowIndex1 == this.ptCurrentCellCache.Y)
                {
                    this.ptCurrentCellCache.Y = rowIndex2;
                }
                else if (rowIndex2 == this.ptCurrentCellCache.Y)
                {
                    this.ptCurrentCellCache.Y = rowIndex1;
                }
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                    {
                        int index = this.selectedBandIndexes.IndexOf(rowIndex1);
                        int num2 = this.selectedBandIndexes.IndexOf(rowIndex2);
                        if ((index == -1) || (num2 != -1))
                        {
                            if ((index == -1) && (num2 != -1))
                            {
                                this.selectedBandIndexes[num2] = rowIndex1;
                            }
                        }
                        else
                        {
                            this.selectedBandIndexes[index] = rowIndex2;
                        }
                        if (this.selectedBandSnapshotIndexes != null)
                        {
                            index = this.selectedBandSnapshotIndexes.IndexOf(rowIndex1);
                            num2 = this.selectedBandSnapshotIndexes.IndexOf(rowIndex2);
                            if ((index != -1) && (num2 == -1))
                            {
                                this.selectedBandSnapshotIndexes[index] = rowIndex2;
                                return;
                            }
                            if ((index == -1) && (num2 != -1))
                            {
                                this.selectedBandSnapshotIndexes[num2] = rowIndex1;
                            }
                        }
                        return;
                    }
                    case DataGridViewSelectionMode.FullColumnSelect:
                        return;
                }
            }
        }

        void ISupportInitialize.BeginInit()
        {
            if (this.dataGridViewState2[0x80000])
            {
                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewBeginInit"));
            }
            this.dataGridViewState2[0x80000] = true;
        }

        void ISupportInitialize.EndInit()
        {
            this.dataGridViewState2[0x80000] = false;
            foreach (DataGridViewColumn column in this.Columns)
            {
                if ((column.Frozen && column.Visible) && (column.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
                {
                    column.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
                }
            }
            DataGridViewSelectionMode selectionMode = this.SelectionMode;
            switch (selectionMode)
            {
                case DataGridViewSelectionMode.FullColumnSelect:
                case DataGridViewSelectionMode.ColumnHeaderSelect:
                    foreach (DataGridViewColumn column2 in this.Columns)
                    {
                        if (column2.SortMode == DataGridViewColumnSortMode.Automatic)
                        {
                            this.SelectionMode = DataGridViewSelectionMode.RowHeaderSelect;
                            throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_SelectionModeReset", new object[] { System.Windows.Forms.SR.GetString("DataGridView_SelectionModeAndSortModeClash", new object[] { selectionMode.ToString() }), DataGridViewSelectionMode.RowHeaderSelect.ToString() }));
                        }
                    }
                    break;
            }
        }

        private bool TabToNextCell()
        {
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
            if ((columnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            int index = -1;
            if (this.ptCurrentCell.X != -1)
            {
                firstColumn = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                if (firstColumn != null)
                {
                    index = firstColumn.Index;
                }
            }
            int nextRow = -1;
            if (this.ptCurrentCell.Y != -1)
            {
                nextRow = this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
            }
            int rowIndex = -1;
            int num6 = -1;
            this.noSelectionChangeCount++;
            try
            {
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                }
                else
                {
                    if (index == -1)
                    {
                        rowIndex = (nextRow == -1) ? firstRow : nextRow;
                        num6 = columnIndex;
                    }
                    else
                    {
                        rowIndex = this.ptCurrentCell.Y;
                        num6 = index;
                    }
                    if (!this.ScrollIntoView(num6, rowIndex, true))
                    {
                        return true;
                    }
                }
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0157;
                        }
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            break;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullRowSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_01F9;
                        }
                        if (!this.IsRowOutOfBounds(firstRow))
                        {
                            goto Label_01EF;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_01AD;
                        }
                        if (!this.IsColumnOutOfBounds(columnIndex))
                        {
                            goto Label_01A0;
                        }
                        return true;

                    default:
                        goto Label_023F;
                }
                this.SetSelectedCellCore(columnIndex, firstRow, true);
                goto Label_023F;
            Label_0157:
                if (this.IsInnerCellOutOfBounds(num6, rowIndex))
                {
                    return true;
                }
                this.ClearSelection();
                this.SetSelectedCellCore(num6, rowIndex, true);
                goto Label_023F;
            Label_01A0:
                this.SetSelectedColumnCore(columnIndex, true);
                goto Label_023F;
            Label_01AD:
                if (this.IsColumnOutOfBounds(num6))
                {
                    return true;
                }
                this.ClearSelection();
                this.SetSelectedColumnCore(num6, true);
                goto Label_023F;
            Label_01EF:
                this.SetSelectedRowCore(firstRow, true);
                goto Label_023F;
            Label_01F9:
                if ((rowIndex != this.ptCurrentCell.Y) || this.MultiSelect)
                {
                    if (this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(rowIndex, true);
                }
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_023F:
            if (this.ptCurrentCell.X == -1)
            {
                this.ScrollIntoView(columnIndex, firstRow, false);
                if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
            }
            else
            {
                if (this.IsInnerCellOutOfBounds(num6, rowIndex))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(num6, rowIndex, true, false, false);
            }
            return true;
        }

        private bool TabToPreviousCell()
        {
            DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
            if ((columnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            int num3 = -1;
            if (this.ptCurrentCell.X != -1)
            {
                firstColumn = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                if (firstColumn != null)
                {
                    num3 = firstColumn.Index;
                }
            }
            int previousRow = -1;
            if (this.ptCurrentCell.Y != -1)
            {
                previousRow = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
            }
            int index = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
            int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
            int rowIndex = -1;
            int num8 = -1;
            this.noSelectionChangeCount++;
            try
            {
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                }
                else
                {
                    if (num3 == -1)
                    {
                        rowIndex = (previousRow == -1) ? lastRow : previousRow;
                        num8 = index;
                    }
                    else
                    {
                        rowIndex = this.ptCurrentCell.Y;
                        num8 = num3;
                    }
                    if (!this.ScrollIntoView(num8, rowIndex, true))
                    {
                        return true;
                    }
                }
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_017F;
                        }
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            break;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullRowSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0221;
                        }
                        if (!this.IsRowOutOfBounds(firstRow))
                        {
                            goto Label_0217;
                        }
                        return true;

                    case DataGridViewSelectionMode.FullColumnSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_01D5;
                        }
                        if (!this.IsColumnOutOfBounds(columnIndex))
                        {
                            goto Label_01C8;
                        }
                        return true;

                    default:
                        goto Label_0267;
                }
                this.SetSelectedCellCore(columnIndex, firstRow, true);
                goto Label_0267;
            Label_017F:
                if (this.IsInnerCellOutOfBounds(num8, rowIndex))
                {
                    return true;
                }
                this.ClearSelection();
                this.SetSelectedCellCore(num8, rowIndex, true);
                goto Label_0267;
            Label_01C8:
                this.SetSelectedColumnCore(columnIndex, true);
                goto Label_0267;
            Label_01D5:
                if (this.IsColumnOutOfBounds(num8))
                {
                    return true;
                }
                this.ClearSelection();
                this.SetSelectedColumnCore(num8, true);
                goto Label_0267;
            Label_0217:
                this.SetSelectedRowCore(firstRow, true);
                goto Label_0267;
            Label_0221:
                if ((rowIndex != this.ptCurrentCell.Y) || this.MultiSelect)
                {
                    if (this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(rowIndex, true);
                }
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0267:
            if (this.ptCurrentCell.X == -1)
            {
                this.ScrollIntoView(columnIndex, firstRow, false);
                if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
            }
            else
            {
                if (this.IsInnerCellOutOfBounds(num8, rowIndex))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(num8, rowIndex, true, false, false);
            }
            return true;
        }

        private void UnwireEditingControlEvents()
        {
            this.editingPanel.Click -= new EventHandler(this.EditingControls_Click);
            this.editingPanel.DoubleClick -= new EventHandler(this.EditingControls_DoubleClick);
            this.editingPanel.MouseClick -= new MouseEventHandler(this.EditingControls_MouseClick);
            this.editingPanel.MouseDoubleClick -= new MouseEventHandler(this.EditingControls_MouseDoubleClick);
            this.editingPanel.MouseDown -= new MouseEventHandler(this.EditingControls_MouseDown);
            this.editingPanel.MouseEnter -= new EventHandler(this.EditingControls_MouseEnter);
            this.editingPanel.MouseLeave -= new EventHandler(this.EditingControls_MouseLeave);
            this.editingPanel.MouseMove -= new MouseEventHandler(this.EditingControls_MouseMove);
            this.editingPanel.MouseUp -= new MouseEventHandler(this.EditingControls_MouseUp);
            this.editingControl.Click -= new EventHandler(this.EditingControls_Click);
            this.editingControl.DoubleClick -= new EventHandler(this.EditingControls_DoubleClick);
            this.editingControl.MouseClick -= new MouseEventHandler(this.EditingControls_MouseClick);
            this.editingControl.MouseDoubleClick -= new MouseEventHandler(this.EditingControls_MouseDoubleClick);
            this.editingControl.MouseDown -= new MouseEventHandler(this.EditingControls_MouseDown);
            this.editingControl.MouseEnter -= new EventHandler(this.EditingControls_MouseEnter);
            this.editingControl.MouseLeave -= new EventHandler(this.EditingControls_MouseLeave);
            this.editingControl.MouseMove -= new MouseEventHandler(this.EditingControls_MouseMove);
            this.editingControl.MouseUp -= new MouseEventHandler(this.EditingControls_MouseUp);
        }

        private void UnwireScrollBarsEvents()
        {
            if (this.horizScrollBar != null)
            {
                this.horizScrollBar.MouseEnter -= new EventHandler(this.ScrollBar_MouseEnter);
                this.horizScrollBar.MouseLeave -= new EventHandler(this.ScrollBar_MouseLeave);
            }
            if (this.vertScrollBar != null)
            {
                this.vertScrollBar.MouseEnter -= new EventHandler(this.ScrollBar_MouseEnter);
                this.vertScrollBar.MouseLeave -= new EventHandler(this.ScrollBar_MouseLeave);
            }
        }

        public void UpdateCellErrorText(int columnIndex, int rowIndex)
        {
            if ((columnIndex < -1) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if ((rowIndex < -1) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if (base.IsHandleCreated)
            {
                this.InvalidateCellPrivate(columnIndex, rowIndex);
            }
        }

        public void UpdateCellValue(int columnIndex, int rowIndex)
        {
            if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if (base.IsHandleCreated)
            {
                this.OnCellCommonChange(columnIndex, rowIndex);
            }
        }

        private void UpdateColumnsDisplayedState(bool displayed)
        {
            DataGridViewColumn firstColumn;
            int numDisplayedFrozenCols = this.displayedBandsInfo.NumDisplayedFrozenCols;
            if (numDisplayedFrozenCols > 0)
            {
                firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                while (numDisplayedFrozenCols > 0)
                {
                    if (firstColumn.Displayed != displayed)
                    {
                        firstColumn.DisplayedInternal = displayed;
                    }
                    firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen, DataGridViewElementStates.None);
                    numDisplayedFrozenCols--;
                }
            }
            int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
            if (firstDisplayedScrollingCol != -1)
            {
                int numDisplayedScrollingCols = this.displayedBandsInfo.NumDisplayedScrollingCols;
                firstColumn = this.Columns[firstDisplayedScrollingCol];
                while (numDisplayedScrollingCols > 0)
                {
                    if (firstColumn.Displayed != displayed)
                    {
                        firstColumn.DisplayedInternal = displayed;
                    }
                    firstColumn = this.Columns.GetNextColumn(firstColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    numDisplayedScrollingCols--;
                }
            }
        }

        private void UpdateMouseEnteredCell(HitTestInfo hti, MouseEventArgs e)
        {
            HitTestInfo info;
            Point point = base.PointToClient(Control.MousePosition);
            if (hti != null)
            {
                info = hti;
            }
            else
            {
                info = this.HitTest(point.X, point.Y);
            }
            if (((info.Type != DataGridViewHitTestType.None) && (info.Type != DataGridViewHitTestType.HorizontalScrollBar)) && (info.Type != DataGridViewHitTestType.VerticalScrollBar))
            {
                if ((this.ptMouseEnteredCell.X != info.col) || (this.ptMouseEnteredCell.Y != info.row))
                {
                    DataGridViewCellEventArgs args;
                    if (((this.ptMouseEnteredCell.X >= -1) && (this.ptMouseEnteredCell.X < this.Columns.Count)) && ((this.ptMouseEnteredCell.Y >= -1) && (this.ptMouseEnteredCell.Y < this.Rows.Count)))
                    {
                        args = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
                        this.OnCellMouseLeave(args);
                    }
                    args = new DataGridViewCellEventArgs(info.col, info.row);
                    this.OnCellMouseEnter(args);
                }
                if (e != null)
                {
                    int localX = e.X - info.ColumnX;
                    if (this.RightToLeftInternal)
                    {
                        localX += (info.col == -1) ? this.RowHeadersWidth : this.Columns[info.col].Thickness;
                    }
                    DataGridViewCellMouseEventArgs args2 = new DataGridViewCellMouseEventArgs(info.col, info.row, localX, e.Y - info.RowY, e);
                    this.OnCellMouseMove(args2);
                }
            }
            else if (this.ptMouseEnteredCell.X != -2)
            {
                if (((this.ptMouseEnteredCell.X >= -1) && (this.ptMouseEnteredCell.X < this.Columns.Count)) && ((this.ptMouseEnteredCell.Y >= -1) && (this.ptMouseEnteredCell.Y < this.Rows.Count)))
                {
                    DataGridViewCellEventArgs args3 = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
                    this.OnCellMouseLeave(args3);
                }
                else
                {
                    this.ptMouseEnteredCell.X = this.ptMouseEnteredCell.Y = -2;
                }
            }
        }

        public void UpdateRowErrorText(int rowIndex)
        {
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if (base.IsHandleCreated && this.layout.RowHeadersVisible)
            {
                this.InvalidateCellPrivate(-1, rowIndex);
            }
        }

        public void UpdateRowErrorText(int rowIndexStart, int rowIndexEnd)
        {
            if ((rowIndexStart < 0) || (rowIndexStart >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndexStart");
            }
            if ((rowIndexEnd < 0) || (rowIndexEnd >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndexEnd");
            }
            if (rowIndexEnd < rowIndexStart)
            {
                throw new ArgumentOutOfRangeException("rowIndexEnd");
            }
            if (base.IsHandleCreated && this.layout.RowHeadersVisible)
            {
                Rectangle a = this.GetCellAdjustedDisplayRectangle(-1, rowIndexStart, true);
                Rectangle b = this.GetCellAdjustedDisplayRectangle(-1, rowIndexEnd, true);
                if (a.IsEmpty || b.IsEmpty)
                {
                    if (!a.IsEmpty || !b.IsEmpty)
                    {
                        base.Invalidate(this.layout.RowHeaders);
                    }
                }
                else
                {
                    base.Invalidate(Rectangle.Union(a, b));
                }
            }
        }

        public void UpdateRowHeightInfo(int rowIndex, bool updateToEnd)
        {
            this.UpdateRowHeightInfoPrivate(rowIndex, updateToEnd, true);
        }

        private void UpdateRowHeightInfoPrivate(int rowIndex, bool updateToEnd, bool invalidInAdjustFillingColumns)
        {
            if (((updateToEnd && (rowIndex < 0)) || (!updateToEnd && (rowIndex < -1))) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            this.Rows.InvalidateCachedRowsHeights();
            bool flag = (rowIndex >= 0) && ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None);
            if (base.IsHandleCreated && ((rowIndex == -1) || flag))
            {
                if (updateToEnd)
                {
                    int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                    if (this.AutoSize)
                    {
                        LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
                    }
                    else
                    {
                        this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
                    }
                    Rectangle data = this.layout.Data;
                    if (this.layout.RowHeadersVisible)
                    {
                        data = Rectangle.Union(data, this.layout.RowHeaders);
                    }
                    else if (this.SingleVerticalBorderAdded)
                    {
                        if (!this.RightToLeftInternal)
                        {
                            data.X--;
                        }
                        data.Width++;
                    }
                    if (!flag)
                    {
                        rowIndex = this.Rows.GetNextRow(rowIndex, DataGridViewElementStates.Visible);
                    }
                    if (rowIndex != -1)
                    {
                        int rowYFromIndex = this.GetRowYFromIndex((firstDisplayedScrollingRow == this.displayedBandsInfo.FirstDisplayedScrollingRow) ? rowIndex : this.displayedBandsInfo.FirstDisplayedScrollingRow);
                        data.Height -= data.Y - rowYFromIndex;
                        data.Y = rowYFromIndex;
                        base.Invalidate(data);
                    }
                    if (this.editingControl != null)
                    {
                        this.PositionEditingControl(true, true, false);
                    }
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        if (this.AutoSize)
                        {
                            LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
                        }
                        else
                        {
                            this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
                        }
                        base.Invalidate();
                    }
                    else
                    {
                        int num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                        if (this.inBulkLayoutCount == 0)
                        {
                            if (this.AutoSize)
                            {
                                LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
                            }
                            else
                            {
                                this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
                            }
                        }
                        if (this.inBulkPaintCount == 0)
                        {
                            Rectangle a = this.layout.Data;
                            if (this.layout.RowHeadersVisible)
                            {
                                a = Rectangle.Union(a, this.layout.RowHeaders);
                            }
                            else if (this.SingleVerticalBorderAdded)
                            {
                                if (!this.RightToLeftInternal)
                                {
                                    a.X--;
                                }
                                a.Width++;
                            }
                            int num4 = this.GetRowYFromIndex((num3 == this.displayedBandsInfo.FirstDisplayedScrollingRow) ? rowIndex : this.displayedBandsInfo.FirstDisplayedScrollingRow);
                            a.Height -= a.Y - num4;
                            a.Y = num4;
                            base.Invalidate(a);
                        }
                    }
                    if (this.editingControl != null)
                    {
                        this.PositionEditingControl((rowIndex == -1) || (this.ptCurrentCell.Y != rowIndex), true, false);
                    }
                }
                this.UpdateMouseEnteredCell(null, null);
            }
        }

        private void UpdateRowsDisplayedState(bool displayed)
        {
            int firstDisplayedScrollingRow;
            int numDisplayedFrozenRows = this.displayedBandsInfo.NumDisplayedFrozenRows;
            if (numDisplayedFrozenRows > 0)
            {
                firstDisplayedScrollingRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                while (numDisplayedFrozenRows > 0)
                {
                    if (((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None) == displayed)
                    {
                        this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, displayed);
                    }
                    firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    numDisplayedFrozenRows--;
                }
            }
            firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            if (firstDisplayedScrollingRow > -1)
            {
                for (int i = this.displayedBandsInfo.NumDisplayedScrollingRows; i > 0; i--)
                {
                    if (((this.Rows.GetRowState(firstDisplayedScrollingRow) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None) == displayed)
                    {
                        this.Rows.SetRowState(firstDisplayedScrollingRow, DataGridViewElementStates.Displayed, displayed);
                    }
                    firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, DataGridViewElementStates.Visible);
                }
            }
        }

        private void UpdateSelectedCellsBlock(int anchorColumnIndex, ref int oldEdgeColumnIndex, int newEdgeColumnIndex, int anchorRowIndex, ref int oldEdgeRowIndex, int newEdgeRowIndex)
        {
            if (((this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex)) || (this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))) || (((anchorRowIndex < oldEdgeRowIndex) && (newEdgeRowIndex < anchorRowIndex)) || ((oldEdgeRowIndex < anchorRowIndex) && (anchorRowIndex < newEdgeRowIndex))))
            {
                this.SelectCellUnorderedRange(anchorColumnIndex, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
                this.SelectCellUnorderedRange(anchorColumnIndex, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
                oldEdgeColumnIndex = newEdgeColumnIndex;
                oldEdgeRowIndex = newEdgeRowIndex;
            }
            else
            {
                if ((this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) || (anchorColumnIndex == oldEdgeColumnIndex))) && (oldEdgeRowIndex == newEdgeRowIndex))
                {
                    DataGridViewColumn column = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    if (anchorRowIndex <= newEdgeRowIndex)
                    {
                        this.SelectCellRange(column.Index, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
                    }
                    else
                    {
                        this.SelectCellRange(column.Index, newEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
                    }
                }
                else if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && (this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) || (oldEdgeColumnIndex == anchorColumnIndex))) && (oldEdgeRowIndex == newEdgeRowIndex))
                {
                    DataGridViewColumn column2 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    if (anchorRowIndex <= newEdgeRowIndex)
                    {
                        this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, column2.Index, newEdgeRowIndex, true);
                    }
                    else
                    {
                        this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, column2.Index, anchorRowIndex, true);
                    }
                }
                else if (((newEdgeRowIndex > oldEdgeRowIndex) && (anchorRowIndex <= oldEdgeRowIndex)) && (newEdgeColumnIndex == oldEdgeColumnIndex))
                {
                    if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex))
                    {
                        this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
                    }
                    else
                    {
                        this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
                    }
                }
                else if (((newEdgeRowIndex < oldEdgeRowIndex) && (oldEdgeRowIndex <= anchorRowIndex)) && (newEdgeColumnIndex == oldEdgeColumnIndex))
                {
                    if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex))
                    {
                        this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
                    }
                    else
                    {
                        this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
                    }
                }
                else if ((this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && !this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex)) && ((newEdgeRowIndex > oldEdgeRowIndex) && (anchorRowIndex <= oldEdgeRowIndex)))
                {
                    DataGridViewColumn column3 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    this.SelectCellRange(column3.Index, anchorRowIndex, newEdgeColumnIndex, oldEdgeRowIndex, true);
                    this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
                }
                else if ((this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && (newEdgeRowIndex < oldEdgeRowIndex)) && (oldEdgeRowIndex <= anchorRowIndex))
                {
                    if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex))
                    {
                        DataGridViewColumn column4 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectCellRange(column4.Index, oldEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
                        this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
                    }
                    else if (!this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))
                    {
                        if (anchorRowIndex == oldEdgeRowIndex)
                        {
                            this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, anchorColumnIndex, oldEdgeRowIndex, false);
                            this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, anchorRowIndex, true);
                        }
                        else
                        {
                            DataGridViewColumn column5 = this.Columns.GetPreviousColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                            this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, column5.Index, anchorRowIndex, false);
                            this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
                        }
                    }
                }
                else if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && (newEdgeRowIndex < oldEdgeRowIndex)) && (anchorRowIndex >= oldEdgeRowIndex))
                {
                    if (!this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
                    {
                        DataGridViewColumn column6 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectCellRange(newEdgeColumnIndex, oldEdgeRowIndex, column6.Index, anchorRowIndex, true);
                        this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
                    }
                    else if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))
                    {
                        DataGridViewColumn column7 = this.Columns.GetNextColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                        this.SelectCellRange(column7.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
                        this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
                    }
                    else
                    {
                        this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
                        this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, anchorRowIndex, true);
                    }
                }
                else if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && !this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex)) && ((newEdgeRowIndex > oldEdgeRowIndex) && (anchorRowIndex <= oldEdgeRowIndex)))
                {
                    DataGridViewColumn column8 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, column8.Index, oldEdgeRowIndex, true);
                    this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
                }
                else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex))
                {
                    DataGridViewColumn column9 = this.Columns.GetNextColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    if (newEdgeRowIndex == oldEdgeRowIndex)
                    {
                        if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex))
                        {
                            if (oldEdgeRowIndex > anchorRowIndex)
                            {
                                this.SelectCellRange(column9.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
                            }
                            else
                            {
                                this.SelectCellRange(column9.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
                            }
                        }
                    }
                    else if (newEdgeRowIndex < oldEdgeRowIndex)
                    {
                        if (((oldEdgeRowIndex > anchorRowIndex) && this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex)) && (anchorRowIndex <= newEdgeRowIndex))
                        {
                            if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
                            {
                                if (!this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex))
                                {
                                    this.SelectCellRange(column9.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
                                    this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, oldEdgeRowIndex, false);
                                }
                            }
                            else
                            {
                                column9 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                this.SelectCellRange(oldEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
                                this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, column9.Index, newEdgeRowIndex, true);
                            }
                        }
                    }
                    else if (newEdgeRowIndex > oldEdgeRowIndex)
                    {
                        if (oldEdgeRowIndex < anchorRowIndex)
                        {
                            if ((this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex)) && (newEdgeRowIndex <= anchorRowIndex))
                            {
                                this.SelectCellRange(column9.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
                                this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
                            }
                            else if (!this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && (newEdgeRowIndex <= anchorRowIndex))
                            {
                                column9 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
                                this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, column9.Index, anchorRowIndex, true);
                            }
                        }
                        else if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex))
                        {
                            this.SelectCellRange(column9.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
                            this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(anchorRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
                        }
                    }
                }
                else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex))
                {
                    DataGridViewColumn column10 = this.Columns.GetPreviousColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                    if (newEdgeRowIndex == oldEdgeRowIndex)
                    {
                        if (this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || (newEdgeColumnIndex == anchorColumnIndex))
                        {
                            if (oldEdgeRowIndex > anchorRowIndex)
                            {
                                this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, column10.Index, oldEdgeRowIndex, false);
                            }
                            else
                            {
                                this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, column10.Index, anchorRowIndex, false);
                            }
                        }
                    }
                    else if (newEdgeRowIndex < oldEdgeRowIndex)
                    {
                        if (oldEdgeRowIndex > anchorRowIndex)
                        {
                            if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || (newEdgeColumnIndex == anchorColumnIndex)) && (newEdgeRowIndex >= anchorRowIndex))
                            {
                                this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, column10.Index, oldEdgeRowIndex, false);
                                this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
                            }
                            else if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && (newEdgeRowIndex >= anchorRowIndex))
                            {
                                column10 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), oldEdgeColumnIndex, oldEdgeRowIndex, false);
                                this.SelectCellRange(column10.Index, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
                            }
                        }
                    }
                    else if (newEdgeRowIndex > oldEdgeRowIndex)
                    {
                        if (oldEdgeRowIndex < anchorRowIndex)
                        {
                            if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex)) && (newEdgeRowIndex <= anchorRowIndex))
                            {
                                this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, column10.Index, anchorRowIndex, false);
                                this.SelectCellRange(newEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
                            }
                            else if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && (newEdgeRowIndex <= anchorRowIndex))
                            {
                                column10 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                                this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
                                this.SelectCellRange(column10.Index, newEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
                            }
                        }
                        else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex))
                        {
                            this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, column10.Index, oldEdgeRowIndex, false);
                            this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
                        }
                    }
                }
                else if (newEdgeRowIndex > oldEdgeRowIndex)
                {
                    if ((newEdgeColumnIndex == oldEdgeColumnIndex) && (newEdgeRowIndex <= anchorRowIndex))
                    {
                        if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
                        {
                            this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
                        }
                        else
                        {
                            this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
                        }
                    }
                }
                else if (((newEdgeRowIndex < oldEdgeRowIndex) && (newEdgeColumnIndex == oldEdgeColumnIndex)) && (newEdgeRowIndex >= anchorRowIndex))
                {
                    if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
                    {
                        this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), oldEdgeColumnIndex, oldEdgeRowIndex, false);
                    }
                    else
                    {
                        this.SelectCellRange(oldEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
                    }
                }
                oldEdgeColumnIndex = newEdgeColumnIndex;
                oldEdgeRowIndex = newEdgeRowIndex;
            }
        }

        private void VertScrollTimer_Tick(object sender, EventArgs e)
        {
            base.BeginInvoke(new MethodInvoker(this.VertScrollTimerHandler));
        }

        private void VertScrollTimerHandler()
        {
            int num;
            int num2;
            Point point = base.PointToClient(Control.MousePosition);
            HitTestInfo hti = this.HitTest(point.X, point.Y);
            int x = point.X;
            int y = point.Y;
            if (this.GetOutOfBoundCorrectedHitTestInfo(ref hti, ref x, ref y, out num, out num2))
            {
                if (num2 != 0)
                {
                    int yOffset = Math.Abs(num2);
                    int rows = num2 / yOffset;
                    this.ScrollRowsByCount(rows, (rows < 0) ? ScrollEventType.SmallDecrement : ScrollEventType.SmallIncrement);
                    this.vertScrollTimer.Interval = GetRowScrollRate(yOffset);
                    if (!this.dataGridViewOper[8])
                    {
                        if (this.dataGridViewOper[0x10])
                        {
                            if (num != 0)
                            {
                                hti = this.HitTest((point.X - num) - (num / Math.Abs(num)), (point.Y - num2) - rows);
                            }
                            else
                            {
                                hti = this.HitTest(x, (point.Y - num2) - rows);
                            }
                            if ((hti.col >= 0) && (hti.row >= 0))
                            {
                                this.OnCellSelectMouseMove(hti);
                            }
                        }
                    }
                    else
                    {
                        hti = this.HitTest(x, (point.Y - num2) - rows);
                        if (hti.row >= 0)
                        {
                            this.OnRowSelectMouseMove(hti);
                        }
                    }
                }
                else
                {
                    if (this.dataGridViewOper[8] && (hti.row >= 0))
                    {
                        this.OnRowSelectMouseMove(hti);
                    }
                    else if ((this.dataGridViewOper[0x10] && (hti.col >= 0)) && (hti.row >= 0))
                    {
                        this.OnCellSelectMouseMove(hti);
                    }
                    this.VertScrollTimer.Enabled = false;
                }
            }
        }

        private void WireEditingControlEvents()
        {
            this.editingPanel.Click += new EventHandler(this.EditingControls_Click);
            this.editingPanel.DoubleClick += new EventHandler(this.EditingControls_DoubleClick);
            this.editingPanel.MouseClick += new MouseEventHandler(this.EditingControls_MouseClick);
            this.editingPanel.MouseDoubleClick += new MouseEventHandler(this.EditingControls_MouseDoubleClick);
            this.editingPanel.MouseDown += new MouseEventHandler(this.EditingControls_MouseDown);
            this.editingPanel.MouseEnter += new EventHandler(this.EditingControls_MouseEnter);
            this.editingPanel.MouseLeave += new EventHandler(this.EditingControls_MouseLeave);
            this.editingPanel.MouseMove += new MouseEventHandler(this.EditingControls_MouseMove);
            this.editingPanel.MouseUp += new MouseEventHandler(this.EditingControls_MouseUp);
            this.editingControl.Click += new EventHandler(this.EditingControls_Click);
            this.editingControl.DoubleClick += new EventHandler(this.EditingControls_DoubleClick);
            this.editingControl.MouseClick += new MouseEventHandler(this.EditingControls_MouseClick);
            this.editingControl.MouseDoubleClick += new MouseEventHandler(this.EditingControls_MouseDoubleClick);
            this.editingControl.MouseDown += new MouseEventHandler(this.EditingControls_MouseDown);
            this.editingControl.MouseEnter += new EventHandler(this.EditingControls_MouseEnter);
            this.editingControl.MouseLeave += new EventHandler(this.EditingControls_MouseLeave);
            this.editingControl.MouseMove += new MouseEventHandler(this.EditingControls_MouseMove);
            this.editingControl.MouseUp += new MouseEventHandler(this.EditingControls_MouseUp);
        }

        private void WireScrollBarsEvents()
        {
            if (this.horizScrollBar != null)
            {
                this.horizScrollBar.MouseEnter += new EventHandler(this.ScrollBar_MouseEnter);
                this.horizScrollBar.MouseLeave += new EventHandler(this.ScrollBar_MouseLeave);
            }
            if (this.vertScrollBar != null)
            {
                this.vertScrollBar.MouseEnter += new EventHandler(this.ScrollBar_MouseEnter);
                this.vertScrollBar.MouseLeave += new EventHandler(this.ScrollBar_MouseLeave);
            }
        }

        internal override void WmContextMenu(ref Message m)
        {
            ContextMenuStrip contextMenuStrip;
            Point point;
            int lParam = (short) ((int) m.LParam);
            int y = ((int) m.LParam) >> 0x10;
            bool isKeyboardActivated = false;
            if (((int) m.LParam) == -1)
            {
                isKeyboardActivated = true;
                point = new Point(base.Width / 2, base.Height / 2);
                contextMenuStrip = this.ContextMenuStrip;
            }
            else
            {
                point = base.PointToClientInternal(new Point(lParam, y));
                HitTestInfo info = this.HitTest(point.X, point.Y);
                DataGridViewCell headerCell = null;
                switch (info.Type)
                {
                    case DataGridViewHitTestType.Cell:
                        headerCell = this.Rows.SharedRow(info.row).Cells[info.col];
                        break;

                    case DataGridViewHitTestType.ColumnHeader:
                        headerCell = this.Columns[info.col].HeaderCell;
                        break;

                    case DataGridViewHitTestType.RowHeader:
                        headerCell = this.Rows.SharedRow(info.row).HeaderCell;
                        break;

                    case DataGridViewHitTestType.TopLeftHeader:
                        headerCell = this.TopLeftHeaderCell;
                        break;
                }
                if (headerCell != null)
                {
                    contextMenuStrip = headerCell.GetInheritedContextMenuStrip(info.row);
                }
                else
                {
                    contextMenuStrip = this.ContextMenuStrip;
                }
            }
            if ((contextMenuStrip != null) && base.ClientRectangle.Contains(point))
            {
                contextMenuStrip.ShowInternal(this, point, isKeyboardActivated);
            }
            else
            {
                this.DefWndProc(ref m);
            }
        }

        private void WmGetDlgCode(ref Message m)
        {
            m.Result = (IntPtr) ((((long) m.Result) | 1L) | 0x80L);
            Keys modifierKeys = Control.ModifierKeys;
            if (this.GetTabKeyEffective((modifierKeys & Keys.Shift) == Keys.Shift, (modifierKeys & Keys.Control) == Keys.Control))
            {
                m.Result = (IntPtr) (((long) m.Result) | 2L);
            }
        }

        private unsafe bool WmNotify(ref Message m)
        {
            if (m.LParam != IntPtr.Zero)
            {
                System.Windows.Forms.NativeMethods.NMHDR* lParam = (System.Windows.Forms.NativeMethods.NMHDR*) m.LParam;
                if ((lParam->code == System.Windows.Forms.NativeMethods.TTN_GETDISPINFO) && !base.DesignMode)
                {
                    string toolTipPrivate = this.ToolTipPrivate;
                    if (!string.IsNullOrEmpty(toolTipPrivate))
                    {
                        System.Windows.Forms.UnsafeNativeMethods.SendMessage(new HandleRef(this, lParam->hwndFrom), 0x418, 0, SystemInformation.MaxWindowTrackSize.Width);
                        System.Windows.Forms.NativeMethods.TOOLTIPTEXT structure = (System.Windows.Forms.NativeMethods.TOOLTIPTEXT) m.GetLParam(typeof(System.Windows.Forms.NativeMethods.TOOLTIPTEXT));
                        structure.lpszText = toolTipPrivate;
                        if (this.RightToLeft == RightToLeft.Yes)
                        {
                            structure.uFlags |= 4;
                        }
                        Marshal.StructureToPtr(structure, m.LParam, false);
                        return true;
                    }
                }
            }
            return false;
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected override void WndProc(ref Message m)
        {
            switch (m.Msg)
            {
                case 0x4e:
                    if (this.WmNotify(ref m))
                    {
                        return;
                    }
                    break;

                case 0x87:
                    this.WmGetDlgCode(ref m);
                    return;

                case 0x10d:
                case 0x10f:
                    if (this.editingControl != null)
                    {
                        this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
                    }
                    break;

                case 0x201:
                case 0x203:
                    this.dataGridViewOper[0x2000] = true;
                    try
                    {
                        base.WndProc(ref m);
                    }
                    finally
                    {
                        this.dataGridViewOper[0x2000] = false;
                    }
                    return;
            }
            base.WndProc(ref m);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public virtual DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle
        {
            get
            {
                DataGridViewAdvancedBorderStyle style;
                if (!this.ApplyVisualStylesToHeaderCells)
                {
                    switch (this.AdvancedColumnHeadersBorderStyle.All)
                    {
                        case DataGridViewAdvancedCellBorderStyle.InsetDouble:
                            return new DataGridViewAdvancedBorderStyle { 
                                LeftInternal = this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble,
                                RightInternal = this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.InsetDouble : DataGridViewAdvancedCellBorderStyle.Inset,
                                TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble,
                                BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset
                            };

                        case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
                        case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
                            return new DataGridViewAdvancedBorderStyle { 
                                LeftInternal = this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble,
                                RightInternal = this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.OutsetDouble : DataGridViewAdvancedCellBorderStyle.Outset,
                                TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble,
                                BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset
                            };

                        case DataGridViewAdvancedCellBorderStyle.NotSet:
                            if ((this.RightToLeftInternal || (this.AdvancedColumnHeadersBorderStyle.Left != DataGridViewAdvancedCellBorderStyle.None)) && (!this.RightToLeftInternal || (this.AdvancedColumnHeadersBorderStyle.Right != DataGridViewAdvancedCellBorderStyle.None)))
                            {
                                return this.AdvancedColumnHeadersBorderStyle;
                            }
                            style = new DataGridViewAdvancedBorderStyle();
                            if (this.RightToLeftInternal)
                            {
                                style.LeftInternal = this.AdvancedColumnHeadersBorderStyle.Left;
                                style.RightInternal = this.AdvancedRowHeadersBorderStyle.Right;
                            }
                            else
                            {
                                style.LeftInternal = this.AdvancedRowHeadersBorderStyle.Left;
                                style.RightInternal = this.AdvancedColumnHeadersBorderStyle.Right;
                            }
                            style.TopInternal = this.AdvancedColumnHeadersBorderStyle.Top;
                            style.BottomInternal = this.AdvancedColumnHeadersBorderStyle.Bottom;
                            return style;
                    }
                    return this.AdvancedColumnHeadersBorderStyle;
                }
                switch (this.AdvancedColumnHeadersBorderStyle.All)
                {
                    case DataGridViewAdvancedCellBorderStyle.InsetDouble:
                        style = new DataGridViewAdvancedBorderStyle();
                        if (!this.RightToLeftInternal)
                        {
                            style.LeftInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
                        }
                        else
                        {
                            style.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                        }
                        style.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                        style.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
                        style.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                        return style;

                    case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
                    case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
                        style = new DataGridViewAdvancedBorderStyle();
                        if (!this.RightToLeftInternal)
                        {
                            style.LeftInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                            break;
                        }
                        style.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                        break;

                    case DataGridViewAdvancedCellBorderStyle.NotSet:
                        if ((this.RightToLeftInternal || (this.AdvancedColumnHeadersBorderStyle.Left != DataGridViewAdvancedCellBorderStyle.None)) && (!this.RightToLeftInternal || (this.AdvancedColumnHeadersBorderStyle.Right != DataGridViewAdvancedCellBorderStyle.None)))
                        {
                            return this.AdvancedColumnHeadersBorderStyle;
                        }
                        style = new DataGridViewAdvancedBorderStyle();
                        if (this.RightToLeftInternal)
                        {
                            style.LeftInternal = this.AdvancedColumnHeadersBorderStyle.Left;
                            style.RightInternal = (this.AdvancedRowHeadersBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.OutsetDouble) ? DataGridViewAdvancedCellBorderStyle.Outset : this.AdvancedRowHeadersBorderStyle.Right;
                        }
                        else
                        {
                            style.LeftInternal = this.AdvancedRowHeadersBorderStyle.Left;
                            style.RightInternal = this.AdvancedColumnHeadersBorderStyle.Right;
                        }
                        style.TopInternal = this.AdvancedColumnHeadersBorderStyle.Top;
                        style.BottomInternal = this.AdvancedColumnHeadersBorderStyle.Bottom;
                        return style;

                    default:
                        return this.AdvancedColumnHeadersBorderStyle;
                }
                style.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                style.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                style.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                return style;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle =>
            this.advancedCellBorderStyle;

        [EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle =>
            this.advancedColumnHeadersBorderStyle;

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle =>
            this.advancedRowHeadersBorderStyle;

        [System.Windows.Forms.SRCategory("CatBehavior"), System.Windows.Forms.SRDescription("DataGridView_AllowUserToAddRowsDescr"), DefaultValue(true)]
        public bool AllowUserToAddRows
        {
            get => 
                this.dataGridViewState1[1];
            set
            {
                if (this.AllowUserToAddRows != value)
                {
                    this.dataGridViewState1[1] = value;
                    if (this.DataSource != null)
                    {
                        this.dataConnection.ResetCachedAllowUserToAddRowsInternal();
                    }
                    this.OnAllowUserToAddRowsChanged(EventArgs.Empty);
                }
            }
        }

        internal bool AllowUserToAddRowsInternal
        {
            get
            {
                if (this.DataSource == null)
                {
                    return this.AllowUserToAddRows;
                }
                return (this.AllowUserToAddRows && this.dataConnection.AllowAdd);
            }
        }

        [DefaultValue(true), System.Windows.Forms.SRCategory("CatBehavior"), System.Windows.Forms.SRDescription("DataGridView_AllowUserToDeleteRowsDescr")]
        public bool AllowUserToDeleteRows
        {
            get => 
                this.dataGridViewState1[2];
            set
            {
                if (this.AllowUserToDeleteRows != value)
                {
                    this.dataGridViewState1[2] = value;
                    this.OnAllowUserToDeleteRowsChanged(EventArgs.Empty);
                }
            }
        }

        internal bool AllowUserToDeleteRowsInternal
        {
            get
            {
                if (this.DataSource == null)
                {
                    return this.AllowUserToDeleteRows;
                }
                return (this.AllowUserToDeleteRows && this.dataConnection.AllowRemove);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_AllowUserToOrderColumnsDescr"), DefaultValue(false), System.Windows.Forms.SRCategory("CatBehavior")]
        public bool AllowUserToOrderColumns
        {
            get => 
                this.dataGridViewState1[4];
            set
            {
                if (this.AllowUserToOrderColumns != value)
                {
                    this.dataGridViewState1[4] = value;
                    this.OnAllowUserToOrderColumnsChanged(EventArgs.Empty);
                }
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_AllowUserToResizeColumnsDescr"), DefaultValue(true), System.Windows.Forms.SRCategory("CatBehavior")]
        public bool AllowUserToResizeColumns
        {
            get => 
                this.dataGridViewState2[2];
            set
            {
                if (this.AllowUserToResizeColumns != value)
                {
                    this.dataGridViewState2[2] = value;
                    this.OnAllowUserToResizeColumnsChanged(EventArgs.Empty);
                }
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_AllowUserToResizeRowsDescr"), System.Windows.Forms.SRCategory("CatBehavior"), DefaultValue(true)]
        public bool AllowUserToResizeRows
        {
            get => 
                this.dataGridViewState2[4];
            set
            {
                if (this.AllowUserToResizeRows != value)
                {
                    this.dataGridViewState2[4] = value;
                    this.OnAllowUserToResizeRowsChanged(EventArgs.Empty);
                }
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_AlternatingRowsDefaultCellStyleDescr"), System.Windows.Forms.SRCategory("CatAppearance")]
        public DataGridViewCellStyle AlternatingRowsDefaultCellStyle
        {
            get
            {
                if (this.alternatingRowsDefaultCellStyle == null)
                {
                    this.alternatingRowsDefaultCellStyle = new DataGridViewCellStyle();
                    this.alternatingRowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.AlternatingRows);
                }
                return this.alternatingRowsDefaultCellStyle;
            }
            set
            {
                DataGridViewCellStyle alternatingRowsDefaultCellStyle = this.AlternatingRowsDefaultCellStyle;
                alternatingRowsDefaultCellStyle.RemoveScope(DataGridViewCellStyleScopes.AlternatingRows);
                this.alternatingRowsDefaultCellStyle = value;
                if (value != null)
                {
                    this.alternatingRowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.AlternatingRows);
                }
                DataGridViewCellStyleDifferences differencesFrom = alternatingRowsDefaultCellStyle.GetDifferencesFrom(this.AlternatingRowsDefaultCellStyle);
                if (differencesFrom != DataGridViewCellStyleDifferences.None)
                {
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
                    this.OnAlternatingRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        internal bool ApplyVisualStylesToHeaderCells =>
            (Application.RenderWithVisualStyles && this.EnableHeadersVisualStyles);

        internal bool ApplyVisualStylesToInnerCells =>
            Application.RenderWithVisualStyles;

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced), DefaultValue(true)]
        public bool AutoGenerateColumns
        {
            get => 
                this.dataGridViewState1[0x800000];
            set
            {
                if (this.dataGridViewState1[0x800000] != value)
                {
                    this.dataGridViewState1[0x800000] = value;
                    this.OnAutoGenerateColumnsChanged(EventArgs.Empty);
                }
            }
        }

        public override bool AutoSize
        {
            get => 
                this.dataGridViewState1[0x40000000];
            set
            {
                base.AutoSize = value;
                this.dataGridViewState1[0x40000000] = value;
            }
        }

        [System.Windows.Forms.SRCategory("CatLayout"), System.Windows.Forms.SRDescription("DataGridView_AutoSizeColumnsModeDescr"), DefaultValue(1)]
        public DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode
        {
            get => 
                this.autoSizeColumnsMode;
            set
            {
                switch (value)
                {
                    case DataGridViewAutoSizeColumnsMode.None:
                    case DataGridViewAutoSizeColumnsMode.ColumnHeader:
                    case DataGridViewAutoSizeColumnsMode.AllCellsExceptHeader:
                    case DataGridViewAutoSizeColumnsMode.AllCells:
                    case DataGridViewAutoSizeColumnsMode.DisplayedCellsExceptHeader:
                    case DataGridViewAutoSizeColumnsMode.DisplayedCells:
                    case DataGridViewAutoSizeColumnsMode.Fill:
                        if (this.autoSizeColumnsMode != value)
                        {
                            foreach (DataGridViewColumn column in this.Columns)
                            {
                                if ((column.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet) && column.Visible)
                                {
                                    if ((value == DataGridViewAutoSizeColumnsMode.ColumnHeader) && !this.ColumnHeadersVisible)
                                    {
                                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAutoSizeColumnsInvisibleColumnHeaders"));
                                    }
                                    if ((value == DataGridViewAutoSizeColumnsMode.Fill) && column.Frozen)
                                    {
                                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAutoFillFrozenColumns"));
                                    }
                                }
                            }
                            DataGridViewAutoSizeColumnMode[] previousModes = new DataGridViewAutoSizeColumnMode[this.Columns.Count];
                            foreach (DataGridViewColumn column2 in this.Columns)
                            {
                                previousModes[column2.Index] = column2.InheritedAutoSizeMode;
                            }
                            DataGridViewAutoSizeColumnsModeEventArgs e = new DataGridViewAutoSizeColumnsModeEventArgs(previousModes);
                            this.autoSizeColumnsMode = value;
                            this.OnAutoSizeColumnsModeChanged(e);
                        }
                        return;
                }
                throw new InvalidEnumArgumentException("value", (int) value, typeof(DataGridViewAutoSizeColumnsMode));
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_AutoSizeRowsModeDescr"), System.Windows.Forms.SRCategory("CatLayout"), DefaultValue(0)]
        public DataGridViewAutoSizeRowsMode AutoSizeRowsMode
        {
            get => 
                this.autoSizeRowsMode;
            set
            {
                switch (value)
                {
                    case DataGridViewAutoSizeRowsMode.None:
                    case DataGridViewAutoSizeRowsMode.AllHeaders:
                    case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
                    case DataGridViewAutoSizeRowsMode.AllCells:
                    case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
                    case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
                    case DataGridViewAutoSizeRowsMode.DisplayedCells:
                        if (((value == DataGridViewAutoSizeRowsMode.AllHeaders) || (value == DataGridViewAutoSizeRowsMode.DisplayedHeaders)) && !this.RowHeadersVisible)
                        {
                            throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
                        }
                        if (this.autoSizeRowsMode != value)
                        {
                            DataGridViewAutoSizeModeEventArgs e = new DataGridViewAutoSizeModeEventArgs(this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None);
                            this.autoSizeRowsMode = value;
                            this.OnAutoSizeRowsModeChanged(e);
                        }
                        return;
                }
                throw new InvalidEnumArgumentException("value", (int) value, typeof(DataGridViewAutoSizeRowsMode));
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public override System.Drawing.Color BackColor
        {
            get => 
                base.BackColor;
            set
            {
                base.BackColor = value;
            }
        }

        internal SolidBrush BackgroundBrush =>
            this.backgroundBrush;

        [System.Windows.Forms.SRDescription("DataGridViewBackgroundColorDescr"), System.Windows.Forms.SRCategory("CatAppearance")]
        public System.Drawing.Color BackgroundColor
        {
            get => 
                this.backgroundBrush.Color;
            set
            {
                if (value.IsEmpty)
                {
                    throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_EmptyColor", new object[] { "BackgroundColor" }));
                }
                if (value.A < 0xff)
                {
                    throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_TransparentColor", new object[] { "BackgroundColor" }));
                }
                if (!value.Equals(this.backgroundBrush.Color))
                {
                    this.backgroundBrush = new SolidBrush(value);
                    this.OnBackgroundColorChanged(EventArgs.Empty);
                }
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public override Image BackgroundImage
        {
            get => 
                base.BackgroundImage;
            set
            {
                base.BackgroundImage = value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public override ImageLayout BackgroundImageLayout
        {
            get => 
                base.BackgroundImageLayout;
            set
            {
                base.BackgroundImageLayout = value;
            }
        }

        [System.Windows.Forms.SRCategory("CatAppearance"), System.Windows.Forms.SRDescription("DataGridView_BorderStyleDescr"), DefaultValue(1)]
        public System.Windows.Forms.BorderStyle BorderStyle
        {
            get => 
                this.borderStyle;
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 2))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(System.Windows.Forms.BorderStyle));
                }
                if (this.borderStyle != value)
                {
                    using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.BorderStyle))
                    {
                        this.borderStyle = value;
                        if (!this.AutoSize)
                        {
                            this.PerformLayoutPrivate(false, false, true, true);
                        }
                        base.Invalidate();
                        this.OnBorderStyleChanged(EventArgs.Empty);
                    }
                }
            }
        }

        private int BorderWidth
        {
            get
            {
                if (this.BorderStyle == System.Windows.Forms.BorderStyle.Fixed3D)
                {
                    if (!Application.RenderWithVisualStyles)
                    {
                        return SystemInformation.Border3DSize.Width;
                    }
                    return 1;
                }
                if (this.BorderStyle == System.Windows.Forms.BorderStyle.FixedSingle)
                {
                    return 1;
                }
                return 0;
            }
        }

        internal Graphics CachedGraphics
        {
            get
            {
                if (this.cachedGraphics == null)
                {
                    this.cachedGraphics = WindowsFormsUtils.CreateMeasurementGraphics();
                }
                return this.cachedGraphics;
            }
        }

        protected override bool CanEnableIme
        {
            get
            {
                bool canEnableIme = false;
                if ((this.ptCurrentCell.X != -1) && this.ColumnEditable(this.ptCurrentCell.X))
                {
                    DataGridViewCell currentCellInternal = this.CurrentCellInternal;
                    if (!this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y))
                    {
                        canEnableIme = base.CanEnableIme;
                    }
                }
                return canEnableIme;
            }
        }

        [Browsable(true), DefaultValue(1), System.Windows.Forms.SRDescription("DataGridView_CellBorderStyleDescr"), System.Windows.Forms.SRCategory("CatAppearance")]
        public DataGridViewCellBorderStyle CellBorderStyle
        {
            get
            {
                switch (this.advancedCellBorderStyle.All)
                {
                    case DataGridViewAdvancedCellBorderStyle.NotSet:
                        if ((this.advancedCellBorderStyle.Top != DataGridViewAdvancedCellBorderStyle.None) || (this.advancedCellBorderStyle.Bottom != DataGridViewAdvancedCellBorderStyle.None))
                        {
                            goto Label_00D1;
                        }
                        if (!this.RightToLeftInternal)
                        {
                            if ((this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None) && (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Single))
                            {
                                return DataGridViewCellBorderStyle.SingleVertical;
                            }
                            break;
                        }
                        if ((this.advancedCellBorderStyle.Right != DataGridViewAdvancedCellBorderStyle.None) || (this.advancedCellBorderStyle.Left != DataGridViewAdvancedCellBorderStyle.Single))
                        {
                            break;
                        }
                        return DataGridViewCellBorderStyle.SingleVertical;

                    case DataGridViewAdvancedCellBorderStyle.None:
                        return DataGridViewCellBorderStyle.None;

                    case DataGridViewAdvancedCellBorderStyle.Single:
                        return DataGridViewCellBorderStyle.Single;

                    case DataGridViewAdvancedCellBorderStyle.Inset:
                        return DataGridViewCellBorderStyle.Sunken;

                    case DataGridViewAdvancedCellBorderStyle.Outset:
                        return DataGridViewCellBorderStyle.Raised;

                    default:
                        return DataGridViewCellBorderStyle.Custom;
                }
                if ((this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Outset) && (this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Outset))
                {
                    return DataGridViewCellBorderStyle.RaisedVertical;
                }
                if ((this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Inset) && (this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Inset))
                {
                    return DataGridViewCellBorderStyle.SunkenVertical;
                }
            Label_00D1:
                if ((this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None) && (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None))
                {
                    if ((this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.None) && (this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Single))
                    {
                        return DataGridViewCellBorderStyle.SingleHorizontal;
                    }
                    if ((this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.Outset) && (this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Outset))
                    {
                        return DataGridViewCellBorderStyle.RaisedHorizontal;
                    }
                    if ((this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.Inset) && (this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Inset))
                    {
                        return DataGridViewCellBorderStyle.SunkenHorizontal;
                    }
                }
                return DataGridViewCellBorderStyle.Custom;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 10))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(DataGridViewCellBorderStyle));
                }
                if (value == this.CellBorderStyle)
                {
                    return;
                }
                if (value == DataGridViewCellBorderStyle.Custom)
                {
                    throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[] { "CellBorderStyle" }));
                }
                this.dataGridViewOper[0x10000] = true;
                try
                {
                    switch (value)
                    {
                        case DataGridViewCellBorderStyle.Single:
                            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
                            goto Label_01DF;

                        case DataGridViewCellBorderStyle.Raised:
                            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Outset;
                            goto Label_01DF;

                        case DataGridViewCellBorderStyle.Sunken:
                            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Inset;
                            goto Label_01DF;

                        case DataGridViewCellBorderStyle.None:
                            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
                            goto Label_01DF;

                        case DataGridViewCellBorderStyle.SingleVertical:
                            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
                            if (!this.RightToLeftInternal)
                            {
                                break;
                            }
                            this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Single;
                            goto Label_01DF;

                        case DataGridViewCellBorderStyle.RaisedVertical:
                            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
                            this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                            this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                            goto Label_01DF;

                        case DataGridViewCellBorderStyle.SunkenVertical:
                            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
                            this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                            this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                            goto Label_01DF;

                        case DataGridViewCellBorderStyle.SingleHorizontal:
                            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
                            this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Single;
                            goto Label_01DF;

                        case DataGridViewCellBorderStyle.RaisedHorizontal:
                            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
                            this.advancedCellBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                            this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
                            goto Label_01DF;

                        case DataGridViewCellBorderStyle.SunkenHorizontal:
                            this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
                            this.advancedCellBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                            this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
                            goto Label_01DF;

                        default:
                            goto Label_01DF;
                    }
                    this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Single;
                }
                finally
                {
                    this.dataGridViewOper[0x10000] = false;
                }
            Label_01DF:
                this.OnCellBorderStyleChanged(EventArgs.Empty);
            }
        }

        internal bool CellMouseDownInContentBounds
        {
            get => 
                this.dataGridViewState2[0x10000000];
            set
            {
                this.dataGridViewState2[0x10000000] = value;
            }
        }

        internal DataGridViewCellPaintingEventArgs CellPaintingEventArgs
        {
            get
            {
                if (this.dgvcpe == null)
                {
                    this.dgvcpe = new DataGridViewCellPaintingEventArgs(this);
                }
                return this.dgvcpe;
            }
        }

        private DataGridViewCellStyleChangedEventArgs CellStyleChangedEventArgs
        {
            get
            {
                if (this.dgvcsce == null)
                {
                    this.dgvcsce = new DataGridViewCellStyleChangedEventArgs();
                }
                return this.dgvcsce;
            }
        }

        internal DataGridViewCellValueEventArgs CellValueEventArgs
        {
            get
            {
                if (this.dgvcve == null)
                {
                    this.dgvcve = new DataGridViewCellValueEventArgs();
                }
                return this.dgvcve;
            }
        }

        [System.Windows.Forms.SRCategory("CatBehavior"), DefaultValue(1), System.Windows.Forms.SRDescription("DataGridView_ClipboardCopyModeDescr"), Browsable(true)]
        public DataGridViewClipboardCopyMode ClipboardCopyMode
        {
            get => 
                this.clipboardCopyMode;
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 3))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(DataGridViewClipboardCopyMode));
                }
                this.clipboardCopyMode = value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false), DefaultValue(0), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int ColumnCount
        {
            get => 
                this.Columns.Count;
            set
            {
                if (value < 0)
                {
                    object[] args = new object[] { "ColumnCount", value.ToString(CultureInfo.CurrentCulture), 0.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("ColumnCount", System.Windows.Forms.SR.GetString("InvalidLowBoundArgumentEx", args));
                }
                if (this.DataSource != null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotSetColumnCountOnDataBoundDataGridView"));
                }
                if (value != this.Columns.Count)
                {
                    if (value == 0)
                    {
                        this.Columns.Clear();
                    }
                    else if (value >= this.Columns.Count)
                    {
                        while (value > this.Columns.Count)
                        {
                            int count = this.Columns.Count;
                            this.Columns.Add(null, null);
                            if (this.Columns.Count <= count)
                            {
                                return;
                            }
                        }
                    }
                    else
                    {
                        while (value < this.Columns.Count)
                        {
                            int num = this.Columns.Count;
                            this.Columns.RemoveAt(num - 1);
                            if (this.Columns.Count >= num)
                            {
                                return;
                            }
                        }
                    }
                }
            }
        }

        [Browsable(true), System.Windows.Forms.SRCategory("CatAppearance"), DefaultValue(2), System.Windows.Forms.SRDescription("DataGridView_ColumnHeadersBorderStyleDescr")]
        public DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle
        {
            get
            {
                switch (this.advancedColumnHeadersBorderStyle.All)
                {
                    case DataGridViewAdvancedCellBorderStyle.NotSet:
                        return DataGridViewHeaderBorderStyle.Custom;

                    case DataGridViewAdvancedCellBorderStyle.None:
                        return DataGridViewHeaderBorderStyle.None;

                    case DataGridViewAdvancedCellBorderStyle.Single:
                        return DataGridViewHeaderBorderStyle.Single;

                    case DataGridViewAdvancedCellBorderStyle.InsetDouble:
                        return DataGridViewHeaderBorderStyle.Sunken;

                    case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
                        return DataGridViewHeaderBorderStyle.Raised;
                }
                return DataGridViewHeaderBorderStyle.Custom;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 4))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(DataGridViewHeaderBorderStyle));
                }
                if (value == this.ColumnHeadersBorderStyle)
                {
                    return;
                }
                if (value == DataGridViewHeaderBorderStyle.Custom)
                {
                    throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[] { "ColumnHeadersBorderStyle" }));
                }
                this.dataGridViewOper[0x10000] = true;
                try
                {
                    switch (value)
                    {
                        case DataGridViewHeaderBorderStyle.Single:
                            this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
                            goto Label_00CC;

                        case DataGridViewHeaderBorderStyle.Raised:
                            this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
                            goto Label_00CC;

                        case DataGridViewHeaderBorderStyle.Sunken:
                            this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.InsetDouble;
                            goto Label_00CC;

                        case DataGridViewHeaderBorderStyle.None:
                            this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
                            goto Label_00CC;
                    }
                }
                finally
                {
                    this.dataGridViewOper[0x10000] = false;
                }
            Label_00CC:
                this.OnColumnHeadersBorderStyleChanged(EventArgs.Empty);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ColumnHeadersDefaultCellStyleDescr"), System.Windows.Forms.SRCategory("CatAppearance"), AmbientValue((string) null)]
        public DataGridViewCellStyle ColumnHeadersDefaultCellStyle
        {
            get
            {
                if (this.columnHeadersDefaultCellStyle == null)
                {
                    this.columnHeadersDefaultCellStyle = this.DefaultColumnHeadersDefaultCellStyle;
                }
                return this.columnHeadersDefaultCellStyle;
            }
            set
            {
                DataGridViewCellStyle columnHeadersDefaultCellStyle = this.ColumnHeadersDefaultCellStyle;
                columnHeadersDefaultCellStyle.RemoveScope(DataGridViewCellStyleScopes.ColumnHeaders);
                this.columnHeadersDefaultCellStyle = value;
                if (value != null)
                {
                    this.columnHeadersDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.ColumnHeaders);
                }
                DataGridViewCellStyleDifferences differencesFrom = columnHeadersDefaultCellStyle.GetDifferencesFrom(this.ColumnHeadersDefaultCellStyle);
                if (differencesFrom != DataGridViewCellStyleDifferences.None)
                {
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
                    this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        [Localizable(true), System.Windows.Forms.SRDescription("DataGridView_ColumnHeadersHeightDescr"), System.Windows.Forms.SRCategory("CatAppearance")]
        public int ColumnHeadersHeight
        {
            get => 
                this.columnHeadersHeight;
            set
            {
                if (value < 4)
                {
                    object[] args = new object[] { "ColumnHeadersHeight", value.ToString(CultureInfo.CurrentCulture), 4.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("ColumnHeadersHeight", System.Windows.Forms.SR.GetString("InvalidLowBoundArgumentEx", args));
                }
                if (value > 0x8000)
                {
                    object[] objArray2 = new object[] { "ColumnHeadersHeight", value.ToString(CultureInfo.CurrentCulture), 0x8000.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("ColumnHeadersHeight", System.Windows.Forms.SR.GetString("InvalidHighBoundArgumentEx", objArray2));
                }
                if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.cachedColumnHeadersHeight = value;
                }
                else if (this.columnHeadersHeight != value)
                {
                    this.SetColumnHeadersHeightInternal(value, true);
                }
            }
        }

        [RefreshProperties(RefreshProperties.All), System.Windows.Forms.SRDescription("DataGridView_ColumnHeadersHeightSizeModeDescr"), DefaultValue(0), System.Windows.Forms.SRCategory("CatBehavior")]
        public DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode
        {
            get => 
                this.columnHeadersHeightSizeMode;
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 2))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(DataGridViewColumnHeadersHeightSizeMode));
                }
                if (this.columnHeadersHeightSizeMode != value)
                {
                    DataGridViewAutoSizeModeEventArgs e = new DataGridViewAutoSizeModeEventArgs(this.columnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize);
                    this.columnHeadersHeightSizeMode = value;
                    this.OnColumnHeadersHeightSizeModeChanged(e);
                }
            }
        }

        [DefaultValue(true), System.Windows.Forms.SRCategory("CatAppearance"), System.Windows.Forms.SRDescription("DataGridViewColumnHeadersVisibleDescr")]
        public bool ColumnHeadersVisible
        {
            get => 
                this.dataGridViewState1[8];
            set
            {
                if (this.ColumnHeadersVisible != value)
                {
                    if (!value)
                    {
                        for (DataGridViewColumn column = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); column != null; column = this.Columns.GetNextColumn(column, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
                        {
                            if (column.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader)
                            {
                                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_ColumnHeadersCannotBeInvisible"));
                            }
                        }
                    }
                    using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ColumnHeadersVisible))
                    {
                        this.dataGridViewState1[8] = value;
                        this.layout.ColumnHeadersVisible = value;
                        this.displayedBandsInfo.EnsureDirtyState();
                        if (!this.AutoSize)
                        {
                            this.PerformLayoutPrivate(false, false, true, true);
                        }
                        this.InvalidateInside();
                        this.OnColumnHeadersGlobalAutoSize();
                    }
                }
            }
        }

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), MergableProperty(false), Editor("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor))]
        public DataGridViewColumnCollection Columns
        {
            get
            {
                if (this.dataGridViewColumns == null)
                {
                    this.dataGridViewColumns = this.CreateColumnsInstance();
                }
                return this.dataGridViewColumns;
            }
        }

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public DataGridViewCell CurrentCell
        {
            get
            {
                if ((this.ptCurrentCell.X == -1) && (this.ptCurrentCell.Y == -1))
                {
                    return null;
                }
                DataGridViewRow row = this.Rows[this.ptCurrentCell.Y];
                return row.Cells[this.ptCurrentCell.X];
            }
            set
            {
                if (((value != null) && ((value.RowIndex != this.ptCurrentCell.Y) || (value.ColumnIndex != this.ptCurrentCell.X))) || ((value == null) && (this.ptCurrentCell.X != -1)))
                {
                    if (value == null)
                    {
                        this.ClearSelection();
                        if (!this.SetCurrentCellAddressCore(-1, -1, true, true, false))
                        {
                            throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
                        }
                    }
                    else
                    {
                        if (value.DataGridView != this)
                        {
                            throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
                        }
                        if (!this.Columns[value.ColumnIndex].Visible || ((this.Rows.GetRowState(value.RowIndex) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None))
                        {
                            throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
                        }
                        if (!this.ScrollIntoView(value.ColumnIndex, value.RowIndex, true))
                        {
                            throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
                        }
                        if (!this.IsInnerCellOutOfBounds(value.ColumnIndex, value.RowIndex))
                        {
                            this.ClearSelection(value.ColumnIndex, value.RowIndex, true);
                            if (!this.SetCurrentCellAddressCore(value.ColumnIndex, value.RowIndex, true, false, false))
                            {
                                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
                            }
                        }
                    }
                }
            }
        }

        [Browsable(false)]
        public Point CurrentCellAddress =>
            this.ptCurrentCell;

        private DataGridViewCell CurrentCellInternal =>
            this.Rows.SharedRow(this.ptCurrentCell.Y).Cells[this.ptCurrentCell.X];

        private bool CurrentCellIsEditedAndOnlySelectedCell
        {
            get
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return false;
                }
                return (((this.editingControl != null) && (this.GetCellCount(DataGridViewElementStates.Selected) == 1)) && this.CurrentCellInternal.Selected);
            }
        }

        private bool CurrentCellIsFirstVisibleCell
        {
            get
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return false;
                }
                bool flag = null != this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                bool flag2 = -1 != this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
                return (!flag && !flag2);
            }
        }

        private bool CurrentCellIsLastVisibleCell
        {
            get
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return false;
                }
                bool flag = null != this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
                bool flag2 = -1 != this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
                return (!flag && !flag2);
            }
        }

        [Browsable(false)]
        public DataGridViewRow CurrentRow
        {
            get
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return null;
                }
                return this.Rows[this.ptCurrentCell.Y];
            }
        }

        internal Cursor CursorInternal
        {
            set
            {
                this.dataGridViewState2[0x200000] = true;
                try
                {
                    this.Cursor = value;
                }
                finally
                {
                    this.dataGridViewState2[0x200000] = false;
                }
            }
        }

        internal DataGridViewDataConnection DataConnection =>
            this.dataConnection;

        [DefaultValue(""), Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor)), System.Windows.Forms.SRDescription("DataGridViewDataMemberDescr"), System.Windows.Forms.SRCategory("CatData")]
        public string DataMember
        {
            get => 
                this.dataConnection?.DataMember;
            set
            {
                if (value != this.DataMember)
                {
                    this.CurrentCell = null;
                    if (this.dataConnection == null)
                    {
                        this.dataConnection = new DataGridViewDataConnection(this);
                    }
                    this.dataConnection.SetDataConnection(this.DataSource, value);
                    this.OnDataMemberChanged(EventArgs.Empty);
                }
            }
        }

        [AttributeProvider(typeof(IListSource)), System.Windows.Forms.SRCategory("CatData"), System.Windows.Forms.SRDescription("DataGridViewDataSourceDescr"), RefreshProperties(RefreshProperties.Repaint), DefaultValue((string) null)]
        public object DataSource
        {
            get => 
                this.dataConnection?.DataSource;
            set
            {
                if (value != this.DataSource)
                {
                    this.CurrentCell = null;
                    if (this.dataConnection == null)
                    {
                        this.dataConnection = new DataGridViewDataConnection(this);
                        this.dataConnection.SetDataConnection(value, this.DataMember);
                    }
                    else
                    {
                        if (this.dataConnection.ShouldChangeDataMember(value))
                        {
                            this.DataMember = "";
                        }
                        this.dataConnection.SetDataConnection(value, this.DataMember);
                        if (value == null)
                        {
                            this.dataConnection = null;
                        }
                    }
                    this.OnDataSourceChanged(EventArgs.Empty);
                }
            }
        }

        private static SolidBrush DefaultBackBrush =>
            ((SolidBrush) SystemBrushes.Window);

        private static SolidBrush DefaultBackgroundBrush =>
            ((SolidBrush) SystemBrushes.AppWorkspace);

        [System.Windows.Forms.SRCategory("CatAppearance"), System.Windows.Forms.SRDescription("DataGridView_DefaultCellStyleDescr"), AmbientValue((string) null)]
        public DataGridViewCellStyle DefaultCellStyle
        {
            get
            {
                if (this.defaultCellStyle == null)
                {
                    this.defaultCellStyle = this.DefaultDefaultCellStyle;
                    return this.defaultCellStyle;
                }
                if (((!(this.defaultCellStyle.BackColor == System.Drawing.Color.Empty) && !(this.defaultCellStyle.ForeColor == System.Drawing.Color.Empty)) && (!(this.defaultCellStyle.SelectionBackColor == System.Drawing.Color.Empty) && !(this.defaultCellStyle.SelectionForeColor == System.Drawing.Color.Empty))) && (((this.defaultCellStyle.Font != null) && (this.defaultCellStyle.Alignment != DataGridViewContentAlignment.NotSet)) && (this.defaultCellStyle.WrapMode != DataGridViewTriState.NotSet)))
                {
                    return this.defaultCellStyle;
                }
                DataGridViewCellStyle style = new DataGridViewCellStyle(this.defaultCellStyle) {
                    Scope = DataGridViewCellStyleScopes.None
                };
                if (this.defaultCellStyle.BackColor == System.Drawing.Color.Empty)
                {
                    style.BackColor = DefaultBackBrush.Color;
                }
                if (this.defaultCellStyle.ForeColor == System.Drawing.Color.Empty)
                {
                    style.ForeColor = base.ForeColor;
                    this.dataGridViewState1[0x400] = true;
                }
                if (this.defaultCellStyle.SelectionBackColor == System.Drawing.Color.Empty)
                {
                    style.SelectionBackColor = DefaultSelectionBackBrush.Color;
                }
                if (this.defaultCellStyle.SelectionForeColor == System.Drawing.Color.Empty)
                {
                    style.SelectionForeColor = DefaultSelectionForeBrush.Color;
                }
                if (this.defaultCellStyle.Font == null)
                {
                    style.Font = base.Font;
                    this.dataGridViewState1[0x2000000] = true;
                }
                if (this.defaultCellStyle.Alignment == DataGridViewContentAlignment.NotSet)
                {
                    style.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
                }
                if (this.defaultCellStyle.WrapMode == DataGridViewTriState.NotSet)
                {
                    style.WrapModeInternal = DataGridViewTriState.False;
                }
                style.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
                return style;
            }
            set
            {
                DataGridViewCellStyle defaultCellStyle = this.DefaultCellStyle;
                defaultCellStyle.RemoveScope(DataGridViewCellStyleScopes.DataGridView);
                this.defaultCellStyle = value;
                if (value != null)
                {
                    this.defaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
                }
                DataGridViewCellStyleDifferences differencesFrom = defaultCellStyle.GetDifferencesFrom(this.DefaultCellStyle);
                if (differencesFrom != DataGridViewCellStyleDifferences.None)
                {
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
                    this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        private DataGridViewCellStyle DefaultColumnHeadersDefaultCellStyle
        {
            get
            {
                DataGridViewCellStyle style = new DataGridViewCellStyle {
                    BackColor = DefaultHeadersBackBrush.Color,
                    ForeColor = DefaultForeBrush.Color,
                    SelectionBackColor = DefaultSelectionBackBrush.Color,
                    SelectionForeColor = DefaultSelectionForeBrush.Color,
                    Font = base.Font,
                    AlignmentInternal = DataGridViewContentAlignment.MiddleLeft,
                    WrapModeInternal = DataGridViewTriState.True
                };
                style.AddScope(this, DataGridViewCellStyleScopes.ColumnHeaders);
                this.dataGridViewState1[0x4000000] = true;
                return style;
            }
        }

        private DataGridViewCellStyle DefaultDefaultCellStyle
        {
            get
            {
                DataGridViewCellStyle style = new DataGridViewCellStyle {
                    BackColor = DefaultBackBrush.Color,
                    ForeColor = base.ForeColor,
                    SelectionBackColor = DefaultSelectionBackBrush.Color,
                    SelectionForeColor = DefaultSelectionForeBrush.Color,
                    Font = base.Font,
                    AlignmentInternal = DataGridViewContentAlignment.MiddleLeft,
                    WrapModeInternal = DataGridViewTriState.False
                };
                style.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
                this.dataGridViewState1[0x2000000] = true;
                this.dataGridViewState1[0x400] = true;
                return style;
            }
        }

        private static SolidBrush DefaultForeBrush =>
            ((SolidBrush) SystemBrushes.WindowText);

        private static System.Drawing.Color DefaultGridColor =>
            SystemColors.ControlDark;

        private static SolidBrush DefaultHeadersBackBrush =>
            ((SolidBrush) SystemBrushes.Control);

        private DataGridViewCellStyle DefaultRowHeadersDefaultCellStyle
        {
            get
            {
                DataGridViewCellStyle style = new DataGridViewCellStyle {
                    BackColor = DefaultHeadersBackBrush.Color,
                    ForeColor = DefaultForeBrush.Color,
                    SelectionBackColor = DefaultSelectionBackBrush.Color,
                    SelectionForeColor = DefaultSelectionForeBrush.Color,
                    Font = base.Font,
                    AlignmentInternal = DataGridViewContentAlignment.MiddleLeft,
                    WrapModeInternal = DataGridViewTriState.True
                };
                style.AddScope(this, DataGridViewCellStyleScopes.RowHeaders);
                this.dataGridViewState1[0x8000000] = true;
                return style;
            }
        }

        private static SolidBrush DefaultSelectionBackBrush =>
            ((SolidBrush) SystemBrushes.Highlight);

        private static SolidBrush DefaultSelectionForeBrush =>
            ((SolidBrush) SystemBrushes.HighlightText);

        protected override Size DefaultSize =>
            new Size(240, 150);

        internal DisplayedBandsData DisplayedBandsInfo =>
            this.displayedBandsInfo;

        public override Rectangle DisplayRectangle
        {
            get
            {
                Rectangle clientRectangle = base.ClientRectangle;
                if ((this.horizScrollBar != null) && this.horizScrollBar.Visible)
                {
                    clientRectangle.Height -= this.horizScrollBar.Height;
                }
                if ((this.vertScrollBar != null) && this.vertScrollBar.Visible)
                {
                    clientRectangle.Width -= this.vertScrollBar.Width;
                    if (this.RightToLeftInternal)
                    {
                        clientRectangle.X = this.vertScrollBar.Width;
                    }
                }
                return clientRectangle;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public Control EditingControl =>
            this.editingControl;

        [EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public Panel EditingPanel
        {
            get
            {
                if (this.editingPanel == null)
                {
                    this.editingPanel = new Panel();
                    this.editingPanel.AccessibleName = System.Windows.Forms.SR.GetString("DataGridView_AccEditingPanelAccName");
                }
                return this.editingPanel;
            }
        }

        [System.Windows.Forms.SRCategory("CatBehavior"), DefaultValue(2), System.Windows.Forms.SRDescription("DataGridView_EditModeDescr")]
        public DataGridViewEditMode EditMode
        {
            get => 
                this.editMode;
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 4))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(DataGridViewEditMode));
                }
                if (this.editMode != value)
                {
                    this.editMode = value;
                    this.OnEditModeChanged(EventArgs.Empty);
                }
            }
        }

        [System.Windows.Forms.SRCategory("CatAppearance"), DefaultValue(true), System.Windows.Forms.SRDescription("DataGridView_EnableHeadersVisualStylesDescr")]
        public bool EnableHeadersVisualStyles
        {
            get => 
                this.dataGridViewState2[0x40];
            set
            {
                if (this.dataGridViewState2[0x40] != value)
                {
                    this.dataGridViewState2[0x40] = value;
                    this.OnGlobalAutoSize();
                }
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DataGridViewCell FirstDisplayedCell
        {
            get
            {
                Point firstDisplayedCellAddress = this.FirstDisplayedCellAddress;
                if (firstDisplayedCellAddress.X >= 0)
                {
                    return this.Rows[firstDisplayedCellAddress.Y].Cells[firstDisplayedCellAddress.X];
                }
                return null;
            }
            set
            {
                if (value != null)
                {
                    DataGridViewCell cell = value;
                    if (cell.DataGridView != this)
                    {
                        throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
                    }
                    if ((cell.RowIndex == -1) || (cell.ColumnIndex == -1))
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_FirstDisplayedCellCannotBeAHeaderOrSharedCell"));
                    }
                    if (!cell.Visible)
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_FirstDisplayedCellCannotBeInvisible"));
                    }
                    if (!cell.Frozen)
                    {
                        if (!this.Rows[cell.RowIndex].Frozen)
                        {
                            this.FirstDisplayedScrollingRowIndex = cell.RowIndex;
                        }
                        if (!this.Columns[cell.ColumnIndex].Frozen)
                        {
                            this.FirstDisplayedScrollingColumnIndex = cell.ColumnIndex;
                        }
                    }
                }
            }
        }

        private Point FirstDisplayedCellAddress
        {
            get
            {
                Point point = new Point(-1, -1) {
                    Y = this.Rows.GetFirstRow(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen)
                };
                if ((point.Y == -1) && (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0))
                {
                    point.Y = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                }
                if (point.Y >= 0)
                {
                    point.X = this.FirstDisplayedColumnIndex;
                }
                return point;
            }
        }

        internal int FirstDisplayedColumnIndex
        {
            get
            {
                if (!base.IsHandleCreated)
                {
                    return -1;
                }
                int firstDisplayedScrollingCol = -1;
                DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
                if (firstColumn != null)
                {
                    if (firstColumn.Frozen)
                    {
                        return firstColumn.Index;
                    }
                    if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
                    {
                        firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
                    }
                }
                return firstDisplayedScrollingCol;
            }
        }

        internal int FirstDisplayedRowIndex
        {
            get
            {
                if (!base.IsHandleCreated)
                {
                    return -1;
                }
                int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                if (((firstRow != -1) && ((this.Rows.GetRowState(firstRow) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)) && (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0))
                {
                    firstRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                }
                return firstRow;
            }
        }

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public int FirstDisplayedScrollingColumnHiddenWidth =>
            this.negOffset;

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int FirstDisplayedScrollingColumnIndex
        {
            get => 
                this.displayedBandsInfo.FirstDisplayedScrollingCol;
            set
            {
                if ((value < 0) || (value >= this.Columns.Count))
                {
                    throw new ArgumentOutOfRangeException("value");
                }
                if (!this.Columns[value].Visible)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_FirstDisplayedScrollingColumnCannotBeInvisible"));
                }
                if (this.Columns[value].Frozen)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_FirstDisplayedScrollingColumnCannotBeFrozen"));
                }
                if (!base.IsHandleCreated)
                {
                    this.CreateHandle();
                }
                int width = this.layout.Data.Width;
                if (width <= 0)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_NoRoomForDisplayedColumns"));
                }
                if (this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen) >= width)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_FrozenColumnsPreventFirstDisplayedScrollingColumn"));
                }
                if (((value != this.displayedBandsInfo.FirstDisplayedScrollingCol) && ((this.ptCurrentCell.X < 0) || this.CommitEdit(DataGridViewDataErrorContexts.Scroll | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, false, false))) && !this.IsColumnOutOfBounds(value))
                {
                    this.ScrollColumnIntoView(value, -1, true, false);
                    int num3 = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - width;
                    while ((this.displayedBandsInfo.FirstDisplayedScrollingCol != value) && (this.HorizontalOffset < num3))
                    {
                        this.ScrollColumns(1);
                    }
                }
            }
        }

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public int FirstDisplayedScrollingRowIndex
        {
            get => 
                this.displayedBandsInfo.FirstDisplayedScrollingRow;
            set
            {
                if ((value < 0) || (value >= this.Rows.Count))
                {
                    throw new ArgumentOutOfRangeException("value");
                }
                if ((this.Rows.GetRowState(value) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_FirstDisplayedScrollingRowCannotBeInvisible"));
                }
                if ((this.Rows.GetRowState(value) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_FirstDisplayedScrollingRowCannotBeFrozen"));
                }
                if (!base.IsHandleCreated)
                {
                    this.CreateHandle();
                }
                int height = this.layout.Data.Height;
                if (height <= 0)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_NoRoomForDisplayedRows"));
                }
                if (this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen) >= height)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_FrozenRowsPreventFirstDisplayedScrollingRow"));
                }
                if (((value != this.displayedBandsInfo.FirstDisplayedScrollingRow) && ((this.ptCurrentCell.X < 0) || this.CommitEdit(DataGridViewDataErrorContexts.Scroll | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, false, false))) && !this.IsRowOutOfBounds(value))
                {
                    if (value > this.displayedBandsInfo.FirstDisplayedScrollingRow)
                    {
                        int rows = this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, value);
                        this.ScrollRowsByCount(rows, (rows > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
                    }
                    else
                    {
                        this.ScrollRowIntoView(-1, value, true, false);
                    }
                }
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public override System.Drawing.Font Font
        {
            get => 
                base.Font;
            set
            {
                base.Font = value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override System.Drawing.Color ForeColor
        {
            get => 
                base.ForeColor;
            set
            {
                base.ForeColor = value;
            }
        }

        [System.Windows.Forms.SRCategory("CatAppearance"), System.Windows.Forms.SRDescription("DataGridViewGridColorDescr")]
        public System.Drawing.Color GridColor
        {
            get => 
                this.gridPen.Color;
            set
            {
                if (value.IsEmpty)
                {
                    throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_EmptyColor", new object[] { "GridColor" }));
                }
                if (value.A < 0xff)
                {
                    throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_TransparentColor", new object[] { "GridColor" }));
                }
                if (!value.Equals(this.gridPen.Color))
                {
                    this.gridPen = new Pen(value);
                    this.OnGridColorChanged(EventArgs.Empty);
                }
            }
        }

        internal Pen GridPen =>
            this.gridPen;

        internal int HorizontalOffset
        {
            get => 
                this.horizontalOffset;
            set
            {
                if (value < 0)
                {
                    value = 0;
                }
                int num = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - this.layout.Data.Width;
                if ((value > num) && (num > 0))
                {
                    value = num;
                }
                if (value != this.horizontalOffset)
                {
                    ScrollEventType type;
                    int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
                    int change = this.horizontalOffset - value;
                    if (this.horizScrollBar.Enabled)
                    {
                        this.horizScrollBar.Value = value;
                    }
                    this.horizontalOffset = value;
                    int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                    Rectangle data = this.layout.Data;
                    if (this.layout.ColumnHeadersVisible)
                    {
                        data = Rectangle.Union(data, this.layout.ColumnHeaders);
                    }
                    else if (this.SingleVerticalBorderAdded)
                    {
                        if (!this.RightToLeftInternal)
                        {
                            data.X--;
                        }
                        data.Width++;
                    }
                    if (this.SingleVerticalBorderAdded && (columnsWidth > 0))
                    {
                        if (!this.RightToLeftInternal)
                        {
                            data.X++;
                        }
                        data.Width--;
                    }
                    if (!this.RightToLeftInternal)
                    {
                        data.X += columnsWidth;
                    }
                    data.Width -= columnsWidth;
                    this.displayedBandsInfo.FirstDisplayedScrollingCol = this.ComputeFirstVisibleScrollingColumn();
                    this.ComputeVisibleColumns();
                    if (((this.editingControl != null) && !this.Columns[this.ptCurrentCell.X].Frozen) && (this.displayedBandsInfo.FirstDisplayedScrollingCol > -1))
                    {
                        this.PositionEditingControl(true, false, false);
                    }
                    this.UpdateMouseEnteredCell(null, null);
                    if (firstDisplayedScrollingCol == this.displayedBandsInfo.FirstDisplayedScrollingCol)
                    {
                        type = (change > 0) ? ScrollEventType.SmallIncrement : ScrollEventType.SmallDecrement;
                    }
                    else if (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol))
                    {
                        type = (this.Columns.GetColumnCount(DataGridViewElementStates.Visible, firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol) > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement;
                    }
                    else
                    {
                        type = (this.Columns.GetColumnCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingCol, firstDisplayedScrollingCol) > 1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement;
                    }
                    System.Windows.Forms.NativeMethods.RECT[] rects = this.CreateScrollableRegion(data);
                    if (this.RightToLeftInternal)
                    {
                        change = -change;
                    }
                    this.ScrollRectangles(rects, change);
                    if (!this.dataGridViewState2[0x8000])
                    {
                        this.OnScroll(type, this.horizontalOffset + change, this.horizontalOffset, ScrollOrientation.HorizontalScroll);
                    }
                    this.FlushDisplayedChanged();
                }
            }
        }

        protected System.Windows.Forms.ScrollBar HorizontalScrollBar =>
            this.horizScrollBar;

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int HorizontalScrollingOffset
        {
            get => 
                this.horizontalOffset;
            set
            {
                if (value < 0)
                {
                    object[] args = new object[] { "HorizontalScrollingOffset", value.ToString(CultureInfo.CurrentCulture), 0.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("HorizontalScrollingOffset", System.Windows.Forms.SR.GetString("InvalidLowBoundArgumentEx", args));
                }
                if (((value <= 0) || ((this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - this.layout.Data.Width) > 0)) && (value != this.horizontalOffset))
                {
                    this.HorizontalOffset = value;
                }
            }
        }

        private Timer HorizScrollTimer
        {
            get
            {
                if (this.horizScrollTimer == null)
                {
                    this.horizScrollTimer = new Timer();
                    this.horizScrollTimer.Tick += new EventHandler(this.HorizScrollTimer_Tick);
                }
                return this.horizScrollTimer;
            }
        }

        private bool InAdjustFillingColumns
        {
            get
            {
                if (!this.dataGridViewOper[0x80000])
                {
                    return this.dataGridViewOper[0x40000];
                }
                return true;
            }
        }

        internal bool InBeginEdit =>
            this.dataGridViewOper[0x200000];

        internal bool InDisplayIndexAdjustments
        {
            get => 
                this.dataGridViewOper[0x800];
            set
            {
                this.dataGridViewOper[0x800] = value;
            }
        }

        internal bool InEndEdit =>
            this.dataGridViewOper[0x400000];

        private DataGridViewCellStyle InheritedEditingCellStyle
        {
            get
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return null;
                }
                return this.CurrentCellInternal.GetInheritedStyleInternal(this.ptCurrentCell.Y);
            }
        }

        internal bool InInitialization =>
            this.dataGridViewState2[0x80000];

        internal bool InSortOperation =>
            this.dataGridViewOper[0x40];

        [Browsable(false)]
        public bool IsCurrentCellDirty =>
            this.dataGridViewState1[0x20000];

        private bool IsCurrentCellDirtyInternal
        {
            set
            {
                if (value != this.dataGridViewState1[0x20000])
                {
                    this.dataGridViewState1[0x20000] = value;
                    this.OnCurrentCellDirtyStateChanged(EventArgs.Empty);
                }
            }
        }

        [Browsable(false)]
        public bool IsCurrentCellInEditMode
        {
            get
            {
                if (this.editingControl == null)
                {
                    return this.dataGridViewState1[0x8000];
                }
                return true;
            }
        }

        [Browsable(false)]
        public bool IsCurrentRowDirty
        {
            get
            {
                if (!this.VirtualMode)
                {
                    if (!this.dataGridViewState1[0x40000])
                    {
                        return this.IsCurrentCellDirty;
                    }
                    return true;
                }
                QuestionEventArgs e = new QuestionEventArgs(this.dataGridViewState1[0x40000] || this.IsCurrentCellDirty);
                this.OnRowDirtyStateNeeded(e);
                return e.Response;
            }
        }

        internal bool IsCurrentRowDirtyInternal
        {
            set
            {
                if (value != this.dataGridViewState1[0x40000])
                {
                    this.dataGridViewState1[0x40000] = value;
                    if ((this.RowHeadersVisible && this.ShowEditingIcon) && (this.ptCurrentCell.Y >= 0))
                    {
                        this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
                    }
                }
            }
        }

        private bool IsEscapeKeyEffective =>
            (((((this.dataGridViewOper[1] || this.dataGridViewOper[2]) || (this.dataGridViewOper[0x80] || this.dataGridViewOper[0x100])) || (this.dataGridViewOper[0x20] || this.IsCurrentCellDirty)) || ((this.VirtualMode || (this.DataSource != null)) && this.IsCurrentRowDirty)) || (((this.EditMode != DataGridViewEditMode.EditOnEnter) && (this.editingControl != null)) || this.dataGridViewState1[0x80000]));

        private bool IsMinimized
        {
            get
            {
                Form topLevelControlInternal = base.TopLevelControlInternal as Form;
                return ((topLevelControlInternal != null) && (topLevelControlInternal.WindowState == FormWindowState.Minimized));
            }
        }

        internal bool IsRestricted
        {
            get
            {
                if (!this.dataGridViewState1[0x10000000])
                {
                    this.dataGridViewState1[0x20000000] = false;
                    try
                    {
                        System.Windows.Forms.IntSecurity.AllWindows.Demand();
                    }
                    catch (SecurityException)
                    {
                        this.dataGridViewState1[0x20000000] = true;
                    }
                    catch
                    {
                        this.dataGridViewState1[0x20000000] = true;
                        this.dataGridViewState1[0x10000000] = true;
                        throw;
                    }
                    this.dataGridViewState1[0x10000000] = true;
                }
                return this.dataGridViewState1[0x20000000];
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DataGridViewCell this[int columnIndex, int rowIndex]
        {
            get
            {
                DataGridViewRow row = this.Rows[rowIndex];
                return row.Cells[columnIndex];
            }
            set
            {
                DataGridViewRow row = this.Rows[rowIndex];
                row.Cells[columnIndex] = value;
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public DataGridViewCell this[string columnName, int rowIndex]
        {
            get
            {
                DataGridViewRow row = this.Rows[rowIndex];
                return row.Cells[columnName];
            }
            set
            {
                DataGridViewRow row = this.Rows[rowIndex];
                row.Cells[columnName] = value;
            }
        }

        internal LayoutData LayoutInfo
        {
            get
            {
                if (this.layout.dirty && base.IsHandleCreated)
                {
                    this.PerformLayoutPrivate(false, true, false, false);
                }
                return this.layout;
            }
        }

        internal Point MouseDownCellAddress =>
            this.ptMouseDownCell;

        internal Point MouseEnteredCellAddress =>
            this.ptMouseEnteredCell;

        private bool MouseOverEditingControl
        {
            get
            {
                if (this.editingControl != null)
                {
                    Point pt = base.PointToClient(Control.MousePosition);
                    return this.editingControl.Bounds.Contains(pt);
                }
                return false;
            }
        }

        private bool MouseOverEditingPanel
        {
            get
            {
                if (this.editingPanel != null)
                {
                    Point pt = base.PointToClient(Control.MousePosition);
                    return this.editingPanel.Bounds.Contains(pt);
                }
                return false;
            }
        }

        private bool MouseOverScrollBar
        {
            get
            {
                Point pt = base.PointToClient(Control.MousePosition);
                return ((((this.vertScrollBar != null) && this.vertScrollBar.Visible) && this.vertScrollBar.Bounds.Contains(pt)) || (((this.horizScrollBar != null) && this.horizScrollBar.Visible) && this.horizScrollBar.Bounds.Contains(pt)));
            }
        }

        [System.Windows.Forms.SRCategory("CatBehavior"), System.Windows.Forms.SRDescription("DataGridView_MultiSelectDescr"), DefaultValue(true)]
        public bool MultiSelect
        {
            get => 
                this.dataGridViewState1[0x80];
            set
            {
                if (this.MultiSelect != value)
                {
                    this.ClearSelection();
                    this.dataGridViewState1[0x80] = value;
                    this.OnMultiSelectChanged(EventArgs.Empty);
                }
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int NewRowIndex =>
            this.newRowIndex;

        internal bool NoDimensionChangeAllowed =>
            (this.noDimensionChangeCount > 0);

        private int NoSelectionChangeCount
        {
            get => 
                this.noSelectionChangeCount;
            set
            {
                this.noSelectionChangeCount = value;
                if (value == 0)
                {
                    this.FlushSelectionChanged();
                }
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Windows.Forms.Padding Padding
        {
            get => 
                base.Padding;
            set
            {
                base.Padding = value;
            }
        }

        internal DataGridViewCellStyle PlaceholderCellStyle
        {
            get
            {
                if (this.placeholderCellStyle == null)
                {
                    this.placeholderCellStyle = new DataGridViewCellStyle();
                }
                return this.placeholderCellStyle;
            }
        }

        [System.Windows.Forms.SRCategory("CatBehavior"), DefaultValue(false), System.Windows.Forms.SRDescription("DataGridView_ReadOnlyDescr"), Browsable(true)]
        public bool ReadOnly
        {
            get => 
                this.dataGridViewState1[0x100000];
            set
            {
                if (value != this.dataGridViewState1[0x100000])
                {
                    if ((value && (this.ptCurrentCell.X != -1)) && (this.IsCurrentCellInEditMode && !this.EndEdit(DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Parsing, DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false)))
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
                    }
                    this.dataGridViewState1[0x100000] = value;
                    if (value)
                    {
                        try
                        {
                            this.dataGridViewOper[0x4000] = true;
                            for (int i = 0; i < this.Columns.Count; i++)
                            {
                                this.SetReadOnlyColumnCore(i, false);
                            }
                            int count = this.Rows.Count;
                            for (int j = 0; j < count; j++)
                            {
                                this.SetReadOnlyRowCore(j, false);
                            }
                        }
                        finally
                        {
                            this.dataGridViewOper[0x4000] = false;
                        }
                    }
                    this.OnReadOnlyChanged(EventArgs.Empty);
                }
            }
        }

        internal bool ResizingOperationAboutToStart =>
            this.dataGridViewOper[0x800000];

        internal bool RightToLeftInternal
        {
            get
            {
                if (!this.dataGridViewState2[0x1000])
                {
                    this.dataGridViewState2[0x800] = this.RightToLeft == RightToLeft.Yes;
                    this.dataGridViewState2[0x1000] = true;
                }
                return this.dataGridViewState2[0x800];
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), DefaultValue(0), Browsable(false)]
        public int RowCount
        {
            get => 
                this.Rows.Count;
            set
            {
                if (this.AllowUserToAddRowsInternal)
                {
                    if (value < 1)
                    {
                        object[] args = new object[] { "RowCount", value.ToString(CultureInfo.CurrentCulture), 1.ToString(CultureInfo.CurrentCulture) };
                        throw new ArgumentOutOfRangeException("RowCount", System.Windows.Forms.SR.GetString("InvalidLowBoundArgumentEx", args));
                    }
                }
                else if (value < 0)
                {
                    object[] objArray2 = new object[] { "RowCount", value.ToString(CultureInfo.CurrentCulture), 0.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("RowCount", System.Windows.Forms.SR.GetString("InvalidLowBoundArgumentEx", objArray2));
                }
                if (this.DataSource != null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CannotSetRowCountOnDataBoundDataGridView"));
                }
                if (value != this.Rows.Count)
                {
                    if (value == 0)
                    {
                        this.Rows.Clear();
                    }
                    else if (value < this.Rows.Count)
                    {
                        while (value < this.Rows.Count)
                        {
                            int count = this.Rows.Count;
                            this.Rows.RemoveAt(count - (this.AllowUserToAddRowsInternal ? 2 : 1));
                            if (this.Rows.Count >= count)
                            {
                                return;
                            }
                        }
                    }
                    else
                    {
                        if (this.Columns.Count == 0)
                        {
                            DataGridViewTextBoxColumn dataGridViewColumn = new DataGridViewTextBoxColumn();
                            this.Columns.Add(dataGridViewColumn);
                        }
                        int num2 = value - this.Rows.Count;
                        if (num2 > 0)
                        {
                            this.Rows.Add(num2);
                        }
                    }
                }
            }
        }

        [System.Windows.Forms.SRCategory("CatAppearance"), System.Windows.Forms.SRDescription("DataGridView_RowHeadersBorderStyleDescr"), Browsable(true), DefaultValue(2)]
        public DataGridViewHeaderBorderStyle RowHeadersBorderStyle
        {
            get
            {
                switch (this.advancedRowHeadersBorderStyle.All)
                {
                    case DataGridViewAdvancedCellBorderStyle.NotSet:
                        return DataGridViewHeaderBorderStyle.Custom;

                    case DataGridViewAdvancedCellBorderStyle.None:
                        return DataGridViewHeaderBorderStyle.None;

                    case DataGridViewAdvancedCellBorderStyle.Single:
                        return DataGridViewHeaderBorderStyle.Single;

                    case DataGridViewAdvancedCellBorderStyle.InsetDouble:
                        return DataGridViewHeaderBorderStyle.Sunken;

                    case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
                        return DataGridViewHeaderBorderStyle.Raised;
                }
                return DataGridViewHeaderBorderStyle.Custom;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 4))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(DataGridViewHeaderBorderStyle));
                }
                if (value == this.RowHeadersBorderStyle)
                {
                    return;
                }
                if (value == DataGridViewHeaderBorderStyle.Custom)
                {
                    throw new ArgumentException(System.Windows.Forms.SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[] { "RowHeadersBorderStyle" }));
                }
                this.dataGridViewOper[0x10000] = true;
                try
                {
                    switch (value)
                    {
                        case DataGridViewHeaderBorderStyle.Single:
                            this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
                            goto Label_00CC;

                        case DataGridViewHeaderBorderStyle.Raised:
                            this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
                            goto Label_00CC;

                        case DataGridViewHeaderBorderStyle.Sunken:
                            this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.InsetDouble;
                            goto Label_00CC;

                        case DataGridViewHeaderBorderStyle.None:
                            this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
                            goto Label_00CC;
                    }
                }
                finally
                {
                    this.dataGridViewOper[0x10000] = false;
                }
            Label_00CC:
                this.OnRowHeadersBorderStyleChanged(EventArgs.Empty);
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowHeadersDefaultCellStyleDescr"), AmbientValue((string) null), System.Windows.Forms.SRCategory("CatAppearance")]
        public DataGridViewCellStyle RowHeadersDefaultCellStyle
        {
            get
            {
                if (this.rowHeadersDefaultCellStyle == null)
                {
                    this.rowHeadersDefaultCellStyle = this.DefaultRowHeadersDefaultCellStyle;
                }
                return this.rowHeadersDefaultCellStyle;
            }
            set
            {
                DataGridViewCellStyle rowHeadersDefaultCellStyle = this.RowHeadersDefaultCellStyle;
                rowHeadersDefaultCellStyle.RemoveScope(DataGridViewCellStyleScopes.RowHeaders);
                this.rowHeadersDefaultCellStyle = value;
                if (value != null)
                {
                    this.rowHeadersDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.RowHeaders);
                }
                DataGridViewCellStyleDifferences differencesFrom = rowHeadersDefaultCellStyle.GetDifferencesFrom(this.RowHeadersDefaultCellStyle);
                if (differencesFrom != DataGridViewCellStyleDifferences.None)
                {
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
                    this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        [System.Windows.Forms.SRCategory("CatAppearance"), System.Windows.Forms.SRDescription("DataGridViewRowHeadersVisibleDescr"), DefaultValue(true)]
        public bool RowHeadersVisible
        {
            get => 
                this.dataGridViewState1[0x10];
            set
            {
                if (this.RowHeadersVisible != value)
                {
                    if (!value && ((this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.AllHeaders) || (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.DisplayedHeaders)))
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_RowHeadersCannotBeInvisible"));
                    }
                    using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.RowHeadersVisible))
                    {
                        this.dataGridViewState1[0x10] = value;
                        this.layout.RowHeadersVisible = value;
                        this.displayedBandsInfo.EnsureDirtyState();
                        if (!this.AutoSize)
                        {
                            this.PerformLayoutPrivate(false, false, true, true);
                        }
                        this.InvalidateInside();
                        this.OnRowHeadersGlobalAutoSize(value);
                    }
                }
            }
        }

        [System.Windows.Forms.SRCategory("CatLayout"), Localizable(true), System.Windows.Forms.SRDescription("DataGridView_RowHeadersWidthDescr")]
        public int RowHeadersWidth
        {
            get => 
                this.rowHeadersWidth;
            set
            {
                if (value < 4)
                {
                    object[] args = new object[] { "RowHeadersWidth", value.ToString(CultureInfo.CurrentCulture), 4.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("RowHeadersWidth", System.Windows.Forms.SR.GetString("InvalidLowBoundArgumentEx", args));
                }
                if (value > 0x8000)
                {
                    object[] objArray2 = new object[] { "RowHeadersWidth", value.ToString(CultureInfo.CurrentCulture), 0x8000.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("RowHeadersWidth", System.Windows.Forms.SR.GetString("InvalidHighBoundArgumentEx", objArray2));
                }
                if ((this.RowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing) && (this.RowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing))
                {
                    this.cachedRowHeadersWidth = value;
                }
                else if (this.rowHeadersWidth != value)
                {
                    this.RowHeadersWidthInternal = value;
                }
            }
        }

        private int RowHeadersWidthInternal
        {
            set
            {
                using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.RowHeadersWidth))
                {
                    this.rowHeadersWidth = value;
                    if (this.AutoSize)
                    {
                        this.InvalidateInside();
                    }
                    else if (this.layout.RowHeadersVisible)
                    {
                        this.PerformLayoutPrivate(false, false, true, true);
                        this.InvalidateInside();
                    }
                    this.OnRowHeadersWidthChanged(EventArgs.Empty);
                }
            }
        }

        [System.Windows.Forms.SRCategory("CatBehavior"), System.Windows.Forms.SRDescription("DataGridView_RowHeadersWidthSizeModeDescr"), DefaultValue(0), RefreshProperties(RefreshProperties.All)]
        public DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode
        {
            get => 
                this.rowHeadersWidthSizeMode;
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 4))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(DataGridViewRowHeadersWidthSizeMode));
                }
                if (this.rowHeadersWidthSizeMode != value)
                {
                    DataGridViewAutoSizeModeEventArgs e = new DataGridViewAutoSizeModeEventArgs((this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing));
                    this.rowHeadersWidthSizeMode = value;
                    this.OnRowHeadersWidthSizeModeChanged(e);
                }
            }
        }

        internal DataGridViewRowHeightInfoNeededEventArgs RowHeightInfoNeededEventArgs
        {
            get
            {
                if (this.dgvrhine == null)
                {
                    this.dgvrhine = new DataGridViewRowHeightInfoNeededEventArgs();
                }
                return this.dgvrhine;
            }
        }

        internal DataGridViewRowPostPaintEventArgs RowPostPaintEventArgs
        {
            get
            {
                if (this.dgvrpope == null)
                {
                    this.dgvrpope = new DataGridViewRowPostPaintEventArgs(this);
                }
                return this.dgvrpope;
            }
        }

        internal DataGridViewRowPrePaintEventArgs RowPrePaintEventArgs
        {
            get
            {
                if (this.dgvrprpe == null)
                {
                    this.dgvrprpe = new DataGridViewRowPrePaintEventArgs(this);
                }
                return this.dgvrprpe;
            }
        }

        [Browsable(false)]
        public DataGridViewRowCollection Rows
        {
            get
            {
                if (this.dataGridViewRows == null)
                {
                    this.dataGridViewRows = this.CreateRowsInstance();
                }
                return this.dataGridViewRows;
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_RowsDefaultCellStyleDescr"), System.Windows.Forms.SRCategory("CatAppearance")]
        public DataGridViewCellStyle RowsDefaultCellStyle
        {
            get
            {
                if (this.rowsDefaultCellStyle == null)
                {
                    this.rowsDefaultCellStyle = new DataGridViewCellStyle();
                    this.rowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.Rows);
                }
                return this.rowsDefaultCellStyle;
            }
            set
            {
                DataGridViewCellStyle rowsDefaultCellStyle = this.RowsDefaultCellStyle;
                rowsDefaultCellStyle.RemoveScope(DataGridViewCellStyleScopes.Rows);
                this.rowsDefaultCellStyle = value;
                if (value != null)
                {
                    this.rowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.Rows);
                }
                DataGridViewCellStyleDifferences differencesFrom = rowsDefaultCellStyle.GetDifferencesFrom(this.RowsDefaultCellStyle);
                if (differencesFrom != DataGridViewCellStyleDifferences.None)
                {
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
                    this.OnRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        [Browsable(true), System.Windows.Forms.SRCategory("CatAppearance"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), System.Windows.Forms.SRDescription("DataGridView_RowTemplateDescr")]
        public DataGridViewRow RowTemplate
        {
            get
            {
                if (this.rowTemplate == null)
                {
                    this.rowTemplate = new DataGridViewRow();
                }
                return this.rowTemplate;
            }
            set
            {
                DataGridViewRow row = value;
                if ((row != null) && (row.DataGridView != null))
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_RowAlreadyBelongsToDataGridView"));
                }
                this.rowTemplate = row;
            }
        }

        internal DataGridViewRow RowTemplateClone
        {
            get
            {
                DataGridViewRow dataGridViewRow = (DataGridViewRow) this.RowTemplate.Clone();
                this.CompleteCellsCollection(dataGridViewRow);
                return dataGridViewRow;
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ScrollBarsDescr"), DefaultValue(3), System.Windows.Forms.SRCategory("CatLayout"), Localizable(true)]
        public System.Windows.Forms.ScrollBars ScrollBars
        {
            get => 
                this.scrollBars;
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 3))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(System.Windows.Forms.ScrollBars));
                }
                if (this.scrollBars != value)
                {
                    using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ScrollBars))
                    {
                        DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
                        int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
                        if (((firstColumn != null) && (firstRow != -1)) && !this.ScrollIntoView(firstColumn.Index, firstRow, false))
                        {
                            throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
                        }
                        this.scrollBars = value;
                        if (!this.AutoSize)
                        {
                            this.PerformLayoutPrivate(false, false, true, true);
                        }
                        base.Invalidate();
                    }
                }
            }
        }

        [Browsable(false)]
        public DataGridViewSelectedCellCollection SelectedCells
        {
            get
            {
                DataGridViewSelectedCellCollection cells = new DataGridViewSelectedCellCollection();
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                        cells.AddCellLinkedList(this.individualSelectedCells);
                        return cells;

                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        foreach (int num2 in (IEnumerable) this.selectedBandIndexes)
                        {
                            DataGridViewRow row2 = this.Rows[num2];
                            foreach (DataGridViewCell cell in row2.Cells)
                            {
                                cells.Add(cell);
                            }
                        }
                        if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
                        {
                            cells.AddCellLinkedList(this.individualSelectedCells);
                        }
                        return cells;

                    case DataGridViewSelectionMode.FullColumnSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        foreach (int num in (IEnumerable) this.selectedBandIndexes)
                        {
                            foreach (DataGridViewRow row in (IEnumerable) this.Rows)
                            {
                                cells.Add(row.Cells[num]);
                            }
                        }
                        if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
                        {
                            cells.AddCellLinkedList(this.individualSelectedCells);
                        }
                        return cells;
                }
                return cells;
            }
        }

        [Browsable(false)]
        public DataGridViewSelectedColumnCollection SelectedColumns
        {
            get
            {
                DataGridViewSelectedColumnCollection columns = new DataGridViewSelectedColumnCollection();
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        return columns;

                    case DataGridViewSelectionMode.FullColumnSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        foreach (int num in (IEnumerable) this.selectedBandIndexes)
                        {
                            columns.Add(this.Columns[num]);
                        }
                        return columns;
                }
                return columns;
            }
        }

        [Browsable(false)]
        public DataGridViewSelectedRowCollection SelectedRows
        {
            get
            {
                DataGridViewSelectedRowCollection rows = new DataGridViewSelectedRowCollection();
                switch (this.SelectionMode)
                {
                    case DataGridViewSelectionMode.CellSelect:
                    case DataGridViewSelectionMode.FullColumnSelect:
                    case DataGridViewSelectionMode.ColumnHeaderSelect:
                        return rows;

                    case DataGridViewSelectionMode.FullRowSelect:
                    case DataGridViewSelectionMode.RowHeaderSelect:
                        foreach (int num in (IEnumerable) this.selectedBandIndexes)
                        {
                            rows.Add(this.Rows[num]);
                        }
                        return rows;
                }
                return rows;
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_SelectionModeDescr"), DefaultValue(3), System.Windows.Forms.SRCategory("CatBehavior"), Browsable(true)]
        public DataGridViewSelectionMode SelectionMode
        {
            get => 
                this.selectionMode;
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 4))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(DataGridViewSelectionMode));
                }
                if (this.SelectionMode != value)
                {
                    if (!this.dataGridViewState2[0x80000] && ((value == DataGridViewSelectionMode.FullColumnSelect) || (value == DataGridViewSelectionMode.ColumnHeaderSelect)))
                    {
                        foreach (DataGridViewColumn column in this.Columns)
                        {
                            if (column.SortMode == DataGridViewColumnSortMode.Automatic)
                            {
                                throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_SelectionModeAndSortModeClash", new object[] { value.ToString() }));
                            }
                        }
                    }
                    this.ClearSelection();
                    this.selectionMode = value;
                }
            }
        }

        [DefaultValue(true), System.Windows.Forms.SRCategory("CatAppearance"), System.Windows.Forms.SRDescription("DataGridView_ShowCellErrorsDescr")]
        public bool ShowCellErrors
        {
            get => 
                this.dataGridViewState2[0x80];
            set
            {
                if (this.ShowCellErrors != value)
                {
                    this.dataGridViewState2[0x80] = value;
                    if (base.IsHandleCreated && !base.DesignMode)
                    {
                        if ((value && !this.ShowRowErrors) && !this.ShowCellToolTips)
                        {
                            this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
                        }
                        if ((!value && !this.ShowRowErrors) && !this.ShowCellToolTips)
                        {
                            this.toolTipCaption = string.Empty;
                            this.toolTipControl.Activate(false);
                        }
                        if (!value && (this.ShowRowErrors || this.ShowCellToolTips))
                        {
                            this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
                        }
                        this.OnGlobalAutoSize();
                    }
                    if (!this.layout.dirty && !base.DesignMode)
                    {
                        base.Invalidate(Rectangle.Union(this.layout.Data, this.layout.ColumnHeaders));
                        base.Invalidate(this.layout.TopLeftHeader);
                    }
                }
            }
        }

        [DefaultValue(true), System.Windows.Forms.SRCategory("CatAppearance"), System.Windows.Forms.SRDescription("DataGridView_ShowCellToolTipsDescr")]
        public bool ShowCellToolTips
        {
            get => 
                this.dataGridViewState2[0x100];
            set
            {
                if (this.ShowCellToolTips != value)
                {
                    this.dataGridViewState2[0x100] = value;
                    if (base.IsHandleCreated && !base.DesignMode)
                    {
                        if ((value && !this.ShowRowErrors) && !this.ShowCellErrors)
                        {
                            this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
                        }
                        if ((!value && !this.ShowRowErrors) && !this.ShowCellErrors)
                        {
                            this.toolTipCaption = string.Empty;
                            this.toolTipControl.Activate(false);
                        }
                        if (!value && (this.ShowRowErrors || this.ShowCellErrors))
                        {
                            bool activate = !string.IsNullOrEmpty(this.toolTipCaption);
                            Point mousePosition = Control.MousePosition;
                            activate &= base.ClientRectangle.Contains(base.PointToClient(mousePosition));
                            this.toolTipControl.Activate(activate);
                        }
                    }
                    if (!this.layout.dirty && !base.DesignMode)
                    {
                        base.Invalidate(this.layout.Data);
                    }
                }
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ShowEditingIconDescr"), System.Windows.Forms.SRCategory("CatAppearance"), DefaultValue(true)]
        public bool ShowEditingIcon
        {
            get => 
                this.dataGridViewState2[1];
            set
            {
                if (this.ShowEditingIcon != value)
                {
                    this.dataGridViewState2[1] = value;
                    if (this.RowHeadersVisible)
                    {
                        if (this.VirtualMode || (this.DataSource != null))
                        {
                            if (this.IsCurrentRowDirty)
                            {
                                this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
                            }
                        }
                        else if (this.IsCurrentCellDirty)
                        {
                            this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
                        }
                    }
                }
            }
        }

        [System.Windows.Forms.SRDescription("DataGridView_ShowRowErrorsDescr"), System.Windows.Forms.SRCategory("CatAppearance"), DefaultValue(true)]
        public bool ShowRowErrors
        {
            get => 
                this.dataGridViewState2[0x200];
            set
            {
                if (this.ShowRowErrors != value)
                {
                    this.dataGridViewState2[0x200] = value;
                    if (base.IsHandleCreated && !base.DesignMode)
                    {
                        if ((value && !this.ShowCellErrors) && !this.ShowCellToolTips)
                        {
                            this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
                        }
                        if ((!value && !this.ShowCellErrors) && !this.ShowCellToolTips)
                        {
                            this.toolTipCaption = string.Empty;
                            this.toolTipControl.Activate(false);
                        }
                        if (!value && (this.ShowCellErrors || this.ShowCellToolTips))
                        {
                            this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
                        }
                    }
                    if (!this.layout.dirty && !base.DesignMode)
                    {
                        base.Invalidate(this.layout.RowHeaders);
                    }
                }
            }
        }

        internal bool SingleHorizontalBorderAdded
        {
            get
            {
                if (this.layout.ColumnHeadersVisible)
                {
                    return false;
                }
                if (this.AdvancedCellBorderStyle.All != DataGridViewAdvancedCellBorderStyle.Single)
                {
                    return (this.CellBorderStyle == DataGridViewCellBorderStyle.SingleHorizontal);
                }
                return true;
            }
        }

        internal bool SingleVerticalBorderAdded
        {
            get
            {
                if (this.layout.RowHeadersVisible)
                {
                    return false;
                }
                if (this.AdvancedCellBorderStyle.All != DataGridViewAdvancedCellBorderStyle.Single)
                {
                    return (this.CellBorderStyle == DataGridViewCellBorderStyle.SingleVertical);
                }
                return true;
            }
        }

        [Browsable(false)]
        public DataGridViewColumn SortedColumn =>
            this.sortedColumn;

        [Browsable(false)]
        public System.Windows.Forms.SortOrder SortOrder =>
            this.sortOrder;

        [System.Windows.Forms.SRCategory("CatBehavior"), DefaultValue(false), EditorBrowsable(EditorBrowsableState.Advanced), System.Windows.Forms.SRDescription("DataGridView_StandardTabDescr")]
        public bool StandardTab
        {
            get => 
                this.dataGridViewState1[0x2000];
            set
            {
                if (this.dataGridViewState1[0x2000] != value)
                {
                    this.dataGridViewState1[0x2000] = value;
                }
            }
        }

        [Browsable(false), Bindable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public override string Text
        {
            get => 
                base.Text;
            set
            {
                base.Text = value;
            }
        }

        private string ToolTipPrivate =>
            this.toolTipCaption;

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public DataGridViewHeaderCell TopLeftHeaderCell
        {
            get
            {
                if (this.topLeftHeaderCell == null)
                {
                    this.TopLeftHeaderCell = new DataGridViewTopLeftHeaderCell();
                }
                return this.topLeftHeaderCell;
            }
            set
            {
                if (this.topLeftHeaderCell != value)
                {
                    if (this.topLeftHeaderCell != null)
                    {
                        this.topLeftHeaderCell.DataGridViewInternal = null;
                    }
                    this.topLeftHeaderCell = value;
                    if (value != null)
                    {
                        this.topLeftHeaderCell.DataGridViewInternal = this;
                    }
                    if (this.ColumnHeadersVisible && this.RowHeadersVisible)
                    {
                        this.OnColumnHeadersGlobalAutoSize();
                        base.Invalidate(new Rectangle(this.layout.Inside.X, this.layout.Inside.Y, this.RowHeadersWidth, this.ColumnHeadersHeight));
                    }
                }
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public Cursor UserSetCursor
        {
            get
            {
                if (this.dataGridViewState1[0x1000000])
                {
                    return this.oldCursor;
                }
                return this.Cursor;
            }
        }

        internal int VerticalOffset
        {
            get => 
                this.verticalOffset;
            set
            {
                if (value < 0)
                {
                    value = 0;
                }
                int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible | DataGridViewElementStates.Frozen);
                int num2 = this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight);
                if (value > (this.vertScrollBar.Maximum - num2))
                {
                    value = this.vertScrollBar.Maximum - num2;
                }
                if (value != this.verticalOffset)
                {
                    int height = value - this.verticalOffset;
                    if (this.vertScrollBar.Enabled)
                    {
                        this.vertScrollBar.Value = value;
                    }
                    this.ScrollRowsByHeight(height);
                }
            }
        }

        protected System.Windows.Forms.ScrollBar VerticalScrollBar =>
            this.vertScrollBar;

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int VerticalScrollingOffset =>
            this.verticalOffset;

        private Timer VertScrollTimer
        {
            get
            {
                if (this.vertScrollTimer == null)
                {
                    this.vertScrollTimer = new Timer();
                    this.vertScrollTimer.Tick += new EventHandler(this.VertScrollTimer_Tick);
                }
                return this.vertScrollTimer;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), DefaultValue(false), System.Windows.Forms.SRCategory("CatBehavior"), System.Windows.Forms.SRDescription("DataGridViewVirtualModeDescr")]
        public bool VirtualMode
        {
            get => 
                this.dataGridViewState1[0x10000];
            set
            {
                if (this.dataGridViewState1[0x10000] != value)
                {
                    this.dataGridViewState1[0x10000] = value;
                    this.InvalidateRowHeights();
                }
            }
        }

        private bool VisibleCellExists
        {
            get
            {
                if (this.Columns.GetFirstColumn(DataGridViewElementStates.Visible) == null)
                {
                    return false;
                }
                return (-1 != this.Rows.GetFirstRow(DataGridViewElementStates.Visible));
            }
        }

        [ComVisible(true)]
        protected class DataGridViewAccessibleObject : Control.ControlAccessibleObject
        {
            private DataGridView owner;
            private DataGridView.DataGridViewSelectedCellsAccessibleObject selectedCellsAccessibilityObject;
            private DataGridView.DataGridViewTopRowAccessibleObject topRowAccessibilityObject;

            public DataGridViewAccessibleObject(DataGridView owner) : base(owner)
            {
                this.owner = owner;
            }

            public override AccessibleObject GetChild(int index)
            {
                if (this.owner.Columns.Count != 0)
                {
                    if ((index < 1) && this.owner.ColumnHeadersVisible)
                    {
                        return this.TopRowAccessibilityObject;
                    }
                    if (this.owner.ColumnHeadersVisible)
                    {
                        index--;
                    }
                    if (index < this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible))
                    {
                        int num = this.owner.Rows.DisplayIndexToRowIndex(index);
                        return this.owner.Rows[num].AccessibilityObject;
                    }
                    index -= this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible);
                    if (this.owner.horizScrollBar.Visible)
                    {
                        if (index == 0)
                        {
                            return this.owner.horizScrollBar.AccessibilityObject;
                        }
                        index--;
                    }
                    if (this.owner.vertScrollBar.Visible && (index == 0))
                    {
                        return this.owner.vertScrollBar.AccessibilityObject;
                    }
                }
                return null;
            }

            public override int GetChildCount()
            {
                if (this.owner.Columns.Count == 0)
                {
                    return 0;
                }
                int rowCount = this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible);
                if (this.owner.ColumnHeadersVisible)
                {
                    rowCount++;
                }
                if (this.owner.horizScrollBar.Visible)
                {
                    rowCount++;
                }
                if (this.owner.vertScrollBar.Visible)
                {
                    rowCount++;
                }
                return rowCount;
            }

            public override AccessibleObject GetFocused()
            {
                if (this.owner.Focused && (this.owner.CurrentCell != null))
                {
                    return this.owner.CurrentCell.AccessibilityObject;
                }
                return null;
            }

            public override AccessibleObject GetSelected() => 
                this.SelectedCellsAccessibilityObject;

            public override AccessibleObject HitTest(int x, int y)
            {
                Point point = this.owner.PointToClient(new Point(x, y));
                DataGridView.HitTestInfo info = this.owner.HitTest(point.X, point.Y);
                switch (info.Type)
                {
                    case DataGridViewHitTestType.Cell:
                        return this.owner.Rows[info.RowIndex].Cells[info.ColumnIndex].AccessibilityObject;

                    case DataGridViewHitTestType.ColumnHeader:
                    {
                        int index = this.owner.Columns.ColumnIndexToActualDisplayIndex(info.ColumnIndex, DataGridViewElementStates.Visible);
                        if (!this.owner.RowHeadersVisible)
                        {
                            return this.TopRowAccessibilityObject.GetChild(index);
                        }
                        return this.TopRowAccessibilityObject.GetChild(index + 1);
                    }
                    case DataGridViewHitTestType.RowHeader:
                        return this.owner.Rows[info.RowIndex].AccessibilityObject;

                    case DataGridViewHitTestType.TopLeftHeader:
                        return this.owner.TopLeftHeaderCell.AccessibilityObject;

                    case DataGridViewHitTestType.HorizontalScrollBar:
                        return this.owner.HorizontalScrollBar.AccessibilityObject;

                    case DataGridViewHitTestType.VerticalScrollBar:
                        return this.owner.VerticalScrollBar.AccessibilityObject;
                }
                return null;
            }

            [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
            public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
            {
                switch (navigationDirection)
                {
                    case AccessibleNavigation.FirstChild:
                        return this.GetChild(0);

                    case AccessibleNavigation.LastChild:
                        return this.GetChild(this.GetChildCount() - 1);
                }
                return null;
            }

            public override string Name
            {
                get
                {
                    string accessibleName = base.Owner.AccessibleName;
                    if (!string.IsNullOrEmpty(accessibleName))
                    {
                        return accessibleName;
                    }
                    return "DataGridView";
                }
            }

            public override AccessibleRole Role
            {
                get
                {
                    AccessibleRole accessibleRole = this.owner.AccessibleRole;
                    if (accessibleRole != AccessibleRole.Default)
                    {
                        return accessibleRole;
                    }
                    return AccessibleRole.Table;
                }
            }

            private AccessibleObject SelectedCellsAccessibilityObject
            {
                get
                {
                    if (this.selectedCellsAccessibilityObject == null)
                    {
                        this.selectedCellsAccessibilityObject = new DataGridView.DataGridViewSelectedCellsAccessibleObject(this.owner);
                    }
                    return this.selectedCellsAccessibilityObject;
                }
            }

            private AccessibleObject TopRowAccessibilityObject
            {
                get
                {
                    if (this.topRowAccessibilityObject == null)
                    {
                        this.topRowAccessibilityObject = new DataGridView.DataGridViewTopRowAccessibleObject(this.owner);
                    }
                    return this.topRowAccessibilityObject;
                }
            }
        }

        [ComVisible(false)]
        public class DataGridViewControlCollection : Control.ControlCollection
        {
            private DataGridView owner;

            public DataGridViewControlCollection(DataGridView owner) : base(owner)
            {
                this.owner = owner;
            }

            public override void Clear()
            {
                for (int i = 0; i < this.Count; i++)
                {
                    if (((this[i] != this.owner.horizScrollBar) && (this[i] != this.owner.vertScrollBar)) && (this[i] != this.owner.editingPanel))
                    {
                        this.Remove(this[i]);
                    }
                }
            }

            public void CopyTo(Control[] array, int index)
            {
                base.CopyTo(array, index);
            }

            public void Insert(int index, Control value)
            {
                ((IList) this).Insert(index, value);
            }

            public override void Remove(Control value)
            {
                if (((value != this.owner.horizScrollBar) && (value != this.owner.vertScrollBar)) && (value != this.owner.editingPanel))
                {
                    base.Remove(value);
                }
            }

            internal void RemoveInternal(Control value)
            {
                base.Remove(value);
            }
        }

        internal class DataGridViewDataConnection
        {
            private System.Windows.Forms.CurrencyManager currencyManager;
            private BitVector32 dataConnectionState;
            private const int DATACONNECTIONSTATE_cachedAllowUserToAddRowsInternal = 0x10000;
            private const int DATACONNECTIONSTATE_cancellingRowEdit = 0x40;
            private const int DATACONNECTIONSTATE_dataConnection_inSetDataConnection = 1;
            private const int DATACONNECTIONSTATE_dataSourceInitializedHookedUp = 0x40000;
            private const int DATACONNECTIONSTATE_didNotDeleteRowFromDataGridView = 0x2000;
            private const int DATACONNECTIONSTATE_doNotChangePositionInTheCurrencyManager = 0x10;
            private const int DATACONNECTIONSTATE_doNotChangePositionInTheDataGridViewControl = 8;
            private const int DATACONNECTIONSTATE_finishedAddNew = 4;
            private const int DATACONNECTIONSTATE_inAddNew = 0x200;
            private const int DATACONNECTIONSTATE_inDeleteOperation = 0x1000;
            private const int DATACONNECTIONSTATE_inEndCurrentEdit = 0x8000;
            private const int DATACONNECTIONSTATE_interestedInRowEvents = 0x20;
            private const int DATACONNECTIONSTATE_itemAddedInDeleteOperation = 0x4000;
            private const int DATACONNECTIONSTATE_listWasReset = 0x400;
            private const int DATACONNECTIONSTATE_positionChangingInCurrencyManager = 0x800;
            private const int DATACONNECTIONSTATE_processingListChangedEvent = 0x20000;
            private const int DATACONNECTIONSTATE_processingMetaDataChanges = 2;
            private const int DATACONNECTIONSTATE_restoreRow = 0x80;
            private const int DATACONNECTIONSTATE_rowValidatingInAddNew = 0x100;
            private string dataMember = string.Empty;
            private object dataSource;
            private int lastListCount = -1;
            private DataGridView owner;
            private PropertyDescriptorCollection props;

            public DataGridViewDataConnection(DataGridView owner)
            {
                this.owner = owner;
                this.dataConnectionState = new BitVector32(4);
            }

            public void AddNew()
            {
                if ((this.currencyManager != null) && this.currencyManager.ShouldBind)
                {
                    this.dataConnectionState[4] = false;
                    this.dataConnectionState[0x8000] = true;
                    try
                    {
                        this.currencyManager.EndCurrentEdit();
                    }
                    finally
                    {
                        this.dataConnectionState[0x8000] = false;
                    }
                    this.dataConnectionState[0x200] = true;
                    try
                    {
                        this.currencyManager.AddNew();
                    }
                    finally
                    {
                        this.dataConnectionState[0x200] = false;
                    }
                }
            }

            public void ApplySortingInformationFromBackEnd()
            {
                if (this.currencyManager != null)
                {
                    SortOrder order;
                    PropertyDescriptor sortProperty = null;
                    this.GetSortingInformationFromBackend(out sortProperty, out order);
                    if (sortProperty == null)
                    {
                        for (int i = 0; i < this.owner.Columns.Count; i++)
                        {
                            if (this.owner.Columns[i].IsDataBound)
                            {
                                this.owner.Columns[i].HeaderCell.SortGlyphDirection = SortOrder.None;
                            }
                        }
                        this.owner.sortedColumn = null;
                        this.owner.sortOrder = SortOrder.None;
                    }
                    else
                    {
                        bool flag = false;
                        for (int j = 0; j < this.owner.Columns.Count; j++)
                        {
                            DataGridViewColumn column = this.owner.Columns[j];
                            if (column.IsDataBound && (column.SortMode != DataGridViewColumnSortMode.NotSortable))
                            {
                                if (string.Equals(column.DataPropertyName, sortProperty.Name, StringComparison.OrdinalIgnoreCase))
                                {
                                    if (!flag && !this.owner.InSortOperation)
                                    {
                                        this.owner.sortedColumn = column;
                                        this.owner.sortOrder = order;
                                        flag = true;
                                    }
                                    column.HeaderCell.SortGlyphDirection = order;
                                }
                                else
                                {
                                    column.HeaderCell.SortGlyphDirection = SortOrder.None;
                                }
                            }
                        }
                    }
                }
            }

            public TypeConverter BoundColumnConverter(int boundColumnIndex) => 
                this.props[boundColumnIndex].Converter;

            public int BoundColumnIndex(string dataPropertyName)
            {
                if (this.props == null)
                {
                    return -1;
                }
                for (int i = 0; i < this.props.Count; i++)
                {
                    if (string.Compare(this.props[i].Name, dataPropertyName, true, CultureInfo.InvariantCulture) == 0)
                    {
                        return i;
                    }
                }
                return -1;
            }

            public SortOrder BoundColumnSortOrder(int boundColumnIndex)
            {
                IBindingList list = (this.currencyManager != null) ? (this.currencyManager.List as IBindingList) : null;
                if (((list != null) && list.SupportsSorting) && list.IsSorted)
                {
                    PropertyDescriptor descriptor;
                    SortOrder order;
                    this.GetSortingInformationFromBackend(out descriptor, out order);
                    if ((order != SortOrder.None) && (string.Compare(this.props[boundColumnIndex].Name, descriptor.Name, true, CultureInfo.InvariantCulture) == 0))
                    {
                        return order;
                    }
                }
                return SortOrder.None;
            }

            public System.Type BoundColumnValueType(int boundColumnIndex) => 
                this.props[boundColumnIndex].PropertyType;

            public void CancelRowEdit(bool restoreRow, bool addNewFinished)
            {
                this.dataConnectionState[0x40] = true;
                this.dataConnectionState[0x80] = restoreRow;
                try
                {
                    object current = null;
                    if ((this.currencyManager.Position >= 0) && (this.currencyManager.Position < this.currencyManager.List.Count))
                    {
                        current = this.currencyManager.Current;
                    }
                    this.currencyManager.CancelCurrentEdit();
                    IEditableObject obj3 = null;
                    if ((this.currencyManager.Position >= 0) && (this.currencyManager.Position < this.currencyManager.List.Count))
                    {
                        obj3 = this.currencyManager.Current as IEditableObject;
                    }
                    if ((obj3 != null) && (current == obj3))
                    {
                        obj3.BeginEdit();
                    }
                }
                finally
                {
                    this.dataConnectionState[0x40] = false;
                }
                if (addNewFinished)
                {
                    this.dataConnectionState[4] = true;
                }
            }

            private void currencyManager_ListChanged(object sender, ListChangedEventArgs e)
            {
                this.dataConnectionState[0x20000] = true;
                try
                {
                    this.ProcessListChanged(e);
                }
                finally
                {
                    this.dataConnectionState[0x20000] = false;
                }
                this.owner.OnDataBindingComplete(e.ListChangedType);
                this.lastListCount = this.currencyManager.Count;
            }

            private void currencyManager_PositionChanged(object sender, EventArgs e)
            {
                if ((((this.owner.Columns.Count != 0) && (this.owner.Rows.Count != (this.owner.AllowUserToAddRowsInternal ? 1 : 0))) && !this.dataConnectionState[8]) && (((!this.owner.AllowUserToAddRowsInternal || !this.dataConnectionState[4]) || (this.dataConnectionState[0x200] || (this.currencyManager.Position <= -1))) || (((this.currencyManager.Position != this.owner.NewRowIndex) || (this.owner.CurrentCellAddress.Y == this.owner.NewRowIndex)) || (this.currencyManager.Count != (this.DataBoundRowsCount() + 1)))))
                {
                    this.dataConnectionState[0x800] = true;
                    try
                    {
                        if (!this.owner.InSortOperation)
                        {
                            bool scrollIntoView = true;
                            if (this.dataConnectionState[0x100])
                            {
                                IBindingList list = this.currencyManager.List as IBindingList;
                                if (((list != null) && list.SupportsSorting) && list.IsSorted)
                                {
                                    scrollIntoView = false;
                                }
                            }
                            bool clearSelection = this.dataConnectionState[0x40] && !this.dataConnectionState[4];
                            clearSelection |= (this.lastListCount == -1) || (this.lastListCount == this.currencyManager.Count);
                            this.MatchCurrencyManagerPosition(scrollIntoView, clearSelection);
                        }
                    }
                    finally
                    {
                        this.dataConnectionState[0x800] = false;
                    }
                }
            }

            private int DataBoundRowsCount()
            {
                int count = this.owner.Rows.Count;
                if ((this.owner.AllowUserToAddRowsInternal && (this.owner.Rows.Count > 0)) && ((this.owner.CurrentCellAddress.Y != this.owner.NewRowIndex) || this.owner.IsCurrentRowDirty))
                {
                    count--;
                }
                return count;
            }

            public bool DataFieldIsReadOnly(int boundColumnIndex) => 
                this.props?[boundColumnIndex].IsReadOnly;

            private void DataSource_Initialized(object sender, EventArgs e)
            {
                ISupportInitializeNotification dataSource = this.dataSource as ISupportInitializeNotification;
                if (dataSource != null)
                {
                    dataSource.Initialized -= new EventHandler(this.DataSource_Initialized);
                }
                this.dataConnectionState[0x40000] = false;
                this.SetDataConnection(this.dataSource, this.dataMember);
                this.owner.RefreshColumnsAndRows();
                this.owner.OnDataBindingComplete(ListChangedType.Reset);
            }

            private void DataSourceMetaDataChanged()
            {
                this.props = this.currencyManager.GetItemProperties();
                this.owner.RefreshColumnsAndRows();
            }

            public void DeleteRow(int rowIndex)
            {
                this.dataConnectionState[8] = true;
                try
                {
                    if (!this.dataConnectionState[4])
                    {
                        bool flag = false;
                        if (this.owner.newRowIndex == this.currencyManager.List.Count)
                        {
                            flag = rowIndex == (this.owner.newRowIndex - 1);
                        }
                        else
                        {
                            flag = rowIndex == this.owner.newRowIndex;
                        }
                        if (flag)
                        {
                            this.CancelRowEdit(false, true);
                            return;
                        }
                        this.dataConnectionState[0x1000] = true;
                        this.dataConnectionState[0x2000] = true;
                        try
                        {
                            this.currencyManager.RemoveAt(rowIndex);
                            return;
                        }
                        finally
                        {
                            this.dataConnectionState[0x1000] = false;
                            this.dataConnectionState[0x2000] = false;
                        }
                    }
                    this.dataConnectionState[0x1000] = true;
                    this.dataConnectionState[0x2000] = true;
                    try
                    {
                        this.currencyManager.RemoveAt(rowIndex);
                    }
                    finally
                    {
                        this.dataConnectionState[0x1000] = false;
                        this.dataConnectionState[0x2000] = false;
                    }
                }
                finally
                {
                    this.dataConnectionState[8] = false;
                }
            }

            public void Dispose()
            {
                this.UnWireEvents();
                this.currencyManager = null;
            }

            public DataGridViewColumn[] GetCollectionOfBoundDataGridViewColumns()
            {
                if (this.props == null)
                {
                    return null;
                }
                ArrayList list = new ArrayList();
                for (int i = 0; i < this.props.Count; i++)
                {
                    if (!typeof(IList).IsAssignableFrom(this.props[i].PropertyType) || TypeDescriptor.GetConverter(typeof(Image)).CanConvertFrom(this.props[i].PropertyType))
                    {
                        DataGridViewColumn dataGridViewColumnFromType = GetDataGridViewColumnFromType(this.props[i].PropertyType);
                        dataGridViewColumnFromType.IsDataBoundInternal = true;
                        dataGridViewColumnFromType.BoundColumnIndex = i;
                        dataGridViewColumnFromType.DataPropertyName = this.props[i].Name;
                        dataGridViewColumnFromType.Name = this.props[i].Name;
                        dataGridViewColumnFromType.BoundColumnConverter = this.props[i].Converter;
                        dataGridViewColumnFromType.HeaderText = !string.IsNullOrEmpty(this.props[i].DisplayName) ? this.props[i].DisplayName : this.props[i].Name;
                        dataGridViewColumnFromType.ValueType = this.props[i].PropertyType;
                        dataGridViewColumnFromType.IsBrowsableInternal = this.props[i].IsBrowsable;
                        dataGridViewColumnFromType.ReadOnly = this.props[i].IsReadOnly;
                        list.Add(dataGridViewColumnFromType);
                    }
                }
                DataGridViewColumn[] array = new DataGridViewColumn[list.Count];
                list.CopyTo(array);
                return array;
            }

            private static DataGridViewColumn GetDataGridViewColumnFromType(System.Type type)
            {
                TypeConverter converter = TypeDescriptor.GetConverter(typeof(Image));
                if (type.Equals(typeof(bool)) || type.Equals(typeof(CheckState)))
                {
                    return new DataGridViewCheckBoxColumn(type.Equals(typeof(CheckState)));
                }
                if (typeof(Image).IsAssignableFrom(type) || converter.CanConvertFrom(type))
                {
                    return new DataGridViewImageColumn();
                }
                return new DataGridViewTextBoxColumn();
            }

            public string GetError(int rowIndex)
            {
                IDataErrorInfo info = null;
                try
                {
                    info = this.currencyManager[rowIndex] as IDataErrorInfo;
                }
                catch (Exception exception)
                {
                    if (System.Windows.Forms.ClientUtils.IsCriticalException(exception) && !(exception is IndexOutOfRangeException))
                    {
                        throw;
                    }
                    DataGridViewDataErrorEventArgs e = new DataGridViewDataErrorEventArgs(exception, -1, rowIndex, DataGridViewDataErrorContexts.Display);
                    this.owner.OnDataErrorInternal(e);
                    if (e.ThrowException)
                    {
                        throw e.Exception;
                    }
                }
                if (info != null)
                {
                    return info.Error;
                }
                return string.Empty;
            }

            public string GetError(int boundColumnIndex, int columnIndex, int rowIndex)
            {
                IDataErrorInfo info = null;
                try
                {
                    info = this.currencyManager[rowIndex] as IDataErrorInfo;
                }
                catch (Exception exception)
                {
                    if (System.Windows.Forms.ClientUtils.IsCriticalException(exception) && !(exception is IndexOutOfRangeException))
                    {
                        throw;
                    }
                    DataGridViewDataErrorEventArgs e = new DataGridViewDataErrorEventArgs(exception, columnIndex, rowIndex, DataGridViewDataErrorContexts.Display);
                    this.owner.OnDataErrorInternal(e);
                    if (e.ThrowException)
                    {
                        throw e.Exception;
                    }
                }
                if (info != null)
                {
                    return info[this.props[boundColumnIndex].Name];
                }
                return string.Empty;
            }

            private void GetSortingInformationFromBackend(out PropertyDescriptor sortProperty, out SortOrder sortOrder)
            {
                IBindingList list = (this.currencyManager != null) ? (this.currencyManager.List as IBindingList) : null;
                IBindingListView view = (list != null) ? (list as IBindingListView) : null;
                if (((list == null) || !list.SupportsSorting) || !list.IsSorted)
                {
                    sortOrder = SortOrder.None;
                    sortProperty = null;
                }
                else if (list.SortProperty != null)
                {
                    sortProperty = list.SortProperty;
                    sortOrder = (list.SortDirection == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending;
                }
                else if (view != null)
                {
                    ListSortDescriptionCollection sortDescriptions = view.SortDescriptions;
                    if (((sortDescriptions != null) && (sortDescriptions.Count > 0)) && (sortDescriptions[0].PropertyDescriptor != null))
                    {
                        sortProperty = sortDescriptions[0].PropertyDescriptor;
                        sortOrder = (sortDescriptions[0].SortDirection == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending;
                    }
                    else
                    {
                        sortProperty = null;
                        sortOrder = SortOrder.None;
                    }
                }
                else
                {
                    sortProperty = null;
                    sortOrder = SortOrder.None;
                }
            }

            public object GetValue(int boundColumnIndex, int columnIndex, int rowIndex)
            {
                object obj2 = null;
                try
                {
                    obj2 = this.props[boundColumnIndex].GetValue(this.currencyManager[rowIndex]);
                }
                catch (Exception exception)
                {
                    if (System.Windows.Forms.ClientUtils.IsCriticalException(exception) && !(exception is IndexOutOfRangeException))
                    {
                        throw;
                    }
                    DataGridViewDataErrorEventArgs e = new DataGridViewDataErrorEventArgs(exception, columnIndex, rowIndex, DataGridViewDataErrorContexts.Display);
                    this.owner.OnDataErrorInternal(e);
                    if (e.ThrowException)
                    {
                        throw e.Exception;
                    }
                }
                return obj2;
            }

            public void MatchCurrencyManagerPosition(bool scrollIntoView, bool clearSelection)
            {
                if (this.owner.Columns.Count != 0)
                {
                    int columnIndex = (this.owner.CurrentCellAddress.X == -1) ? this.owner.FirstDisplayedColumnIndex : this.owner.CurrentCellAddress.X;
                    if (columnIndex == -1)
                    {
                        DataGridViewColumn firstColumn = this.owner.Columns.GetFirstColumn(DataGridViewElementStates.None);
                        firstColumn.Visible = true;
                        columnIndex = firstColumn.Index;
                    }
                    int position = this.currencyManager.Position;
                    if (position == -1)
                    {
                        if (!this.owner.SetCurrentCellAddressCore(-1, -1, false, false, false))
                        {
                            throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
                        }
                    }
                    else if (position < this.owner.Rows.Count)
                    {
                        if ((this.owner.Rows.GetRowState(position) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
                        {
                            this.owner.Rows[position].Visible = true;
                        }
                        if (((position != this.owner.CurrentCellAddress.Y) || (columnIndex != this.owner.CurrentCellAddress.X)) && ((scrollIntoView && !this.owner.ScrollIntoView(columnIndex, position, true)) || (((columnIndex < this.owner.Columns.Count) && (position < this.owner.Rows.Count)) && !this.owner.SetAndSelectCurrentCellAddress(columnIndex, position, true, false, false, clearSelection, false))))
                        {
                            throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
                        }
                    }
                }
            }

            internal void OnNewRowNeeded()
            {
                this.dataConnectionState[8] = true;
                try
                {
                    this.AddNew();
                }
                finally
                {
                    this.dataConnectionState[8] = false;
                }
            }

            internal void OnRowEnter(DataGridViewCellEventArgs e)
            {
                if (!this.dataConnectionState[2] && this.currencyManager.ShouldBind)
                {
                    this.dataConnectionState[8] = true;
                    try
                    {
                        if (((e.RowIndex != this.owner.NewRowIndex) && !this.dataConnectionState[0x10]) && (this.currencyManager.Position != e.RowIndex))
                        {
                            try
                            {
                                this.currencyManager.Position = e.RowIndex;
                            }
                            catch (Exception exception)
                            {
                                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                                {
                                    throw;
                                }
                                DataGridViewCellCancelEventArgs args = new DataGridViewCellCancelEventArgs(e.ColumnIndex, e.RowIndex);
                                this.ProcessException(exception, args, false);
                            }
                            IEditableObject current = this.currencyManager.Current as IEditableObject;
                            if (current != null)
                            {
                                current.BeginEdit();
                            }
                        }
                    }
                    finally
                    {
                        this.dataConnectionState[8] = false;
                    }
                }
            }

            internal void OnRowValidating(DataGridViewCellCancelEventArgs e)
            {
                if (this.currencyManager.ShouldBind)
                {
                    if (!this.dataConnectionState[4] && !this.owner.IsCurrentRowDirty)
                    {
                        if (!this.dataConnectionState[0x40])
                        {
                            this.dataConnectionState[8] = true;
                            try
                            {
                                this.CancelRowEdit(false, false);
                            }
                            finally
                            {
                                this.dataConnectionState[8] = false;
                            }
                        }
                    }
                    else if (this.owner.IsCurrentRowDirty)
                    {
                        this.dataConnectionState[0x100] = true;
                        try
                        {
                            this.currencyManager.EndCurrentEdit();
                        }
                        catch (Exception exception)
                        {
                            if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                            {
                                throw;
                            }
                            this.ProcessException(exception, e, true);
                        }
                        finally
                        {
                            this.dataConnectionState[0x100] = false;
                        }
                    }
                    this.dataConnectionState[4] = true;
                }
            }

            public void ProcessException(Exception exception, DataGridViewCellCancelEventArgs e, bool beginEdit)
            {
                DataGridViewDataErrorEventArgs args = new DataGridViewDataErrorEventArgs(exception, e.ColumnIndex, e.RowIndex, DataGridViewDataErrorContexts.Commit);
                this.owner.OnDataErrorInternal(args);
                if (args.ThrowException)
                {
                    throw args.Exception;
                }
                if (args.Cancel)
                {
                    e.Cancel = true;
                    if (beginEdit)
                    {
                        IEditableObject current = this.currencyManager.Current as IEditableObject;
                        if (current != null)
                        {
                            current.BeginEdit();
                        }
                    }
                }
                else
                {
                    this.CancelRowEdit(false, false);
                }
            }

            private void ProcessListChanged(ListChangedEventArgs e)
            {
                if (((e.ListChangedType == ListChangedType.PropertyDescriptorAdded) || (e.ListChangedType == ListChangedType.PropertyDescriptorDeleted)) || (e.ListChangedType == ListChangedType.PropertyDescriptorChanged))
                {
                    this.dataConnectionState[2] = true;
                    try
                    {
                        this.DataSourceMetaDataChanged();
                    }
                    finally
                    {
                        this.dataConnectionState[2] = false;
                    }
                }
                else if (this.dataConnectionState[0x10000] != this.owner.AllowUserToAddRowsInternal)
                {
                    this.dataConnectionState[0x400] = true;
                    try
                    {
                        this.owner.RefreshRows(!this.owner.InSortOperation);
                        this.owner.PushAllowUserToAddRows();
                    }
                    finally
                    {
                        this.ResetDataConnectionState();
                    }
                }
                else if (this.dataConnectionState[4] || (this.owner.newRowIndex != e.NewIndex))
                {
                    if ((e.ListChangedType == ListChangedType.ItemAdded) && (this.currencyManager.List.Count == (this.owner.AllowUserToAddRowsInternal ? (this.owner.Rows.Count - 1) : this.owner.Rows.Count)))
                    {
                        if (this.dataConnectionState[0x1000] && this.dataConnectionState[0x2000])
                        {
                            this.dataConnectionState[0x4000] = true;
                        }
                    }
                    else
                    {
                        if (e.ListChangedType == ListChangedType.ItemDeleted)
                        {
                            if ((this.dataConnectionState[0x1000] && this.dataConnectionState[0x4000]) && this.dataConnectionState[0x2000])
                            {
                                this.dataConnectionState[0x4000] = false;
                            }
                            else
                            {
                                if (!this.dataConnectionState[4] && this.dataConnectionState[0x8000])
                                {
                                    this.dataConnectionState[0x400] = true;
                                    try
                                    {
                                        this.owner.RefreshRows(!this.owner.InSortOperation);
                                        this.owner.PushAllowUserToAddRows();
                                    }
                                    finally
                                    {
                                        this.dataConnectionState[0x400] = false;
                                    }
                                    return;
                                }
                                if (this.currencyManager.List.Count == this.DataBoundRowsCount())
                                {
                                    return;
                                }
                            }
                        }
                        this.dataConnectionState[0x10] = true;
                        try
                        {
                            switch (e.ListChangedType)
                            {
                                case ListChangedType.Reset:
                                {
                                    this.dataConnectionState[0x400] = true;
                                    bool visible = this.owner.Visible;
                                    if (visible)
                                    {
                                        this.owner.BeginUpdateInternal();
                                    }
                                    try
                                    {
                                        this.owner.RefreshRows(!this.owner.InSortOperation);
                                        this.owner.PushAllowUserToAddRows();
                                        this.ApplySortingInformationFromBackEnd();
                                        goto Label_05A2;
                                    }
                                    finally
                                    {
                                        this.ResetDataConnectionState();
                                        if (visible)
                                        {
                                            this.owner.EndUpdateInternal(false);
                                            this.owner.Invalidate(true);
                                        }
                                    }
                                    break;
                                }
                                case ListChangedType.ItemAdded:
                                    break;

                                case ListChangedType.ItemDeleted:
                                    this.owner.Rows.RemoveAtInternal(e.NewIndex, true);
                                    this.dataConnectionState[0x2000] = false;
                                    goto Label_05A2;

                                case ListChangedType.ItemMoved:
                                {
                                    int lo = Math.Min(e.OldIndex, e.NewIndex);
                                    int hi = Math.Max(e.OldIndex, e.NewIndex);
                                    this.owner.InvalidateRows(lo, hi);
                                    goto Label_05A2;
                                }
                                case ListChangedType.ItemChanged:
                                {
                                    string name = null;
                                    if (e.PropertyDescriptor != null)
                                    {
                                        name = e.PropertyDescriptor.Name;
                                    }
                                    for (int i = 0; i < this.owner.Columns.Count; i++)
                                    {
                                        DataGridViewColumn column = this.owner.Columns[i];
                                        if (column.Visible && column.IsDataBound)
                                        {
                                            if (!string.IsNullOrEmpty(name))
                                            {
                                                if (string.Compare(column.DataPropertyName, name, true, CultureInfo.InvariantCulture) == 0)
                                                {
                                                    this.owner.OnCellCommonChange(i, e.NewIndex);
                                                }
                                            }
                                            else
                                            {
                                                this.owner.OnCellCommonChange(i, e.NewIndex);
                                            }
                                        }
                                    }
                                    if ((this.owner.CurrentCellAddress.Y == e.NewIndex) && this.owner.IsCurrentCellInEditMode)
                                    {
                                        this.owner.RefreshEdit();
                                    }
                                    goto Label_05A2;
                                }
                                default:
                                    goto Label_05A2;
                            }
                            if ((this.owner.NewRowIndex != -1) && (e.NewIndex == this.owner.Rows.Count))
                            {
                                throw new InvalidOperationException();
                            }
                            this.owner.Rows.InsertInternal(e.NewIndex, this.owner.RowTemplateClone, true);
                        Label_05A2:
                            if (((this.owner.Rows.Count > 0) && !this.dataConnectionState[8]) && !this.owner.InSortOperation)
                            {
                                this.MatchCurrencyManagerPosition(false, e.ListChangedType == ListChangedType.Reset);
                            }
                        }
                        finally
                        {
                            this.dataConnectionState[0x10] = false;
                        }
                    }
                }
                else if (e.ListChangedType == ListChangedType.ItemAdded)
                {
                    if (!this.dataConnectionState[0x200] && !this.dataConnectionState[0x100])
                    {
                        if (this.owner.Columns.Count > 0)
                        {
                            do
                            {
                                this.owner.newRowIndex = -1;
                                this.owner.AddNewRow(false);
                            }
                            while (this.DataBoundRowsCount() < this.currencyManager.Count);
                        }
                        this.dataConnectionState[4] = true;
                        this.MatchCurrencyManagerPosition(true, true);
                    }
                }
                else if (e.ListChangedType == ListChangedType.ItemDeleted)
                {
                    if (this.dataConnectionState[0x40])
                    {
                        this.owner.PopulateNewRowWithDefaultValues();
                    }
                    else
                    {
                        if (this.dataConnectionState[0x8000] || this.dataConnectionState[0x200])
                        {
                            this.dataConnectionState[0x400] = true;
                            try
                            {
                                this.owner.RefreshRows(!this.owner.InSortOperation);
                                this.owner.PushAllowUserToAddRows();
                                return;
                            }
                            finally
                            {
                                this.dataConnectionState[0x400] = false;
                            }
                        }
                        if (this.dataConnectionState[0x1000] && (this.currencyManager.List.Count == 0))
                        {
                            this.AddNew();
                        }
                    }
                }
            }

            public bool PushValue(int boundColumnIndex, int columnIndex, int rowIndex, object value)
            {
                try
                {
                    if (value != null)
                    {
                        System.Type c = value.GetType();
                        System.Type valueType = this.owner.Columns[columnIndex].ValueType;
                        if (!valueType.IsAssignableFrom(c))
                        {
                            TypeConverter converter = this.BoundColumnConverter(boundColumnIndex);
                            if ((converter != null) && converter.CanConvertFrom(c))
                            {
                                value = converter.ConvertFrom(value);
                            }
                            else
                            {
                                TypeConverter cachedTypeConverter = this.owner.GetCachedTypeConverter(c);
                                if ((cachedTypeConverter != null) && cachedTypeConverter.CanConvertTo(valueType))
                                {
                                    value = cachedTypeConverter.ConvertTo(value, valueType);
                                }
                            }
                        }
                    }
                    this.props[boundColumnIndex].SetValue(this.currencyManager[rowIndex], value);
                }
                catch (Exception exception)
                {
                    if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                    {
                        throw;
                    }
                    DataGridViewCellCancelEventArgs e = new DataGridViewCellCancelEventArgs(columnIndex, rowIndex);
                    this.ProcessException(exception, e, false);
                    return !e.Cancel;
                }
                return true;
            }

            public void ResetCachedAllowUserToAddRowsInternal()
            {
                this.dataConnectionState[0x10000] = this.owner.AllowUserToAddRowsInternal;
            }

            private void ResetDataConnectionState()
            {
                this.dataConnectionState = new BitVector32(4);
                if (this.currencyManager != null)
                {
                    this.dataConnectionState[0x20] = true;
                }
                this.ResetCachedAllowUserToAddRowsInternal();
            }

            public void SetDataConnection(object dataSource, string dataMember)
            {
                if (!this.dataConnectionState[1])
                {
                    this.ResetDataConnectionState();
                    if (dataMember == null)
                    {
                        dataMember = string.Empty;
                    }
                    ISupportInitializeNotification notification = this.dataSource as ISupportInitializeNotification;
                    if ((notification != null) && this.dataConnectionState[0x40000])
                    {
                        notification.Initialized -= new EventHandler(this.DataSource_Initialized);
                        this.dataConnectionState[0x40000] = false;
                    }
                    this.dataSource = dataSource;
                    this.dataMember = dataMember;
                    if (this.owner.BindingContext != null)
                    {
                        this.dataConnectionState[1] = true;
                        try
                        {
                            this.UnWireEvents();
                            if (((this.dataSource != null) && (this.owner.BindingContext != null)) && (this.dataSource != Convert.DBNull))
                            {
                                notification = this.dataSource as ISupportInitializeNotification;
                                if ((notification != null) && !notification.IsInitialized)
                                {
                                    if (!this.dataConnectionState[0x40000])
                                    {
                                        notification.Initialized += new EventHandler(this.DataSource_Initialized);
                                        this.dataConnectionState[0x40000] = true;
                                    }
                                    this.currencyManager = null;
                                }
                                else
                                {
                                    this.currencyManager = this.owner.BindingContext[this.dataSource, this.dataMember] as System.Windows.Forms.CurrencyManager;
                                }
                            }
                            else
                            {
                                this.currencyManager = null;
                            }
                            this.WireEvents();
                            if (this.currencyManager != null)
                            {
                                this.props = this.currencyManager.GetItemProperties();
                            }
                            else
                            {
                                this.props = null;
                            }
                        }
                        finally
                        {
                            this.dataConnectionState[1] = false;
                        }
                        this.ResetCachedAllowUserToAddRowsInternal();
                        if (this.currencyManager != null)
                        {
                            this.lastListCount = this.currencyManager.Count;
                        }
                        else
                        {
                            this.lastListCount = -1;
                        }
                    }
                }
            }

            public bool ShouldChangeDataMember(object newDataSource)
            {
                if (!this.owner.Created)
                {
                    return false;
                }
                if (this.owner.BindingContext == null)
                {
                    return false;
                }
                if (newDataSource != null)
                {
                    System.Windows.Forms.CurrencyManager manager = this.owner.BindingContext[newDataSource] as System.Windows.Forms.CurrencyManager;
                    if (manager == null)
                    {
                        return false;
                    }
                    PropertyDescriptorCollection itemProperties = manager.GetItemProperties();
                    if ((this.dataMember.Length != 0) && (itemProperties[this.dataMember] != null))
                    {
                        return false;
                    }
                }
                return true;
            }

            public void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
            {
                ((IBindingList) this.List).ApplySort(this.props[dataGridViewColumn.BoundColumnIndex], direction);
            }

            private void UnWireEvents()
            {
                if (this.currencyManager != null)
                {
                    this.currencyManager.PositionChanged -= new EventHandler(this.currencyManager_PositionChanged);
                    this.currencyManager.ListChanged -= new ListChangedEventHandler(this.currencyManager_ListChanged);
                    this.dataConnectionState[0x20] = false;
                }
            }

            private void WireEvents()
            {
                if (this.currencyManager != null)
                {
                    this.currencyManager.PositionChanged += new EventHandler(this.currencyManager_PositionChanged);
                    this.currencyManager.ListChanged += new ListChangedEventHandler(this.currencyManager_ListChanged);
                    this.dataConnectionState[0x20] = true;
                }
            }

            public bool AllowAdd
            {
                get
                {
                    if (this.currencyManager == null)
                    {
                        return false;
                    }
                    return (((this.currencyManager.List is IBindingList) && this.currencyManager.AllowAdd) && ((IBindingList) this.currencyManager.List).SupportsChangeNotification);
                }
            }

            public bool AllowEdit =>
                ((this.currencyManager != null) && this.currencyManager.AllowEdit);

            public bool AllowRemove
            {
                get
                {
                    if (this.currencyManager == null)
                    {
                        return false;
                    }
                    return (((this.currencyManager.List is IBindingList) && this.currencyManager.AllowRemove) && ((IBindingList) this.currencyManager.List).SupportsChangeNotification);
                }
            }

            public bool CancellingRowEdit =>
                this.dataConnectionState[0x40];

            public System.Windows.Forms.CurrencyManager CurrencyManager =>
                this.currencyManager;

            public string DataMember =>
                this.dataMember;

            public object DataSource =>
                this.dataSource;

            public bool DoNotChangePositionInTheCurrencyManager
            {
                get => 
                    this.dataConnectionState[0x10];
                set
                {
                    this.dataConnectionState[0x10] = value;
                }
            }

            public bool InterestedInRowEvents =>
                this.dataConnectionState[0x20];

            public IList List
            {
                get
                {
                    if (this.currencyManager != null)
                    {
                        return this.currencyManager.List;
                    }
                    return null;
                }
            }

            public bool ListWasReset =>
                this.dataConnectionState[0x400];

            public bool PositionChangingOutsideDataGridView =>
                (!this.dataConnectionState[8] && this.dataConnectionState[0x800]);

            public bool ProcessingListChangedEvent =>
                this.dataConnectionState[0x20000];

            public bool ProcessingMetaDataChanges =>
                this.dataConnectionState[2];

            public bool RestoreRow =>
                this.dataConnectionState[0x80];
        }

        internal enum DataGridViewHitTestTypeInternal
        {
            None,
            Cell,
            ColumnHeader,
            RowHeader,
            ColumnResizeLeft,
            ColumnResizeRight,
            RowResizeTop,
            RowResizeBottom,
            FirstColumnHeaderLeft,
            TopLeftHeader,
            TopLeftHeaderResizeLeft,
            TopLeftHeaderResizeRight,
            TopLeftHeaderResizeTop,
            TopLeftHeaderResizeBottom,
            ColumnHeadersResizeBottom,
            ColumnHeadersResizeTop,
            RowHeadersResizeRight,
            RowHeadersResizeLeft,
            ColumnHeaderLeft,
            ColumnHeaderRight
        }

        private enum DataGridViewMouseEvent
        {
            Click,
            DoubleClick,
            MouseClick,
            MouseDoubleClick,
            MouseDown,
            MouseUp,
            MouseMove
        }

        private class DataGridViewSelectedCellsAccessibleObject : AccessibleObject
        {
            private DataGridView owner;

            public DataGridViewSelectedCellsAccessibleObject(DataGridView owner)
            {
                this.owner = owner;
            }

            public override AccessibleObject GetChild(int index)
            {
                if ((index >= 0) && (index < this.owner.GetCellCount(DataGridViewElementStates.Selected)))
                {
                    return this.owner.SelectedCell(index).AccessibilityObject;
                }
                return null;
            }

            public override int GetChildCount() => 
                this.owner.GetCellCount(DataGridViewElementStates.Selected);

            public override AccessibleObject GetFocused()
            {
                if ((this.owner.CurrentCell != null) && this.owner.CurrentCell.Selected)
                {
                    return this.owner.CurrentCell.AccessibilityObject;
                }
                return null;
            }

            public override AccessibleObject GetSelected() => 
                this;

            [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
            public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
            {
                switch (navigationDirection)
                {
                    case AccessibleNavigation.FirstChild:
                        if (this.owner.GetCellCount(DataGridViewElementStates.Selected) <= 0)
                        {
                            return null;
                        }
                        return this.owner.SelectedCell(0).AccessibilityObject;

                    case AccessibleNavigation.LastChild:
                        if (this.owner.GetCellCount(DataGridViewElementStates.Selected) <= 0)
                        {
                            return null;
                        }
                        return this.owner.SelectedCell(this.owner.GetCellCount(DataGridViewElementStates.Selected) - 1).AccessibilityObject;
                }
                return null;
            }

            public override string Name =>
                System.Windows.Forms.SR.GetString("DataGridView_AccSelectedCellsName");

            public override AccessibleObject Parent =>
                this.owner.AccessibilityObject;

            public override AccessibleRole Role =>
                AccessibleRole.Grouping;

            public override AccessibleStates State =>
                (AccessibleStates.Selectable | AccessibleStates.Selected);

            public override string Value =>
                this.Name;
        }

        private class DataGridViewToolTip
        {
            private DataGridView dataGridView;
            private System.Windows.Forms.ToolTip toolTip;
            private bool toolTipActivated;

            public DataGridViewToolTip(DataGridView dataGridView)
            {
                this.dataGridView = dataGridView;
            }

            public void Activate(bool activate)
            {
                if (!this.dataGridView.DesignMode)
                {
                    if (activate && (this.toolTip == null))
                    {
                        this.toolTip = new System.Windows.Forms.ToolTip();
                        this.toolTip.ShowAlways = true;
                        this.toolTip.InitialDelay = 0;
                        this.toolTip.UseFading = false;
                        this.toolTip.UseAnimation = false;
                        this.toolTip.AutoPopDelay = 0;
                    }
                    if (this.dataGridView.IsRestricted)
                    {
                        System.Windows.Forms.IntSecurity.AllWindows.Assert();
                    }
                    try
                    {
                        if (activate)
                        {
                            this.toolTip.Active = true;
                            this.toolTip.Show(this.dataGridView.ToolTipPrivate, this.dataGridView);
                        }
                        else if (this.toolTip != null)
                        {
                            this.toolTip.Hide(this.dataGridView);
                            this.toolTip.Active = false;
                        }
                    }
                    finally
                    {
                        if (this.dataGridView.IsRestricted)
                        {
                            CodeAccessPermission.RevertAssert();
                        }
                    }
                    this.toolTipActivated = activate;
                }
            }

            public void Dispose()
            {
                if (this.toolTip != null)
                {
                    this.toolTip.Dispose();
                    this.toolTip = null;
                }
            }

            public bool Activated =>
                this.toolTipActivated;

            public System.Windows.Forms.ToolTip ToolTip =>
                this.toolTip;
        }

        [ComVisible(true)]
        protected class DataGridViewTopRowAccessibleObject : AccessibleObject
        {
            private DataGridView owner;

            public DataGridViewTopRowAccessibleObject()
            {
            }

            public DataGridViewTopRowAccessibleObject(DataGridView owner)
            {
                this.owner = owner;
            }

            public override AccessibleObject GetChild(int index)
            {
                if (this.owner == null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
                }
                if (index < 0)
                {
                    throw new ArgumentOutOfRangeException("index");
                }
                if ((index == 0) && this.owner.RowHeadersVisible)
                {
                    return this.owner.TopLeftHeaderCell.AccessibilityObject;
                }
                if (this.owner.RowHeadersVisible)
                {
                    index--;
                }
                if (index < this.owner.Columns.GetColumnCount(DataGridViewElementStates.Visible))
                {
                    int num = this.owner.Columns.ActualDisplayIndexToColumnIndex(index, DataGridViewElementStates.Visible);
                    return this.owner.Columns[num].HeaderCell.AccessibilityObject;
                }
                return null;
            }

            public override int GetChildCount()
            {
                if (this.owner == null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
                }
                int columnCount = this.owner.Columns.GetColumnCount(DataGridViewElementStates.Visible);
                if (this.owner.RowHeadersVisible)
                {
                    columnCount++;
                }
                return columnCount;
            }

            [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
            public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
            {
                if (this.owner == null)
                {
                    throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
                }
                switch (navigationDirection)
                {
                    case AccessibleNavigation.Down:
                    case AccessibleNavigation.Next:
                        if (this.owner.AccessibilityObject.GetChildCount() <= 1)
                        {
                            return null;
                        }
                        return this.owner.AccessibilityObject.GetChild(1);

                    case AccessibleNavigation.FirstChild:
                        return this.GetChild(0);

                    case AccessibleNavigation.LastChild:
                        return this.GetChild(this.GetChildCount() - 1);
                }
                return null;
            }

            public override Rectangle Bounds
            {
                get
                {
                    if (this.owner == null)
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
                    }
                    if (this.owner.ColumnHeadersVisible)
                    {
                        Rectangle r = Rectangle.Union(this.owner.layout.ColumnHeaders, this.owner.layout.TopLeftHeader);
                        return this.owner.RectangleToScreen(r);
                    }
                    return Rectangle.Empty;
                }
            }

            public override string Name =>
                System.Windows.Forms.SR.GetString("DataGridView_AccTopRow");

            public DataGridView Owner
            {
                get => 
                    this.owner;
                set
                {
                    if (this.owner != null)
                    {
                        throw new InvalidOperationException(System.Windows.Forms.SR.GetString("DataGridViewTopRowAccessibleObject_OwnerAlreadySet"));
                    }
                    this.owner = value;
                }
            }

            public override AccessibleObject Parent =>
                this.owner?.AccessibilityObject;

            public override AccessibleRole Role =>
                AccessibleRole.Row;

            public override string Value =>
                this.Name;
        }

        internal enum DataGridViewValidateCellInternal
        {
            Never,
            Always,
            WhenChanged
        }

        internal class DisplayedBandsData
        {
            private bool columnInsertionOccurred;
            private bool dirty;
            private int firstDisplayedFrozenCol = -1;
            private int firstDisplayedFrozenRow = -1;
            private int firstDisplayedScrollingCol = -1;
            private int firstDisplayedScrollingRow = -1;
            private int lastDisplayedFrozenCol = -1;
            private int lastDisplayedFrozenRow = -1;
            private int lastDisplayedScrollingRow = -1;
            private int lastTotallyDisplayedScrollingCol = -1;
            private int numDisplayedFrozenCols;
            private int numDisplayedFrozenRows;
            private int numDisplayedScrollingCols;
            private int numDisplayedScrollingRows;
            private int numTotallyDisplayedFrozenRows;
            private int numTotallyDisplayedScrollingRows;
            private int oldFirstDisplayedScrollingCol = -1;
            private int oldFirstDisplayedScrollingRow = -1;
            private int oldNumDisplayedFrozenRows;
            private int oldNumDisplayedScrollingRows;
            private bool rowInsertionOccurred;

            public void CorrectColumnIndexAfterInsertion(int columnIndex, int insertionCount)
            {
                this.EnsureDirtyState();
                if ((this.oldFirstDisplayedScrollingCol != -1) && (columnIndex <= this.oldFirstDisplayedScrollingCol))
                {
                    this.oldFirstDisplayedScrollingCol += insertionCount;
                }
                this.columnInsertionOccurred = true;
            }

            public void CorrectRowIndexAfterDeletion(int rowIndex)
            {
                this.EnsureDirtyState();
                if ((this.oldFirstDisplayedScrollingRow != -1) && (rowIndex <= this.oldFirstDisplayedScrollingRow))
                {
                    this.oldFirstDisplayedScrollingRow--;
                }
            }

            public void CorrectRowIndexAfterInsertion(int rowIndex, int insertionCount)
            {
                this.EnsureDirtyState();
                if ((this.oldFirstDisplayedScrollingRow != -1) && (rowIndex <= this.oldFirstDisplayedScrollingRow))
                {
                    this.oldFirstDisplayedScrollingRow += insertionCount;
                }
                this.rowInsertionOccurred = true;
                this.oldNumDisplayedScrollingRows += insertionCount;
                this.oldNumDisplayedFrozenRows += insertionCount;
            }

            public void EnsureDirtyState()
            {
                if (!this.dirty)
                {
                    this.dirty = true;
                    this.rowInsertionOccurred = false;
                    this.columnInsertionOccurred = false;
                    this.SetOldValues();
                }
            }

            private void SetOldValues()
            {
                this.oldFirstDisplayedScrollingRow = this.firstDisplayedScrollingRow;
                this.oldFirstDisplayedScrollingCol = this.firstDisplayedScrollingCol;
                this.oldNumDisplayedFrozenRows = this.numDisplayedFrozenRows;
                this.oldNumDisplayedScrollingRows = this.numDisplayedScrollingRows;
            }

            public bool ColumnInsertionOccurred =>
                this.columnInsertionOccurred;

            public bool Dirty
            {
                get => 
                    this.dirty;
                set
                {
                    this.dirty = value;
                }
            }

            public int FirstDisplayedFrozenCol
            {
                set
                {
                    if (value != this.firstDisplayedFrozenCol)
                    {
                        this.EnsureDirtyState();
                        this.firstDisplayedFrozenCol = value;
                    }
                }
            }

            public int FirstDisplayedFrozenRow
            {
                set
                {
                    if (value != this.firstDisplayedFrozenRow)
                    {
                        this.EnsureDirtyState();
                        this.firstDisplayedFrozenRow = value;
                    }
                }
            }

            public int FirstDisplayedScrollingCol
            {
                get => 
                    this.firstDisplayedScrollingCol;
                set
                {
                    if (value != this.firstDisplayedScrollingCol)
                    {
                        this.EnsureDirtyState();
                        this.firstDisplayedScrollingCol = value;
                    }
                }
            }

            public int FirstDisplayedScrollingRow
            {
                get => 
                    this.firstDisplayedScrollingRow;
                set
                {
                    if (value != this.firstDisplayedScrollingRow)
                    {
                        this.EnsureDirtyState();
                        this.firstDisplayedScrollingRow = value;
                    }
                }
            }

            public int LastDisplayedFrozenCol
            {
                set
                {
                    if (value != this.lastDisplayedFrozenCol)
                    {
                        this.EnsureDirtyState();
                        this.lastDisplayedFrozenCol = value;
                    }
                }
            }

            public int LastDisplayedFrozenRow
            {
                set
                {
                    if (value != this.lastDisplayedFrozenRow)
                    {
                        this.EnsureDirtyState();
                        this.lastDisplayedFrozenRow = value;
                    }
                }
            }

            public int LastDisplayedScrollingRow
            {
                set
                {
                    if (value != this.lastDisplayedScrollingRow)
                    {
                        this.EnsureDirtyState();
                        this.lastDisplayedScrollingRow = value;
                    }
                }
            }

            public int LastTotallyDisplayedScrollingCol
            {
                get => 
                    this.lastTotallyDisplayedScrollingCol;
                set
                {
                    if (value != this.lastTotallyDisplayedScrollingCol)
                    {
                        this.EnsureDirtyState();
                        this.lastTotallyDisplayedScrollingCol = value;
                    }
                }
            }

            public int NumDisplayedFrozenCols
            {
                get => 
                    this.numDisplayedFrozenCols;
                set
                {
                    if (value != this.numDisplayedFrozenCols)
                    {
                        this.EnsureDirtyState();
                        this.numDisplayedFrozenCols = value;
                    }
                }
            }

            public int NumDisplayedFrozenRows
            {
                get => 
                    this.numDisplayedFrozenRows;
                set
                {
                    if (value != this.numDisplayedFrozenRows)
                    {
                        this.EnsureDirtyState();
                        this.numDisplayedFrozenRows = value;
                    }
                }
            }

            public int NumDisplayedScrollingCols
            {
                get => 
                    this.numDisplayedScrollingCols;
                set
                {
                    if (value != this.numDisplayedScrollingCols)
                    {
                        this.EnsureDirtyState();
                        this.numDisplayedScrollingCols = value;
                    }
                }
            }

            public int NumDisplayedScrollingRows
            {
                get => 
                    this.numDisplayedScrollingRows;
                set
                {
                    if (value != this.numDisplayedScrollingRows)
                    {
                        this.EnsureDirtyState();
                        this.numDisplayedScrollingRows = value;
                    }
                }
            }

            public int NumTotallyDisplayedFrozenRows
            {
                get => 
                    this.numTotallyDisplayedFrozenRows;
                set
                {
                    if (value != this.numTotallyDisplayedFrozenRows)
                    {
                        this.EnsureDirtyState();
                        this.numTotallyDisplayedFrozenRows = value;
                    }
                }
            }

            public int NumTotallyDisplayedScrollingRows
            {
                get => 
                    this.numTotallyDisplayedScrollingRows;
                set
                {
                    if (value != this.numTotallyDisplayedScrollingRows)
                    {
                        this.EnsureDirtyState();
                        this.numTotallyDisplayedScrollingRows = value;
                    }
                }
            }

            public int OldFirstDisplayedScrollingCol =>
                this.oldFirstDisplayedScrollingCol;

            public int OldFirstDisplayedScrollingRow =>
                this.oldFirstDisplayedScrollingRow;

            public int OldNumDisplayedFrozenRows =>
                this.oldNumDisplayedFrozenRows;

            public int OldNumDisplayedScrollingRows =>
                this.oldNumDisplayedScrollingRows;

            public bool RowInsertionOccurred =>
                this.rowInsertionOccurred;
        }

        public sealed class HitTestInfo
        {
            internal int adjacentCol;
            internal int adjacentRow;
            internal int col;
            internal int colStart;
            internal int mouseBarOffset;
            public static readonly DataGridView.HitTestInfo Nowhere = new DataGridView.HitTestInfo();
            internal int row;
            internal int rowStart;
            internal DataGridViewHitTestType type = DataGridViewHitTestType.None;
            internal DataGridView.DataGridViewHitTestTypeInternal typeInternal = DataGridView.DataGridViewHitTestTypeInternal.None;

            internal HitTestInfo()
            {
                this.row = this.col = -1;
                this.rowStart = this.colStart = -1;
                this.adjacentRow = this.adjacentCol = -1;
            }

            public override bool Equals(object value)
            {
                DataGridView.HitTestInfo info = value as DataGridView.HitTestInfo;
                if (info == null)
                {
                    return false;
                }
                return (((this.type == info.type) && (this.row == info.row)) && (this.col == info.col));
            }

            public override int GetHashCode() => 
                WindowsFormsUtils.GetCombinedHashCodes(new int[] { this.type, this.row, this.col });

            public override string ToString() => 
                ("{ Type:" + this.type.ToString() + ", Column:" + this.col.ToString(CultureInfo.CurrentCulture) + ", Row:" + this.row.ToString(CultureInfo.CurrentCulture) + " }");

            public int ColumnIndex =>
                this.col;

            public int ColumnX =>
                this.colStart;

            public int RowIndex =>
                this.row;

            public int RowY =>
                this.rowStart;

            public DataGridViewHitTestType Type =>
                this.type;
        }

        internal class LayoutData
        {
            public Rectangle ClientRectangle;
            public Rectangle ColumnHeaders;
            public bool ColumnHeadersVisible;
            public Rectangle Data;
            internal bool dirty;
            public Rectangle Inside;
            public Rectangle ResizeBoxRect;
            public Rectangle RowHeaders;
            public bool RowHeadersVisible;
            public Rectangle TopLeftHeader;

            public LayoutData()
            {
                this.dirty = true;
                this.ClientRectangle = Rectangle.Empty;
                this.Inside = Rectangle.Empty;
                this.RowHeaders = Rectangle.Empty;
                this.ColumnHeaders = Rectangle.Empty;
                this.TopLeftHeader = Rectangle.Empty;
                this.Data = Rectangle.Empty;
                this.ResizeBoxRect = Rectangle.Empty;
            }

            public LayoutData(DataGridView.LayoutData src)
            {
                this.dirty = true;
                this.ClientRectangle = Rectangle.Empty;
                this.Inside = Rectangle.Empty;
                this.RowHeaders = Rectangle.Empty;
                this.ColumnHeaders = Rectangle.Empty;
                this.TopLeftHeader = Rectangle.Empty;
                this.Data = Rectangle.Empty;
                this.ResizeBoxRect = Rectangle.Empty;
                this.ClientRectangle = src.ClientRectangle;
                this.TopLeftHeader = src.TopLeftHeader;
                this.ColumnHeaders = src.ColumnHeaders;
                this.RowHeaders = src.RowHeaders;
                this.Inside = src.Inside;
                this.Data = src.Data;
                this.ResizeBoxRect = src.ResizeBoxRect;
                this.ColumnHeadersVisible = src.ColumnHeadersVisible;
                this.RowHeadersVisible = src.RowHeadersVisible;
            }

            public override string ToString()
            {
                StringBuilder builder = new StringBuilder(100);
                builder.Append(base.ToString());
                builder.Append(" { \n");
                builder.Append("ClientRectangle = ");
                builder.Append(this.ClientRectangle.ToString());
                builder.Append('\n');
                builder.Append("Inside = ");
                builder.Append(this.Inside.ToString());
                builder.Append('\n');
                builder.Append("TopLeftHeader = ");
                builder.Append(this.TopLeftHeader.ToString());
                builder.Append('\n');
                builder.Append("ColumnHeaders = ");
                builder.Append(this.ColumnHeaders.ToString());
                builder.Append('\n');
                builder.Append("RowHeaders = ");
                builder.Append(this.RowHeaders.ToString());
                builder.Append('\n');
                builder.Append("Data = ");
                builder.Append(this.Data.ToString());
                builder.Append('\n');
                builder.Append("ResizeBoxRect = ");
                builder.Append(this.ResizeBoxRect.ToString());
                builder.Append('\n');
                builder.Append("ColumnHeadersVisible = ");
                builder.Append(this.ColumnHeadersVisible.ToString());
                builder.Append('\n');
                builder.Append("RowHeadersVisible = ");
                builder.Append(this.RowHeadersVisible.ToString());
                builder.Append(" }");
                return builder.ToString();
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct MouseClickInfo
        {
            public MouseButtons button;
            public long timeStamp;
            public int x;
            public int y;
            public int col;
            public int row;
        }
    }
}

