namespace System.Windows.Forms
{
    using System;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Drawing;
    using System.Globalization;
    using System.Runtime.InteropServices;
    using System.Security.Permissions;
    using System.Windows.Forms.Layout;

    [ComVisible(true), Designer("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), ClassInterface(ClassInterfaceType.AutoDispatch)]
    public class ToolStripDropDown : ToolStrip
    {
        private bool autoClose;
        private bool autoSize;
        private ToolStripDropDownDirection childDropDownDirection;
        private ToolStripDropDownCloseReason closeReason;
        private int countDropDownItemsAssignedTo;
        private Point displayLocation;
        internal static TraceSwitch DropDownActivateDebug;
        internal static TraceSwitch DropDownDebugBounds;
        private Point dropDownLocation;
        private bool dropShadowEnabled;
        private static readonly object EventClosed = new object();
        private static readonly object EventClosing = new object();
        private static readonly object EventOpened = new object();
        private static readonly object EventOpening = new object();
        private bool isAutoGenerated;
        private ToolStripItem ownerItem;
        private static readonly int PropDDRightToLeft = PropertyStore.CreateKey();
        private static readonly int PropOpacity = PropertyStore.CreateKey();
        private static readonly int PropSourceControl = PropertyStore.CreateKey();
        private bool sendingActivateMessage;
        private BitVector32 state;
        private static readonly int stateAllowTransparency = BitVector32.CreateMask(stateLayered);
        private static readonly int stateInSetVisibleCore = BitVector32.CreateMask(stateNotWorkingAreaConstrained);
        private static readonly int stateIsRestrictedWindow = BitVector32.CreateMask(stateAllowTransparency);
        private static readonly int stateIsRestrictedWindowChecked = BitVector32.CreateMask(stateIsRestrictedWindow);
        private static readonly int stateLayered = BitVector32.CreateMask();
        private static readonly int stateNotWorkingAreaConstrained = BitVector32.CreateMask(stateIsRestrictedWindowChecked);
        private static readonly object ToolStripParkingWindowKey = new object();

        [Browsable(false)]
        public event EventHandler BackgroundImageChanged
        {
            add
            {
                base.BackgroundImageChanged += value;
            }
            remove
            {
                base.BackgroundImageChanged -= value;
            }
        }

        [Browsable(false)]
        public event EventHandler BackgroundImageLayoutChanged
        {
            add
            {
                base.BackgroundImageLayoutChanged += value;
            }
            remove
            {
                base.BackgroundImageLayoutChanged -= value;
            }
        }

        [Browsable(false)]
        public event EventHandler BindingContextChanged
        {
            add
            {
                base.BindingContextChanged += value;
            }
            remove
            {
                base.BindingContextChanged -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event UICuesEventHandler ChangeUICues
        {
            add
            {
                base.ChangeUICues += value;
            }
            remove
            {
                base.ChangeUICues -= value;
            }
        }

        [System.Windows.Forms.SRCategory("CatAction"), System.Windows.Forms.SRDescription("ToolStripDropDownClosedDecr")]
        public event ToolStripDropDownClosedEventHandler Closed
        {
            add
            {
                base.Events.AddHandler(EventClosed, value);
            }
            remove
            {
                base.Events.RemoveHandler(EventClosed, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatAction"), System.Windows.Forms.SRDescription("ToolStripDropDownClosingDecr")]
        public event ToolStripDropDownClosingEventHandler Closing
        {
            add
            {
                base.Events.AddHandler(EventClosing, value);
            }
            remove
            {
                base.Events.RemoveHandler(EventClosing, value);
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public event EventHandler ContextMenuChanged
        {
            add
            {
                base.ContextMenuChanged += value;
            }
            remove
            {
                base.ContextMenuChanged -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event EventHandler ContextMenuStripChanged
        {
            add
            {
                base.ContextMenuStripChanged += value;
            }
            remove
            {
                base.ContextMenuStripChanged -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event EventHandler DockChanged
        {
            add
            {
                base.DockChanged += value;
            }
            remove
            {
                base.DockChanged -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event EventHandler Enter
        {
            add
            {
                base.Enter += value;
            }
            remove
            {
                base.Enter -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event EventHandler FontChanged
        {
            add
            {
                base.FontChanged += value;
            }
            remove
            {
                base.FontChanged -= value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event EventHandler ForeColorChanged
        {
            add
            {
                base.ForeColorChanged += value;
            }
            remove
            {
                base.ForeColorChanged -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public event GiveFeedbackEventHandler GiveFeedback
        {
            add
            {
                base.GiveFeedback += value;
            }
            remove
            {
                base.GiveFeedback -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event HelpEventHandler HelpRequested
        {
            add
            {
                base.HelpRequested += value;
            }
            remove
            {
                base.HelpRequested -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event EventHandler ImeModeChanged
        {
            add
            {
                base.ImeModeChanged += value;
            }
            remove
            {
                base.ImeModeChanged -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event KeyEventHandler KeyDown
        {
            add
            {
                base.KeyDown += value;
            }
            remove
            {
                base.KeyDown -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event KeyPressEventHandler KeyPress
        {
            add
            {
                base.KeyPress += value;
            }
            remove
            {
                base.KeyPress -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event KeyEventHandler KeyUp
        {
            add
            {
                base.KeyUp += value;
            }
            remove
            {
                base.KeyUp -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event EventHandler Leave
        {
            add
            {
                base.Leave += value;
            }
            remove
            {
                base.Leave -= value;
            }
        }

        [System.Windows.Forms.SRDescription("ToolStripDropDownOpenedDescr"), System.Windows.Forms.SRCategory("CatAction")]
        public event EventHandler Opened
        {
            add
            {
                base.Events.AddHandler(EventOpened, value);
            }
            remove
            {
                base.Events.RemoveHandler(EventOpened, value);
            }
        }

        [System.Windows.Forms.SRCategory("CatAction"), System.Windows.Forms.SRDescription("ToolStripDropDownOpeningDescr")]
        public event CancelEventHandler Opening
        {
            add
            {
                base.Events.AddHandler(EventOpening, value);
            }
            remove
            {
                base.Events.RemoveHandler(EventOpening, value);
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public event EventHandler RegionChanged
        {
            add
            {
                base.RegionChanged += value;
            }
            remove
            {
                base.RegionChanged -= value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event ScrollEventHandler Scroll
        {
            add
            {
                base.Scroll += value;
            }
            remove
            {
                base.Scroll -= value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Always), Browsable(false)]
        public event EventHandler StyleChanged
        {
            add
            {
                base.StyleChanged += value;
            }
            remove
            {
                base.StyleChanged -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), System.Windows.Forms.SRCategory("CatPropertyChanged"), System.Windows.Forms.SRDescription("ControlOnTabIndexChangedDescr")]
        public event EventHandler TabIndexChanged
        {
            add
            {
                base.TabIndexChanged += value;
            }
            remove
            {
                base.TabIndexChanged -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public event EventHandler TabStopChanged
        {
            add
            {
                base.TabStopChanged += value;
            }
            remove
            {
                base.TabStopChanged -= value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public event EventHandler TextChanged
        {
            add
            {
                base.TextChanged += value;
            }
            remove
            {
                base.TextChanged -= value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event EventHandler Validated
        {
            add
            {
                base.Validated += value;
            }
            remove
            {
                base.Validated -= value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event CancelEventHandler Validating
        {
            add
            {
                base.Validating += value;
            }
            remove
            {
                base.Validating -= value;
            }
        }

        public ToolStripDropDown()
        {
            this.dropDownLocation = Point.Empty;
            this.dropShadowEnabled = true;
            this.autoClose = true;
            this.autoSize = true;
            this.state = new BitVector32();
            this.displayLocation = new Point(0, 0);
            this.childDropDownDirection = ToolStripDropDownDirection.Default;
            bool isRestrictedWindow = this.IsRestrictedWindow;
            base.SuspendLayout();
            this.Initialize();
            base.ResumeLayout(false);
        }

        internal ToolStripDropDown(ToolStripItem ownerItem) : this()
        {
            this.ownerItem = ownerItem;
        }

        internal ToolStripDropDown(ToolStripItem ownerItem, bool isAutoGenerated) : this(ownerItem)
        {
            this.isAutoGenerated = isAutoGenerated;
        }

        internal void AdjustSize()
        {
            Size suggestedSize = this.GetSuggestedSize();
            if (suggestedSize != base.Size)
            {
                base.Size = suggestedSize;
            }
        }

        internal override Rectangle ApplyBoundsConstraints(int suggestedX, int suggestedY, int proposedWidth, int proposedHeight)
        {
            Rectangle bounds = base.ApplyBoundsConstraints(suggestedX, suggestedY, proposedWidth, proposedHeight);
            if (this.IsRestrictedWindow && this.TopMost)
            {
                bounds = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(bounds);
            }
            return bounds;
        }

        private void ApplyTopMost(bool topMost)
        {
            if (this.TopMost)
            {
                HandleRef hWndInsertAfter = topMost ? System.Windows.Forms.NativeMethods.HWND_TOPMOST : System.Windows.Forms.NativeMethods.HWND_NOTOPMOST;
                System.Windows.Forms.SafeNativeMethods.SetWindowPos(new HandleRef(this, base.Handle), hWndInsertAfter, 0, 0, 0, 0, 0x13);
            }
        }

        internal void AssignToDropDownItem()
        {
            this.countDropDownItemsAssignedTo++;
        }

        internal Rectangle CalculateDropDownLocation(Point start, ToolStripDropDownDirection dropDownDirection)
        {
            Point empty = Point.Empty;
            if (!base.IsHandleCreated)
            {
                LayoutTransaction.DoLayout(this, this, PropertyNames.PreferredSize);
            }
            Rectangle bounds = new Rectangle(Point.Empty, this.GetSuggestedSize());
            switch (dropDownDirection)
            {
                case ToolStripDropDownDirection.AboveLeft:
                    empty.X = -bounds.Width;
                    empty.Y = -bounds.Height;
                    break;

                case ToolStripDropDownDirection.AboveRight:
                    empty.Y = -bounds.Height;
                    break;

                case ToolStripDropDownDirection.BelowLeft:
                case ToolStripDropDownDirection.Left:
                    empty.X = -bounds.Width;
                    break;
            }
            bounds.Location = new Point(start.X + empty.X, start.Y + empty.Y);
            if (this.WorkingAreaConstrained)
            {
                bounds = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(bounds);
            }
            return bounds;
        }

        private void CancelAutoExpand()
        {
            ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
            if (toplevelOwnerToolStrip != null)
            {
                toplevelOwnerToolStrip.MenuAutoExpand = false;
            }
        }

        internal override bool CanProcessMnemonic()
        {
            if (this.IsRestrictedWindow && !Application.MessageLoop)
            {
                return false;
            }
            return base.CanProcessMnemonic();
        }

        public void Close()
        {
            this.SetCloseReason(ToolStripDropDownCloseReason.CloseCalled);
            this.Visible = false;
            if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() == null)
            {
                ToolStripManager.ModalMenuFilter.ExitMenuMode();
            }
        }

        public void Close(ToolStripDropDownCloseReason reason)
        {
            this.SetCloseReason(reason);
            this.Visible = false;
        }

        protected override AccessibleObject CreateAccessibilityInstance() => 
            new ToolStripDropDownAccessibleObject(this);

        protected override void CreateHandle()
        {
            base.CreateHandle();
            if (this.TopLevel)
            {
                this.ReparentToDropDownOwnerWindow();
                if (!this.AutoClose || !this.WorkingAreaConstrained)
                {
                    this.ApplyTopMost(true);
                }
            }
            if (base.DesignMode)
            {
                base.SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, false);
            }
        }

        protected override LayoutSettings CreateLayoutSettings(ToolStripLayoutStyle style)
        {
            LayoutSettings settings = base.CreateLayoutSettings(style);
            if (style == ToolStripLayoutStyle.Flow)
            {
                FlowLayoutSettings settings2 = settings as FlowLayoutSettings;
                settings2.FlowDirection = FlowDirection.TopDown;
                settings2.WrapContents = false;
                return settings2;
            }
            return settings;
        }

        private void DismissActiveDropDowns()
        {
            if (base.ActiveDropDowns.Count == 1)
            {
                ToolStripDropDown down = base.ActiveDropDowns[0] as ToolStripDropDown;
                if (down != null)
                {
                    down.Visible = false;
                }
            }
            else
            {
                ArrayList list = base.ActiveDropDowns.Clone() as ArrayList;
                for (int i = 0; i < list.Count; i++)
                {
                    ToolStripDropDown down2 = list[i] as ToolStripDropDown;
                    if (down2 != null)
                    {
                        down2.Visible = false;
                    }
                }
            }
        }

        internal void DismissAll()
        {
            ToolStripDropDown firstDropDown = this.GetFirstDropDown();
            firstDropDown.DismissActiveDropDowns();
            firstDropDown.Visible = false;
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                this.SourceControlInternal = null;
            }
            base.Dispose(disposing);
        }

        internal Rectangle GetDropDownBounds(Rectangle suggestedBounds)
        {
            if (this.TopLevel)
            {
                Point location = Point.Empty;
                if ((this.ownerItem != null) && (this.ownerItem is ToolStripDropDownItem))
                {
                    location = ((ToolStripDropDownItem) this.ownerItem).DropDownLocation;
                }
                else
                {
                    location = suggestedBounds.Location;
                }
                Rectangle bounds = new Rectangle(location, suggestedBounds.Size);
                if (this.WorkingAreaConstrained)
                {
                    return WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(bounds);
                }
                return WindowsFormsUtils.ConstrainToScreenBounds(bounds);
            }
            Point empty = Point.Empty;
            if (((this.ownerItem != null) && (this.ownerItem is ToolStripDropDownItem)) && (this.ParentInternal != null))
            {
                empty = this.ParentInternal.PointToClient(((ToolStripDropDownItem) this.ownerItem).DropDownLocation);
            }
            else
            {
                empty = suggestedBounds.Location;
            }
            return new Rectangle(empty, suggestedBounds.Size);
        }

        internal ToolStripDropDown GetFirstDropDown()
        {
            ToolStripDropDown down = this;
            for (ToolStripDropDown down2 = down.OwnerToolStrip as ToolStripDropDown; down2 != null; down2 = down.OwnerToolStrip as ToolStripDropDown)
            {
                down = down2;
            }
            return down;
        }

        internal static ToolStripDropDown GetFirstDropDown(ToolStrip start)
        {
            if ((start == null) || !start.IsDropDown)
            {
                return null;
            }
            ToolStripDropDown down = start as ToolStripDropDown;
            return down.GetFirstDropDown();
        }

        internal Size GetSuggestedSize()
        {
            if (this.AutoSize)
            {
                return this.GetPreferredSize(Size.Empty);
            }
            return base.Size;
        }

        internal ToolStripItem GetToplevelOwnerItem() => 
            this.GetFirstDropDown().OwnerItem;

        internal override ToolStrip GetToplevelOwnerToolStrip()
        {
            ToolStripDropDown firstDropDown = this.GetFirstDropDown();
            if (firstDropDown.OwnerItem != null)
            {
                return firstDropDown.OwnerToolStrip;
            }
            return null;
        }

        internal override void HandleItemClicked(ToolStripItem dismissingItem)
        {
            this.SourceControlInternal = null;
            base.HandleItemClicked(dismissingItem);
        }

        internal virtual void Initialize()
        {
            base.SetState(2, false);
            base.SetTopLevelInternal(true);
            base.SetState(0x20, true);
            base.SetStyle(ControlStyles.ResizeRedraw, true);
            base.UpdateStyles();
            this.GripStyle = ToolStripGripStyle.Hidden;
            this.CanOverflow = false;
            base.LayoutStyle = ToolStripLayoutStyle.Flow;
            base.MenuAutoExpand = true;
            this.AutoSize = true;
        }

        protected virtual void OnClosed(ToolStripDropDownClosedEventArgs e)
        {
            if (base.IsHandleCreated && ((this.ownerItem == null) || !this.ownerItem.IsInDesignMode))
            {
                base.AccessibilityNotifyClients(AccessibleEvents.SystemMenuPopupEnd, -1);
            }
            ToolStripDropDownClosedEventHandler handler = (ToolStripDropDownClosedEventHandler) base.Events[EventClosed];
            if (handler != null)
            {
                handler(this, e);
            }
        }

        protected virtual void OnClosing(ToolStripDropDownClosingEventArgs e)
        {
            ToolStripDropDownClosingEventHandler handler = (ToolStripDropDownClosingEventHandler) base.Events[EventClosing];
            if (handler != null)
            {
                handler(this, e);
            }
        }

        protected override void OnHandleCreated(EventArgs e)
        {
            base.UpdateStyles();
            base.OnHandleCreated(e);
            this.UpdateLayered();
        }

        protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
        {
            try
            {
                base.OnItemClicked(e);
            }
            finally
            {
                ToolStripDropDownItem clickedItem = e.ClickedItem as ToolStripDropDownItem;
                if (this.AutoClose && (((clickedItem == null) || ((clickedItem is ToolStripSplitButton) && !clickedItem.DropDown.Visible)) || !clickedItem.HasDropDownItems))
                {
                    this.Close(ToolStripDropDownCloseReason.ItemClicked);
                }
            }
        }

        protected override void OnLayout(LayoutEventArgs e)
        {
            this.AdjustSize();
            base.OnLayout(e);
        }

        protected override void OnMouseUp(MouseEventArgs mea)
        {
            base.OnMouseUp(mea);
            if (!base.ClientRectangle.Contains(mea.Location))
            {
                bool flag = true;
                if (((this.OwnerToolStrip != null) && (this.OwnerItem != null)) && this.OwnerItem.Bounds.Contains(WindowsFormsUtils.TranslatePoint(mea.Location, this, this.OwnerToolStrip)))
                {
                    flag = false;
                }
                if (flag)
                {
                    this.DismissAll();
                    this.CancelAutoExpand();
                }
            }
        }

        protected virtual void OnOpened(EventArgs e)
        {
            if (base.IsHandleCreated && ((this.ownerItem == null) || !this.ownerItem.IsInDesignMode))
            {
                base.AccessibilityNotifyClients(AccessibleEvents.SystemMenuPopupStart, -1);
            }
            EventHandler handler = (EventHandler) base.Events[EventOpened];
            if (handler != null)
            {
                handler(this, e);
            }
        }

        protected virtual void OnOpening(CancelEventArgs e)
        {
            CancelEventHandler handler = (CancelEventHandler) base.Events[EventOpening];
            if (handler != null)
            {
                handler(this, e);
            }
        }

        internal void OnOwnerItemFontChanged(EventArgs e)
        {
            if (this.IsAutoGenerated)
            {
                using (new LayoutTransaction(this, this.OwnerItem, PropertyNames.Font))
                {
                    this.OnFontChanged(e);
                }
            }
        }

        protected override void OnParentChanged(EventArgs e)
        {
            base.OnParentChanged(e);
            Rectangle bounds = base.Bounds;
            this.SetBoundsCore(bounds.X, bounds.Y, bounds.Width, bounds.Height, BoundsSpecified.Location);
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if (this.Location != this.displayLocation)
            {
                this.Location = this.displayLocation;
                this.displayLocation = this.Location;
            }
            if (this.AutoScroll || base.LayoutRequired)
            {
                base.OnVisibleChanged(e);
            }
            else
            {
                base.SuspendLayout();
                try
                {
                    base.OnVisibleChanged(e);
                }
                finally
                {
                    base.ResumeLayout(false);
                }
            }
        }

        internal override bool ProcessArrowKey(Keys keyCode)
        {
            ToolStripMenuItem.MenuTimer.Cancel();
            if ((keyCode == Keys.Left) || (keyCode == Keys.Right))
            {
                bool rightAlignedMenus = SystemInformation.RightAlignedMenus;
                bool forward = ((keyCode == Keys.Left) && rightAlignedMenus) || ((keyCode == Keys.Right) && !rightAlignedMenus);
                if (!this.IsFirstDropDown && !forward)
                {
                    this.Visible = false;
                    return true;
                }
                bool flag3 = false;
                if (base.LayoutStyle == ToolStripLayoutStyle.Flow)
                {
                    flag3 = (FlowLayout.GetFlowDirection(this) == FlowDirection.TopDown) && !FlowLayout.GetWrapContents(this);
                }
                if (flag3)
                {
                    ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
                    ToolStripItem toplevelOwnerItem = this.GetToplevelOwnerItem();
                    bool flag4 = (this.OwnerItem != null) && this.OwnerItem.IsOnOverflow;
                    if (forward || !flag4)
                    {
                        this.DismissAll();
                    }
                    else if (flag4)
                    {
                        this.Visible = false;
                    }
                    if ((toplevelOwnerToolStrip != null) && (toplevelOwnerItem != null))
                    {
                        if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != toplevelOwnerToolStrip)
                        {
                            ToolStripManager.ModalMenuFilter.SetActiveToolStrip(toplevelOwnerToolStrip);
                        }
                        toplevelOwnerToolStrip.SelectNextToolStripItem(toplevelOwnerItem, forward);
                    }
                    return true;
                }
            }
            return base.ProcessArrowKey(keyCode);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced), UIPermission(SecurityAction.LinkDemand, Window=UIPermissionWindow.AllWindows)]
        protected override bool ProcessDialogChar(char charCode) => 
            ((((this.OwnerItem == null) || this.OwnerItem.Pressed) && ((charCode != ' ') && this.ProcessMnemonic(charCode))) || base.ProcessDialogChar(charCode));

        [UIPermission(SecurityAction.LinkDemand, Window=UIPermissionWindow.AllWindows)]
        protected override bool ProcessDialogKey(Keys keyData)
        {
            if ((this.OwnerItem != null) && this.OwnerItem.IsInDesignMode)
            {
                return false;
            }
            if (this.AutoClose && this.Visible)
            {
                if (ToolStripManager.IsMenuKey(keyData))
                {
                    this.SetCloseReason(ToolStripDropDownCloseReason.Keyboard);
                    this.DismissAll();
                    ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
                    if (toplevelOwnerToolStrip != null)
                    {
                        toplevelOwnerToolStrip.RestoreFocusInternal();
                        ToolStripManager.ModalMenuFilter.MenuKeyToggle = true;
                    }
                    ToolStripManager.ModalMenuFilter.ExitMenuMode();
                    return true;
                }
                if ((keyData & Keys.KeyCode) == Keys.Escape)
                {
                    this.SetCloseReason(ToolStripDropDownCloseReason.Keyboard);
                    this.SelectPreviousToolStrip();
                    return true;
                }
            }
            return base.ProcessDialogKey(keyData);
        }

        internal override void ProcessDuplicateMnemonic(ToolStripItem item, char charCode)
        {
            if (this.CanProcessMnemonic() && (item != null))
            {
                if (this.IsRestrictedWindow)
                {
                    item.ProcessMnemonic(charCode);
                }
                else
                {
                    base.ProcessDuplicateMnemonic(item, charCode);
                }
            }
        }

        [UIPermission(SecurityAction.LinkDemand, Window=UIPermissionWindow.AllWindows)]
        protected internal override bool ProcessMnemonic(char charCode)
        {
            if (!this.CanProcessMnemonic())
            {
                return false;
            }
            return base.ProcessMnemonic(charCode);
        }

        internal override void RecreateHandleCore()
        {
            if (this.Visible)
            {
                this.ReparentToDropDownOwnerWindow();
            }
            base.RecreateHandleCore();
            if (this.Visible)
            {
                this.ReparentToActiveToolStripWindow();
            }
        }

        private void ReparentToActiveToolStripWindow()
        {
            ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this);
            System.Windows.Forms.UnsafeNativeMethods.SetWindowLong(new HandleRef(this, base.Handle), -8, ToolStripManager.ModalMenuFilter.ActiveHwnd);
        }

        private void ReparentToDropDownOwnerWindow()
        {
            NativeWindow dropDownOwnerWindow = this.DropDownOwnerWindow;
            HandleRef dwNewLong = new HandleRef(dropDownOwnerWindow, dropDownOwnerWindow.Handle);
            System.Windows.Forms.UnsafeNativeMethods.SetWindowLong(new HandleRef(this, base.Handle), -8, dwNewLong);
        }

        private void ResetCloseReason()
        {
            this.closeReason = ToolStripDropDownCloseReason.AppFocusChange;
        }

        private void ResetDropShadowEnabled()
        {
            this.DropShadowEnabled = true;
        }

        protected override void ScaleControl(SizeF factor, BoundsSpecified specified)
        {
            base.ScaleControl(factor, specified);
            Size minimumSize = this.MinimumSize;
            Size maximumSize = this.MaximumSize;
            if (!this.MinimumSize.IsEmpty)
            {
                this.MinimumSize = base.ScaleSize(minimumSize, factor.Width, factor.Height);
            }
            if (!this.MaximumSize.IsEmpty)
            {
                this.MaximumSize = base.ScaleSize(maximumSize, factor.Width, factor.Height);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never)]
        protected override void ScaleCore(float dx, float dy)
        {
            base.SuspendLayout();
            try
            {
                Size clientSize = base.ClientSize;
                Size minimumSize = this.MinimumSize;
                Size maximumSize = this.MaximumSize;
                base.ClientSize = base.ScaleSize(clientSize, dx, dy);
                if (!this.MinimumSize.IsEmpty)
                {
                    this.MinimumSize = base.ScaleSize(minimumSize, dx, dy);
                }
                if (!this.MaximumSize.IsEmpty)
                {
                    this.MaximumSize = base.ScaleSize(maximumSize, dx, dy);
                }
                base.ScaleDockPadding(dx, dy);
                foreach (Control control in base.Controls)
                {
                    if (control != null)
                    {
                        control.Scale(dx, dy);
                    }
                }
            }
            finally
            {
                base.ResumeLayout();
            }
        }

        internal void SelectPreviousToolStrip()
        {
            ToolStripItem ownerItem = this.OwnerItem;
            base.Hide();
            if (ownerItem != null)
            {
                ownerItem.Select();
                if ((this.OwnerToolStrip != null) && !this.OwnerToolStrip.IsDropDown)
                {
                    if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != this.OwnerToolStrip)
                    {
                        ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this.OwnerToolStrip);
                    }
                    this.OwnerToolStrip.MenuAutoExpand = false;
                }
            }
            else
            {
                ToolStripManager.ModalMenuFilter.ExitMenuMode();
            }
        }

        internal void SetAutoGeneratedInternal(bool autoGenerated)
        {
            this.isAutoGenerated = autoGenerated;
        }

        protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
        {
            Rectangle suggestedBounds = new Rectangle(x, y, width, height);
            suggestedBounds = this.GetDropDownBounds(suggestedBounds);
            base.SetBoundsCore(suggestedBounds.X, suggestedBounds.Y, suggestedBounds.Width, suggestedBounds.Height, specified);
        }

        internal void SetCloseReason(ToolStripDropDownCloseReason reason)
        {
            this.closeReason = reason;
        }

        private void SetTopLevelStyle(bool value)
        {
            if (base.IsHandleCreated)
            {
                int windowStyle = base.WindowStyle;
                if (value)
                {
                    windowStyle &= -1073741825;
                    windowStyle |= -2147483648;
                }
                else
                {
                    windowStyle &= 0x7fffffff;
                    windowStyle |= 0x40000000;
                }
                base.WindowStyle = windowStyle;
            }
        }

        protected override void SetVisibleCore(bool visible)
        {
            if (!this.state[stateInSetVisibleCore])
            {
                this.state[stateInSetVisibleCore] = true;
                try
                {
                    if (visible)
                    {
                        if (base.LayoutRequired)
                        {
                            LayoutTransaction.DoLayout(this, this, PropertyNames.Visible);
                        }
                        bool cancel = true;
                        try
                        {
                            System.Windows.Forms.UnsafeNativeMethods.GetForegroundWindow();
                            CancelEventArgs e = new CancelEventArgs(this.DisplayedItems.Count == 0);
                            this.OnOpening(e);
                            cancel = e.Cancel;
                            if (!cancel)
                            {
                                if (this.TopLevel)
                                {
                                    this.ReparentToActiveToolStripWindow();
                                }
                                if (this.OwnerToolStrip != null)
                                {
                                    this.OwnerToolStrip.ActiveDropDowns.Add(this);
                                    this.OwnerToolStrip.SnapMouseLocation();
                                    if (this.OwnerToolStrip.CaptureInternal)
                                    {
                                        base.CaptureInternal = true;
                                    }
                                }
                                base.SetVisibleCore(visible);
                                if (this.TopLevel)
                                {
                                    this.ApplyTopMost(true);
                                }
                                else if (base.IsHandleCreated && System.Windows.Forms.SafeNativeMethods.IsWindowEnabled(new HandleRef(this, base.Handle)))
                                {
                                    System.Windows.Forms.SafeNativeMethods.SetWindowPos(new HandleRef(this, base.Handle), System.Windows.Forms.NativeMethods.HWND_TOP, 0, 0, 0, 0, 0x13);
                                }
                            }
                            return;
                        }
                        finally
                        {
                            if (!cancel)
                            {
                                this.OnOpened(new EventArgs());
                            }
                        }
                    }
                    if (this.GetVisibleCore())
                    {
                        ToolStripDropDownCloseReason closeReason = this.closeReason;
                        this.ResetCloseReason();
                        ToolStripDropDownClosingEventArgs args2 = new ToolStripDropDownClosingEventArgs(closeReason);
                        if (args2.CloseReason != ToolStripDropDownCloseReason.CloseCalled)
                        {
                            args2.Cancel = !this.AutoClose;
                        }
                        else
                        {
                            args2.Cancel = false;
                        }
                        try
                        {
                            this.OnClosing(args2);
                            return;
                        }
                        finally
                        {
                            if (!args2.Cancel || this.IsRestrictedWindow)
                            {
                                this.DismissActiveDropDowns();
                                if (closeReason == ToolStripDropDownCloseReason.ItemClicked)
                                {
                                    this.DismissAll();
                                    ToolStripItem toplevelOwnerItem = this.GetToplevelOwnerItem();
                                    if (toplevelOwnerItem != null)
                                    {
                                        toplevelOwnerItem.Unselect();
                                    }
                                    this.CancelAutoExpand();
                                    ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
                                    ToolStripManager.ModalMenuFilter.ExitMenuMode();
                                }
                                else
                                {
                                    ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
                                }
                                Rectangle bounds = base.Bounds;
                                try
                                {
                                    base.SetVisibleCore(visible);
                                }
                                finally
                                {
                                    if (this.OwnerToolStrip != null)
                                    {
                                        this.OwnerToolStrip.ActiveDropDowns.Remove(this);
                                    }
                                    base.ActiveDropDowns.Clear();
                                    if (base.CaptureInternal)
                                    {
                                        base.CaptureInternal = false;
                                    }
                                }
                                ToolStripDropDownClosedEventArgs args3 = new ToolStripDropDownClosedEventArgs(closeReason);
                                this.OnClosed(args3);
                                if (this.TopLevel && (!base.IsDisposed || !base.Disposing))
                                {
                                    this.ReparentToDropDownOwnerWindow();
                                }
                                if (closeReason != ToolStripDropDownCloseReason.ItemClicked)
                                {
                                    this.SourceControlInternal = null;
                                }
                                if ((!base.DesignMode && this.IsFirstDropDown) && ((this.OwnerItem != null) && this.TopLevel))
                                {
                                    ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
                                    if (((toplevelOwnerToolStrip != null) && !toplevelOwnerToolStrip.IsDisposed) && !toplevelOwnerToolStrip.Disposing)
                                    {
                                        bounds.Location = toplevelOwnerToolStrip.PointToClient(bounds.Location);
                                        bounds.Intersect(toplevelOwnerToolStrip.ClientRectangle);
                                        if ((bounds.Width > 0) && (bounds.Height > 0))
                                        {
                                            toplevelOwnerToolStrip.Invalidate(bounds);
                                            toplevelOwnerToolStrip.Update();
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
                }
                finally
                {
                    this.state[stateInSetVisibleCore] = false;
                }
            }
        }

        private bool ShouldSerializeDefaultDropDownDirection() => 
            (this.childDropDownDirection != ToolStripDropDownDirection.Default);

        private bool ShouldSerializeDropShadowEnabled() => 
            !this.dropShadowEnabled;

        internal override bool ShouldSerializeLayoutStyle() => 
            (base.LayoutStyle != ToolStripLayoutStyle.VerticalStackWithOverflow);

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public void Show()
        {
            base.Show();
        }

        public void Show(Point screenLocation)
        {
            this.displayLocation = screenLocation;
            this.Location = this.displayLocation;
            this.ShowCore();
        }

        public void Show(Point position, ToolStripDropDownDirection direction)
        {
            this.displayLocation = this.CalculateDropDownLocation(position, direction).Location;
            this.Location = this.displayLocation;
            this.ShowCore();
        }

        public void Show(int x, int y)
        {
            this.displayLocation = new Point(x, y);
            this.Location = this.displayLocation;
            this.ShowCore();
        }

        public void Show(Control control, Point position)
        {
            if (control == null)
            {
                throw new ArgumentNullException("control");
            }
            this.SourceControlInternal = control;
            if ((this.OwnerItem == null) && (control.RightToLeft == System.Windows.Forms.RightToLeft.Yes))
            {
                this.AdjustSize();
                position.Offset(control.IsMirrored ? base.Width : -base.Width, 0);
            }
            this.displayLocation = control.PointToScreen(position);
            this.Location = this.displayLocation;
            this.ShowCore();
        }

        public void Show(Control control, Point position, ToolStripDropDownDirection direction)
        {
            if (control == null)
            {
                throw new ArgumentNullException("control");
            }
            this.SourceControlInternal = control;
            this.displayLocation = this.CalculateDropDownLocation(control.PointToScreen(position), direction).Location;
            this.Location = this.displayLocation;
            this.ShowCore();
        }

        public void Show(Control control, int x, int y)
        {
            if (control == null)
            {
                throw new ArgumentNullException("control");
            }
            this.SourceControlInternal = control;
            this.Show(control, new Point(x, y));
        }

        private void ShowCore()
        {
            this.Show();
        }

        internal void UnassignDropDownItem()
        {
            this.countDropDownItemsAssignedTo = Math.Max(--this.countDropDownItemsAssignedTo, 0);
        }

        private void UpdateLayered()
        {
            if (((this.state[stateLayered] && base.IsHandleCreated) && (this.TopLevel && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows))) && !System.Windows.Forms.UnsafeNativeMethods.SetLayeredWindowAttributes(new HandleRef(this, base.Handle), 0, this.OpacityAsByte, 2))
            {
                throw new Win32Exception();
            }
        }

        private void WmNCActivate(ref Message m)
        {
            if (m.WParam != IntPtr.Zero)
            {
                if (!this.sendingActivateMessage)
                {
                    this.sendingActivateMessage = true;
                    try
                    {
                        HandleRef activeHwnd = ToolStripManager.ModalMenuFilter.ActiveHwnd;
                        System.Windows.Forms.UnsafeNativeMethods.SendMessage(activeHwnd, 0x86, (IntPtr) 1, System.Windows.Forms.NativeMethods.InvalidIntPtr);
                        System.Windows.Forms.SafeNativeMethods.RedrawWindow(activeHwnd, (System.Windows.Forms.NativeMethods.COMRECT) null, System.Windows.Forms.NativeMethods.NullHandleRef, 0x401);
                        m.WParam = (IntPtr) 1;
                    }
                    finally
                    {
                        this.sendingActivateMessage = false;
                    }
                }
                this.DefWndProc(ref m);
            }
            else
            {
                base.WndProc(ref m);
            }
        }

        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected override void WndProc(ref Message m)
        {
            if (((m.Msg >= 0x100) && (m.Msg <= 0x108)) && this.IsRestrictedWindow)
            {
                this.DefWndProc(ref m);
            }
            else
            {
                switch (m.Msg)
                {
                    case 6:
                        if (((((int) m.WParam) == 1) && this.Visible) && (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != this))
                        {
                            ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this);
                        }
                        base.WndProc(ref m);
                        return;

                    case 0x86:
                        this.WmNCActivate(ref m);
                        return;
                }
                base.WndProc(ref m);
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public bool AllowItemReorder
        {
            get => 
                base.AllowItemReorder;
            set
            {
                base.AllowItemReorder = value;
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), System.Windows.Forms.SRDescription("ControlAllowTransparencyDescr")]
        public bool AllowTransparency
        {
            get => 
                this.state[stateAllowTransparency];
            set
            {
                if ((value != this.state[stateAllowTransparency]) && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows))
                {
                    this.state[stateAllowTransparency] = value;
                    this.state[stateLayered] = this.state[stateAllowTransparency];
                    base.UpdateStyles();
                    if (!value)
                    {
                        if (base.Properties.ContainsObject(PropOpacity))
                        {
                            base.Properties.SetObject(PropOpacity, 1f);
                        }
                        this.UpdateLayered();
                    }
                }
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public override AnchorStyles Anchor
        {
            get => 
                base.Anchor;
            set
            {
                base.Anchor = value;
            }
        }

        [DefaultValue(true), System.Windows.Forms.SRDescription("ToolStripDropDownAutoCloseDescr"), System.Windows.Forms.SRCategory("CatBehavior")]
        public bool AutoClose
        {
            get => 
                this.autoClose;
            set
            {
                if (this.autoClose != value)
                {
                    this.autoClose = value;
                    this.ApplyTopMost(!this.autoClose);
                }
            }
        }

        [DefaultValue(true)]
        public override bool AutoSize
        {
            get => 
                this.autoSize;
            set
            {
                if (this.autoSize != value)
                {
                    this.autoSize = value;
                    LayoutTransaction.DoLayout(this, this, PropertyNames.AutoSize);
                    this.OnAutoSizeChanged(EventArgs.Empty);
                }
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), DefaultValue(false), Browsable(false)]
        public bool CanOverflow
        {
            get => 
                base.CanOverflow;
            set
            {
                base.CanOverflow = value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public System.Windows.Forms.ContextMenu ContextMenu
        {
            get => 
                base.ContextMenu;
            set
            {
                base.ContextMenu = value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public System.Windows.Forms.ContextMenuStrip ContextMenuStrip
        {
            get => 
                base.ContextMenuStrip;
            set
            {
                base.ContextMenuStrip = value;
            }
        }

        protected override System.Windows.Forms.CreateParams CreateParams
        {
            [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
            get
            {
                System.Windows.Forms.CreateParams createParams = base.CreateParams;
                if (this.DropShadowEnabled)
                {
                    createParams.ClassStyle |= 0x20000;
                }
                createParams.Style &= -79691777;
                createParams.ExStyle &= -262145;
                createParams.Style |= this.TopLevel ? -2147483648 : 0x40000000;
                createParams.ExStyle |= 0x10000;
                bool topLevel = this.TopLevel;
                if (topLevel && this.state[stateLayered])
                {
                    createParams.ExStyle |= 0x80000;
                    return createParams;
                }
                if (topLevel)
                {
                    createParams.ClassStyle |= 0x800;
                    return createParams;
                }
                if (!topLevel)
                {
                    createParams.Style |= 0x4000000;
                }
                return createParams;
            }
        }

        protected override DockStyle DefaultDock =>
            DockStyle.None;

        public override ToolStripDropDownDirection DefaultDropDownDirection
        {
            get
            {
                if (this.childDropDownDirection != ToolStripDropDownDirection.Default)
                {
                    return this.childDropDownDirection;
                }
                if (this.RightToLeft != System.Windows.Forms.RightToLeft.Yes)
                {
                    return ToolStripDropDownDirection.Right;
                }
                return ToolStripDropDownDirection.Left;
            }
            set
            {
                this.childDropDownDirection = value;
                base.DefaultDropDownDirection = value;
            }
        }

        protected override Padding DefaultPadding =>
            new Padding(1, 2, 1, 2);

        protected override bool DefaultShowItemToolTips =>
            true;

        [DefaultValue(0), Browsable(false), EditorBrowsable(EditorBrowsableState.Always)]
        public override DockStyle Dock
        {
            get => 
                base.Dock;
            set
            {
                base.Dock = value;
            }
        }

        internal override NativeWindow DropDownOwnerWindow
        {
            get
            {
                if ((this.ownerItem != null) && (this.ownerItem.Owner != null))
                {
                    return this.ownerItem.Owner.DropDownOwnerWindow;
                }
                return base.DropDownOwnerWindow;
            }
        }

        public bool DropShadowEnabled
        {
            get => 
                ((this.dropShadowEnabled && this.TopMost) && DisplayInformation.IsDropShadowEnabled);
            set
            {
                if (this.dropShadowEnabled != value)
                {
                    this.dropShadowEnabled = value;
                    if (base.IsHandleCreated && !base.DesignMode)
                    {
                        base.RecreateHandle();
                    }
                }
            }
        }

        public override System.Drawing.Font Font
        {
            get
            {
                if (!base.IsFontSet() && (this.IsAutoGenerated && (this.OwnerItem != null)))
                {
                    return this.OwnerItem.Font;
                }
                return base.Font;
            }
            set
            {
                base.Font = value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public ToolStripGripDisplayStyle GripDisplayStyle =>
            base.GripDisplayStyle;

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public Padding GripMargin
        {
            get => 
                base.GripMargin;
            set
            {
                base.GripMargin = value;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public Rectangle GripRectangle =>
            base.GripRectangle;

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DefaultValue(0)]
        public ToolStripGripStyle GripStyle
        {
            get => 
                base.GripStyle;
            set
            {
                base.GripStyle = value;
            }
        }

        internal override Size ImageScalingSizeInternal
        {
            get
            {
                if (this.IsAutoGenerated && (this.OwnerToolStrip != null))
                {
                    return this.OwnerToolStrip.ImageScalingSizeInternal;
                }
                return base.ImageScalingSizeInternal;
            }
            set
            {
                base.ImageScalingSizeInternal = value;
            }
        }

        internal bool IsAssignedToDropDownItem
        {
            get
            {
                if (!this.IsAutoGenerated)
                {
                    return (this.countDropDownItemsAssignedTo > 0);
                }
                return true;
            }
        }

        [Browsable(false)]
        public bool IsAutoGenerated =>
            this.isAutoGenerated;

        internal bool IsFirstDropDown =>
            !(this.OwnerToolStrip is ToolStripDropDown);

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool IsRestrictedWindow
        {
            get
            {
                if (!this.state[stateIsRestrictedWindowChecked])
                {
                    this.state[stateIsRestrictedWindowChecked] = true;
                    this.state[stateIsRestrictedWindow] = false;
                    try
                    {
                        System.Windows.Forms.IntSecurity.WindowAdornmentModification.Demand();
                    }
                    catch
                    {
                        this.state[stateIsRestrictedWindow] = true;
                    }
                }
                return this.state[stateIsRestrictedWindow];
            }
        }

        internal override bool KeyboardActive
        {
            get
            {
                ToolStrip ownerToolStrip = this.OwnerToolStrip;
                if (ownerToolStrip != null)
                {
                    return ownerToolStrip.KeyboardActive;
                }
                return base.KeyboardActive;
            }
            set
            {
                base.KeyboardActive = value;
                ToolStrip ownerToolStrip = this.OwnerToolStrip;
                if (ownerToolStrip != null)
                {
                    ownerToolStrip.KeyboardActive = value;
                }
            }
        }

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public Point Location
        {
            get => 
                base.Location;
            set
            {
                base.Location = value;
            }
        }

        protected internal override Size MaxItemSize =>
            (Screen.GetWorkingArea(base.Bounds).Size - base.Padding.Size);

        [TypeConverter(typeof(OpacityConverter)), System.Windows.Forms.SRDescription("FormOpacityDescr"), EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false), DefaultValue((double) 1.0), System.Windows.Forms.SRCategory("CatWindowStyle")]
        public double Opacity
        {
            get
            {
                object obj2 = base.Properties.GetObject(PropOpacity);
                if (obj2 != null)
                {
                    return Convert.ToDouble(obj2, CultureInfo.InvariantCulture);
                }
                return 1.0;
            }
            set
            {
                if (this.IsRestrictedWindow)
                {
                    value = Math.Max(value, 0.5);
                }
                if (value > 1.0)
                {
                    value = 1.0;
                }
                else if (value < 0.0)
                {
                    value = 0.0;
                }
                base.Properties.SetObject(PropOpacity, value);
                bool flag = this.state[stateLayered];
                if ((this.OpacityAsByte < 0xff) && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows))
                {
                    this.AllowTransparency = true;
                    this.state[stateLayered] = true;
                }
                else
                {
                    this.state[stateLayered] = false;
                }
                if (flag != this.state[stateLayered])
                {
                    base.UpdateStyles();
                }
                this.UpdateLayered();
            }
        }

        private byte OpacityAsByte =>
            ((byte) (this.Opacity * 255.0));

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public ToolStripOverflowButton OverflowButton =>
            base.OverflowButton;

        internal ToolStripDropDownItem OwnerDropDownItem =>
            (this.OwnerItem as ToolStripDropDownItem);

        [DefaultValue((string) null), Browsable(false)]
        public ToolStripItem OwnerItem
        {
            get => 
                this.ownerItem;
            set
            {
                if (this.ownerItem != value)
                {
                    System.Drawing.Font font = this.Font;
                    System.Windows.Forms.RightToLeft rightToLeft = this.RightToLeft;
                    this.ownerItem = value;
                    if (!font.Equals(this.Font))
                    {
                        this.OnOwnerItemFontChanged(EventArgs.Empty);
                    }
                    if (((this.ownerItem != null) && this.RightToLeftInherited) && (rightToLeft != this.RightToLeft))
                    {
                        using (new LayoutTransaction(this, this, PropertyNames.RightToLeft))
                        {
                            this.OnRightToLeftChanged(EventArgs.Empty);
                        }
                    }
                }
            }
        }

        internal ToolStrip OwnerToolStrip
        {
            get
            {
                if (this.ownerItem != null)
                {
                    ToolStrip parentInternal = this.ownerItem.ParentInternal;
                    if (parentInternal != null)
                    {
                        return parentInternal;
                    }
                    if ((this.ownerItem.Placement == ToolStripItemPlacement.Overflow) && (this.ownerItem.Owner != null))
                    {
                        return this.ownerItem.Owner.OverflowButton.DropDown;
                    }
                    if (parentInternal == null)
                    {
                        return this.ownerItem.Owner;
                    }
                }
                return null;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Always), Browsable(false)]
        public System.Drawing.Region Region
        {
            get => 
                base.Region;
            set
            {
                base.Region = value;
            }
        }

        internal virtual bool RequiresScrollButtons
        {
            get => 
                false;
            set
            {
            }
        }

        [System.Windows.Forms.SRCategory("CatAppearance"), Localizable(true), AmbientValue(2), System.Windows.Forms.SRDescription("ControlRightToLeftDescr")]
        public override System.Windows.Forms.RightToLeft RightToLeft
        {
            get
            {
                if (this.RightToLeftInherited)
                {
                    if (this.SourceControlInternal != null)
                    {
                        return this.SourceControlInternal.RightToLeft;
                    }
                    if (this.OwnerItem != null)
                    {
                        return this.OwnerItem.RightToLeft;
                    }
                }
                return base.RightToLeft;
            }
            set
            {
                base.RightToLeft = value;
            }
        }

        private bool RightToLeftInherited =>
            !this.ShouldSerializeRightToLeft();

        internal override int ShowParams =>
            4;

        internal Control SourceControlInternal
        {
            get => 
                (base.Properties.GetObject(PropSourceControl) as Control);
            set
            {
                base.Properties.SetObject(PropSourceControl, value);
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public bool Stretch
        {
            get => 
                base.Stretch;
            set
            {
                base.Stretch = value;
            }
        }

        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int TabIndex
        {
            get => 
                base.TabIndex;
            set
            {
                base.TabIndex = value;
            }
        }

        [DefaultValue(1), Browsable(false), System.Windows.Forms.SRDescription("ToolStripTextDirectionDescr"), System.Windows.Forms.SRCategory("CatAppearance")]
        public override ToolStripTextDirection TextDirection
        {
            get => 
                base.TextDirection;
            set
            {
                base.TextDirection = value;
            }
        }

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public bool TopLevel
        {
            get => 
                base.GetTopLevel();
            set
            {
                if (value != base.GetTopLevel())
                {
                    base.SetTopLevelInternal(value);
                    this.SetTopLevelStyle(value);
                }
            }
        }

        protected virtual bool TopMost =>
            true;

        [Localizable(true), System.Windows.Forms.SRDescription("ControlVisibleDescr"), DefaultValue(false), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), System.Windows.Forms.SRCategory("CatBehavior")]
        public bool Visible
        {
            get => 
                base.Visible;
            set
            {
                base.Visible = value;
            }
        }

        internal bool WorkingAreaConstrained
        {
            get
            {
                if (this.state[stateNotWorkingAreaConstrained])
                {
                    return this.IsRestrictedWindow;
                }
                return true;
            }
            set
            {
                bool flag = !value;
                this.state[stateNotWorkingAreaConstrained] = flag;
            }
        }

        [ComVisible(true)]
        public class ToolStripDropDownAccessibleObject : ToolStrip.ToolStripAccessibleObject
        {
            private ToolStripDropDown owner;

            public ToolStripDropDownAccessibleObject(ToolStripDropDown owner) : base(owner)
            {
                this.owner = owner;
            }

            public override string Name
            {
                get
                {
                    string accessibleName = this.owner.AccessibleName;
                    if (accessibleName == null)
                    {
                        accessibleName = "DropDown";
                        if ((this.owner.OwnerItem != null) && (this.owner.OwnerItem.AccessibilityObject.Name != null))
                        {
                            accessibleName = this.owner.OwnerItem.AccessibilityObject.Name + accessibleName;
                        }
                    }
                    return accessibleName;
                }
                set
                {
                    this.owner.AccessibleName = value;
                }
            }

            public override AccessibleRole Role
            {
                get
                {
                    AccessibleRole accessibleRole = base.Owner.AccessibleRole;
                    if (accessibleRole != AccessibleRole.Default)
                    {
                        return accessibleRole;
                    }
                    return AccessibleRole.MenuPopup;
                }
            }
        }
    }
}

