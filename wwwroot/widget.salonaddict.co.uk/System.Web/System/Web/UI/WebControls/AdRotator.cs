namespace System.Web.UI.WebControls
{
    using System;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Drawing.Design;
    using System.Globalization;
    using System.IO;
    using System.Reflection;
    using System.Runtime.InteropServices;
    using System.Security.Permissions;
    using System.Web;
    using System.Web.Caching;
    using System.Web.UI;
    using System.Web.Util;
    using System.Xml;

    [Designer("System.Web.UI.Design.WebControls.AdRotatorDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), DefaultProperty("AdvertisementFile"), ToolboxData("<{0}:AdRotator runat=\"server\"></{0}:AdRotator>"), DefaultEvent("AdCreated"), AspNetHostingPermission(SecurityAction.LinkDemand, Level=AspNetHostingPermissionLevel.Minimal), AspNetHostingPermission(SecurityAction.InheritanceDemand, Level=AspNetHostingPermissionLevel.Minimal)]
    public class AdRotator : DataBoundControl
    {
        private AdCreatedEventArgs _adCreatedEventArgs;
        private static readonly Type[] _AdCreatedParameterTypes = new Type[] { typeof(AdCreatedEventArgs) };
        private AdRec[] _adRecs;
        private static readonly Type _adrotatorType = typeof(AdRotator);
        private string _advertisementFile;
        private string _baseUrl;
        private bool _isPostCacheAdHelper;
        private static Random _random;
        private string _uniqueID;
        private static readonly object EventAdCreated = new object();
        private const string ImpressionsProperty = "Impressions";
        private const string KeywordProperty = "Keyword";
        private const string XmlAdTag = "Ad";
        private const string XmlDocumentRootXPath = "/Advertisements";
        private const string XmlDocumentTag = "Advertisements";

        [WebSysDescription("AdRotator_OnAdCreated"), WebCategory("Action")]
        public event AdCreatedEventHandler AdCreated
        {
            add
            {
                base.Events.AddHandler(EventAdCreated, value);
            }
            remove
            {
                base.Events.RemoveHandler(EventAdCreated, value);
            }
        }

        private void CheckOnlyOneDataSource()
        {
            int num = (this.AdvertisementFile.Length > 0) ? 1 : 0;
            num += (this.DataSourceID.Length > 0) ? 1 : 0;
            num += (this.DataSource != null) ? 1 : 0;
            if (num > 1)
            {
                throw new HttpException(System.Web.SR.GetString("AdRotator_only_one_datasource", new object[] { this.ID }));
            }
        }

        internal void CopyFrom(AdRotator adRotator)
        {
            this._adRecs = adRotator._adRecs;
            this.AccessKey = adRotator.AccessKey;
            this.AlternateTextField = adRotator.AlternateTextField;
            this.Enabled = adRotator.Enabled;
            this.ImageUrlField = adRotator.ImageUrlField;
            this.NavigateUrlField = adRotator.NavigateUrlField;
            this.TabIndex = adRotator.TabIndex;
            this.Target = adRotator.Target;
            this.ToolTip = adRotator.ToolTip;
            if (!string.IsNullOrEmpty(adRotator.ID))
            {
                this.ID = adRotator.ClientID;
            }
            this._uniqueID = adRotator.UniqueID;
            this._baseUrl = adRotator.BaseUrl;
            if (adRotator.HasAttributes)
            {
                foreach (string str2 in adRotator.Attributes.Keys)
                {
                    base.Attributes[str2] = adRotator.Attributes[str2];
                }
            }
            if (adRotator.ControlStyleCreated)
            {
                base.ControlStyle.CopyFrom(adRotator.ControlStyle);
            }
        }

        private ArrayList CreateAutoGeneratedFields(IEnumerable dataSource)
        {
            if (dataSource == null)
            {
                return null;
            }
            ArrayList list = new ArrayList();
            PropertyDescriptorCollection itemProperties = null;
            if (dataSource is ITypedList)
            {
                itemProperties = ((ITypedList) dataSource).GetItemProperties(new PropertyDescriptor[0]);
            }
            if (itemProperties == null)
            {
                IEnumerator enumerator = dataSource.GetEnumerator();
                if (enumerator.MoveNext())
                {
                    object current = enumerator.Current;
                    if (this.IsBindableType(current.GetType()))
                    {
                        throw new HttpException(System.Web.SR.GetString("AdRotator_expect_records_with_advertisement_properties", new object[] { this.ID, current.GetType() }));
                    }
                    itemProperties = TypeDescriptor.GetProperties(current);
                }
            }
            if ((itemProperties != null) && (itemProperties.Count > 0))
            {
                foreach (PropertyDescriptor descriptor in itemProperties)
                {
                    if (this.IsBindableType(descriptor.PropertyType))
                    {
                        list.Add(descriptor.Name);
                    }
                }
            }
            return list;
        }

        internal bool DoPostCacheSubstitutionAsNeeded(HtmlTextWriter writer)
        {
            if ((!this.IsPostCacheAdHelper && (this.SelectedAdArgs == null)) && (this.Page.Response.HasCachePolicy && (this.Page.Response.Cache.GetCacheability() != (HttpCacheability.Public | HttpCacheability.Private))))
            {
                new AdPostCacheSubstitution(this).RegisterPostCacheCallBack(this.Context, this.Page, writer);
                return true;
            }
            return false;
        }

        private AdCreatedEventArgs GetAdCreatedEventArgs() => 
            new AdCreatedEventArgs(this.SelectAdFromRecords(), this.ImageUrlField, this.NavigateUrlField, this.AlternateTextField);

        private AdRec[] GetDataSourceData(IEnumerable dataSource)
        {
            ArrayList list = this.CreateAutoGeneratedFields(dataSource);
            ArrayList adDicts = new ArrayList();
            IEnumerator enumerator = dataSource.GetEnumerator();
            while (enumerator.MoveNext())
            {
                IDictionary dictionary = null;
                foreach (string str in list)
                {
                    if (dictionary == null)
                    {
                        dictionary = new HybridDictionary();
                    }
                    dictionary.Add(str, DataBinder.GetPropertyValue(enumerator.Current, str));
                }
                if (dictionary != null)
                {
                    adDicts.Add(dictionary);
                }
            }
            return this.SetAdRecs(adDicts);
        }

        private AdRec[] GetFileData(string fileName)
        {
            VirtualPath path;
            string str;
            base.ResolvePhysicalOrVirtualPath(fileName, out path, out str);
            string key = "n" + (!string.IsNullOrEmpty(str) ? str : path.VirtualPathString);
            CacheInternal cacheInternal = HttpRuntime.CacheInternal;
            AdRec[] recArray = cacheInternal[key] as AdRec[];
            if (recArray == null)
            {
                CacheDependency dependency;
                try
                {
                    using (Stream stream = base.OpenFileAndGetDependency(path, str, out dependency))
                    {
                        recArray = this.LoadStream(stream);
                    }
                }
                catch (Exception exception)
                {
                    if (!string.IsNullOrEmpty(str) && HttpRuntime.HasPathDiscoveryPermission(str))
                    {
                        throw new HttpException(System.Web.SR.GetString("AdRotator_cant_open_file", new object[] { this.ID, exception.Message }));
                    }
                    throw new HttpException(System.Web.SR.GetString("AdRotator_cant_open_file_no_permission", new object[] { this.ID }));
                }
                if (dependency == null)
                {
                    return recArray;
                }
                using (dependency)
                {
                    cacheInternal.UtcInsert(key, recArray, dependency);
                }
            }
            return recArray;
        }

        private static int GetRandomNumber(int maxValue) => 
            (_random?.Next(maxValue) + 1);

        private AdRec[] GetXmlDataSourceData(XmlDataSource xmlDataSource)
        {
            XmlDocument xmlDocument = xmlDataSource.GetXmlDocument();
            if (xmlDocument == null)
            {
                return null;
            }
            return this.LoadXmlDocument(xmlDocument);
        }

        private bool IsBindableType(Type type)
        {
            if ((!type.IsPrimitive && (type != typeof(string))) && (type != typeof(DateTime)))
            {
                return (type == typeof(decimal));
            }
            return true;
        }

        private bool IsOnAdCreatedOverridden()
        {
            bool flag = false;
            Type type = base.GetType();
            if ((type != _adrotatorType) && (type.GetMethod("OnAdCreated", BindingFlags.NonPublic | BindingFlags.Instance, null, _AdCreatedParameterTypes, null).DeclaringType != _adrotatorType))
            {
                flag = true;
            }
            return flag;
        }

        private AdRec[] LoadFromXmlReader(XmlReader reader)
        {
            ArrayList adDicts = new ArrayList();
            while (reader.Read())
            {
                if (reader.Name == "Advertisements")
                {
                    if (reader.Depth == 0)
                    {
                        break;
                    }
                    return null;
                }
            }
            while (reader.Read())
            {
                if (((reader.NodeType == XmlNodeType.Element) && (reader.Name == "Ad")) && (reader.Depth == 1))
                {
                    IDictionary dictionary = null;
                    reader.Read();
                    while (reader.NodeType != XmlNodeType.EndElement)
                    {
                        if ((reader.NodeType == XmlNodeType.Element) && !reader.IsEmptyElement)
                        {
                            if (dictionary == null)
                            {
                                dictionary = new HybridDictionary();
                            }
                            dictionary.Add(reader.LocalName, reader.ReadString());
                        }
                        reader.Skip();
                    }
                    if (dictionary != null)
                    {
                        adDicts.Add(dictionary);
                    }
                }
            }
            return this.SetAdRecs(adDicts);
        }

        private AdRec[] LoadStream(Stream stream)
        {
            AdRec[] recArray = null;
            try
            {
                XmlReader reader = new XmlTextReader(stream);
                recArray = this.LoadFromXmlReader(reader);
            }
            catch (Exception exception)
            {
                throw new HttpException(System.Web.SR.GetString("AdRotator_parse_error", new object[] { this.ID, exception.Message }), exception);
            }
            if (recArray == null)
            {
                throw new HttpException(System.Web.SR.GetString("AdRotator_no_advertisements", new object[] { this.ID, this.AdvertisementFile }));
            }
            return recArray;
        }

        private AdRec[] LoadXmlDocument(XmlDocument doc)
        {
            ArrayList adDicts = new ArrayList();
            if ((doc.DocumentElement != null) && (doc.DocumentElement.LocalName == "Advertisements"))
            {
                for (XmlNode node = doc.DocumentElement.FirstChild; node != null; node = node.NextSibling)
                {
                    IDictionary dictionary = null;
                    if (node.LocalName.Equals("Ad"))
                    {
                        for (XmlNode node2 = node.FirstChild; node2 != null; node2 = node2.NextSibling)
                        {
                            if (node2.NodeType == XmlNodeType.Element)
                            {
                                if (dictionary == null)
                                {
                                    dictionary = new HybridDictionary();
                                }
                                dictionary.Add(node2.LocalName, node2.InnerText);
                            }
                        }
                    }
                    if (dictionary != null)
                    {
                        adDicts.Add(dictionary);
                    }
                }
            }
            return this.SetAdRecs(adDicts);
        }

        private bool MatchingAd(AdRec adRec, string keywordFilter) => 
            string.Equals(keywordFilter, adRec.keyword, StringComparison.OrdinalIgnoreCase);

        protected virtual void OnAdCreated(AdCreatedEventArgs e)
        {
            AdCreatedEventHandler handler = (AdCreatedEventHandler) base.Events[EventAdCreated];
            if (handler != null)
            {
                handler(this, e);
            }
        }

        protected internal override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            base.RequiresDataBinding = true;
        }

        protected internal override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);
            if ((this._adRecs == null) && (this.AdvertisementFile.Length > 0))
            {
                this.PerformAdFileBinding();
            }
            if ((base.Events[EventAdCreated] != null) || this.IsOnAdCreatedOverridden())
            {
                this.SelectedAdArgs = this.GetAdCreatedEventArgs();
                this.OnAdCreated(this.SelectedAdArgs);
            }
        }

        private void PerformAdFileBinding()
        {
            this.OnDataBinding(EventArgs.Empty);
            this._adRecs = this.GetFileData(this.AdvertisementFile);
            this.OnDataBound(EventArgs.Empty);
        }

        protected internal override void PerformDataBinding(IEnumerable data)
        {
            if (data != null)
            {
                XmlDataSource xmlDataSource = null;
                object dataSource = this.DataSource;
                if (dataSource != null)
                {
                    xmlDataSource = dataSource as XmlDataSource;
                }
                else
                {
                    xmlDataSource = this.GetDataSource() as XmlDataSource;
                }
                if (xmlDataSource != null)
                {
                    this._adRecs = this.GetXmlDataSourceData(xmlDataSource);
                }
                else
                {
                    this._adRecs = this.GetDataSourceData(data);
                }
            }
        }

        protected override void PerformSelect()
        {
            this.CheckOnlyOneDataSource();
            if (this.AdvertisementFile.Length > 0)
            {
                this.PerformAdFileBinding();
            }
            else
            {
                base.PerformSelect();
            }
        }

        internal AdCreatedEventArgs PickAd()
        {
            AdCreatedEventArgs selectedAdArgs = this.SelectedAdArgs;
            if (selectedAdArgs == null)
            {
                selectedAdArgs = this.GetAdCreatedEventArgs();
            }
            selectedAdArgs.ImageUrl = this.ResolveAdRotatorUrl(this.BaseUrl, selectedAdArgs.ImageUrl);
            selectedAdArgs.NavigateUrl = this.ResolveAdRotatorUrl(this.BaseUrl, selectedAdArgs.NavigateUrl);
            return selectedAdArgs;
        }

        protected internal override void Render(HtmlTextWriter writer)
        {
            if ((base.DesignMode || this.IsPostCacheAdHelper) || !this.DoPostCacheSubstitutionAsNeeded(writer))
            {
                AdCreatedEventArgs adArgs = this.PickAd();
                this.RenderLink(writer, adArgs);
            }
        }

        private void RenderLink(HtmlTextWriter writer, AdCreatedEventArgs adArgs)
        {
            HyperLink link = new HyperLink {
                NavigateUrl = adArgs.NavigateUrl,
                Target = this.Target
            };
            if (base.HasAttributes)
            {
                foreach (string str in base.Attributes.Keys)
                {
                    link.Attributes[str] = base.Attributes[str];
                }
            }
            if (!string.IsNullOrEmpty(this.ID))
            {
                link.ID = this.ClientID;
            }
            if (!this.Enabled)
            {
                link.Enabled = false;
            }
            string str3 = (string) this.ViewState["AccessKey"];
            if (!string.IsNullOrEmpty(str3))
            {
                link.AccessKey = str3;
            }
            object obj2 = this.ViewState["TabIndex"];
            if (obj2 != null)
            {
                short num = (short) obj2;
                if (num != 0)
                {
                    link.TabIndex = num;
                }
            }
            link.RenderBeginTag(writer);
            Image image = new Image();
            if (base.ControlStyleCreated)
            {
                image.ApplyStyle(base.ControlStyle);
            }
            string alternateText = adArgs.AlternateText;
            if (!string.IsNullOrEmpty(alternateText))
            {
                image.AlternateText = alternateText;
            }
            else
            {
                IDictionary adProperties = adArgs.AdProperties;
                string str5 = (this.AlternateTextField.Length != 0) ? this.AlternateTextField : "AlternateText";
                string str6 = (adProperties == null) ? null : ((string) adProperties[str5]);
                if ((str6 != null) && (str6.Length == 0))
                {
                    image.GenerateEmptyAlternateText = true;
                }
            }
            image.UrlResolved = true;
            string imageUrl = adArgs.ImageUrl;
            if (!string.IsNullOrEmpty(imageUrl))
            {
                image.ImageUrl = imageUrl;
            }
            if (adArgs.HasWidth)
            {
                image.ControlStyle.Width = adArgs.Width;
            }
            if (adArgs.HasHeight)
            {
                image.ControlStyle.Height = adArgs.Height;
            }
            string str8 = (string) this.ViewState["ToolTip"];
            if (!string.IsNullOrEmpty(str8))
            {
                image.ToolTip = str8;
            }
            image.RenderControl(writer);
            link.RenderEndTag(writer);
        }

        private string ResolveAdRotatorUrl(string baseUrl, string relativeUrl)
        {
            if (((relativeUrl != null) && (relativeUrl.Length != 0)) && ((UrlPath.IsRelativeUrl(relativeUrl) && (baseUrl != null)) && (baseUrl.Length != 0)))
            {
                return UrlPath.Combine(baseUrl, relativeUrl);
            }
            return relativeUrl;
        }

        private IDictionary SelectAdFromRecords()
        {
            if ((this._adRecs == null) || (this._adRecs.Length == 0))
            {
                return null;
            }
            string keywordFilter = this.KeywordFilter;
            bool flag = string.IsNullOrEmpty(keywordFilter);
            if (!flag)
            {
                keywordFilter = keywordFilter.ToLower(CultureInfo.InvariantCulture);
            }
            int maxValue = 0;
            for (int i = 0; i < this._adRecs.Length; i++)
            {
                if (flag || this.MatchingAd(this._adRecs[i], keywordFilter))
                {
                    maxValue += this._adRecs[i].impressions;
                }
            }
            if (maxValue == 0)
            {
                return null;
            }
            int randomNumber = GetRandomNumber(maxValue);
            int num4 = 0;
            int index = -1;
            for (int j = 0; j < this._adRecs.Length; j++)
            {
                if (flag || this.MatchingAd(this._adRecs[j], keywordFilter))
                {
                    num4 += this._adRecs[j].impressions;
                    if (randomNumber <= num4)
                    {
                        index = j;
                        break;
                    }
                }
            }
            return this._adRecs[index].adProperties;
        }

        private AdRec[] SetAdRecs(ArrayList adDicts)
        {
            if ((adDicts == null) || (adDicts.Count == 0))
            {
                return null;
            }
            AdRec[] recArray = new AdRec[adDicts.Count];
            int index = 0;
            for (int i = 0; i < adDicts.Count; i++)
            {
                if (adDicts[i] != null)
                {
                    recArray[index].Initialize((IDictionary) adDicts[i]);
                    index++;
                }
            }
            return recArray;
        }

        [WebSysDescription("AdRotator_AdvertisementFile"), Bindable(true), WebCategory("Behavior"), DefaultValue(""), Editor("System.Web.UI.Design.XmlUrlEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor)), UrlProperty]
        public string AdvertisementFile
        {
            get
            {
                if (this._advertisementFile != null)
                {
                    return this._advertisementFile;
                }
                return string.Empty;
            }
            set
            {
                this._advertisementFile = value;
            }
        }

        [WebSysDescription("AdRotator_AlternateTextField"), DefaultValue("AlternateText"), WebCategory("Behavior")]
        public string AlternateTextField
        {
            get
            {
                string str = (string) this.ViewState["AlternateTextField"];
                if (str == null)
                {
                    return "AlternateText";
                }
                return str;
            }
            set
            {
                this.ViewState["AlternateTextField"] = value;
            }
        }

        internal string BaseUrl
        {
            get
            {
                if (this._baseUrl == null)
                {
                    string virtualPathString = base.TemplateControlVirtualDirectory.VirtualPathString;
                    string directory = null;
                    if (!string.IsNullOrEmpty(this.AdvertisementFile))
                    {
                        directory = UrlPath.GetDirectory(UrlPath.Combine(virtualPathString, this.AdvertisementFile));
                    }
                    this._baseUrl = string.Empty;
                    if (directory != null)
                    {
                        this._baseUrl = directory;
                    }
                    if (this._baseUrl.Length == 0)
                    {
                        this._baseUrl = virtualPathString;
                    }
                }
                return this._baseUrl;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override FontInfo Font =>
            base.Font;

        [DefaultValue("ImageUrl"), WebCategory("Behavior"), WebSysDescription("AdRotator_ImageUrlField")]
        public string ImageUrlField
        {
            get
            {
                string str = (string) this.ViewState["ImageUrlField"];
                if (str == null)
                {
                    return "ImageUrl";
                }
                return str;
            }
            set
            {
                this.ViewState["ImageUrlField"] = value;
            }
        }

        internal bool IsPostCacheAdHelper
        {
            get => 
                this._isPostCacheAdHelper;
            set
            {
                this._isPostCacheAdHelper = value;
            }
        }

        private bool IsTargetSet =>
            (this.ViewState["Target"] != null);

        [DefaultValue(""), WebSysDescription("AdRotator_KeywordFilter"), Bindable(true), WebCategory("Behavior")]
        public string KeywordFilter
        {
            get
            {
                string str = (string) this.ViewState["KeywordFilter"];
                if (str != null)
                {
                    return str;
                }
                return string.Empty;
            }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    this.ViewState.Remove("KeywordFilter");
                }
                else
                {
                    this.ViewState["KeywordFilter"] = value.Trim();
                }
            }
        }

        [WebSysDescription("AdRotator_NavigateUrlField"), DefaultValue("NavigateUrl"), WebCategory("Behavior")]
        public string NavigateUrlField
        {
            get
            {
                string str = (string) this.ViewState["NavigateUrlField"];
                if (str == null)
                {
                    return "NavigateUrl";
                }
                return str;
            }
            set
            {
                this.ViewState["NavigateUrlField"] = value;
            }
        }

        private AdCreatedEventArgs SelectedAdArgs
        {
            get => 
                this._adCreatedEventArgs;
            set
            {
                this._adCreatedEventArgs = value;
            }
        }

        protected override HtmlTextWriterTag TagKey =>
            HtmlTextWriterTag.A;

        [WebCategory("Behavior"), TypeConverter(typeof(TargetConverter)), DefaultValue("_top"), WebSysDescription("AdRotator_Target"), Bindable(true)]
        public string Target
        {
            get
            {
                string str = (string) this.ViewState["Target"];
                if (str != null)
                {
                    return str;
                }
                return "_top";
            }
            set
            {
                this.ViewState["Target"] = value;
            }
        }

        public override string UniqueID
        {
            get
            {
                if (this._uniqueID == null)
                {
                    this._uniqueID = base.UniqueID;
                }
                return this._uniqueID;
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct AdRec
        {
            public string keyword;
            public int impressions;
            public IDictionary adProperties;
            public void Initialize(IDictionary adProperties)
            {
                this.adProperties = adProperties;
                object obj2 = adProperties["Keyword"];
                if ((obj2 != null) && (obj2 is string))
                {
                    this.keyword = ((string) obj2).Trim();
                }
                else
                {
                    this.keyword = string.Empty;
                }
                string str = adProperties["Impressions"] as string;
                if (string.IsNullOrEmpty(str) || !int.TryParse(str, NumberStyles.Integer, CultureInfo.InvariantCulture, out this.impressions))
                {
                    this.impressions = 1;
                }
                if (this.impressions < 0)
                {
                    this.impressions = 1;
                }
            }
        }
    }
}

