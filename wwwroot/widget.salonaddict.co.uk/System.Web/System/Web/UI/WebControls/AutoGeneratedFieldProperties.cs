namespace System.Web.UI.WebControls
{
    using System;
    using System.Security.Permissions;
    using System.Web;
    using System.Web.UI;

    [AspNetHostingPermission(SecurityAction.LinkDemand, Level=AspNetHostingPermissionLevel.Minimal)]
    public sealed class AutoGeneratedFieldProperties : IStateManager
    {
        private bool _isTracking;
        private StateBag _statebag = new StateBag();

        void IStateManager.LoadViewState(object state)
        {
            if (state != null)
            {
                ((IStateManager) this.ViewState).LoadViewState(state);
            }
        }

        object IStateManager.SaveViewState() => 
            ((IStateManager) this.ViewState).SaveViewState();

        void IStateManager.TrackViewState()
        {
            this._isTracking = true;
            this.ViewState.TrackViewState();
        }

        public string DataField
        {
            get
            {
                object obj2 = this.ViewState["DataField"];
                if (obj2 != null)
                {
                    return (string) obj2;
                }
                return string.Empty;
            }
            set
            {
                this.ViewState["DataField"] = value;
            }
        }

        public bool IsReadOnly
        {
            get
            {
                object obj2 = this.ViewState["IsReadOnly"];
                return ((obj2 != null) && ((bool) obj2));
            }
            set
            {
                this.ViewState["IsReadOnly"] = value;
            }
        }

        public string Name
        {
            get
            {
                object obj2 = this.ViewState["Name"];
                if (obj2 != null)
                {
                    return (string) obj2;
                }
                return string.Empty;
            }
            set
            {
                this.ViewState["Name"] = value;
            }
        }

        bool IStateManager.IsTrackingViewState =>
            this._isTracking;

        public System.Type Type
        {
            get
            {
                object obj2 = this.ViewState["Type"];
                if (obj2 != null)
                {
                    return (System.Type) obj2;
                }
                return null;
            }
            set
            {
                this.ViewState["Type"] = value;
            }
        }

        private StateBag ViewState =>
            this._statebag;
    }
}

