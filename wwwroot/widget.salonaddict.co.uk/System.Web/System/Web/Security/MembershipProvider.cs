namespace System.Web.Security
{
    using System;
    using System.Configuration.Provider;
    using System.Runtime.InteropServices;
    using System.Security.Cryptography;
    using System.Security.Permissions;
    using System.Text;
    using System.Web;
    using System.Web.Configuration;

    [AspNetHostingPermission(SecurityAction.InheritanceDemand, Level=AspNetHostingPermissionLevel.Minimal), AspNetHostingPermission(SecurityAction.LinkDemand, Level=AspNetHostingPermissionLevel.Minimal)]
    public abstract class MembershipProvider : ProviderBase
    {
        private const int SALT_SIZE_IN_BYTES = 0x10;

        public event MembershipValidatePasswordEventHandler ValidatingPassword;

        protected MembershipProvider()
        {
        }

        public abstract bool ChangePassword(string username, string oldPassword, string newPassword);
        public abstract bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer);
        public abstract MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out MembershipCreateStatus status);
        protected virtual byte[] DecryptPassword(byte[] encodedPassword)
        {
            if (MachineKeySection.IsDecryptionKeyAutogenerated)
            {
                throw new ProviderException(System.Web.SR.GetString("Can_not_use_encrypted_passwords_with_autogen_keys"));
            }
            return MachineKeySection.EncryptOrDecryptData(false, encodedPassword, null, 0, encodedPassword.Length, IVType.None, false, false);
        }

        public abstract bool DeleteUser(string username, bool deleteAllRelatedData);
        internal string EncodePassword(string pass, int passwordFormat, string salt)
        {
            if (passwordFormat == 0)
            {
                return pass;
            }
            byte[] bytes = Encoding.Unicode.GetBytes(pass);
            byte[] src = Convert.FromBase64String(salt);
            byte[] dst = new byte[src.Length + bytes.Length];
            byte[] inArray = null;
            Buffer.BlockCopy(src, 0, dst, 0, src.Length);
            Buffer.BlockCopy(bytes, 0, dst, src.Length, bytes.Length);
            if (passwordFormat == 1)
            {
                HashAlgorithm algorithm = HashAlgorithm.Create(Membership.HashAlgorithmType);
                if ((algorithm == null) && Membership.IsHashAlgorithmFromMembershipConfig)
                {
                    RuntimeConfig.GetAppConfig().Membership.ThrowHashAlgorithmException();
                }
                inArray = algorithm.ComputeHash(dst);
            }
            else
            {
                inArray = this.EncryptPassword(dst);
            }
            return Convert.ToBase64String(inArray);
        }

        protected virtual byte[] EncryptPassword(byte[] password)
        {
            if (MachineKeySection.IsDecryptionKeyAutogenerated)
            {
                throw new ProviderException(System.Web.SR.GetString("Can_not_use_encrypted_passwords_with_autogen_keys"));
            }
            return MachineKeySection.EncryptOrDecryptData(true, password, null, 0, password.Length, IVType.None, false, false);
        }

        public abstract MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, out int totalRecords);
        public abstract MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, out int totalRecords);
        internal string GenerateSalt()
        {
            byte[] data = new byte[0x10];
            new RNGCryptoServiceProvider().GetBytes(data);
            return Convert.ToBase64String(data);
        }

        public abstract MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, out int totalRecords);
        public abstract int GetNumberOfUsersOnline();
        public abstract string GetPassword(string username, string answer);
        public abstract MembershipUser GetUser(object providerUserKey, bool userIsOnline);
        public abstract MembershipUser GetUser(string username, bool userIsOnline);
        internal MembershipUser GetUser(string username, bool userIsOnline, bool throwOnError)
        {
            MembershipUser user = null;
            try
            {
                user = this.GetUser(username, userIsOnline);
            }
            catch (ArgumentException)
            {
                if (throwOnError)
                {
                    throw;
                }
            }
            return user;
        }

        public abstract string GetUserNameByEmail(string email);
        protected virtual void OnValidatingPassword(ValidatePasswordEventArgs e)
        {
            if (this._EventHandler != null)
            {
                this._EventHandler(this, e);
            }
        }

        public abstract string ResetPassword(string username, string answer);
        internal string UnEncodePassword(string pass, int passwordFormat)
        {
            switch (passwordFormat)
            {
                case 0:
                    return pass;

                case 1:
                    throw new ProviderException(System.Web.SR.GetString("Provider_can_not_decode_hashed_password"));
            }
            byte[] encodedPassword = Convert.FromBase64String(pass);
            byte[] bytes = this.DecryptPassword(encodedPassword);
            if (bytes == null)
            {
                return null;
            }
            return Encoding.Unicode.GetString(bytes, 0x10, bytes.Length - 0x10);
        }

        public abstract bool UnlockUser(string userName);
        public abstract void UpdateUser(MembershipUser user);
        public abstract bool ValidateUser(string username, string password);

        public abstract string ApplicationName { get; set; }

        public abstract bool EnablePasswordReset { get; }

        public abstract bool EnablePasswordRetrieval { get; }

        public abstract int MaxInvalidPasswordAttempts { get; }

        public abstract int MinRequiredNonAlphanumericCharacters { get; }

        public abstract int MinRequiredPasswordLength { get; }

        public abstract int PasswordAttemptWindow { get; }

        public abstract MembershipPasswordFormat PasswordFormat { get; }

        public abstract string PasswordStrengthRegularExpression { get; }

        public abstract bool RequiresQuestionAndAnswer { get; }

        public abstract bool RequiresUniqueEmail { get; }
    }
}

