namespace System.Web.Util
{
    using System;

    internal static class CodePageUtils
    {
        private static int[] _asciiCompatCodePages = new int[] { 
            0x1b5, 0x2c4, 720, 0x2e1, 0x307, 850, 0x354, 0x357, 0x359, 0x35a, 860, 0x35d, 0x35e, 0x35f, 0x360, 0x361,
            0x362, 0x365, 0x36a, 0x3a4, 0x3a8, 0x3b5, 950, 0x4e2, 0x4e3, 0x4e4, 0x4e5, 0x4e6, 0x4e7, 0x4e8, 0x4e9, 0x4ea,
            0x551, 0x2710, 0x2711, 0x2712, 0x2713, 0x2714, 0x2715, 0x2716, 0x2717, 0x2718, 0x271a, 0x2721, 0x272d, 0x275f, 0x2761, 0x2762,
            0x4e20, 0x4e21, 0x4e22, 0x4e23, 0x4e24, 0x4e25, 0x4e9f, 0x5182, 0x51c4, 0x51c8, 0x51d5, 0x556a, 0x6faf, 0x6fb0, 0x6fb1, 0x6fb2,
            0x6fb3, 0x6fb4, 0x6fb5, 0x6fb6, 0x6fb7, 0x6fbd, 0x96c6, 0xc42c, 0xc42d, 0xc42e, 0xc431, 0xc433, 0xcadc, 0xcaed, 0xfde9
        };
        internal const int CodePageUT8 = 0xfde9;

        internal static bool IsAsciiCompatibleCodePage(int codepage)
        {
            int num = 0;
            int num2 = 0x4e;
            while (num <= num2)
            {
                int index = (num + num2) >> 1;
                int num4 = _asciiCompatCodePages[index] - codepage;
                if (num4 == 0)
                {
                    return true;
                }
                if (num4 < 0)
                {
                    num = index + 1;
                }
                else
                {
                    num2 = index - 1;
                }
            }
            return false;
        }
    }
}

